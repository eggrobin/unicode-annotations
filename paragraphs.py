{Version(3, 0, 0): [Heading(level=2, contents='Unicode Technical Report #14'),
                    Heading(level=1, contents='Line Breaking Properties'),
                    TableRow(contents='Revision\ue0006.0'),
                    TableRow(contents='Authors\ue000Asmus Freytag (asmus@unicode.org)'),
                    TableRow(contents='Date\ue0001999-11-15'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/unicode/reports/tr14-6'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/unicode/reports/tr14-5'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/unicode/reports/tr14'),
                    Heading(level=2, contents='Summary'),
                    Paragraph(contents='This report presents the specification of line breaking properties for Unicode characters.'),
                    Heading(level=2, contents='Status'),
                    Paragraph(contents='This document contains informative material and normative specifications which have been considered and approved by the Unicode Technical Committee for publication as a Technical Report and as part of the Unicode Standard, Version 3.0. Any reference to version 3.0 of the Unicode Standard automatically includes this technical report. Please mail corrigenda and other comments to the author.'),
                    Paragraph(contents='The content of all technical reports must be understood in the context of the appropriate version of the Unicode Standard. References in this technical report to sections of the Unicode Standard refer to the Unicode Standard, Version 3.0. See http://www.unicode.org/unicode/standard/versions for more information.'),
                    Heading(level=2, contents='Contents'),
                    Paragraph(contents='• 1 Overview and Scope'),
                    Paragraph(contents='• 2 Definitions'),
                    Paragraph(contents='• 3 Description'),
                    Paragraph(contents='• 4 Conformance'),
                    Paragraph(contents='• 5 Line Breaking Properties'),
                    Paragraph(contents='• 5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='• 5.2 Additional Details on Dictionary Usage'),
                    Paragraph(contents='• 6 Line Breaking Algorithm'),
                    Paragraph(contents='• 7 Pair-table Based Implementation'),
                    Paragraph(contents='• 7.1 Minimal Table'),
                    Paragraph(contents='• 7.2 Extended Context'),
                    Paragraph(contents='• 7.3 Example Table'),
                    Paragraph(contents='• 7.4 Sample Code'),
                    Paragraph(contents='• 7.5 Combining Marks'),
                    Paragraph(contents='• 7.6 Customization'),
                    Paragraph(contents='• 7.7 Examples of Customization'),
                    Paragraph(contents='• 8 References'),
                    Paragraph(contents='• 9 Acknowledgments'),
                    Paragraph(contents='• 10 Changes from Previous Revisions'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='The Unicode Standard presents a summary of basic line-breaking behavior, but does not give a complete specification. This technical report provides the needed information in a way that reflects best practices. Normative line-breaking properties are assigned to those characters whose line breaking behavior must be identical across all implementations. For all other classes of characters informative, line-breaking properties are provided.'),
                    Paragraph(contents='Following the formal definitions and summary of line breaking properties, there are three main sections'),
                    Paragraph(contents='Section 5 contains a textual description of the line breaking behavior of the characters of the Unicode Standard and their grouping by line breaking property. These descriptions do not take account of the order of precedence. Section 6 provides a set of rules listed in order of precedence that constitute a line breaking algorithm. Section 7 provides the detailed description of an efficient pair table based implementation of the algorithm.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard. The notation defined in this technical report differs somewhat from the notation defined in the Unicode Standard. All notation used here without an explicit definition shall be as defined in the Unicode Standard.'),
                    Paragraph(contents='Line fitting - the process of determining the how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='Overfull - a line that contains so much text that it does not fit in the space allotted, or only after unacceptable compression of the text.'),
                    Paragraph(contents='Underfull - a line that contains so little text that it ends too far from the margin, or one that would require unacceptable expansion when lines are justified.'),
                    Paragraph(contents='Line Break - the position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='Line Break Opportunity - a place where a line is allowed to end. Whether a given position in the text is a valid line break opportunity depends on the line breaking rules in force, as well as on context.'),
                    Paragraph(contents='Line Breaking - the process of selecting that part of a text that can be displayed on a line. In other words, selecting one among several line breaking opportunities such that the resulting line is optimal (unless the user requested an explicit line break).'),
                    Paragraph(contents='Line Breaking Property - A character property with mutually exclusive values, as set out in Table 1 and arranged in approximate order of precedence. Line breaking properties are used to determine the type of break.'),
                    Paragraph(contents="Mandatory Break - a line must break following a character that has the mandatory break property. Also known as a forced break. This is indicated in the rules as B !, where B is the character with the mandatory break property. (In the notation of the Unicode Standard, this would be: B ×, although the standard doesn't specify whether or not a break is forced or just an opportunity.)"),
                    Paragraph(contents='Direct Break - a line breaking opportunity exists between two adjacent characters of the given line breaking properties. (If they are separated by one or more space characters, a break opportunity also exists after the last space.) This indicated in the pair table below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break and the optional space characters are not shown.'),
                    Paragraph(contents='Indirect Break - a line breaking opportunity exists between two characters of the given line breaking properties only if they are separated by one or more spaces. In this case, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent. This is indicated in the pair table below as B % A, where B is the character class of the character before and A is the character class of the character after the break and the optional space characters are not shown. In the notation of the Unicode Standard, this would be two rules: B × A and B SP+ ÷ A.'),
                    Paragraph(contents='Prohibited Break - no line breaking opportunity exists between two characters of the given line breaking properties, even if they are separated by one or more space characters. This is indicated in the pair table below as B ^ A, where B is the character class of the character before and A is the character class of the character after the break and the optional space characters are not shown. In the notation of the Unicode Standard, this would be the rule: B SP* × A.'),
                    Paragraph(contents='Hyphenation - Hyphenation uses language specific rules to provide additional line breaking opportunities within a word. Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this document, it is assumed that hyphenation is equivalent to insertion of soft hyphen characters. All other aspects of hyphenation are outside the scope of this document.'),
                    Formula(contents='Table 1 Line Breaking Properties (* = normative)'),
                    TableRow(contents='Value\ue000Line Breaking Property\ue000Examples\ue000Characters with this property'),
                    TableRow(contents='BK *\ue000Mandatory Break\ue000NL, PS\ue000cause a line break.'),
                    TableRow(contents='CR *\ue000Carriage Return\ue000CR\ue000cause a line break, except between CR and LF'),
                    TableRow(contents='LF *\ue000Line Feed\ue000LF\ue000cause a line break, except between CR and LF'),
                    TableRow(contents='CM *\ue000Attached Characters and Combining Marks\ue000Combining Marks, Conjoining Jamo\ue000prohibit a line break between the character and the preceding character'),
                    TableRow(contents='SG *\ue000Surrogates\ue000High Surrogates\ue000prohibit a break from a following low surrogate'),
                    TableRow(contents='ZW *\ue000Zero Width Space\ue000ZWSP\ue000optional break'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000allow only indirect line breaks between pairs.'),
                    TableRow(contents='GL *\ue000Non-breaking (“Glue”)\ue000NBSP, ZWNSP\ue000prohibit line breaks before or after.'),
                    TableRow(contents='CB *\ue000Contingent Break Opportunity\ue000Inline Objects\ue000provide a line break opportunity contingent on additional information.'),
                    TableRow(contents='SP *\ue000Space\ue000Space\ue000generally provide a line break opportunity after the character, enables indirect breaks'),
                    TableRow(contents='BA\ue000Break Opportunity After\ue000Spaces, Hyphens\ue000generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Opportunity Before\ue000Punctuation used in dictionaries\ue000generally provide a line break opportunity before the character.'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000EM Dash\ue000provide a line break opportunity before and after the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000Hyphen-Minus\ue000provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='NS\ue000Non Starter\ue000small kana\ue000allow only indirect line break before'),
                    TableRow(contents='OP\ue000Opening Punctuation\ue000“(“, “[“, “{“, etc.\ue000prohibit a line break after'),
                    TableRow(contents='CL\ue000Closing Punctuation\ue000“)”, “]”, “}”, etc.\ue000prohibit a line break before'),
                    TableRow(contents='QU\ue000Ambiguous Quotation\ue000Quotation marks\ue000act like they are both opening and closing'),
                    TableRow(contents='EX\ue000Exclamation/Interrogation\ue000“!”, “?” etc.\ue000prohibit line break before'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000break before or after'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000form numeric expressions for line breaking purposes'),
                    TableRow(contents='IS\ue000Infix Separator (Numeric)\ue000. ,\ue000prevent breaks after any and before numeric'),
                    TableRow(contents='SY\ue000Symbols Allowing Breaks\ue000/\ue000prevent a break before, and allow a break after'),
                    TableRow(contents='AL\ue000Ordinary Alphabetic and Symbol Characters\ue000Alphabets and regular symbols\ue000are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents="PR\ue000Prefix (Numeric)\ue000$, £, ¥, etc.\ue000don't break in front of a numeric expression"),
                    TableRow(contents='PO\ue000Postfix (Numeric)\ue000%, ¢, ‰, º\ue000don’t break following a numeric expression'),
                    TableRow(contents='SA\ue000Complex Context (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000provide a line break opportunity contingent on additional, language specific context analysis'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000act like AL when the resolved EAW is N otherwise act as ID'),
                    TableRow(contents='XX\ue000Unknown\ue000Unassigned\ue000are all characters with (as yet) unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Description'),
                    Paragraph(contents='Lines are broken as result of either of two conditions. The first condition is the presence of an explicit line breaking character. The second condition results from a formatting algorithm having selected among available line breaking opportunities the particular one that results in the optimal layout of the text.'),
                    Paragraph(contents='The definition of optimal line break is outside the scope of this document. Different formatting algorithms may use different methods of determining an optimal break. For example, simple implementations just consider a line at a time, trying find a locally optimal line break. A common approach is to allow no compression and consider the longest line that fits. When compression is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts compression and expansion for different line break candidates.'),
                    Paragraph(contents='More complex algorithms may take into account the interaction of line breaking decisions for the whole paragraph. TEX implements a well known example of such a globally optimal strategy that may make complex tradeoffs to avoid unnecessary hyphenation and other legal, but inferior breaks. For the purpose of this document, what is important is not so much what defines the optimal amount of text on the line, but how line breaking opportunities are defined.'),
                    Paragraph(contents='Three principal styles of context analysis determine line-breaking opportunities.'),
                    Paragraph(contents='1. Western (spaces and hyphens are used to determine breaks)'),
                    Paragraph(contents='2. East Asian (lines can break anywhere, unless prohibited)'),
                    Paragraph(contents='3. South East Asian (require morphological analysis)'),
                    Paragraph(contents='The first is commonly used for scripts employing the space character. The second is used with East Asian ideographic scripts. The third is used for scripts such as Thai, which do not use spaces, but which restrict word-breaks to syllable boundaries, the determination of which requires knowledge of the language comparable to that required by a hyphenation algorithm.'),
                    Paragraph(contents='Note: Korean may alternately use a space-based (style 1) instead of the style 2 context analysis.'),
                    Paragraph(contents='Space-based line breaking is often augmented by hyphenation. Some Unicode characters have explicit line breaking properties assigned to them. These can be used for the first and second type context analysis for line break opportunities. For multilingual text, styles one and two can be unified into a single set of specifications.'),
                    Paragraph(contents='Note: Interpretation of line breaking properties in bidirectional text takes place before applying rule L1 of the Unicode Bidirectional Algorithm. However, it is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='· The line breaking behavior of characters with normative line breaking properties is described in the Unicode Standard. (See The Unicode Standard, Version 3.0, Chapters 6 and 13). Unless otherwise stated, the information in this technical report is not intended to supersede the normative specifications found in the Unicode Standard, but to organize the description in a different context and provide additional informative detail.'),
                    Paragraph(contents='· All line breaking properties are informative, except for the line breaking properties marked with a * in Table 1 Line Breaking Properties. The behavior for characters with normative line breaking properties must be the same for all conformant implementations.'),
                    Paragraph(contents='· Conformant implementations must not tailor characters with normative line breaking properties to any of the informative properties, but may tailor characters with informative line breaking properties to one of the normative line breaking properties.'),
                    Paragraph(contents='· Higher level protocols may further restrict, override, or extend the line breaking properties of certain characters in some contexts.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='The main emphasis in this section is to provide additional description of the line breaking behavior and to summarize the membership of character classes for each line breaking property. The full classification of all Unicode characters by their line breaking properties is available as the file LineBreaking.txt in the Unicode Character Database. This is a tab-delimited, three column plain text file, with code position, line breaking class and character name (for reference purpose only). The abbreviated way of listing the Ideographic, Hangul, Surrogate, and Private Use ranges is the same as in UnicodeData.txt.'),
                    Paragraph(contents='The classification by properties defined here is used as input into two algorithms defined below that implement workable default line breaking methods. In a few instances, the descriptions in this section provide additional detail about handling a given character at the end of a line and which goes beyond the simple determination of line breaks.'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking properties are listed alphabetically. Each property is marked with an annotation for easy reference showing that'),
                    Paragraph(contents='A - the property allows a break opportunity after in specified contexts'),
                    Paragraph(contents='XA - the property prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='B - the property allows a break opportunity before in specified contexts'),
                    Paragraph(contents='XB - the property prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='P - the property allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='XP - the property prevents a break opportunity for a pair of same characters'),
                    Heading(level=3, contents='AI - Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Characters with East Asian Width property A (ambiguous width), and which would otherwise be AL in this classification, take on the AL line break class only when their resolved width is N (narrow) and take the ID line break class, when their resolved width is W (wide). For more information on East Asian Width, and how to resolve it, see Unicode Technical Report #11, East Asian Width.'),
                    Heading(level=3, contents='AL - Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Require other characters to provide break opportunities, otherwise no breaking between pairs of ordinary characters. However, this is tailorable. In some Far Eastern documents it may be desirable to allow breaking between pairs of ordinary characters.'),
                    Paragraph(contents='NOTE: use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='ALPHABETIC — all characters of General Categories Lu, Lc, Lt, Lm, Lo, except as they appear below. SYMBOLS — all characters of General Category Sm, Sc, Sk, So, except as they appear below.'),
                    Heading(level=3, contents='BA - Break Opportunity After (A)'),
                    Paragraph(contents='Like SP, but are not part in determining indirect breaks.'),
                    Paragraph(contents='These characters with General category Zs'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN QUAD'),
                    TableRow(contents='2003\ue000EM QUAD'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    Paragraph(contents='The preceding list of space characters all have a specific width, but behave otherwise as breaking spaces.'),
                    Heading(level=3, contents='Tabs'),
                    Paragraph(contents='Except for the effect of the location of the tabstops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    TableRow(contents='0009\ue000TAB'),
                    Heading(level=3, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    Paragraph(contents='There are three types of hyphens: Explicit hyphens, conditional hyphens, and dictionary-inserted hyphens (as a result of a hyphenation process). There is no character code for the third kind of hyphen; therefore if it is desired to make the distinction, the dictionary-inserted hyphens must be represented out of band, or with a privately assigned control code.'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    Paragraph(contents='Hyphens are graphic characters with width. Since, unlike spaces, they print, they are included in the measured part of the preceding line'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY is rendered invisibly and has no width, except at a line break. The rendering of the soft hyphen depends on the script. For the Latin script it is rendered as a hyphen, however, some languages require a change in spelling surrounding an optional hyphen, if it occurs at a line break. For example in Swedish the word “tuggummi” changes to “tugg-gummi” when hyphenated.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY it is customarily treated as overriding the action of the hyphenator for that word.'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    Paragraph(contents='The Tibetan thseg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself, like space.'),
                    Paragraph(contents='Ethiopian word space is visible word delimiter and is kept on the line before.'),
                    Paragraph(contents='The Ogham space mark is rendered visibly between words but should be elided at the end of a line.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='Hyphenation point is primarily used to visibly indicate syllabification of words. Syllable breaks are potential line breaking opportunities in the middle of words. The hyphenation point It is mainly used in dictionaries and similar works. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual break opportunity, the vertical bar is rendered as a hyphen.'),
                    Heading(level=3, contents='BB - Break opportunities before characters (B)'),
                    TableRow(contents='00B4\ue000ACCUTE ACCENT'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent would move to the next line, and the preceding line ended with a hyphen.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Therefore, the only sensible way to break them is to keep them with the syllable, that is to break before them.'),
                    Paragraph(contents='NOTE: It is hard to find actual examples in most dictionaries, since the pronunciation fields usually occur right after the head word, and the columns are wide enough to prevent line breaks in the pronunciations.'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='The Mongolian Todo soft hyphen indicates an optional line break opportunity with hyphen, but unlike the soft-hyphen it stays with the following line.'),
                    Heading(level=3, contents='B2 - Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The em dash character is used to set off parenthetical text, normally without spaces, however, this is language dependent, for example, in Swedish, spaces are used. Line breaks can occur before and after an em dash, but not between two em dashes. Pairs of em dashes are sometimes used instead of a single quotation dash. For that reason, the line should'),
                    Paragraph(contents='not be broken between em dashes.'),
                    Heading(level=3, contents='BK - Mandatory Break (A) - (normative)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters.'),
                    TableRow(contents='000C\ue000FORM FEED'),
                    Paragraph(contents='Form Feed separates pages. The text on the new page starts at the beginning of the line. No paragraph formatting is applied.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. No paragraph formatting is applied.'),
                    Paragraph(contents='This is similar to HTML <BR>'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. Paragraph formatting is applied.'),
                    Paragraph(contents='"NEW LINE FUNCTION (NLF)"'),
                    Paragraph(contents='New line functions provide additional explicit breaks. They are not individual characters, but are expressed as sequences of control characters NEL, LF, and CR. What particular sequence(s) form a NLF depends on the implementation and other circumstances as described in Unicode Technical Report 13, Unicode Newline Guidelines.'),
                    Paragraph(contents='If a the character sequence for a new line function contains more than one character, it is kept together. The default behavior is to break after LF or CR, but not between CR and LF. Two additional line break classes have been added for convenience in this operation.'),
                    Heading(level=3, contents='CB - Contingent Break Opportunity (B/A)'),
                    Heading(level=3, contents='Contingent Break Opportunity Before and After'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='By default there is a break opportunity both before and after the object. Object-specific line break behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the break opportunities.'),
                    Heading(level=3, contents='CL - Closing Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation must be kept with the preceding character'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Paragraph(contents='plus any characters of general category Pe in the Unicode Character Database.'),
                    Heading(level=3, contents='CM - Attached Characters and Combining Marks (XB) - (normative)'),
                    Heading(level=3, contents='Combining characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purposes of line breaking. The line-breaking behavior of the sequence is that of the base character. If U+0020 SPACE is used as a base character, it is treated as AL instead of SP.'),
                    Paragraph(contents='All characters with general category Mn, Mc, and Me.'),
                    Heading(level=3, contents='Conjoining Jamos'),
                    TableRow(contents='1160..11F9\ue000Conjoining Jamos'),
                    Paragraph(contents='A sequence of conjoining Jamos is used to make up a Hangul syllable. Breaks are only allowed around the entire Hangul syllable, and then the line break properties are the same for precomposed Hangul syllables as for conjoined sequence of Jamos.'),
                    Paragraph(contents='NOTE: non-initial conjoining Jamos thus behave like combining marks, while the initial combining Jamos have the same property as Hangul Syllables.'),
                    Heading(level=3, contents='Control and formatting characters'),
                    Paragraph(contents='Most controls and formatting characters are ignored in line breaking. All characters of General Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='CR - Carriage Return (A) - (normative)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='Do not break if followed by a LF, mandatory break after otherwise'),
                    Heading(level=3, contents='EX - Exclamation / Interrogation (XB)'),
                    Paragraph(contents='These behave like closing characters, except in relation to postfix and ‘non-starter’ characters'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='FE56..FE57\ue000SMALL QUESTION MARK..SMALL EXCLAMATION MARK'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL - Non-breaking ("Glue") (XB/XA) - (normative)'),
                    Paragraph(contents='The action of these characters is to glue together both left and right neighbor character such that they are kept on the same line. If they follow a space character, they still allow a break.'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='Since this character is not visible, it is the preferred choice for keeping characters together that would otherwise be split across the line at a direct break.'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words should be visually separated but kept on the same line, as in the case of a title and a name "Dr.<NBSP>Joseph Becker". NARROW NO-BREAK SPACE is used in Mongolian.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words must be hyphenated but may not be broken at the hyphen.'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    Paragraph(contents='This looks exactly like a Tibetan tsheg, but can be used to prevent a break. It inhibits breaking on either side, like no-break space.'),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This character has not been encoded in Unicode yet, but is an example of a character that should be given the GL property.'),
                    Heading(level=3, contents='HY - Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from the use as minus sign (or indicator of numerical range). If used as hyphen, it acts like HYPHEN.'),
                    Paragraph(contents='NOTE: In some practice runs of HYPHEN-MINUS are used to stand in for longer dashes or horizontal rules. If it is desired to treat them like the characters or layout elements they stand for, and actual character code conversion is not performed, line breaking will need to support these special cases explicitly.'),
                    Heading(level=3, contents='ID - Ideographic (B/A)'),
                    Paragraph(contents='Do not require other characters to provide break opportunities, can ordinarily break before and after and between pairs.'),
                    TableRow(contents='4E00..9FAF\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='3400..4DBF\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='F900..FAFF\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    TableRow(contents='AC00..D7AF\ue000HANGUL SYLLABLES'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    TableRow(contents='1100..115F\ue000HANGUL JAM0 (ONLY THE INITIALS)'),
                    TableRow(contents='HIRAGANA (except small characters)'),
                    TableRow(contents='KATAKANA (except small characters)'),
                    TableRow(contents='A000..A4C8\ue000YI SYLLABLES'),
                    TableRow(contents='A490-ACFF\ue000YI RADICALS'),
                    TableRow(contents='2E80.. 2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF10-FF19\ue000WIDE DIGITS'),
                    Paragraph(contents='plus all of the FULLWIDTH LATIN letters and all of the 3000-33FF blocks not covered elsewhere'),
                    Paragraph(contents='NOTE: use ZWNBSP as a manual override to prevent break opportunities around ideographs.'),
                    Heading(level=3, contents='IN - Inseparable characters (XP)'),
                    Heading(level=3, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used in consecutive sequence. They therefore prevent line breaks absolutely in a series of two character of this class.'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three dot leader.'),
                    Heading(level=3, contents='IS - Numeric Separator (Infix) (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression, may not be separated from following numeric characters, unless space character intervenes. Since they are otherwise sentence ending punctuation, they prevent breaks before.'),
                    Paragraph(contents='There is no break in “100.00” or “10,000”, nor in “12:59”'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP\ue000'),
                    Heading(level=3, contents='LF - Line Feed (A) - (normative)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character.'),
                    Heading(level=3, contents='NS - Non-starters (XB)'),
                    Paragraph(contents='Some characters cannot start a line, but unlike CL they may allow a break in some context when they are following one or more space characters.'),
                    Paragraph(contents='All characters with General Category Lm (Letter, Modifier) and East Asian Width type W or H, and all characters with General Category Sk (Symbol, Modifier) and East Asian width type W plus the following characters:'),
                    TableRow(contents='0E5A..0E5B\ue000THAI CHARACTER ANGKHANKHU..THAI CHARACTER KHOMUT'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D6..17DA\ue000KHMER SIGN CAMNUC PII KUUH..KHMER SIGN KOOMUUT'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK to HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30FD\ue000KATAKANA ITERATION MARK'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    Paragraph(contents='Plus all Hiragana, Katakana, and Halfwidth Katakana “small” characters'),
                    Paragraph(contents='Note: Optionally, the NS restriction may be relaxed and characters treated like ID, to achieve a more permissive style of line breaking.'),
                    Heading(level=3, contents='NU - Numeric (XP)'),
                    Paragraph(contents='Behave like ordinary characters in the context of ordinary characters, activate the prefix and postfix behavior of prefix and postfix characters'),
                    Paragraph(contents='DECIMAL DIGITS (All characters of General Category Nd, except FULL WIDTH)'),
                    Heading(level=3, contents='OP - Opening Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation must be kept with the following character'),
                    Paragraph(contents='Characters of general category Ps in the Unicode Character Database.'),
                    Heading(level=3, contents='PO - Postfix (Numeric) (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene.'),
                    Paragraph(contents='For example, there is no break in “(12.00) %”'),
                    Paragraph(contents='The list of post-fix characters is:'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2035\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='2126\ue000OHM SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Heading(level=3, contents='PR - Prefix (Numeric) (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression, may not be separated from following numeric characters or following opening characters, EVEN if space character intervenes.'),
                    Paragraph(contents='There is no break in “$ (100.00)”'),
                    Paragraph(contents='All currency symbols (General Category Sc) except as listed explicitly in PO and the following:'),
                    TableRow(contents='002B\ue000PLUS'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2213\ue000MINUS-PLUS'),
                    Heading(level=3, contents='QU - Ambiguous Quotation (XB/XA)'),
                    Paragraph(contents='Some paired characters can be either opening or closing depending on usage. The default is to treat them as both opening and closing.'),
                    Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as opening and which as closing quote. (See the information in the Unicode Standard, Version 3.0, Chapter 6.)'),
                    Paragraph(contents='Characters of general category Pf or Pi in the Unicode Character Database as well as,'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    Heading(level=3, contents='SA - Complex-context Dependent Characters (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to e.g. a hyphenation algorithm. For the characters that have this property, no line breaks will be found otherwise, therefore complex context analysis is mandatory.'),
                    Paragraph(contents='Note: These characters can be mapped into their equivalent line break classes as result of dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='If dictionary lookup is not available they should be treated as XX.'),
                    Paragraph(contents='All characters of General Category Lo or Lm in these ranges:'),
                    TableRow(contents='0E00..0EFF\ue000THAI / LAO'),
                    TableRow(contents='1100..11FF\ue000MYANMAR'),
                    TableRow(contents='1780..17FF\ue000KHMER'),
                    Heading(level=3, contents='SG - Surrogates (XP) - (normative)'),
                    Paragraph(contents='All characters with General Category Cs. There is no break between a high surrogate and a low surrogate.'),
                    Paragraph(contents='Note: The line breaking class for a pair of surrogates depends on the character. A useful default is to treat characters in the range 0x00010000 to 0x0001FFFD as AL and characters in the range 0x00020000 to 0x0002FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters, which have yet to be assigned.'),
                    Heading(level=3, contents='SP - Space (A)'),
                    Heading(level=3, contents='Breaking Spaces'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='The space characters are explicit break opportunities, but spaces at the end of a line are not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, since the last character measured for fit is BEFORE the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    Paragraph(contents='Note: SPACE, but none of the other breaking spaces, is used in determining an indirect break.'),
                    Heading(level=3, contents='SY - Symbols Allowing Break After (A)'),
                    Paragraph(contents='URLs are common enough now in regular plain text, that they must be taken into account when assigning general purpose line breaking properties. The SY line break property is intended to provide a break after, but not in front of digits so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='Slash (SOLIDUS) is allowed as an additional, limited break opportunity to improve layout of web addresses'),
                    Paragraph(contents='NOTE: Normally, symbols are treated as AL. If it is desired to allow other breaks, more symbols can be added to this category, or category BA, BB, B2 by tailoring, for example “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this document.'),
                    Heading(level=3, contents='XX - Unknown (XP)'),
                    Paragraph(contents='Unassigned code positions and characters for which reliable line breaking information is not available (e.g. Private use characters) are assigned this default line breaking property. The behavior is otherwise identical to class AL. Implementations can override or tailor this default behavior, e.g. by assigning private use characters the property ID if that is more likely to give the correct default behavior for their users. Users can manually insert ZWSP or ZWNBSP around characters of class XX to force or prevent breaks as needed.'),
                    Heading(level=3, contents='ZW - Zero Width Space (A) - (normative)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character does not have width. It is used to enable additional (invisible) break opportunities wherever SPACE cannot be used.'),
                    Heading(level=3, contents='5.2 Additional Details on Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow strict standards that guide their use of characters to indicate features of the terms listed. Some of these conventions mark places that can also serve as line breaking opportunities and therefore interact with line breaking and are described here. Where appropriate, these characters have been inserted in the list of characters for the corresponding line breaking property above.'),
                    Paragraph(contents='However, implementing the full conventions in dictionaries requires special support. Looking up the noun “syllable” in eight dictionaries yields eight different conventions, in one dictionary a natural hyphen in a word becomes a tilde dash if the word is split.'),
                    Paragraph(contents='Dictionary of the English Language, Samuel Johnson 1843 SY´LLABLE where ´ is a U+02B9 (and a large one at that) and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary 1st Edition si·lâ'bl where · is a slightly above middle dot indicating the vowel of the stressed syllable (similar to Johnson's acute). The letter â is really U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary 2nd Edition has gone to IPA 'sIleb(e)l where ' is U+02C8, I is U+026A, e is U+0259 (both times). The ' comes before the stressed syllable. The () indicates the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary 7th Edition sil´e-bl where the stressed syllable is followed by ´ U+02B9, e is U+0259, - is a hyphen when splitting a word like abate´- ment the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention if splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIlebl where I is U+026A U+0332, e is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIlebe°l where I is U+026A U+0332, and means the same as the BBC. The e is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary. syl·la·ble (sílleb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent (rather than being followed by an accent). The letter e is a schwa in the actual example and ' is apostrophe."),
                    Paragraph(contents="Webster's 3rd New International Dictionary. syl·la·ble /'silebel/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The e's are schwas as usual. Webster splits words at the end of a line with a normal hyphen. When a hyphenated word is split at the hyphen this is indicated by a double hyphen which looks like a light version of the German Fraktur hyphen (short equals sign with a slight slope up to the right)."),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='The Unicode Standard, Version 3.0, describes a particular method for boundary detection in Chapter 5. It is based on a set of hierarchical rules and character classifications. That method would be well suited for implementation of some of the advanced heuristics.'),
                    Paragraph(contents='A slightly simplified implementation of that can be devised that uses a two dimensional table to resolve break opportunities between pairs or characters. It is described in the following section.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules which take line breaking classes as input.'),
                    Heading(level=3, contents='Line breaking rules'),
                    Paragraph(contents='The line breaking rules are stated in terms of regular expressions over the line breaking classes defined above and three special symbols indicating the type of line break opportunity.'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The distinction between direct and indirect break is handled by explicitly considering the effect of SP.'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit ”otherwise” at the front of each rule following the first. The examples for each use representative characters, where ’H’ stands for an ideographs, ’h’ for small kana, ’9’ for digits.'),
                    Heading(level=4, contents='Resolve line break classes:'),
                    Rule(contents='LB 1 Assign a line break category to each character of the input. Resolve CB, SA, XX, SG into other line break classes depending on criteria outside this algorithm.'),
                    Heading(level=4, contents='Start and end of text:'),
                    Rule(contents='LB 2a Never break at the start of text'),
                    Formula(contents='× sot'),
                    Rule(contents='LB 2b Always break at the end of text'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases. Their effect is to have at least one character on each line, and at least one linebreak for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text to run over the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Rule(contents='LB 3a Always break after hard line breaks (but never between CR and LF).'),
                    Formula(contents='CR × LF'),
                    Formula(contents='LF !'),
                    Formula(contents='CR !'),
                    Formula(contents='BK !'),
                    Rule(contents='LB 3b Don’t break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB 4 Don’t break before spaces or zero-width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB 5 Break after zero-width space.'),
                    Formula(contents='ZW ÷'),
                    Heading(level=4, contents='Combining Marks:'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. If there is no base, the CM behaves like AL. Virama and non-initial Jamo are treated as CM and initial Jamo are merged with class ID so they work correctly.'),
                    Rule(contents='LB 6 Don’t break graphemes (before combining marks, around virama or on sequences of conjoining Jamos.'),
                    Formula(contents='Treat X CM* as if it were X'),
                    Formula(contents='(See the Unicode Standard for other rules regarding graphemes.)'),
                    Rule(contents='LB 7 In all of the following rules, if a space is the base character for a combining mark, the space is changed to type AL.'),
                    Formula(contents='Treat SP CM* as if it were ID'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and so come before rule 12.'),
                    Rule(contents='LB 8 Don’t break before ‘!’ or ‘/’ or ‘,’ or ‘]’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× EX'),
                    Formula(contents='× SY'),
                    Formula(contents='× IS'),
                    Rule(contents='LB 9 Don’t break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB 10 Don’t break within ‘”[’, , even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Rule(contents='LB 11 Don’t break within ‘]h’, even with intervening spaces.'),
                    Formula(contents='CL SP* × NS'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB 12 Break after spaces'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB 13 Don’t break before or after ZWNBSP'),
                    Formula(contents='× GL'),
                    Formula(contents='GL ×'),
                    Rule(contents='LB 14 Don’t break before or after ‘”’'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB 15 Don’t break before small kana and other non starters, hyphen-minus, other hyphens, fixed-width spaces or after acute accents:'),
                    Formula(contents='× NS'),
                    Formula(contents='× HY'),
                    Formula(contents='× BA'),
                    Formula(contents='BB ×'),
                    Rule(contents='LB 15b Break after hyphen-minus, and before acute accents:'),
                    Formula(contents='HY ÷'),
                    Formula(contents='÷ BB'),
                    Rule(contents='LB 16 Don’t break between two ellipses, or between letters or numbers and ellipsis:'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Formula(contents='AL × IN'),
                    Formula(contents='ID × IN'),
                    Paragraph(contents='Examples: ’9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents="Don't break alphanumerics."),
                    Rule(contents='LB 17 Don’t break within ‘a9’, ‘3a’, or ‘H%’'),
                    Formula(contents='AL × NU'),
                    Formula(contents='NU × AL'),
                    Formula(contents='ID × PO'),
                    Paragraph(contents='Numbers are of the form PO SP * ( CL | HY ) ? NU+ ) ? PO'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='This is approximated with the following rules. (Some cases already handled above, like ‘9,’, ‘[9’.)'),
                    Rule(contents='LB 18 Don’t break between the following pairs of classes.'),
                    Formula(contents='PR × NU'),
                    Formula(contents='PR × AL'),
                    Formula(contents='PR × OP'),
                    Formula(contents='PR × HY'),
                    Formula(contents='HY × NU'),
                    Formula(contents='SY × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × PO'),
                    Formula(contents='CL × PO'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-‘, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Finally, join alphabetic letters and break everything else.'),
                    Rule(contents='LB 19 Don’t break between alphabetics (“at”)'),
                    Formula(contents='AL × AL'),
                    Rule(contents='LB 20 Break everywhere else'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair-table Based Implementation'),
                    Paragraph(contents='A two dimensional table can be used to resolve break opportunities between pairs of characters. The rows of the table are labeled by the possible values of the line breaking property of the leading character in the pair, the columns are labeled by the line breaking property for the following character of the pair. Each intersection is labeled with the resulting line breaking opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 provides an example of such a table-based definition. However, it uses line breaking classes whose membership is not solely determined by line breaking property (as in this report), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classed defined above. Rules LB 6, and LB 8 - LB11 require extended context for handling combining marks and spaces. This extended context is built into the code that interprets the pair table.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, the two line breaking classes can be coalesced. The JIS standard uses 20 classes of which only 14 appear to be unique.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='By broadening the definition of pair from B A to B SP* A, where A and B are characters and SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line breaking opportunity (i.e. direct and indirect breaks). Equivalent rules to the ones above can be formulated to the ones above, not using SP, but using % to express indirect breaks. These rules can then be simplified to involve only pairs of classes, e.g. only constructions of the form'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B ^ A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can then be automatically translated into a pair table, as in the example below. Line break analysis then proceeds by pair table lookup.'),
                    Heading(level=3, contents='7.3 Example Table'),
                    Paragraph(contents='The following example table implements the line breaking behavior described in this Technical Report, within the limitation that only context of the form B SP* A is considered. BK and SP classes are handled explicitly in the outer loop as given in the code sample below. B CM* can be handled in the table, or explicitly in the outer loop. Using the table entries is equivalent to making the simplifying assumption that combining marks are only applied to AL.'),
                    TableRow(contents='‘After’ class'),
                    TableRow(contents='OP\ue000CL\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000%'),
                    TableRow(contents='CL\ue000\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000\ue000%\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='QU\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000%'),
                    TableRow(contents='NS\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='EX\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='SY\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='IS\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='PR\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000%\ue000%\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='PO\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='NU\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000%\ue000%\ue000%\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='AL\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000%\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='ID\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000%\ue000\ue000\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='IN\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='HY\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='BA\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='BB\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000%'),
                    TableRow(contents='B2\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000^\ue000^\ue000%'),
                    TableRow(contents='ZW\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='CM\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000%\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    Paragraph(contents='• ^ denotes a prohibited break: Never break here, even if one or more spaces intervene.'),
                    Paragraph(contents='• As a reminder, A ^ B is equivalent to B SP* × A.'),
                    Paragraph(contents='• % denotes an indirect break opportunity: Don’t break here, unless one of more spaces intervene.'),
                    Paragraph(contents='• As a reminder, A % B is equivalent to B × A and B SP+ ÷ A.'),
                    Paragraph(contents='• _ an empty cell denotes a direct break opportunity (÷ above). These are blank to make them easier to distinguish in the table.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two functions demonstrate how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the following line break classes need to be added: CR, LF, CB, SG, XX. They have been omitted here for brevity.'),
                    CodeLine(contents='// placeholder function for complex break analysis'),
                    CodeLine(contents='int findComplexBreak(int *pcls, int *pbrk, int cch)'),
                    CodeLine(contents='{'),
                    CodeLine(contents='                  if (!cch)                   return 0;'),
                    CodeLine(contents='                  int cls = pcls[0];'),
                    CodeLine(contents='                  for(int ich = 0; ich < cch; ich++) {'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                                    // .. do complex break analysis here'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                                    if (pcls[ich] != SA)'),
                    CodeLine(contents='                                                  break;'),
                    CodeLine(contents='                  }'),
                    CodeLine(contents='                  return ich;'),
                    CodeLine(contents='}'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='// handle spaces separately, all others by table'),
                    CodeLine(contents='// pcls - pointer to array of line break classes (input)'),
                    CodeLine(contents='// pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='// cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='// ich - current index into the arrays (variable)'),
                    CodeLine(contents='int findLineBrk1(int *pcls, int *pbrk, int cch)'),
                    CodeLine(contents='{'),
                    CodeLine(contents='                  if (!cch) return;'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                  int  cls = pcls[0];'),
                    CodeLine(contents='                  for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                                    // handle spaces'),
                    CodeLine(contents='                                    if (pcls[ich] == SP) {'),
                    CodeLine(contents='                                                  pbrk[ich-1] = XX;'),
                    CodeLine(contents='                                                  continue;'),
                    CodeLine(contents='                                    }'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                                    // handle complex scripts'),
                    CodeLine(contents='                                    if (pcls[ich] == SA) {'),
                    CodeLine(contents='                                                  ich += findComplexBreak(&pcls[ich-1], &pbrk[ich-1], cch - (ich-1));'),
                    CodeLine(contents='                                                  if (ich < cch)'),
                    CodeLine(contents='                                                                    cls = pcls[ich];'),
                    CodeLine(contents='                                                  continue;'),
                    CodeLine(contents='                                    }'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                                    // lookup pair table information'),
                    CodeLine(contents='                                    int brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                                    if (brk == SS)       {'),
                    CodeLine(contents='                                                  pbrk[ich-1] = ((pcls[ich - 1] == SP) ? SS : XX);'),
                    CodeLine(contents='                                    } else {'),
                    CodeLine(contents='                                                  pbrk[ich-1] = brk;'),
                    CodeLine(contents='                                    }'),
                    CodeLine(contents='                                    cls = pcls[ich];'),
                    CodeLine(contents='                  }'),
                    CodeLine(contents='                  pbrk[ich-1] = 0;'),
                    CodeLine(contents='\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0'),
                    CodeLine(contents='                  return ich;'),
                    CodeLine(contents='}'),
                    Paragraph(contents='The function returns all the break opportunities in the array pointed to by pbrk, using the values in the table. The code assumes that the predefined value SS is used for break opportunities marked by an % entry in the table and the value XX for an entry marked by an ^ above.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='If one makes the simplifying assumption that combining marks are only applied to AL, or that applying a combining mark turns the combination into AL, then CM can be handled in the table as shown. Otherwise a simple statement in the outer loop'),
                    CodeLine(contents='if (pcls[i] == CM) {'),
                    CodeLine(contents='                pbrk[ich-1] = 0;'),
                    CodeLine(contents='                continue;'),
                    CodeLine(contents='}'),
                    Paragraph(contents='would have the effect of letting the CM take on the class of the preceding non-CM characters. This also requires a special rule to cover the case of a missing base character in the setup part before the loop:'),
                    CodeLine(contents='if (pcls[i] == CM)'),
                    CodeLine(contents='                cls = SP;'),
                    Heading(level=3, contents='7.6 Customization'),
                    Paragraph(contents='A real world line breaking algorithm must be tailorable to some degree. There are three principle ways of tailoring a pair-table based algorithm:'),
                    Paragraph(contents='1. Change the line breaking class assignment for some characters'),
                    Paragraph(contents='2. Change the table value assigned to a pair of character classes'),
                    Paragraph(contents='3. Change the interpretation of the line breaking actions'),
                    Paragraph(contents='4. Augment the algorithm.'),
                    Paragraph(contents='· The first is useful for cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='· The second method is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. These intersections can be labeled with special values that cause different actions for different customizations.'),
                    Paragraph(contents='· The third method is equivalent to the second, but instead of changing table values, an additional indirection is performed. This is most suitable when customizations need to be done at run time.'),
                    Paragraph(contents='· The fourth method is the most open ended...'),
                    Heading(level=3, contents='7.7 Examples of Customization'),
                    Paragraph(contents='1. Korean uses either implicit breaking around Hangul and ideographs or uses spaces. Reference [1] shows how this can be elegantly handled by the second or third method. Only the intersection of ID/ID, AL/ID and ID/AL are affected. For alphabetic style line breaking, breaks for these four cases require space, for ideographic style line breaking, these four cases don’t require spaces.'),
                    Paragraph(contents='2. Sometimes allowing alphabetic characters and digit strings to break anywhere is required in Far Eastern context. According to reference [1] this can be done by the second or third method, affecting the intersections of NU/NU, NU/AL, AL/AL, and AL/NU.'),
                    Paragraph(contents='3. Sometimes it is desirable to force Kana syllables to be kept together, i.e. the syllable kyu, spelled with the two kanas KI and small “yu” would be kept together even though KI and yu are normally atomic. This can be handled via the first method, by changing the classification of the Kana small characters between ID and NS as needed.'),
                    Heading(level=2, contents='8 References'),
                    Paragraph(contents='[1]Michel Suignard, Worldwide Typography and How to Apply JIS X 4051-1995 to Unicode, Proceedings of the Twelfth International Unicode/ISO 10646 Conference, Tokyo, Japan, 1998'),
                    Paragraph(contents='[2] Cy Cedar, David Veintimilla, Michel Suignard and Asmus Freytag, Report from the Trenches: Microsoft Publisher goes Unicode, Proceedings of the Eleventh International Unicode Conference, San Jose, CA 1997'),
                    Paragraph(contents='[3] The Unicode Standard, Version 3.0, (Reading, Massachusetts: Addison-Wesley Developers Press 2000)'),
                    Paragraph(contents='[4] Donald E. Knuth and Michael F. Plass, Breaking Lines into Paragraphs, republished in Digital Typography, CSLI 78, (Stanford, California: CLSI Publications1997)'),
                    Paragraph(contents='[5] Donald E. Knuth, TEX, the Program, Volume B of Computers & Typesetting, (Reading, Massachusetts: Addison-Wesley 1986)'),
                    Heading(level=2, contents='9 Acknowledgments'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage.'),
                    Heading(level=2, contents='10 Changes from previous revisions'),
                    Paragraph(contents='Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='Copyright © 1998-1999 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report.')],
 Version(3, 0, 1): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Line Breaking Properties'),
                    TableRow(contents='Version\ue0003.0.1'),
                    TableRow(contents='Authors\ue000Asmus Freytag (asmus@unicode.org)'),
                    TableRow(contents='Date\ue0002000-08-31'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/unicode/reports/tr14/tr14-7'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/unicode/reports/tr14/tr14-6'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/unicode/reports/tr14'),
                    TableRow(contents='Tracking Number\ue0007'),
                    Heading(level=2, contents='Summary'),
                    Paragraph(contents='This report presents the specification of line breaking properties for Unicode characters.'),
                    Heading(level=2, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved by the Unicode Technical Committee as a Unicode Standard Annex. It is a stable document and may be used as reference material or cited as a normative reference from another document.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, carrying the same version number, but is published as a separate document. Note that conformance to a version of the Unicode Standard includes conformance to its Unicode Standard Annexes.'),
                    Paragraph(contents='A list of current Unicode Technical Reports is found on http://www.unicode.org/unicode/reports/. For more information about versions of the Unicode Standard, see http://www.unicode.org/unicode/standard/versions/.'),
                    Paragraph(contents='Please mail corrigenda and other comments to the author(s).'),
                    Heading(level=2, contents='Contents'),
                    Paragraph(contents='• 1 Overview and Scope'),
                    Paragraph(contents='• 2 Definitions'),
                    Paragraph(contents='• 3 Description'),
                    Paragraph(contents='• 4 Conformance'),
                    Paragraph(contents='• 5 Line Breaking Properties'),
                    Paragraph(contents='• 5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='• 5.2 Additional Details on Dictionary Usage'),
                    Paragraph(contents='• 6 Line Breaking Algorithm'),
                    Paragraph(contents='• 7 Pair-table Based Implementation'),
                    Paragraph(contents='• 7.1 Minimal Table'),
                    Paragraph(contents='• 7.2 Extended Context'),
                    Paragraph(contents='• 7.3 Example Table'),
                    Paragraph(contents='• 7.4 Sample Code'),
                    Paragraph(contents='• 7.5 Combining Marks'),
                    Paragraph(contents='• 7.6 Customization'),
                    Paragraph(contents='• 7.7 Examples of Customization'),
                    Paragraph(contents='• 8 References'),
                    Paragraph(contents='• 9 Acknowledgments'),
                    Paragraph(contents='• 10 Changes from Previous Revisions'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='The Unicode Standard presents a summary of basic line-breaking behavior, but does not give a complete specification. This technical report provides the needed information in a way that reflects best practices. Normative line-breaking properties are assigned to those characters whose line breaking behavior must be identical across all implementations. For all other classes of characters informative, line-breaking properties are provided.'),
                    Paragraph(contents='Following the formal definitions and summary of line breaking properties, there are three main sections'),
                    Paragraph(contents='Section 5 contains a textual description of the line breaking behavior of the characters of the Unicode Standard and their grouping by line breaking property. These descriptions do not take account of the order of precedence. Section 6 provides a set of rules listed in order of precedence that constitute a line breaking algorithm. Section 7 provides the detailed description of an efficient pair table based implementation of the algorithm.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard. The notation defined in this technical report differs somewhat from the notation defined in the Unicode Standard. All notation used here without an explicit definition shall be as defined in the Unicode Standard.'),
                    Paragraph(contents='Line fitting - the process of determining the how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='Overfull - a line that contains so much text that it does not fit in the space allotted, or only after unacceptable compression of the text.'),
                    Paragraph(contents='Underfull - a line that contains so little text that it ends too far from the margin, or one that would require unacceptable expansion when lines are justified.'),
                    Paragraph(contents='Line Break - the position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='Line Break Opportunity - a place where a line is allowed to end. Whether a given position in the text is a valid line break opportunity depends on the line breaking rules in force, as well as on context.'),
                    Paragraph(contents='Line Breaking - the process of selecting that part of a text that can be displayed on a line. In other words, selecting one among several line breaking opportunities such that the resulting line is optimal (unless the user requested an explicit line break).'),
                    Paragraph(contents='Line Breaking Property - A character property with mutually exclusive values, as set out in Table 1 and arranged in approximate order of precedence. Line breaking properties are used to determine the type of break.'),
                    Paragraph(contents="Mandatory Break - a line must break following a character that has the mandatory break property. Also known as a forced break. This is indicated in the rules as B !, where B is the character with the mandatory break property. (In the notation of the Unicode Standard, this would be: B ×, although the standard doesn't specify whether or not a break is forced or just an opportunity.)"),
                    Paragraph(contents='Direct Break - a line breaking opportunity exists between two adjacent characters of the given line breaking properties. (If they are separated by one or more space characters, a break opportunity also exists after the last space.) This indicated in the pair table below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break and the optional space characters are not shown.'),
                    Paragraph(contents='Indirect Break - a line breaking opportunity exists between two characters of the given line breaking properties only if they are separated by one or more spaces. In this case, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent. This is indicated in the pair table below as B % A, where B is the character class of the character before and A is the character class of the character after the break and the optional space characters are not shown. In the notation of the Unicode Standard, this would be two rules: B × A and B SP+ ÷ A.'),
                    Paragraph(contents='Prohibited Break - no line breaking opportunity exists between two characters of the given line breaking properties, even if they are separated by one or more space characters. This is indicated in the pair table below as B ^ A, where B is the character class of the character before and A is the character class of the character after the break and the optional space characters are not shown. In the notation of the Unicode Standard, this would be the rule: B SP* × A.'),
                    Paragraph(contents='Hyphenation - Hyphenation uses language specific rules to provide additional line breaking opportunities within a word. Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this document, it is assumed that hyphenation is equivalent to insertion of soft hyphen characters. All other aspects of hyphenation are outside the scope of this document.'),
                    Formula(contents='Table 1 Line Breaking Properties (* = normative)'),
                    TableRow(contents='Value\ue000Line Breaking Property\ue000Examples\ue000Characters with this property'),
                    TableRow(contents='BK *\ue000Mandatory Break\ue000NL, PS\ue000cause a line break.'),
                    TableRow(contents='CR *\ue000Carriage Return\ue000CR\ue000cause a line break, except between CR and LF'),
                    TableRow(contents='LF *\ue000Line Feed\ue000LF\ue000cause a line break, except between CR and LF'),
                    TableRow(contents='CM *\ue000Attached Characters and Combining Marks\ue000Combining Marks, Conjoining Jamo\ue000prohibit a line break between the character and the preceding character'),
                    TableRow(contents='SG *\ue000Surrogates\ue000High Surrogates\ue000prohibit a break from a following low surrogate'),
                    TableRow(contents='ZW *\ue000Zero Width Space\ue000ZWSP\ue000optional break'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000allow only indirect line breaks between pairs.'),
                    TableRow(contents='GL *\ue000Non-breaking (“Glue”)\ue000NBSP, ZWNSP\ue000prohibit line breaks before or after.'),
                    TableRow(contents='CB *\ue000Contingent Break Opportunity\ue000Inline Objects\ue000provide a line break opportunity contingent on additional information.'),
                    TableRow(contents='SP *\ue000Space\ue000Space\ue000generally provide a line break opportunity after the character, enables indirect breaks'),
                    TableRow(contents='BA\ue000Break Opportunity After\ue000Spaces, Hyphens\ue000generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Opportunity Before\ue000Punctuation used in dictionaries\ue000generally provide a line break opportunity before the character.'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000EM Dash\ue000provide a line break opportunity before and after the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000Hyphen-Minus\ue000provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='NS\ue000Non Starter\ue000small kana\ue000allow only indirect line break before'),
                    TableRow(contents='OP\ue000Opening Punctuation\ue000“(“, “[“, “{“, etc.\ue000prohibit a line break after'),
                    TableRow(contents='CL\ue000Closing Punctuation\ue000“)”, “]”, “}”, etc.\ue000prohibit a line break before'),
                    TableRow(contents='QU\ue000Ambiguous Quotation\ue000Quotation marks\ue000act like they are both opening and closing'),
                    TableRow(contents='EX\ue000Exclamation/Interrogation\ue000“!”, “?” etc.\ue000prohibit line break before'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000break before or after'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000form numeric expressions for line breaking purposes'),
                    TableRow(contents='IS\ue000Infix Separator (Numeric)\ue000. ,\ue000prevent breaks after any and before numeric'),
                    TableRow(contents='SY\ue000Symbols Allowing Breaks\ue000/\ue000prevent a break before, and allow a break after'),
                    TableRow(contents='AL\ue000Ordinary Alphabetic and Symbol Characters\ue000Alphabets and regular symbols\ue000are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents="PR\ue000Prefix (Numeric)\ue000$, £, ¥, etc.\ue000don't break in front of a numeric expression"),
                    TableRow(contents='PO\ue000Postfix (Numeric)\ue000%, ¢, ‰, º\ue000don’t break following a numeric expression'),
                    TableRow(contents='SA\ue000Complex Context (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000provide a line break opportunity contingent on additional, language specific context analysis'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000act like AL when the resolved EAW is N otherwise act as ID'),
                    TableRow(contents='XX\ue000Unknown\ue000Unassigned\ue000are all characters with (as yet) unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Description'),
                    Paragraph(contents='Lines are broken as result of either of two conditions. The first condition is the presence of an explicit line breaking character. The second condition results from a formatting algorithm having selected among available line breaking opportunities the particular one that results in the optimal layout of the text.'),
                    Paragraph(contents='The definition of optimal line break is outside the scope of this document. Different formatting algorithms may use different methods of determining an optimal break. For example, simple implementations just consider a line at a time, trying find a locally optimal line break. A common approach is to allow no compression and consider the longest line that fits. When compression is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts compression and expansion for different line break candidates.'),
                    Paragraph(contents='More complex algorithms may take into account the interaction of line breaking decisions for the whole paragraph. TEX implements a well known example of such a globally optimal strategy that may make complex tradeoffs to avoid unnecessary hyphenation and other legal, but inferior breaks. For the purpose of this document, what is important is not so much what defines the optimal amount of text on the line, but how line breaking opportunities are defined.'),
                    Paragraph(contents='Three principal styles of context analysis determine line-breaking opportunities.'),
                    Paragraph(contents='1. Western (spaces and hyphens are used to determine breaks)'),
                    Paragraph(contents='2. East Asian (lines can break anywhere, unless prohibited)'),
                    Paragraph(contents='3. South East Asian (require morphological analysis)'),
                    Paragraph(contents='The first is commonly used for scripts employing the space character. The second is used with East Asian ideographic scripts. The third is used for scripts such as Thai, which do not use spaces, but which restrict word-breaks to syllable boundaries, the determination of which requires knowledge of the language comparable to that required by a hyphenation algorithm.'),
                    Paragraph(contents='Note: Korean may alternately use a space-based (style 1) instead of the style 2 context analysis.'),
                    Paragraph(contents='Space-based line breaking is often augmented by hyphenation. Some Unicode characters have explicit line breaking properties assigned to them. These can be used for the first and second type context analysis for line break opportunities. For multilingual text, styles one and two can be unified into a single set of specifications.'),
                    Paragraph(contents='Note: Interpretation of line breaking properties in bidirectional text takes place before applying rule L1 of the Unicode Bidirectional Algorithm. However, it is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='· The line breaking behavior of characters with normative line breaking properties is described in the Unicode Standard. (See The Unicode Standard, Version 3.0, Chapters 6 and 13). Unless otherwise stated, the information in this technical report is not intended to supersede the normative specifications found in the Unicode Standard, but to organize the description in a different context and provide additional informative detail.'),
                    Paragraph(contents='· All line breaking properties are informative, except for the line breaking properties marked with a * in Table 1 Line Breaking Properties. The behavior for characters with normative line breaking properties must be the same for all conformant implementations.'),
                    Paragraph(contents='· Conformant implementations must not tailor characters with normative line breaking properties to any of the informative properties, but may tailor characters with informative line breaking properties to one of the normative line breaking properties.'),
                    Paragraph(contents='· Higher level protocols may further restrict, override, or extend the line breaking properties of certain characters in some contexts.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='The main emphasis in this section is to provide additional description of the line breaking behavior and to summarize the membership of character classes for each line breaking property. The full classification of all Unicode characters by their line breaking properties is available as the file LineBreaking.txt in the Unicode Character Database. This is a tab-delimited, three column plain text file, with code position, line breaking class and character name (for reference purpose only). The abbreviated way of listing the Ideographic, Hangul, Surrogate, and Private Use ranges is the same as in UnicodeData.txt.'),
                    Paragraph(contents='The classification by properties defined here is used as input into two algorithms defined below that implement workable default line breaking methods. In a few instances, the descriptions in this section provide additional detail about handling a given character at the end of a line and which goes beyond the simple determination of line breaks.'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking properties are listed alphabetically. Each property is marked with an annotation for easy reference showing that'),
                    Paragraph(contents='A - the property allows a break opportunity after in specified contexts'),
                    Paragraph(contents='XA - the property prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='B - the property allows a break opportunity before in specified contexts'),
                    Paragraph(contents='XB - the property prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='P - the property allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='XP - the property prevents a break opportunity for a pair of same characters'),
                    Heading(level=3, contents='AI - Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Characters with East Asian Width property A (ambiguous width), and which would otherwise be AL in this classification, take on the AL line break class only when their resolved width is N (narrow) and take the ID line break class, when their resolved width is W (wide). For more information on East Asian Width, and how to resolve it, see Unicode Technical Report #11, East Asian Width.'),
                    Heading(level=3, contents='AL - Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Require other characters to provide break opportunities, otherwise no breaking between pairs of ordinary characters. However, this is tailorable. In some Far Eastern documents it may be desirable to allow breaking between pairs of ordinary characters.'),
                    Paragraph(contents='NOTE: use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='ALPHABETIC — all characters of General Categories Lu, Lc, Lt, Lm, Lo, except as they appear below. SYMBOLS — all characters of General Category Sm, Sc, Sk, So, except as they appear below.'),
                    Heading(level=3, contents='BA - Break Opportunity After (A)'),
                    Paragraph(contents='Like SP, but are not part in determining indirect breaks.'),
                    Paragraph(contents='These characters with General category Zs'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN QUAD'),
                    TableRow(contents='2003\ue000EM QUAD'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    Paragraph(contents='The preceding list of space characters all have a specific width, but behave otherwise as breaking spaces.'),
                    Heading(level=3, contents='Tabs'),
                    Paragraph(contents='Except for the effect of the location of the tabstops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    TableRow(contents='0009\ue000TAB'),
                    Heading(level=3, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    Paragraph(contents='There are three types of hyphens: Explicit hyphens, conditional hyphens, and dictionary-inserted hyphens (as a result of a hyphenation process). There is no character code for the third kind of hyphen; therefore if it is desired to make the distinction, the dictionary-inserted hyphens must be represented out of band, or with a privately assigned control code.'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    Paragraph(contents='Hyphens are graphic characters with width. Since, unlike spaces, they print, they are included in the measured part of the preceding line'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY is rendered invisibly and has no width, except at a line break. The rendering of the soft hyphen depends on the script. For the Latin script it is rendered as a hyphen, however, some languages require a change in spelling surrounding an optional hyphen, if it occurs at a line break. For example in Swedish the word “tuggummi” changes to “tugg-gummi” when hyphenated.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY it is customarily treated as overriding the action of the hyphenator for that word.'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    Paragraph(contents='The Tibetan thseg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself, like space.'),
                    Paragraph(contents='Ethiopian word space is visible word delimiter and is kept on the line before.'),
                    Paragraph(contents='The Ogham space mark is rendered visibly between words but should be elided at the end of a line.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='Hyphenation point is primarily used to visibly indicate syllabification of words. Syllable breaks are potential line breaking opportunities in the middle of words. The hyphenation point It is mainly used in dictionaries and similar works. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual break opportunity, the vertical bar is rendered as a hyphen.'),
                    Heading(level=3, contents='BB - Break opportunities before characters (B)'),
                    TableRow(contents='00B4\ue000ACCUTE ACCENT'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent would move to the next line, and the preceding line ended with a hyphen.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Therefore, the only sensible way to break them is to keep them with the syllable, that is to break before them.'),
                    Paragraph(contents='NOTE: It is hard to find actual examples in most dictionaries, since the pronunciation fields usually occur right after the head word, and the columns are wide enough to prevent line breaks in the pronunciations.'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='The Mongolian Todo soft hyphen indicates an optional line break opportunity with hyphen, but unlike the soft-hyphen it stays with the following line.'),
                    Heading(level=3, contents='B2 - Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The em dash character is used to set off parenthetical text, normally without spaces, however, this is language dependent, for example, in Swedish, spaces are used. Line breaks can occur before and after an em dash, but not between two em dashes. Pairs of em dashes are sometimes used instead of a single quotation dash. For that reason, the line should'),
                    Paragraph(contents='not be broken between em dashes.'),
                    Heading(level=3, contents='BK - Mandatory Break (A) - (normative)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters.'),
                    TableRow(contents='000C\ue000FORM FEED'),
                    Paragraph(contents='Form Feed separates pages. The text on the new page starts at the beginning of the line. No paragraph formatting is applied.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. No paragraph formatting is applied.'),
                    Paragraph(contents='This is similar to HTML <BR>'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. Paragraph formatting is applied.'),
                    Paragraph(contents='"NEW LINE FUNCTION (NLF)"'),
                    Paragraph(contents='New line functions provide additional explicit breaks. They are not individual characters, but are expressed as sequences of control characters NEL, LF, and CR. What particular sequence(s) form a NLF depends on the implementation and other circumstances as described in Unicode Technical Report 13, Unicode Newline Guidelines.'),
                    Paragraph(contents='If a the character sequence for a new line function contains more than one character, it is kept together. The default behavior is to break after LF or CR, but not between CR and LF. Two additional line break classes have been added for convenience in this operation.'),
                    Heading(level=3, contents='CB - Contingent Break Opportunity (B/A)'),
                    Heading(level=3, contents='Contingent Break Opportunity Before and After'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='By default there is a break opportunity both before and after the object. Object-specific line break behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the break opportunities.'),
                    Heading(level=3, contents='CL - Closing Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation must be kept with the preceding character'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Paragraph(contents='plus any characters of general category Pe in the Unicode Character Database.'),
                    Heading(level=3, contents='CM - Attached Characters and Combining Marks (XB) - (normative)'),
                    Heading(level=3, contents='Combining characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purposes of line breaking. The line-breaking behavior of the sequence is that of the base character. If U+0020 SPACE is used as a base character, it is treated as AL instead of SP.'),
                    Paragraph(contents='All characters with general category Mn, Mc, and Me.'),
                    Heading(level=3, contents='Conjoining Jamos'),
                    TableRow(contents='1160..11F9\ue000Conjoining Jamos'),
                    Paragraph(contents='A sequence of conjoining Jamos is used to make up a Hangul syllable. Breaks are only allowed around the entire Hangul syllable, and then the line break properties are the same for precomposed Hangul syllables as for conjoined sequence of Jamos.'),
                    Paragraph(contents='NOTE: non-initial conjoining Jamos thus behave like combining marks, while the initial combining Jamos have the same property as Hangul Syllables.'),
                    Heading(level=3, contents='Control and formatting characters'),
                    Paragraph(contents='Most controls and formatting characters are ignored in line breaking. All characters of General Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='CR - Carriage Return (A) - (normative)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='Do not break if followed by a LF, mandatory break after otherwise'),
                    Heading(level=3, contents='EX - Exclamation / Interrogation (XB)'),
                    Paragraph(contents='These behave like closing characters, except in relation to postfix and ‘non-starter’ characters'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='FE56..FE57\ue000SMALL QUESTION MARK..SMALL EXCLAMATION MARK'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL - Non-breaking ("Glue") (XB/XA) - (normative)'),
                    Paragraph(contents='The action of these characters is to glue together both left and right neighbor character such that they are kept on the same line. If they follow a space character, they still allow a break.'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='Since this character is not visible, it is the preferred choice for keeping characters together that would otherwise be split across the line at a direct break.'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words should be visually separated but kept on the same line, as in the case of a title and a name "Dr.<NBSP>Joseph Becker". NARROW NO-BREAK SPACE is used in Mongolian.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words must be hyphenated but may not be broken at the hyphen.'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    Paragraph(contents='This looks exactly like a Tibetan tsheg, but can be used to prevent a break. It inhibits breaking on either side, like no-break space.'),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This character has not been encoded in Unicode yet, but is an example of a character that should be given the GL property.'),
                    Heading(level=3, contents='HY - Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from the use as minus sign (or indicator of numerical range). If used as hyphen, it acts like HYPHEN.'),
                    Paragraph(contents='NOTE: In some practice runs of HYPHEN-MINUS are used to stand in for longer dashes or horizontal rules. If it is desired to treat them like the characters or layout elements they stand for, and actual character code conversion is not performed, line breaking will need to support these special cases explicitly.'),
                    Heading(level=3, contents='ID - Ideographic (B/A)'),
                    Paragraph(contents='Do not require other characters to provide break opportunities, can ordinarily break before and after and between pairs.'),
                    TableRow(contents='4E00..9FAF\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='3400..4DBF\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='F900..FAFF\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    TableRow(contents='AC00..D7AF\ue000HANGUL SYLLABLES'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    TableRow(contents='1100..115F\ue000HANGUL JAM0 (ONLY THE INITIALS)'),
                    TableRow(contents='HIRAGANA (except small characters)'),
                    TableRow(contents='KATAKANA (except small characters)'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490-A4CF\ue000YI RADICALS'),
                    TableRow(contents='2E80.. 2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF10-FF19\ue000WIDE DIGITS'),
                    Paragraph(contents='plus all of the FULLWIDTH LATIN letters and all of the 3000-33FF blocks not covered elsewhere'),
                    Paragraph(contents='NOTE: use ZWNBSP as a manual override to prevent break opportunities around ideographs.'),
                    Heading(level=3, contents='IN - Inseparable characters (XP)'),
                    Heading(level=3, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used in consecutive sequence. They therefore prevent line breaks absolutely in a series of two character of this class.'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three dot leader.'),
                    Heading(level=3, contents='IS - Numeric Separator (Infix) (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression, may not be separated from following numeric characters, unless space character intervenes. Since they are otherwise sentence ending punctuation, they prevent breaks before.'),
                    Paragraph(contents='There is no break in “100.00” or “10,000”, nor in “12:59”'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP\ue000'),
                    Heading(level=3, contents='LF - Line Feed (A) - (normative)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character.'),
                    Heading(level=3, contents='NS - Non-starters (XB)'),
                    Paragraph(contents='Some characters cannot start a line, but unlike CL they may allow a break in some context when they are following one or more space characters.'),
                    Paragraph(contents='All characters with General Category Lm (Letter, Modifier) and East Asian Width type W or H, and all characters with General Category Sk (Symbol, Modifier) and East Asian width type W plus the following characters:'),
                    TableRow(contents='0E5A..0E5B\ue000THAI CHARACTER ANGKHANKHU..THAI CHARACTER KHOMUT'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D6..17DA\ue000KHMER SIGN CAMNUC PII KUUH..KHMER SIGN KOOMUUT'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK to HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30FD\ue000KATAKANA ITERATION MARK'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    Paragraph(contents='Plus all Hiragana, Katakana, and Halfwidth Katakana “small” characters'),
                    Paragraph(contents='Note: Optionally, the NS restriction may be relaxed and characters treated like ID, to achieve a more permissive style of line breaking.'),
                    Heading(level=3, contents='NU - Numeric (XP)'),
                    Paragraph(contents='Behave like ordinary characters in the context of ordinary characters, activate the prefix and postfix behavior of prefix and postfix characters'),
                    Paragraph(contents='DECIMAL DIGITS (All characters of General Category Nd, except FULL WIDTH)'),
                    Heading(level=3, contents='OP - Opening Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation must be kept with the following character'),
                    Paragraph(contents='Characters of general category Ps in the Unicode Character Database.'),
                    Heading(level=3, contents='PO - Postfix (Numeric) (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene.'),
                    Paragraph(contents='For example, there is no break in “(12.00) %”'),
                    Paragraph(contents='The list of post-fix characters is:'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2035\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='2126\ue000OHM SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Heading(level=3, contents='PR - Prefix (Numeric) (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression, may not be separated from following numeric characters or following opening characters, EVEN if space character intervenes.'),
                    Paragraph(contents='There is no break in “$ (100.00)”'),
                    Paragraph(contents='All currency symbols (General Category Sc) except as listed explicitly in PO and the following:'),
                    TableRow(contents='002B\ue000PLUS'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2213\ue000MINUS-PLUS'),
                    Heading(level=3, contents='QU - Ambiguous Quotation (XB/XA)'),
                    Paragraph(contents='Some paired characters can be either opening or closing depending on usage. The default is to treat them as both opening and closing.'),
                    Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as opening and which as closing quote. (See the information in the Unicode Standard, Version 3.0, Chapter 6.)'),
                    Paragraph(contents='Characters of general category Pf or Pi in the Unicode Character Database as well as,'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    Heading(level=3, contents='SA - Complex-context Dependent Characters (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to e.g. a hyphenation algorithm. For the characters that have this property, no line breaks will be found otherwise, therefore complex context analysis is mandatory.'),
                    Paragraph(contents='Note: These characters can be mapped into their equivalent line break classes as result of dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='If dictionary lookup is not available they should be treated as XX.'),
                    Paragraph(contents='All characters of General Category Lo or Lm in these ranges:'),
                    TableRow(contents='0E00..0EFF\ue000THAI / LAO'),
                    TableRow(contents='1000..109F\ue000MYANMAR'),
                    TableRow(contents='1780..17FF\ue000KHMER'),
                    Heading(level=3, contents='SG - Surrogates (XP) - (normative)'),
                    Paragraph(contents='All characters with General Category Cs. There is no break between a high surrogate and a low surrogate.'),
                    Paragraph(contents='Note: The line breaking class for a pair of surrogates depends on the character. A useful default is to treat characters in the range 0x00010000 to 0x0001FFFD as AL and characters in the range 0x00020000 to 0x0002FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters, which have yet to be assigned.'),
                    Heading(level=3, contents='SP - Space (A)'),
                    Heading(level=3, contents='Breaking Spaces'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='The space characters are explicit break opportunities, but spaces at the end of a line are not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, since the last character measured for fit is BEFORE the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    Paragraph(contents='Note: SPACE, but none of the other breaking spaces, is used in determining an indirect break.'),
                    Heading(level=3, contents='SY - Symbols Allowing Break After (A)'),
                    Paragraph(contents='URLs are common enough now in regular plain text, that they must be taken into account when assigning general purpose line breaking properties. The SY line break property is intended to provide a break after, but not in front of digits so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='Slash (SOLIDUS) is allowed as an additional, limited break opportunity to improve layout of web addresses'),
                    Paragraph(contents='NOTE: Normally, symbols are treated as AL. If it is desired to allow other breaks, more symbols can be added to this category, or category BA, BB, B2 by tailoring, for example “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this document.'),
                    Heading(level=3, contents='XX - Unknown (XP)'),
                    Paragraph(contents='Unassigned code positions and characters for which reliable line breaking information is not available (e.g. Private use characters) are assigned this default line breaking property. The behavior is otherwise identical to class AL. Implementations can override or tailor this default behavior, e.g. by assigning private use characters the property ID if that is more likely to give the correct default behavior for their users. Users can manually insert ZWSP or ZWNBSP around characters of class XX to force or prevent breaks as needed.'),
                    Heading(level=3, contents='ZW - Zero Width Space (A) - (normative)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character does not have width. It is used to enable additional (invisible) break opportunities wherever SPACE cannot be used.'),
                    Heading(level=3, contents='5.2 Additional Details on Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow strict standards that guide their use of characters to indicate features of the terms listed. Some of these conventions mark places that can also serve as line breaking opportunities and therefore interact with line breaking and are described here. Where appropriate, these characters have been inserted in the list of characters for the corresponding line breaking property above.'),
                    Paragraph(contents='However, implementing the full conventions in dictionaries requires special support. Looking up the noun “syllable” in eight dictionaries yields eight different conventions, in one dictionary a natural hyphen in a word becomes a tilde dash if the word is split.'),
                    Paragraph(contents='Dictionary of the English Language, Samuel Johnson 1843 SY´LLABLE where ´ is a U+02B9 (and a large one at that) and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary 1st Edition si·lâ'bl where · is a slightly above middle dot indicating the vowel of the stressed syllable (similar to Johnson's acute). The letter â is really U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary 2nd Edition has gone to IPA 'sIleb(e)l where ' is U+02C8, I is U+026A, e is U+0259 (both times). The ' comes before the stressed syllable. The () indicates the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary 7th Edition sil´e-bl where the stressed syllable is followed by ´ U+02B9, e is U+0259, - is a hyphen when splitting a word like abate´- ment the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention if splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIlebl where I is U+026A U+0332, e is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIlebe°l where I is U+026A U+0332, and means the same as the BBC. The e is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary. syl·la·ble (sílleb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent (rather than being followed by an accent). The letter e is a schwa in the actual example and ' is apostrophe."),
                    Paragraph(contents="Webster's 3rd New International Dictionary. syl·la·ble /'silebel/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The e's are schwas as usual. Webster splits words at the end of a line with a normal hyphen. When a hyphenated word is split at the hyphen this is indicated by a double hyphen which looks like a light version of the German Fraktur hyphen (short equals sign with a slight slope up to the right)."),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='The Unicode Standard, Version 3.0, describes a particular method for boundary detection in Chapter 5. It is based on a set of hierarchical rules and character classifications. That method would be well suited for implementation of some of the advanced heuristics.'),
                    Paragraph(contents='A slightly simplified implementation of that can be devised that uses a two dimensional table to resolve break opportunities between pairs or characters. It is described in the following section.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules which take line breaking classes as input.'),
                    Heading(level=3, contents='Line breaking rules'),
                    Paragraph(contents='The line breaking rules are stated in terms of regular expressions over the line breaking classes defined above and three special symbols indicating the type of line break opportunity.'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The distinction between direct and indirect break is handled by explicitly considering the effect of SP.'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit ”otherwise” at the front of each rule following the first. The examples for each use representative characters, where ’H’ stands for an ideographs, ’h’ for small kana, ’9’ for digits.'),
                    Heading(level=4, contents='Resolve line break classes:'),
                    Rule(contents='LB 1 Assign a line break category to each character of the input. Resolve CB, SA, XX, SG into other line break classes depending on criteria outside this algorithm.'),
                    Heading(level=4, contents='Start and end of text:'),
                    Rule(contents='LB 2a Never break at the start of text'),
                    Formula(contents='× sot'),
                    Rule(contents='LB 2b Always break at the end of text'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases. Their effect is to have at least one character on each line, and at least one linebreak for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text to run over the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Rule(contents='LB 3a Always break after hard line breaks (but never between CR and LF).'),
                    Formula(contents='CR × LF'),
                    Formula(contents='LF !'),
                    Formula(contents='CR !'),
                    Formula(contents='BK !'),
                    Rule(contents='LB 3b Don’t break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB 4 Don’t break before spaces or zero-width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB 5 Break after zero-width space.'),
                    Formula(contents='ZW ÷'),
                    Heading(level=4, contents='Combining Marks:'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. If there is no base, the CM behaves like AL. Virama and non-initial Jamo are treated as CM and initial Jamo are merged with class ID so they work correctly.'),
                    Rule(contents='LB 6 Don’t break graphemes (before combining marks, around virama or on sequences of conjoining Jamos.'),
                    Formula(contents='Treat X CM* as if it were X'),
                    Formula(contents='(See the Unicode Standard for other rules regarding graphemes.)'),
                    Rule(contents='LB 7 In all of the following rules, if a space is the base character for a combining mark, the space is changed to type AL.'),
                    Formula(contents='Treat SP CM* as if it were ID'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and so come before rule 12.'),
                    Rule(contents='LB 8 Don’t break before ‘!’ or ‘/’ or ‘,’ or ‘]’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× EX'),
                    Formula(contents='× SY'),
                    Formula(contents='× IS'),
                    Rule(contents='LB 9 Don’t break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB 10 Don’t break within ‘”[’, , even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Rule(contents='LB 11 Don’t break within ‘]h’, even with intervening spaces.'),
                    Formula(contents='CL SP* × NS'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB 12 Break after spaces'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB 13 Don’t break before or after ZWNBSP'),
                    Formula(contents='× GL'),
                    Formula(contents='GL ×'),
                    Rule(contents='LB 14 Don’t break before or after ‘”’'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB 15 Don’t break before small kana and other non starters, hyphen-minus, other hyphens, fixed-width spaces or after acute accents:'),
                    Formula(contents='× NS'),
                    Formula(contents='× HY'),
                    Formula(contents='× BA'),
                    Formula(contents='BB ×'),
                    Rule(contents='LB 15b Break after hyphen-minus, and before acute accents:'),
                    Formula(contents='HY ÷'),
                    Formula(contents='÷ BB'),
                    Rule(contents='LB 16 Don’t break between two ellipses, or between letters or numbers and ellipsis:'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Formula(contents='AL × IN'),
                    Formula(contents='ID × IN'),
                    Paragraph(contents='Examples: ’9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents="Don't break alphanumerics."),
                    Rule(contents='LB 17 Don’t break within ‘a9’, ‘3a’, or ‘H%’'),
                    Formula(contents='AL × NU'),
                    Formula(contents='NU × AL'),
                    Formula(contents='ID × PO'),
                    Paragraph(contents='Numbers are of the form PO SP * ( CL | HY ) ? NU+ ) ? PO'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='This is approximated with the following rules. (Some cases already handled above, like ‘9,’, ‘[9’.)'),
                    Rule(contents='LB 18 Don’t break between the following pairs of classes.'),
                    Formula(contents='PR × NU'),
                    Formula(contents='PR × AL'),
                    Formula(contents='PR × OP'),
                    Formula(contents='PR × HY'),
                    Formula(contents='HY × NU'),
                    Formula(contents='SY × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × PO'),
                    Formula(contents='CL × PO'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-‘, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Finally, join alphabetic letters and break everything else.'),
                    Rule(contents='LB 19 Don’t break between alphabetics (“at”)'),
                    Formula(contents='AL × AL'),
                    Rule(contents='LB 20 Break everywhere else'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair-table Based Implementation'),
                    Paragraph(contents='A two dimensional table can be used to resolve break opportunities between pairs of characters. The rows of the table are labeled by the possible values of the line breaking property of the leading character in the pair, the columns are labeled by the line breaking property for the following character of the pair. Each intersection is labeled with the resulting line breaking opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 provides an example of such a table-based definition. However, it uses line breaking classes whose membership is not solely determined by line breaking property (as in this report), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classed defined above. Rules LB 6, and LB 8 - LB11 require extended context for handling combining marks and spaces. This extended context is built into the code that interprets the pair table.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, the two line breaking classes can be coalesced. The JIS standard uses 20 classes of which only 14 appear to be unique.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='By broadening the definition of pair from B A to B SP* A, where A and B are characters and SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line breaking opportunity (i.e. direct and indirect breaks). Equivalent rules to the ones above can be formulated to the ones above, not using SP, but using % to express indirect breaks. These rules can then be simplified to involve only pairs of classes, e.g. only constructions of the form'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B ^ A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can then be automatically translated into a pair table, as in the example below. Line break analysis then proceeds by pair table lookup.'),
                    Heading(level=3, contents='7.3 Example Table'),
                    Paragraph(contents='The following example table implements the line breaking behavior described in this Technical Report, within the limitation that only context of the form B SP* A is considered. BK and SP classes are handled explicitly in the outer loop as given in the code sample below. B CM* can be handled in the table, or explicitly in the outer loop. Using the table entries is equivalent to making the simplifying assumption that combining marks are only applied to AL.'),
                    TableRow(contents='‘After’ class'),
                    TableRow(contents='OP\ue000CL\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000%'),
                    TableRow(contents='CL\ue000\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000\ue000%\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='QU\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000%'),
                    TableRow(contents='NS\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='EX\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='SY\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='IS\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='PR\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000%\ue000%\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='PO\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='NU\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000%\ue000%\ue000%\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='AL\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000%\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='ID\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000%\ue000\ue000\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='IN\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='HY\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='BA\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='BB\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000%'),
                    TableRow(contents='B2\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000^\ue000^\ue000%'),
                    TableRow(contents='ZW\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='CM\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000%\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    Paragraph(contents='• ^ denotes a prohibited break: Never break here, even if one or more spaces intervene.'),
                    Paragraph(contents='• As a reminder, A ^ B is equivalent to B SP* × A.'),
                    Paragraph(contents='• % denotes an indirect break opportunity: Don’t break here, unless one of more spaces intervene.'),
                    Paragraph(contents='• As a reminder, A % B is equivalent to B × A and B SP+ ÷ A.'),
                    Paragraph(contents='• _ an empty cell denotes a direct break opportunity (÷ above). These are blank to make them easier to distinguish in the table.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two functions demonstrate how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the following line break classes need to be added: CR, LF, CB, SG, XX. They have been omitted here for brevity.'),
                    CodeLine(contents='// placeholder function for complex break analysis'),
                    CodeLine(contents='int findComplexBreak(int *pcls, int *pbrk, int cch)'),
                    CodeLine(contents='{'),
                    CodeLine(contents='                  if (!cch)                   return 0;'),
                    CodeLine(contents='                  int cls = pcls[0];'),
                    CodeLine(contents='                  for(int ich = 0; ich < cch; ich++) {'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                                    // .. do complex break analysis here'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                                    if (pcls[ich] != SA)'),
                    CodeLine(contents='                                                  break;'),
                    CodeLine(contents='                  }'),
                    CodeLine(contents='                  return ich;'),
                    CodeLine(contents='}'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='// handle spaces separately, all others by table'),
                    CodeLine(contents='// pcls - pointer to array of line break classes (input)'),
                    CodeLine(contents='// pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='// cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='// ich - current index into the arrays (variable)'),
                    CodeLine(contents='int findLineBrk1(int *pcls, int *pbrk, int cch)'),
                    CodeLine(contents='{'),
                    CodeLine(contents='                  if (!cch) return;'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                  int  cls = pcls[0];'),
                    CodeLine(contents='                  for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                                    // handle spaces'),
                    CodeLine(contents='                                    if (pcls[ich] == SP) {'),
                    CodeLine(contents='                                                  pbrk[ich-1] = XX;'),
                    CodeLine(contents='                                                  continue;'),
                    CodeLine(contents='                                    }'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                                    // handle complex scripts'),
                    CodeLine(contents='                                    if (pcls[ich] == SA) {'),
                    CodeLine(contents='                                                  ich += findComplexBreak(&pcls[ich-1], &pbrk[ich-1], cch - (ich-1));'),
                    CodeLine(contents='                                                  if (ich < cch)'),
                    CodeLine(contents='                                                                    cls = pcls[ich];'),
                    CodeLine(contents='                                                  continue;'),
                    CodeLine(contents='                                    }'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                                    // lookup pair table information'),
                    CodeLine(contents='                                    int brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                                    if (brk == SS)       {'),
                    CodeLine(contents='                                                  pbrk[ich-1] = ((pcls[ich - 1] == SP) ? SS : XX);'),
                    CodeLine(contents='                                    } else {'),
                    CodeLine(contents='                                                  pbrk[ich-1] = brk;'),
                    CodeLine(contents='                                    }'),
                    CodeLine(contents='                                    cls = pcls[ich];'),
                    CodeLine(contents='                  }'),
                    CodeLine(contents='                  pbrk[ich-1] = 0;'),
                    CodeLine(contents='\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0'),
                    CodeLine(contents='                  return ich;'),
                    CodeLine(contents='}'),
                    Paragraph(contents='The function returns all the break opportunities in the array pointed to by pbrk, using the values in the table. The code assumes that the predefined value SS is used for break opportunities marked by an % entry in the table and the value XX for an entry marked by an ^ above.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='If one makes the simplifying assumption that combining marks are only applied to AL, or that applying a combining mark turns the combination into AL, then CM can be handled in the table as shown. Otherwise a simple statement in the outer loop'),
                    CodeLine(contents='if (pcls[i] == CM) {'),
                    CodeLine(contents='                pbrk[ich-1] = 0;'),
                    CodeLine(contents='                continue;'),
                    CodeLine(contents='}'),
                    Paragraph(contents='would have the effect of letting the CM take on the class of the preceding non-CM characters. This also requires a special rule to cover the case of a missing base character in the setup part before the loop:'),
                    CodeLine(contents='if (pcls[i] == CM)'),
                    CodeLine(contents='                cls = SP;'),
                    Heading(level=3, contents='7.6 Customization'),
                    Paragraph(contents='A real world line breaking algorithm must be tailorable to some degree. There are three principle ways of tailoring a pair-table based algorithm:'),
                    Paragraph(contents='1. Change the line breaking class assignment for some characters'),
                    Paragraph(contents='2. Change the table value assigned to a pair of character classes'),
                    Paragraph(contents='3. Change the interpretation of the line breaking actions'),
                    Paragraph(contents='4. Augment the algorithm.'),
                    Paragraph(contents='· The first is useful for cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='· The second method is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. These intersections can be labeled with special values that cause different actions for different customizations.'),
                    Paragraph(contents='· The third method is equivalent to the second, but instead of changing table values, an additional indirection is performed. This is most suitable when customizations need to be done at run time.'),
                    Paragraph(contents='· The fourth method is the most open ended...'),
                    Heading(level=3, contents='7.7 Examples of Customization'),
                    Paragraph(contents='1. Korean uses either implicit breaking around Hangul and ideographs or uses spaces. Reference [1] shows how this can be elegantly handled by the second or third method. Only the intersection of ID/ID, AL/ID and ID/AL are affected. For alphabetic style line breaking, breaks for these four cases require space, for ideographic style line breaking, these four cases don’t require spaces.'),
                    Paragraph(contents='2. Sometimes allowing alphabetic characters and digit strings to break anywhere is required in Far Eastern context. According to reference [1] this can be done by the second or third method, affecting the intersections of NU/NU, NU/AL, AL/AL, and AL/NU.'),
                    Paragraph(contents='3. Sometimes it is desirable to force Kana syllables to be kept together, i.e. the syllable kyu, spelled with the two kanas KI and small “yu” would be kept together even though KI and yu are normally atomic. This can be handled via the first method, by changing the classification of the Kana small characters between ID and NS as needed.'),
                    Heading(level=2, contents='8 References'),
                    Paragraph(contents='[1]Michel Suignard, Worldwide Typography and How to Apply JIS X 4051-1995 to Unicode, Proceedings of the Twelfth International Unicode/ISO 10646 Conference, Tokyo, Japan, 1998'),
                    Paragraph(contents='[2] Cy Cedar, David Veintimilla, Michel Suignard and Asmus Freytag, Report from the Trenches: Microsoft Publisher goes Unicode, Proceedings of the Eleventh International Unicode Conference, San Jose, CA 1997'),
                    Paragraph(contents='[3] The Unicode Standard, Version 3.0, (Reading, Massachusetts: Addison-Wesley Developers Press 2000)'),
                    Paragraph(contents='[4] Donald E. Knuth and Michael F. Plass, Breaking Lines into Paragraphs, republished in Digital Typography, CSLI 78, (Stanford, California: CLSI Publications1997)'),
                    Paragraph(contents='[5] Donald E. Knuth, TEX, the Program, Volume B of Computers & Typesetting, (Reading, Massachusetts: Addison-Wesley 1986)'),
                    Heading(level=2, contents='9 Acknowledgments'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage.'),
                    Heading(level=2, contents='10 Changes from previous revisions'),
                    Paragraph(contents='Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='Change from Version 6.0: Fixed several typos, new header.'),
                    Paragraph(contents='Copyright © 1998-2000 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report.')],
 Version(3, 1, 0): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Line Breaking Properties'),
                    TableRow(contents='Version\ue000Unicode 3.1.0'),
                    TableRow(contents='Authors\ue000Asmus Freytag (asmus@unicode.org)'),
                    TableRow(contents='Date\ue0002000-03-23'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/unicode/reports/tr14/tr14-10'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/unicode/reports/tr14/tr14-7'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/unicode/reports/tr14'),
                    TableRow(contents='Tracking Number\ue00010'),
                    Heading(level=3, contents='Summary'),
                    Paragraph(contents='This report presents the specification of line breaking properties for Unicode characters.'),
                    Heading(level=3, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved by the Unicode Technical Committee as a Unicode Standard Annex. It is a stable document and may be used as reference material or cited as a normative reference from another document.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, carrying the same version number, but is published as a separate document. Note that conformance to a version of the Unicode Standard includes conformance to its Unicode Standard Annexes.'),
                    Paragraph(contents='A list of current Unicode Technical Reports is found on http://www.unicode.org/unicode/reports/. For more information about versions of the Unicode Standard, see http://www.unicode.org/unicode/standard/versions/.'),
                    Paragraph(contents='The References provide related information that is useful in understanding this document. Please mail corrigenda and other comments to the author(s).'),
                    Heading(level=3, contents='Contents'),
                    Paragraph(contents='• 1 Overview and Scope'),
                    Paragraph(contents='• 2 Definitions'),
                    Paragraph(contents='• 3 Description'),
                    Paragraph(contents='• 4 Conformance'),
                    Paragraph(contents='• 5 Line Breaking Properties'),
                    Paragraph(contents='• 5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='• 5.2 Additional Details on Dictionary Usage'),
                    Paragraph(contents='• 6 Line Breaking Algorithm'),
                    Paragraph(contents='• 7 Pair-table Based Implementation'),
                    Paragraph(contents='• 7.1 Minimal Table'),
                    Paragraph(contents='• 7.2 Extended Context'),
                    Paragraph(contents='• 7.3 Example Table'),
                    Paragraph(contents='• 7.4 Sample Code'),
                    Paragraph(contents='• 7.5 Combining Marks'),
                    Paragraph(contents='• 7.6 Customization'),
                    Paragraph(contents='• 7.7 Examples of Customization'),
                    Paragraph(contents='• References'),
                    Paragraph(contents='• Acknowledgments'),
                    Paragraph(contents='• Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='The Unicode Standard [U3.0] presents a summary of basic line-breaking behavior, but does not give a complete specification. This technical report provides the needed information in a way that reflects best practices. Normative line-breaking properties are assigned to those characters whose line breaking behavior must be identical across all implementations. For all other classes of characters informative line-breaking properties are provided.'),
                    Paragraph(contents='Following the formal definitions and summary of line breaking properties, there are three main sections:'),
                    Paragraph(contents='1. Section 5 contains a textual description of the line breaking behavior of the characters of the Unicode Standard and their grouping by line breaking property. These descriptions do not take account of the order of precedence.'),
                    Paragraph(contents='2. Section 6 provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='3. Section 7 provides the detailed description of an efficient pair table based implementation of the algorithm.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard. The notation defined in this technical report differs somewhat from the notation defined in the Unicode Standard. All notation used here without an explicit definition shall be as defined in the Unicode Standard.'),
                    Paragraph(contents='Line fitting - the process of determining the how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='Line Break - the position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='Line Break Opportunity - a place where a line is allowed to end. Whether a given position in the text is a valid line break opportunity depends on the line breaking rules in force, as well as on context.'),
                    Paragraph(contents='Line Breaking - the process of selecting that part of a text that can be displayed on a line. In other words, selecting one among several line breaking opportunities such that the resulting line is optimal (unless the user requested an explicit line break).'),
                    Paragraph(contents='Line Breaking Property - A character property with mutually exclusive values, as set out in Table 1 and arranged in approximate order of precedence. Line breaking properties are used to determine the type of break.'),
                    Paragraph(contents="Mandatory Break - a line must break following a character that has the mandatory break property. Also known as a forced break. This is indicated in the rules as B !, where B is the character with the mandatory break property. (In the notation of the Unicode Standard, Version 3.0 [U3.0], this would be: B ×, although the standard doesn't specify whether or not a break is forced or just an opportunity.)"),
                    Paragraph(contents='Direct Break - a line breaking opportunity exists between two adjacent characters of the given line breaking properties. This indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity also exists after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='Indirect Break - a line breaking opportunity exists between two characters of the given line breaking properties only if they are separated by one or more spaces. In this case, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent. This is indicated in the pair table below as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though no space characters are not shown in the pair table, an indirect break can only occur if one or more spaces follow B. In the notation of the Unicode Standard, this would be represented as two rules: B × A and B SP+ ÷ A.'),
                    Paragraph(contents='Prohibited Break - no line breaking opportunity exists between two characters of the given line breaking properties, even if they are separated by one or more space characters. This is indicated in the pair table below as B ^ A, where B is the character class of the character before and A is the character class of the character after the break and the optional space characters are not shown. In the notation of the Unicode Standard, this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='Hyphenation - Hyphenation uses language specific rules to provide additional line breaking opportunities within a word. Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this document, it is assumed that hyphenation is equivalent to insertion of soft hyphen characters. All other aspects of hyphenation are outside the scope of this document.'),
                    Formula(contents='Table 1 Line Breaking Properties (* = normative)'),
                    TableRow(contents='Value\ue000Line Breaking Property\ue000\ue000Examples\ue000\ue000Characters with this property'),
                    TableRow(contents='Normative Properties'),
                    TableRow(contents='BK *\ue000Mandatory Break\ue000\ue000NL, PS\ue000\ue000cause a line break (after)'),
                    TableRow(contents='CR *\ue000Carriage Return\ue000\ue000CR\ue000\ue000cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF *\ue000Line Feed\ue000\ue000LF\ue000\ue000cause a line break (after)'),
                    TableRow(contents='CM *\ue000Attached Characters and Combining Marks\ue000\ue000Combining Marks, Conjoining Jamo (non-initial)\ue000\ue000prohibit a line break between the character and the preceding character'),
                    TableRow(contents='SG *\ue000Surrogates\ue000\ue000Surrogates\ue000\ue000prohibit a break between a high and a following low surrogate'),
                    TableRow(contents='ZW *\ue000Zero Width Space\ue000\ue000ZWSP\ue000\ue000optional break'),
                    TableRow(contents='GL *\ue000Non-breaking (“Glue”)\ue000\ue000NBSP, ZWNSP\ue000\ue000prohibit line breaks before or after.'),
                    TableRow(contents='CB *\ue000Contingent Break Opportunity\ue000\ue000Inline Objects\ue000\ue000provide a line break opportunity contingent on additional information.'),
                    TableRow(contents='SP *\ue000Space\ue000\ue000Space\ue000\ue000generally provide a line break opportunity after the character, enables indirect breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='BA\ue000Break Opportunity After\ue000\ue000Spaces, Hyphens\ue000\ue000generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Opportunity Before\ue000\ue000Punctuation used in dictionaries\ue000\ue000generally provide a line break opportunity before the character.'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000\ue000EM Dash\ue000\ue000provide a line break opportunity before and after the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000\ue000Hyphen-Minus\ue000\ue000provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='IN\ue000Inseparable\ue000\ue000Leaders\ue000\ue000allow only indirect line breaks between pairs.'),
                    TableRow(contents='NS\ue000Non Starter\ue000\ue000small kana\ue000\ue000allow only indirect line break before'),
                    TableRow(contents='OP\ue000Opening Punctuation\ue000\ue000“(“, “[“, “{“, etc.\ue000\ue000prohibit a line break after'),
                    TableRow(contents='CL\ue000Closing Punctuation\ue000\ue000“)”, “]”, “}”, etc.\ue000\ue000prohibit a line break before'),
                    TableRow(contents='QU\ue000Ambiguous Quotation\ue000\ue000Quotation marks\ue000\ue000act like they are both opening and closing'),
                    TableRow(contents='EX\ue000Exclamation/Interrogation\ue000\ue000“!”, “?” etc.\ue000\ue000prohibit line break before'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='NU\ue000Numeric\ue000\ue000Digits\ue000\ue000form numeric expressions for line breaking purposes'),
                    TableRow(contents='IS\ue000Infix Separator (Numeric)\ue000\ue000. ,\ue000\ue000prevent breaks after any and before numeric'),
                    TableRow(contents='SY\ue000Symbols Allowing Breaks\ue000\ue000/\ue000\ue000prevent a break before, and allow a break after'),
                    TableRow(contents="PR\ue000Prefix (Numeric)\ue000\ue000$, £, ¥, etc.\ue000\ue000don't break in front of a numeric expression"),
                    TableRow(contents='PO\ue000Postfix (Numeric)\ue000\ue000\ue000\ue000don’t break following a numeric expression'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AL\ue000Ordinary Alphabetic and Symbol Characters\ue000\ue000Alphabets and regular symbols\ue000\ue000are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='ID\ue000Ideographic\ue000\ue000Ideographs, Hangul\ue000\ue000break before or after, except in some numeric context'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000\ue000Characters with Ambiguous East Asian Width\ue000\ue000act like AL when the resolved EAW is N otherwise act as ID'),
                    TableRow(contents='SA\ue000Complex Context (South East Asian)\ue000\ue000South East Asian: Thai, Lao, Khmer\ue000\ue000provide a line break opportunity contingent on additional, language specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000\ue000Unassigned Private Use\ue000\ue000are all characters with (as yet) unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Description'),
                    Paragraph(contents='Lines are broken as result of either of two conditions. The first condition is the presence of an explicit line breaking character. The second condition results from a formatting algorithm having selected among available line breaking opportunities the particular one that results in the optimal layout of the text.'),
                    Paragraph(contents='The definition of optimal line break is outside the scope of this document. Different formatting algorithms may use different methods of determining an optimal break. For example, simple implementations just consider a line at a time, trying find a locally optimal line break. A common approach is to allow no compression and consider the longest line that fits. When compression is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts compression and expansion for different line break candidates.'),
                    Paragraph(contents='More complex algorithms may take into account the interaction of line breaking decisions for the whole paragraph. The well known text layout system, [TEX] implements a well known example of such a globally optimal strategy that may make complex tradeoffs to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of a globally optimizing line fitting algorithm, see [Knuth78].'),
                    Paragraph(contents='For the purpose of this document, what is important is not so much what defines the optimal amount of text on the line, but how line breaking opportunities are determined.'),
                    Paragraph(contents='Three principal styles of context analysis determine line-breaking opportunities.'),
                    Paragraph(contents='1. Western (spaces and hyphens are used to determine breaks)'),
                    Paragraph(contents='2. East Asian (lines can break anywhere, unless prohibited)'),
                    Paragraph(contents='3. South East Asian (require morphological analysis)'),
                    Paragraph(contents='The first is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities - however, it requires knowledge of the language and potentially user interaction or overrides.'),
                    Paragraph(contents='The second style of context is used with East Asian ideographic and syllabic scripts.'),
                    Paragraph(contents='NOTE: When Korean text is laid out justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the first style (relying on spaces) is commonly used instead.'),
                    Paragraph(contents='For multilingual text, styles one and two can be unified into a single set of specifications, based on the information provided in this report. Some Unicode characters have explicit line breaking properties assigned to them. These can be utilized with these two styles of context analysis for line break opportunities.'),
                    Paragraph(contents='NOTE: Interpretation of line breaking properties in bidirectional text takes place before applying rule L1 of the Unicode Bidirectional Algorithm. However, it is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word-breaks to syllable boundaries, the determination of which requires knowledge of the language comparable to that required by a hyphenation algorithm. Such and algorithm is beyond the scope of this report.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='• The line breaking behavior of characters with normative line breaking properties is described in the Unicode Standard. (See The Unicode Standard, Version 3.0, Chapters 6 and 13). Unless otherwise stated, the information in this technical report is not intended to supersede the normative specifications found in the Unicode Standard, but to organize the description in a different context and provide additional informative detail.'),
                    Paragraph(contents='• All line breaking properties are informative, except for the line breaking properties marked with a * in Table 1 Line Breaking Properties. The behavior for characters with normative line breaking properties must be the same for all conformant implementations.'),
                    Paragraph(contents='• Conformant implementations must not tailor characters with normative line breaking properties to any of the informative properties, but may tailor characters with informative line breaking properties to one of the normative line breaking properties.'),
                    Paragraph(contents='• Higher level protocols may further restrict, override, or extend the line breaking properties of certain characters in some contexts.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='The main emphasis in this section is to provide additional description of the line breaking behavior and to summarize the membership of character classes for each line breaking property.'),
                    Paragraph(contents='The classification by properties defined here is used as input into two algorithms defined below that implement workable default line breaking methods. In a few instances, the descriptions in this section provide additional detail about handling a given character at the end of a line, which goes beyond the simple determination of line breaks.'),
                    Heading(level=3, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the current version of the file LineBreak.txt [Data] in the Unicode Character Database [UCD]. This is a tab-delimited, two column plain text file, with code position, line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Paragraph(contents='As more scripts are added to the Unicode Standard, and more scripts become more widely implemented and used on computers, more line breaking classes may be added, or the assignment of linebreak class may be changed for some characters. Implementations should not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file.'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking properties are listed alphabetically. Each property is marked with an annotation in parenthesis for easy reference showing that'),
                    Paragraph(contents='(A) - the property allows a break opportunity after in specified contexts'),
                    Paragraph(contents='(XA) - the property prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='(B) - the property allows a break opportunity before in specified contexts'),
                    Paragraph(contents='(XB) - the property prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='(P) - the property allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='(XP) - the property prevents a break opportunity for a pair of same characters'),
                    Paragraph(contents='NOTE: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this document, where they indicate position of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI - Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Characters with East Asian Width property A (ambiguous width), and which would otherwise be AL in this classification. They take on the AL line break class only when their resolved width is N (narrow) and take the ID line break class, when their resolved width is W (wide). For more information on East Asian Width, and how to resolve it, see Unicode Standard Annex #11, East Asian Width [EAW]. In the absence of information needed to resolve their East Asian Width, they are treated as class AL.'),
                    Heading(level=3, contents='AL - Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Require other characters to provide break opportunities, otherwise no breaking between pairs of ordinary characters. However, this is tailorable. In some Far Eastern documents it may be desirable to allow breaking between pairs of ordinary characters.'),
                    Paragraph(contents='NOTE: use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='ALPHABETIC — all characters of General Categories Lu, Ll, Lt, Lm, Lo, except as they appear below. SYMBOLS — all characters of General Categories Sm, Sk, So, except as they appear below.'),
                    Heading(level=3, contents='BA - Break Opportunity After (A)'),
                    Paragraph(contents='Like SP, but are not part in determining indirect breaks.'),
                    Heading(level=3, contents='Breaking Spaces'),
                    Paragraph(contents='These characters with General Category Zs'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN QUAD'),
                    TableRow(contents='2003\ue000EM QUAD'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    Paragraph(contents='The preceding list of space characters all have a specific width, but behave otherwise as breaking spaces. See also the SP property.'),
                    Heading(level=3, contents='Tabs'),
                    Paragraph(contents='Except for the effect of the location of the tabstops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    TableRow(contents='0009\ue000TAB'),
                    Heading(level=3, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    Paragraph(contents='There are three types of hyphens: Explicit hyphens, conditional hyphens, and dictionary-inserted hyphens (as a result of a hyphenation process). There is no character code for the third kind of hyphen; therefore if it is desired to make the distinction, the fact that a hyphen is dictionary-inserted must be represented out of band, or by using a privately assigned control code instead of SHY.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN-DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Since, unlike spaces, they print, they are included in the measured part of the preceding line'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY is rendered invisibly and has no width, except at a line break. The rendering of the soft hyphen depends on the script. For the Latin script it is rendered as a hyphen, however, some languages require a change in spelling surrounding an optional hyphen, if it occurs at a line break. For example in Swedish the word “tuggummi” changes to “tugg-gummi” when hyphenated.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY it is customarily treated as overriding the action of the hyphenator for that word.'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    Paragraph(contents='The Tibetan thseg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself, like space.'),
                    Paragraph(contents='The Ethiopian word space is a visible word delimiter and is kept on the line before.'),
                    Paragraph(contents='The Ogham space mark is rendered visibly between words but should be elided at the end of a line.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='Hyphenation point is primarily used to visibly indicate syllabification of words. Syllable breaks are potential line breaking opportunities in the middle of words. The hyphenation point It is mainly used in dictionaries and similar works. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual break opportunity, the vertical bar is rendered as a hyphen.'),
                    Heading(level=3, contents='BB - Break opportunities before characters (B)'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent would move to the next line, and the preceding line ended with a hyphen.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Therefore, the only sensible way to break them is to keep them with the syllable; that is to break before them.'),
                    Paragraph(contents='NOTE: It is hard to find actual examples in most dictionaries, since the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='The Mongolian Todo soft hyphen indicates an optional line break opportunity with hyphen, but unlike the soft-hyphen it stays with the following line.'),
                    Heading(level=3, contents='B2 - Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The em dash character is used to set off parenthetical text, normally without spaces, however, this is language dependent, for example, in Swedish, spaces are used. Line breaks can occur before and after an em dash, but not between two em dashes. Pairs of em dashes are sometimes used instead of a single quotation dash. For that reason, the line should not be broken between em dashes.'),
                    Heading(level=3, contents='BK - Mandatory Break (A) - (normative)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters.'),
                    TableRow(contents='000C\ue000FORM FEED'),
                    Paragraph(contents='Form Feed separates pages. The text on the new page starts at the beginning of the line. No paragraph formatting is applied.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. No paragraph formatting is applied.'),
                    Paragraph(contents='This is similar to HTML <BR>'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. Paragraph formatting is applied.'),
                    Paragraph(contents='"NEW LINE FUNCTION (NLF)"'),
                    Paragraph(contents='New line functions provide additional explicit breaks. They are not individual characters, but are expressed as sequences of control characters NEL, LF, and CR. What particular sequence(s) form a NLF depends on the implementation and other circumstances as described in Unicode Technical Report 13, Unicode Newline Guidelines.'),
                    Paragraph(contents='If a character sequence for a new line function contains more than one character, it is kept together. The default behavior is to break after LF or CR, but not between CR and LF. Two additional line break classes have been added for convenience in this operation.'),
                    Heading(level=3, contents='CB - Contingent Break Opportunity (B/A) - (normative)'),
                    Heading(level=3, contents='Contingent Break Opportunity Before and After'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='By default there is a break opportunity both before and after the object. Object-specific line break behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the break opportunities.'),
                    Heading(level=3, contents='CL - Closing Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation must be kept with the preceding character'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Paragraph(contents='plus any characters of General Category Pe in the Unicode Character Database.'),
                    Heading(level=3, contents='CM - Attached Characters and Combining Marks (XB) - (normative)'),
                    Heading(level=3, contents='Combining characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purposes of line breaking. The line-breaking behavior of the sequence is that of the base character. If U+0020 SPACE is used as a base character, it is treated as AL instead of SP.'),
                    Paragraph(contents='All characters with General Category Mc, Me, and Mn.'),
                    Heading(level=3, contents='Conjoining Jamos (non-initial)'),
                    TableRow(contents='1160..11F9\ue000Conjoining Jamos'),
                    Paragraph(contents='A sequence of conjoining Jamos is used to make up a Hangul syllable. Breaks are only allowed around the entire Hangul syllable, and then the line break properties are the same for precomposed Hangul syllables as for conjoined sequence of Jamos.'),
                    Paragraph(contents='NOTE: for the purpose of determining line break opportunities, non-initial conjoining Jamos behave like combining marks, while the initial combining Jamos have the same property as Hangul Syllables.'),
                    Heading(level=3, contents='Control and formatting characters'),
                    Paragraph(contents='Most controls and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='NOTE: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by assigning them the AL or ID class instead.'),
                    Paragraph(contents='All characters of General Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='CR - Carriage Return (A) - (normative)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='Do not break if followed by a LF, mandatory break after otherwise'),
                    Heading(level=3, contents='EX - Exclamation / Interrogation (XB)'),
                    Paragraph(contents='These behave like closing characters, except in relation to postfix and ‘non-starter’ characters'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='FE56..FE57\ue000SMALL QUESTION MARK..SMALL EXCLAMATION MARK'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL - Non-breaking ("Glue") (XB/XA) - (normative)'),
                    Paragraph(contents='The action of these characters is to glue together both left and right neighbor character such that they are kept on the same line. If they follow a space character, they still allow a break.'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='Since this character is not visible, it is the preferred choice for keeping characters together that would otherwise be split across the line at a direct break.'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words should be visually separated but kept on the same line, as in the case of a title and a name "Dr.<NBSP>Joseph Becker". NARROW NO-BREAK SPACE is used in Mongolian.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words must be hyphenated but may not be broken at the hyphen.'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    Paragraph(contents='This looks exactly like a Tibetan tsheg, but can be used to prevent a break. It inhibits breaking on either side, like no-break space.'),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This character has not been encoded in Unicode yet, but is an example of a character that should be given the GL property.'),
                    Heading(level=3, contents='HY - Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from the use as minus sign (or indicator of numerical range). If used as hyphen, it acts like HYPHEN.'),
                    Paragraph(contents='NOTE: In some practice, runs of HYPHEN-MINUS are used to stand in for longer dashes or horizontal rules. If it is desired to treat them like the characters or layout elements they stand for, and actual character code conversion is not performed, line breaking will need to support these special cases explicitly.'),
                    Heading(level=3, contents='ID - Ideographic (B/A)'),
                    Paragraph(contents='NOTE: The name ideographic for this line breaking class was chosen pars pro toto. The actual set of characters in this class includes characters other than Han ideographs.'),
                    Paragraph(contents='Do not require other characters to provide break opportunities, can ordinarily break before and after and between pairs.'),
                    TableRow(contents='1100..115F\ue000Initial Conjoining Jamos'),
                    TableRow(contents='2E80..2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    TableRow(contents='HIRAGANA (except small characters)'),
                    TableRow(contents='KATAKANA (except small characters)'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    TableRow(contents='3400..4DBF\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='4E00..9FAF\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='F900..FAFF\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='AC00..D7AF\ue000HANGUL SYLLABLES'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490..A4CF\ue000YI RADICALS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF10..FF19\ue000WIDE DIGITS'),
                    TableRow(contents='20000..2A6D6\ue000CJK UNIFIED IDEOGRAPHS EXTENSION B'),
                    TableRow(contents='2F800..2FA1D\ue000CJK COMPATIBILITY IDEOGRAPHS SUPPLEMENT'),
                    Paragraph(contents='plus all of the FULLWIDTH LATIN letters and all of the 3000-33FF blocks not covered elsewhere'),
                    Paragraph(contents='NOTE: use ZWNBSP as a manual override to prevent break opportunities around characters of class ID.'),
                    Heading(level=3, contents='IN - Inseparable characters (XP)'),
                    Heading(level=3, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used in consecutive sequence. They therefore prevent line breaks absolutely in a series of two character of this class.'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS - Numeric Separator (Infix) (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from following numeric characters, unless space character intervenes. Since they are otherwise sentence ending punctuation, they prevent breaks before.'),
                    Paragraph(contents='There is no break in “100.00” or “10,000”, nor in “12:59”'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    Heading(level=3, contents='LF - Line Feed (A) - (normative)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character.'),
                    Heading(level=3, contents='NS - Non-starters (XB)'),
                    Paragraph(contents='Some characters cannot start a line, but unlike CL they may allow a break in some context when they are following one or more space characters.'),
                    Paragraph(contents='All characters with General Category Lm (Letter, Modifier) and East Asian Width type W or H, and all characters with General Category Sk (Symbol, Modifier) and East Asian width type W plus the following characters:'),
                    TableRow(contents='0E5A..0E5B\ue000THAI CHARACTER ANGKHANKHU..THAI CHARACTER KHOMUT'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D6..17DA\ue000KHMER SIGN CAMNUC PII KUUH..KHMER SIGN KOOMUUT'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK to HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                    TableRow(contents='30FD\ue000KATAKANA ITERATION MARK'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK - HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='Plus all Hiragana, Katakana, and Halfwidth Katakana “small” characters'),
                    Paragraph(contents='NOTE: Optionally, the NS restriction may be relaxed and characters treated like ID, to achieve a more permissive style of line breaking.'),
                    Heading(level=3, contents='NU - Numeric (XP)'),
                    Paragraph(contents='Behave like ordinary characters in the context of ordinary characters, activate the prefix and postfix behavior of prefix and postfix characters'),
                    Paragraph(contents='DECIMAL DIGITS (All characters of General Category Nd, except FULL WIDTH)'),
                    Heading(level=3, contents='OP - Opening Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation must be kept with the following character'),
                    Paragraph(contents='Characters of General Category Ps in the Unicode Character Database.'),
                    Heading(level=3, contents='PO - Postfix (Numeric) (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene.'),
                    Paragraph(contents='For example, there is no break in “(12.00) %”'),
                    Paragraph(contents='The list of post-fix characters is:'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='2126\ue000OHM SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Heading(level=3, contents='PR - Prefix (Numeric) (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, EVEN if space character intervenes.'),
                    Paragraph(contents='There is no break in “$ (100.00)”'),
                    Paragraph(contents='All currency symbols (General Category Sc) except as listed explicitly in PO and the following:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Heading(level=3, contents='QU - Ambiguous Quotation (XB/XA)'),
                    Paragraph(contents='Some paired characters can be either opening or closing depending on usage. The default is to treat them as both opening and closing.'),
                    Paragraph(contents='NOTE: If language information is available, it can be used to determine which character is used as opening and which as closing quote. (See the information in the Unicode Standard, Version 3.0, Chapter 6. [U3.0])'),
                    Paragraph(contents='Characters of General Category Pf or Pi in the Unicode Character Database as well as:'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    Heading(level=3, contents='SA - Complex-context Dependent Characters (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to e.g. a hyphenation algorithm. For the characters that have this property, no line breaks will be found otherwise, therefore complex context analysis is mandatory.'),
                    Paragraph(contents='NOTE: These characters can be mapped into their equivalent line break classes as result of dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='If dictionary lookup is not available they should be treated as XX.'),
                    Paragraph(contents='All characters of General Category Lo or Lm in these ranges:'),
                    TableRow(contents='0E00..0EFF\ue000THAI / LAO'),
                    TableRow(contents='1000..109F\ue000MYANMAR'),
                    TableRow(contents='1780..17FF\ue000KHMER'),
                    Heading(level=3, contents='SG - Surrogates (XP) - (normative)'),
                    Paragraph(contents='All characters with General Category Cs. There is no break between a high surrogate and a low surrogate.'),
                    Paragraph(contents='NOTE: The line breaking class for a pair of surrogates depends on the character. A useful default is to treat characters in the range 0x00010000 to 0x0001FFFD as AL and characters in the range 0x00020000 to 0x0002FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters, many of which have yet to be assigned.'),
                    Heading(level=3, contents='SP - Space (A) - (normative)'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='The space characters are explicit break opportunities, but spaces at the end of a line are not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, since the last character measured for fit is BEFORE the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    Paragraph(contents='NOTE: SPACE, but none of the other breaking spaces, is used in determining an indirect break.'),
                    Heading(level=3, contents='SY - Symbols Allowing Break After (A)'),
                    Paragraph(contents='URLs are common enough now in regular plain text, that they must be taken into account when assigning general-purpose line breaking properties. The SY line break property is intended to provide a break after, but not in front of digits so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='Slash (SOLIDUS) is allowed as an additional, limited break opportunity to improve layout of web addresses'),
                    Paragraph(contents='NOTE: Normally, symbols are treated as AL. If it is desired to allow other breaks, more symbols can be added to this line breaking class, or classes BA, BB, B2 by tailoring, for example “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this document.'),
                    Heading(level=3, contents='XX - Unknown (XP)'),
                    Paragraph(contents='Unassigned code positions, private use characters and characters for which reliable line breaking information is not available are assigned this default line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or ZWNBSP around characters of class XX to force or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior, e.g. by assigning characters the property ID or another class, if that is more likely to give the correct default behavior for their users, or use other means to determine the correct behavior. For example one implementation might treat any private use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private use characters. The details of such use of private use characters are outside the scope of this standard.'),
                    Paragraph(contents='All characters with General Category Co and all codepoints with General Category Cn.'),
                    Heading(level=3, contents='ZW - Zero Width Space (A) - (normative)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character does not have width. It is used to enable additional (invisible) break opportunities wherever SPACE cannot be used.'),
                    Heading(level=3, contents='5.2 Additional Details on Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow strict standards that guide their use of characters to indicate features of the terms listed. Some of these conventions mark places that can also serve as line breaking opportunities and therefore interact with line breaking and are described here. Where appropriate, these characters have been inserted in the list of characters for the corresponding line breaking property above.'),
                    Paragraph(contents='However, implementing the full conventions in dictionaries requires special support. Looking up the noun “syllable” in eight dictionaries yields eight different conventions, in one dictionary a natural hyphen in a word becomes a tilde dash if the word is split.'),
                    Paragraph(contents='Dictionary of the English Language, Samuel Johnson, 1843 SY´LLABLE where ´ is a U+02B9 (and a large one at that) and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lâ'bl where · is a slightly above middle dot indicating the vowel of the stressed syllable (similar to Johnson's acute). The letter â is really U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIleb(e)l where ' is U+02C8, I is U+026A, e is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´e-bl where the stressed syllable is followed by ´ U+02B9, e is U+0259, - is a hyphen when splitting a word like abate´- ment the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention if splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIlebl where I is U+026A U+0332, e is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIlebe°l where I is U+026A U+0332, and means the same as the BBC. The e is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary. syl·la·ble (sílleb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent (rather than being followed by an accent). The letter e is a schwa in the actual example and ' is apostrophe."),
                    Paragraph(contents="Webster's 3rd New International Dictionary. syl·la·ble /'silebel/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The e's are schwas as usual. Webster splits words at the end of a line with a normal hyphen. When a hyphenated word is split at the hyphen this is indicated by a double hyphen which looks like a light version of the German Fraktur hyphen (short equals sign with a slight slope up to the right)."),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='The Unicode Standard, Version 3.0, describes a particular method for boundary detection in Chapter 5. It is based on a set of hierarchical rules and character classifications. That method would be well suited for implementation of some of the advanced heuristics.'),
                    Paragraph(contents='A slightly simplified implementation of that can be devised that uses a two dimensional table to resolve break opportunities between pairs or characters. It is described in the following section.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules which take line breaking classes as input.'),
                    Heading(level=3, contents='Line breaking rules'),
                    Paragraph(contents='The line breaking rules are stated in terms of regular expressions over the line breaking classes defined above and three special symbols indicating the type of line break opportunity.'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit ”otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent, i.e. they have the same effect.'),
                    Paragraph(contents='The distinction between direct and indirect break is handled by explicitly considering the effect of SP in rule LB12. Because rules are applied in order, rule LB12 implies that a prohibited break in rules 13-19 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ’H’ stands for an ideographs, ’h’ for small kana, ’9’ for digits.'),
                    Heading(level=4, contents='Resolve line break classes:'),
                    Rule(contents='LB 1 Assign a line break category to each character of the input. Resolve AI, CB, SA, SG, XX into other line break classes depending on criteria outside this algorithm.'),
                    Heading(level=4, contents='Start and end of text:'),
                    Rule(contents='LB 2a Never break at the start of text'),
                    Formula(contents='× sot'),
                    Rule(contents='LB 2b Always break at the end of text'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases. Their effect is to have at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text to run over the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Rule(contents='LB 3a Always break after hard line breaks (but never between CR and LF).'),
                    Formula(contents='BK !'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='CR × LF'),
                    Rule(contents='LB 3b Don’t break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB 4 Don’t break before spaces or zero-width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB 5 Break after zero-width space.'),
                    Formula(contents='ZW ÷'),
                    Heading(level=4, contents='Combining Marks:'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Virama are treated as CM so they work correctly. Non-initial Jamo are treated as CM, so each syllable inherits the linebreak class of the initial Jamo and no breaks can occur in the middle of a syllable.'),
                    Rule(contents='LB 6 Don’t break graphemes (before combining marks, around virama or on sequences of conjoining Jamos.'),
                    Formula(contents='Treat X CM* as if it were X'),
                    Formula(contents='(See the Unicode Standard [U3.0] for other rules regarding graphemes.)'),
                    Paragraph(contents='As stated in section 7.9 of The Unicode Standard, Version 3.0 [U3.0], combining characters are shown in isolation by applying them to either U+0020 SPACE (SP) or U+00A0 NO BREAK SPACE. The visual appearance is the same, but the line breaking result is different. Correspondingly, if there is no base, or if the base character is SP, CM* or SP CM* behave like ID.'),
                    Rule(contents='LB 7 In all of the following rules, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP CM* in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and so come before rule 12.'),
                    Rule(contents='LB 8 Don’t break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB 9 Don’t break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB 10 Don’t break within ‘”[’, , even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Rule(contents='LB 11 Don’t break within ‘]h’, even with intervening spaces.'),
                    Formula(contents='CL SP* × NS'),
                    Rule(contents='LB 11a Don’t break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 × B2'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB 12 Break after spaces'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB 13 Don’t break before or after ZWNBSP'),
                    Formula(contents='× GL'),
                    Formula(contents='GL ×'),
                    Rule(contents='LB 14 Don’t break before or after ‘”’'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB 15 Don’t break before hyphen-minus, other hyphens, fixed-width spaces, small kana and other non- starters, or after acute accents:'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents='LB 15b Break after hyphen-minus, and before acute accents:'),
                    Formula(contents='HY ÷'),
                    Formula(contents='÷ BB'),
                    Rule(contents='LB 16 Don’t break between two ellipses, or between letters or numbers and ellipsis:'),
                    Formula(contents='AL × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ’9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents="Don't break alphanumerics."),
                    Rule(contents='LB 17 Don’t break within ‘a9’, ‘3a’, or ‘H%’'),
                    Formula(contents='ID × PO'),
                    Formula(contents='AL × NU'),
                    Formula(contents='NU × AL'),
                    Paragraph(contents='Numbers are of the form PR ? ( OP | HY ) ? NU (NU | IS) * CL ? PO ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='This is approximated with the following rules. (Some cases already handled above, like ‘9,’, ‘[9’.)'),
                    Rule(contents='LB 18 Don’t break between the following pairs of classes.'),
                    Formula(contents='CL × PO'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='NU × PO'),
                    Formula(contents='PR × AL'),
                    Formula(contents='PR × HY'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-‘, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Finally, join alphabetic letters and break everything else.'),
                    Rule(contents='LB 19 Don’t break between alphabetics (“at”)'),
                    Formula(contents='AL × AL'),
                    Rule(contents='LB 20 Break everywhere else'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair-Table Based Implementation'),
                    Paragraph(contents='A two dimensional table can be used to resolve break opportunities between pairs of characters. The rows of the table are labeled by the possible values of the line breaking property of the leading character in the pair; the columns are labeled by the line breaking property for the following character of the pair. Each intersection is labeled with the resulting line breaking opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of such a table-based definition. However, it uses line breaking classes whose membership is not solely determined by line breaking property (as in this report), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classed defined above.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes of which only 14 appear to be unique. A minimal table representation is unique, except for trivial reordering of rows and columns.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Rules LB 6, and LB 8 - LB11 require extended context for handling combining marks and spaces. This extended context must be built into the code that interprets the pair table.'),
                    Paragraph(contents='By broadening the definition of pair from B A to B SP* A, where A and B are characters and SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line breaking opportunity (i.e. direct and indirect breaks). Rules equivalent to the ones given in section 6 can be formulated without explicit use of SP, by instead using % to express indirect breaks. These rules can then be simplified to involve only pairs of classes, e.g. only constructions of the form'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B ^ A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can then be automatically translated into a pair table, as in the example below. Line break analysis then proceeds by pair table lookup.'),
                    Heading(level=3, contents='7.3 Example Table'),
                    Paragraph(contents='The following example table implements the line breaking behavior described in this Technical Report, within the limitation that only context of the form B SP* A is considered. BK and SP classes are handled explicitly in the outer loop as given in the code sample below. B CM* can be handled in the table, or explicitly in the driving loop, as explained in section 7.5. Using the table entries is equivalent to making the simplifying assumption that combining marks are only applied to AL. (Such an assumption does not hold when conjoining Jamos are used).'),
                    TableRow(contents='‘After’ class'),
                    TableRow(contents='OP\ue000CL\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000%'),
                    TableRow(contents='CL\ue000\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000\ue000%\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='QU\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000%'),
                    TableRow(contents='NS\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='EX\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='SY\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='IS\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='PR\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000%\ue000%\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='PO\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='NU\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000%\ue000%\ue000%\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='AL\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000%\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='ID\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000%\ue000\ue000\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='IN\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='HY\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='BA\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='BB\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000%'),
                    TableRow(contents='B2\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000^\ue000^\ue000%'),
                    TableRow(contents='ZW\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='CM\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000%\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    Paragraph(contents='• ^ denotes a prohibited break: Never break here, even if one or more spaces intervene.'),
                    Paragraph(contents='• As a reminder, A ^ B is equivalent to B SP* × A.'),
                    Paragraph(contents='• % denotes an indirect break opportunity: Don’t break here, unless one of more spaces intervene.'),
                    Paragraph(contents='• As a reminder, A % B is equivalent to B × A and B SP+ ÷ A.'),
                    Paragraph(contents='• _ an empty cell denotes a direct break opportunity (÷ above). These are blank to make them easier to distinguish in the table.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two functions demonstrate how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the following line break classes need to be added: CR, LF, CB, SG, XX. They have been omitted here for brevity.'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    int findComplexBreak(int *pcls, int *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='         if (!cch)'),
                    CodeLine(contents='               return 0;'),
                    CodeLine(contents='         int cls = pcls[0];'),
                    CodeLine(contents='         for(int ich = 0; ich < cch; ich++) {'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                  // .. do complex break analysis here'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                  if (pcls[ich] != SA)'),
                    CodeLine(contents='                         break;'),
                    CodeLine(contents='                  }'),
                    CodeLine(contents='         return ich;'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    CodeLine(contents='\xa0   enum break_action { '),
                    CodeLine(contents='       DBK = 0, // direct break     (blank in table)'),
                    CodeLine(contents='       IBK,     // indirect break   (% in table)'),
                    CodeLine(contents='       PBK };   // prohibited break (^ in table)'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line break classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable)'),
                    CodeLine(contents='    int findLineBrk1(int *pcls, int *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='         if (!cch) '),
                    CodeLine(contents='              return O;'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='         int  cls = pcls[0];'),
                    CodeLine(contents=''),
                    CodeLine(contents='         // loop over all pairs in the string'),
                    CodeLine(contents='         for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              // handle spaces'),
                    CodeLine(contents='              if (pcls[ich] == SP) {'),
                    CodeLine(contents='                   pbrk[ich-1] = PBK;'),
                    CodeLine(contents='                   continue;'),
                    CodeLine(contents='              }'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              // handle complex scripts'),
                    CodeLine(contents='              if (pcls[ich] == SA) {'),
                    CodeLine(contents='                    ich += findComplexBreak(&pcls[ich-1], &pbrk[ich-1], cch - (ich-1));'),
                    CodeLine(contents='                    if (ich < cch)'),
                    CodeLine(contents='                         cls = pcls[ich];'),
                    CodeLine(contents='                    continue;'),
                    CodeLine(contents='              }'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              // lookup pair table information'),
                    CodeLine(contents='              int brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              if (brk == IBK) {'),
                    CodeLine(contents='                    pbrk[ich-1] = ((pcls[ich - 1] == SP) ? IBK : PBK);'),
                    CodeLine(contents='              } else {'),
                    CodeLine(contents='                   pbrk[ich-1] = brk;'),
                    CodeLine(contents='              }'),
                    CodeLine(contents='              cls = pcls[ich];'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        // always break at the end'),
                    CodeLine(contents='        pbrk[ich-1] = DBK;'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='   }'),
                    Paragraph(contents='The function returns all the break opportunities in the array pointed to by pbrk, using the values in the table. The code assumes that the predefined value SS is used for break opportunities marked by an % entry in the table and the value XX for an entry marked by an ^ above.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='If one makes the simplifying assumption that combining marks are only applied to AL, or that applying a combining mark turns the combination into AL, then CM can be handled in the table as shown. (Such an assumption does not hold when conjoining Jamos are used).'),
                    Paragraph(contents='Therefore it is preferable to handle CM outside of the pair table in the driver code. Adding a simple statement in the loop'),
                    CodeLine(contents='    // handle combining marks'),
                    CodeLine(contents='    if (pcls[ich] == CM){'),
                    CodeLine(contents='       if(pcls[ich-1] == SP){'),
                    CodeLine(contents='          cls = ID;'),
                    CodeLine(contents='          if (ich > 1)'),
                    CodeLine(contents='\t     pbrk[ich-2] = brkPairs[pcls[ich-2]][ID] == DBK ? DBK : PBK;'),
                    CodeLine(contents='       }'),
                    CodeLine(contents='       pbrk[ich-1] = PBK;'),
                    CodeLine(contents='       continue;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='would have the effect of letting the CM take on the class of the preceding non-CM characters. It also takes care of rule LB7, treating a combining mark applied to a SP as if it was ID. This also requires a statement in the setup part before the loop to cover the case of a missing base character at the beginning of the line:'),
                    CodeLine(contents='    // handle missing base character'),
                    CodeLine(contents='    if (cls == CM)'),
                    CodeLine(contents='            cls = ID;'),
                    Heading(level=3, contents='7.6 Customization'),
                    Paragraph(contents='A real world line breaking algorithm must be tailorable to some degree. There are three principal ways of tailoring a pair-table based algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters. This is useful for cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes. This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to overriding some of the rules in section 6.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions is equivalent to the preceding, but instead of changing the values for the pair intersection directly in the table, they can be labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be done at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself, which places no limits to possible changes.'),
                    Heading(level=3, contents='7.7 Examples of Customization'),
                    Paragraph(contents='Example 1. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. The sample code sketches a different approach where the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks inside a run of spaces. This cannot be done in the pair-table, but requires a change in the way the driver loop handles spaces.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean uses either implicit breaking around characters (type 2 as defined above in section 3 Description) or uses spaces (type 1). Space based layout is common in informal documents with ragged margins, such as magazines, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersection of ID/ID, AL/ID and ID/AL are affected. For alphabetic style line breaking, breaks for these four cases require space, for ideographic style line breaking, these four cases do not require spaces. Therefore, he defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given (piece of) text.'),
                    Paragraph(contents='Example 4. Sometimes allowing alphabetic characters and digit strings to break anywhere is required in Far Eastern context. According to reference [Suign98] this can again be done in the same way, this time affecting the intersections of NU/NU, NU/AL, AL/AL, and AL/NU.'),
                    Paragraph(contents='Example 5. Some users prefer to force Kana syllables to be kept together, i.e. the syllable kyu, spelled with the two kanas KI and "small yu” would be kept together even though KI and yu are normally atomic. This customization can be handled via the first method, by changing the classification of the Kana small characters from ID to NS as needed.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real world implementation of a pair-table based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. This implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=2, contents='References'),
                    TableRow(contents='[Cedar97]\ue000Cy Cedar, David Veintimilla, Michel Suignard and Asmus Freytag, Report from the Trenches: Microsoft Publisher goes Unicode, Proceedings of the Eleventh International Unicode Conference, San Jose, CA 1997'),
                    TableRow(contents='[Data]\ue000The current version of the line break property data file is http://www.unicode.org/Public/3.1-Update/LineBreak.txt The latest version of the data file is http://www.unicode.org/Public/UNIDATA/LineBreak.txt'),
                    TableRow(contents='[EAW]\ue000Unicode Standard Annex #11, East Asian Width. http://www.unicode.org/unicode/reports/tr11 For a definition of East Asian Width'),
                    TableRow(contents='[FAQ]\ue000Unicode Frequently Asked Questions http://www.unicode.org/unicode/faq/ For answers to common questions on technical issues.'),
                    TableRow(contents='[Glossary]\ue000Unicode Glossary http://www.unicode.org/glossary/ For explanations of terminology used in this and other documents.'),
                    TableRow(contents='[JIS]\ue000JIS X 4051-1995. Line Composition Rules for Japanese Documents. ( 『日本語文晝の行組版方法』) Japanese Standards Association. 1995.'),
                    TableRow(contents='[Knuth78]\ue000Donald E. Knuth and Michael F. Plass, Breaking Lines into Paragraphs, republished in Digital Typography, CSLI 78, (Stanford, California: CLSI Publications1997)'),
                    TableRow(contents='[Reports]\ue000Unicode Technical Reports http://www.unicode.org/unicode/reports/ For information on the status and development process for technical reports, and for a list of technical reports.'),
                    TableRow(contents='[Suign98]\ue000Michel Suignard, Worldwide Typography and How to Apply JIS X 4051-1995 to Unicode, Proceedings of the Twelfth International Unicode/ISO 10646 Conference, Tokyo, Japan, 1998'),
                    TableRow(contents='[TeX]\ue000Donald E. Knuth, TEX, the Program, Volume B of Computers & Typesetting, (Reading, Massachusetts: Addison-Wesley 1986)'),
                    TableRow(contents='[U3.0]\ue000The Unicode Standard, Version 3.0, (Reading, Massachusetts: Addison-Wesley Developers Press 2000) or online as http://www.unicode.org/unicode/uni2book/u2.html'),
                    TableRow(contents='[U3.1]\ue000Unicode Standard Annex #27: Unicode 3.1 http://www.unicode.org/unicode/reports/tr27/'),
                    TableRow(contents='[UCD]\ue000Unicode Character Database. http://www.unicode.org/Public/UNIDATA/UnicodeCharacterDatabase.html For and overview of the Unicode Character Database and a list of its associated files'),
                    TableRow(contents='[Versions]\ue000Versions of the Unicode Standard http://www.unicode.org/unicode/standard/versions/ For details on the precise contents of each version of the Unicode Standard, and how to cite them.'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples.'),
                    Heading(level=2, contents='Modifications'),
                    Paragraph(contents='Change from Revision 9:'),
                    Paragraph(contents='• Change header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Paragraph(contents='Change from Revision 8:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX'),
                    Paragraph(contents='• LB 7: Restored the rule, and fixed the note so it matches the rule and section 7.9 of [U3.0].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair-table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair-table entry PR % ID'),
                    Paragraph(contents='• Reworked section 7.5'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull)'),
                    Paragraph(contents='Change from Revision 7:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX since the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB 6: Clarified the description of LB6 to clarify how it affects conjoining Jamo .'),
                    Paragraph(contents='• LB 7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB 17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded sections 7.6 and 7.7 to clarify the customization process.'),
                    Paragraph(contents='Change from Revision 6:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Paragraph(contents='Change from Revision 5:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='Copyright © 1998-2001 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report.')],
 Version(3, 2, 0): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Line Breaking Properties'),
                    TableRow(contents='Version\ue0003.2.0'),
                    TableRow(contents='Authors\ue000Asmus Freytag (asmus@unicode.org)'),
                    TableRow(contents='Date\ue0002002-03-15'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/unicode/reports/tr14/tr14-12'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/unicode/reports/tr14/tr14-10'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/unicode/reports/tr14'),
                    TableRow(contents='Tracking Number\ue00012'),
                    Heading(level=3, contents='Summary'),
                    Paragraph(contents='This report presents the specification of line breaking properties for Unicode characters.'),
                    Heading(level=3, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved by the Unicode Technical Committee as a Unicode Standard Annex. It is a stable document and may be used as reference material or cited as a normative reference from another document.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published as a separate document. Note that conformance to a version of the Unicode Standard includes conformance to its Unicode Standard Annexes. The version number of a UAX document corresponds to the version number of the Unicode Standard at the last point that the UAX document was updated.'),
                    Paragraph(contents='A list of current Unicode Technical Reports is found on http://www.unicode.org/unicode/reports/. For more information about versions of the Unicode Standard, see http://www.unicode.org/unicode/standard/versions/.'),
                    Paragraph(contents='The References provide related information that is useful in understanding this document. Please mail corrigenda and other comments to the author(s).'),
                    Heading(level=3, contents='Contents'),
                    Paragraph(contents='• 1 Overview and Scope'),
                    Paragraph(contents='• 2 Definitions'),
                    Paragraph(contents='• 3 Description'),
                    Paragraph(contents='• 4 Conformance'),
                    Paragraph(contents='• 5 Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Additional Details on Dictionary Usage'),
                    Paragraph(contents='• 6 Line Breaking Algorithm'),
                    Paragraph(contents='• 7 Pair-table Based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Customization'),
                    Paragraph(contents='7.7 Examples of Customization'),
                    Paragraph(contents='• References'),
                    Paragraph(contents='• Acknowledgments'),
                    Paragraph(contents='• Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='The Unicode Standard [U3.0] presents a summary of basic line-breaking behavior, but does not give a complete specification. This technical report provides the needed information in a way that reflects best practices. Normative line-breaking properties are assigned to those characters whose line breaking behavior must be identical across all implementations. For all other classes of characters informative line-breaking properties are provided.'),
                    Paragraph(contents='Following the formal definitions and summary of line breaking properties, there are three main sections:'),
                    Paragraph(contents='1. Section 5 contains a textual description of the line breaking behavior of the characters of the Unicode Standard and their grouping by line breaking property. These descriptions do not take account of the order of precedence.'),
                    Paragraph(contents='2. Section 6 provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='3. Section 7 provides the detailed description of an efficient pair table based implementation of the algorithm.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard. The notation defined in this technical report differs somewhat from the notation defined in the Unicode Standard. All notation used here without an explicit definition shall be as defined in the Unicode Standard.'),
                    Paragraph(contents='Line fitting - the process of determining the how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='Line Break - the position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='Line Break Opportunity - a place where a line is allowed to end. Whether a given position in the text is a valid line break opportunity depends on the line breaking rules in force, as well as on context.'),
                    Paragraph(contents='Line Breaking - the process of selecting that part of a text that can be displayed on a line. In other words, selecting one among several line breaking opportunities such that the resulting line is optimal (unless the user requested an explicit line break).'),
                    Paragraph(contents='Line Breaking Property - A character property with mutually exclusive values, as set out in Table 1 and arranged in approximate order of precedence. Line breaking properties are used to determine the type of break.'),
                    Paragraph(contents="Mandatory Break - a line must break following a character that has the mandatory break property. Also known as a forced break. This is indicated in the rules as B !, where B is the character with the mandatory break property. (In the notation of the Unicode Standard, Version 3.0 [U3.0], this would be: B ×, although the standard doesn't specify whether or not a break is forced or just an opportunity.)"),
                    Paragraph(contents='Direct Break - a line breaking opportunity exists between two adjacent characters of the given line breaking properties. This indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity also exists after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='Indirect Break - a line breaking opportunity exists between two characters of the given line breaking properties only if they are separated by one or more spaces. In this case, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent. This is indicated in the pair table below as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though no space characters are not shown in the pair table, an indirect break can only occur if one or more spaces follow B. In the notation of the Unicode Standard, this would be represented as two rules: B × A and B SP+ ÷ A.'),
                    Paragraph(contents='Prohibited Break - no line breaking opportunity exists between two characters of the given line breaking properties, even if they are separated by one or more space characters. This is indicated in the pair table below as B ^ A, where B is the character class of the character before and A is the character class of the character after the break and the optional space characters are not shown. In the notation of the Unicode Standard, this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='Hyphenation - Hyphenation uses language specific rules to provide additional line breaking opportunities within a word. Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this document, it is assumed that hyphenation is equivalent to insertion of soft hyphen characters. All other aspects of hyphenation are outside the scope of this document.'),
                    Formula(contents='Table 1 Line Breaking Properties (* = normative)'),
                    TableRow(contents='Value\ue000Line Breaking Property\ue000\ue000Examples\ue000\ue000Characters with this property'),
                    TableRow(contents='Normative Properties'),
                    TableRow(contents='BK *\ue000Mandatory Break\ue000\ue000NL, PS\ue000\ue000cause a line break (after)'),
                    TableRow(contents='CR *\ue000Carriage Return\ue000\ue000CR\ue000\ue000cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF *\ue000Line Feed\ue000\ue000LF\ue000\ue000cause a line break (after)'),
                    TableRow(contents='CM *\ue000Attached Characters and Combining Marks\ue000\ue000Combining Marks, Conjoining Jamo (non-initial)\ue000\ue000prohibit a line break between the character and the preceding character'),
                    TableRow(contents='SG *\ue000Surrogates\ue000\ue000Surrogates\ue000\ue000prohibit a break between a high and a following low surrogate'),
                    TableRow(contents='ZW *\ue000Zero Width Space\ue000\ue000ZWSP\ue000\ue000optional break'),
                    TableRow(contents='GL *\ue000Non-breaking (“Glue”)\ue000\ue000NBSP, ZWNBSP, WJ,CGJ\ue000\ue000prohibit line breaks before or after.'),
                    TableRow(contents='CB *\ue000Contingent Break Opportunity\ue000\ue000Inline Objects\ue000\ue000provide a line break opportunity contingent on additional information.'),
                    TableRow(contents='SP *\ue000Space\ue000\ue000Space\ue000\ue000generally provide a line break opportunity after the character, enables indirect breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='BA\ue000Break Opportunity After\ue000\ue000Spaces, Hyphens\ue000\ue000generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Opportunity Before\ue000\ue000Punctuation used in dictionaries\ue000\ue000generally provide a line break opportunity before the character.'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000\ue000EM Dash\ue000\ue000provide a line break opportunity before and after the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000\ue000Hyphen-Minus\ue000\ue000provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='IN\ue000Inseparable\ue000\ue000Leaders\ue000\ue000allow only indirect line breaks between pairs.'),
                    TableRow(contents='NS\ue000Non Starter\ue000\ue000small kana\ue000\ue000allow only indirect line break before'),
                    TableRow(contents='OP\ue000Opening Punctuation\ue000\ue000“(“, “[“, “{“, etc.\ue000\ue000prohibit a line break after'),
                    TableRow(contents='CL\ue000Closing Punctuation\ue000\ue000“)”, “]”, “}”, etc.\ue000\ue000prohibit a line break before'),
                    TableRow(contents='QU\ue000Ambiguous Quotation\ue000\ue000Quotation marks\ue000\ue000act like they are both opening and closing'),
                    TableRow(contents='EX\ue000Exclamation/Interrogation\ue000\ue000“!”, “?” etc.\ue000\ue000prohibit line break before'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='NU\ue000Numeric\ue000\ue000Digits\ue000\ue000form numeric expressions for line breaking purposes'),
                    TableRow(contents='IS\ue000Infix Separator (Numeric)\ue000\ue000. ,\ue000\ue000prevent breaks after any and before numeric'),
                    TableRow(contents='SY\ue000Symbols Allowing Breaks\ue000\ue000/\ue000\ue000prevent a break before, and allow a break after'),
                    TableRow(contents="PR\ue000Prefix (Numeric)\ue000\ue000$, £, ¥, etc.\ue000\ue000don't break in front of a numeric expression"),
                    TableRow(contents='PO\ue000Postfix (Numeric)\ue000\ue000\ue000\ue000don’t break following a numeric expression'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AL\ue000Ordinary Alphabetic and Symbol Characters\ue000\ue000Alphabets and regular symbols\ue000\ue000are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='ID\ue000Ideographic\ue000\ue000Ideographs, Hangul\ue000\ue000break before or after, except in some numeric context'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000\ue000Characters with Ambiguous East Asian Width\ue000\ue000act like AL when the resolved EAW is N otherwise act as ID'),
                    TableRow(contents='SA\ue000Complex Context (South East Asian)\ue000\ue000South East Asian: Thai, Lao, Khmer\ue000\ue000provide a line break opportunity contingent on additional, language specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000\ue000Unassigned Private Use\ue000\ue000are all characters with (as yet) unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Description'),
                    Paragraph(contents='Lines are broken as result of either of two conditions. The first condition is the presence of an explicit line breaking character. The second condition results from a formatting algorithm having selected among available line breaking opportunities the particular one that results in the optimal layout of the text.'),
                    Paragraph(contents='The definition of optimal line break is outside the scope of this document. Different formatting algorithms may use different methods of determining an optimal break. For example, simple implementations just consider a line at a time, trying find a locally optimal line break. A common approach is to allow no compression and consider the longest line that fits. When compression is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts compression and expansion for different line break candidates.'),
                    Paragraph(contents='More complex algorithms may take into account the interaction of line breaking decisions for the whole paragraph. The well known text layout system, [TEX] implements a well known example of such a globally optimal strategy that may make complex tradeoffs to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of a globally optimizing line fitting algorithm, see [Knuth78].'),
                    Paragraph(contents='For the purpose of this document, what is important is not so much what defines the optimal amount of text on the line, but how line breaking opportunities are determined.'),
                    Paragraph(contents='Three principal styles of context analysis determine line-breaking opportunities.'),
                    Paragraph(contents='1. Western (spaces and hyphens are used to determine breaks)'),
                    Paragraph(contents='2. East Asian (lines can break anywhere, unless prohibited)'),
                    Paragraph(contents='3. South East Asian (require morphological analysis)'),
                    Paragraph(contents='The first is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities - however, it requires knowledge of the language and potentially user interaction or overrides.'),
                    Paragraph(contents='The second style of context is used with East Asian ideographic and syllabic scripts.'),
                    Paragraph(contents='NOTE: When Korean text is laid out justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the first style (relying on spaces) is commonly used instead.'),
                    Paragraph(contents='For multilingual text, styles one and two can be unified into a single set of specifications, based on the information provided in this report. Some Unicode characters have explicit line breaking properties assigned to them. These can be utilized with these two styles of context analysis for line break opportunities.'),
                    Paragraph(contents='NOTE: Interpretation of line breaking properties in bidirectional text takes place before applying rule L1 of the Unicode Bidirectional Algorithm. However, it is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word-breaks to syllable boundaries, the determination of which requires knowledge of the language comparable to that required by a hyphenation algorithm. Such and algorithm is beyond the scope of this report.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='• The line breaking behavior of characters with normative line breaking properties is described in the Unicode Standard. (See The Unicode Standard, Version 3.0, Chapters 6 and 13). Unless otherwise stated, the information in this technical report is not intended to supersede the normative specifications found in the Unicode Standard, but to organize the description in a different context and provide additional informative detail.'),
                    Paragraph(contents='• All line breaking properties are informative, except for the line breaking properties marked with a * in Table 1 Line Breaking Properties. The behavior for characters with normative line breaking properties must be the same for all conformant implementations.'),
                    Paragraph(contents='• Conformant implementations must not tailor characters with normative line breaking properties to any of the informative properties, but may tailor characters with informative line breaking properties to one of the normative line breaking properties.'),
                    Paragraph(contents='• Higher level protocols may further restrict, override, or extend the line breaking properties of certain characters in some contexts.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='The main emphasis in this section is to provide additional description of the line breaking behavior and to summarize the membership of character classes for each line breaking property.'),
                    Paragraph(contents='The classification by properties defined here is used as input into two algorithms defined below that implement workable default line breaking methods. In a few instances, the descriptions in this section provide additional detail about handling a given character at the end of a line, which goes beyond the simple determination of line breaks.'),
                    Heading(level=3, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties, as of the time of publication of this document, is available in the current version of the file LineBreak.txt [Data] in the Unicode Character Database [UCD]. This is a tab-delimited, two column plain text file, with code position, line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Paragraph(contents='As more scripts are added to the Unicode Standard, and more scripts become more widely implemented and used on computers, more line breaking classes may be added, or the assignment of linebreak class may be changed for some characters. Implementations should not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the datafile).'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking properties are listed alphabetically. Each property is marked with an annotation in parenthesis for easy reference showing that'),
                    Paragraph(contents='(A) - the property allows a break opportunity after in specified contexts'),
                    Paragraph(contents='(XA) - the property prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='(B) - the property allows a break opportunity before in specified contexts'),
                    Paragraph(contents='(XB) - the property prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='(P) - the property allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='(XP) - the property prevents a break opportunity for a pair of same characters'),
                    Paragraph(contents='NOTE: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this document, where they indicate position of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI - Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Characters with East Asian Width property A (ambiguous width), and which would otherwise be AL in this classification. They take on the AL line break class only when their resolved width is N (narrow) and take the ID line break class, when their resolved width is W (wide). For more information on East Asian Width, and how to resolve it, see Unicode Standard Annex #11, East Asian Width [EAW]. In the absence of information needed to resolve their East Asian Width, they are treated as class AL.'),
                    Heading(level=3, contents='AL - Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Require other characters to provide break opportunities, otherwise no breaking between pairs of ordinary characters. However, this is tailorable. In some Far Eastern documents it may be desirable to allow breaking between pairs of ordinary characters.'),
                    Paragraph(contents='NOTE: use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='ALPHABETIC — all characters of General Categories Lu, Ll, Lt, Lm, Lo, except as they appear below. SYMBOLS — all characters of General Categories Sm, Sk, So, except as they appear below.'),
                    Heading(level=3, contents='BA - Break Opportunity After (A)'),
                    Paragraph(contents='Like SP, but are not part in determining indirect breaks.'),
                    Heading(level=3, contents='Breaking Spaces'),
                    Paragraph(contents='These characters with General Category Zs'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN QUAD'),
                    TableRow(contents='2003\ue000EM QUAD'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    Paragraph(contents='The preceding list of space characters all have a specific width, but behave otherwise as breaking spaces. See also the SP property.'),
                    Heading(level=3, contents='Tabs'),
                    Paragraph(contents='Except for the effect of the location of the tabstops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    TableRow(contents='0009\ue000TAB'),
                    Heading(level=3, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    Paragraph(contents='There are three types of hyphens: Explicit hyphens, conditional hyphens, and dictionary-inserted hyphens (as a result of a hyphenation process). There is no character code for the third kind of hyphen; therefore if it is desired to make the distinction, the fact that a hyphen is dictionary-inserted must be represented out of band, or by using a privately assigned control code instead of SHY.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN-DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Since, unlike spaces, they print, they are included in the measured part of the preceding line'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY is rendered invisibly and has no width, except at a line break. The rendering of the soft hyphen depends on the script. For the Latin script it is rendered as a hyphen, however, some languages require a change in spelling surrounding an optional hyphen, if it occurs at a line break. For example in Swedish the word “tuggummi” changes to “tugg-gummi” when hyphenated.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY it is customarily treated as overriding the action of the hyphenator for that word.'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    Paragraph(contents='The Tibetan thseg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself, like space.'),
                    Paragraph(contents='The Ethiopian word space is a visible word delimiter and is kept on the line before.'),
                    Paragraph(contents='The Ogham space mark is rendered visibly between words but should be elided at the end of a line.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='Hyphenation point is primarily used to visibly indicate syllabification of words. Syllable breaks are potential line breaking opportunities in the middle of words. The hyphenation point It is mainly used in dictionaries and similar works. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual break opportunity, the vertical bar is rendered as a hyphen.'),
                    Heading(level=3, contents='BB - Break opportunities before characters (B)'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent would move to the next line, and the preceding line ended with a hyphen.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Therefore, the only sensible way to break them is to keep them with the syllable; that is to break before them.'),
                    Paragraph(contents='NOTE: It is hard to find actual examples in most dictionaries, since the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='The Mongolian Todo soft hyphen indicates an optional line break opportunity with hyphen, but unlike the soft-hyphen it stays with the following line.'),
                    Heading(level=3, contents='B2 - Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The em dash character is used to set off parenthetical text, normally without spaces, however, this is language dependent, for example, in Swedish, spaces are used. Line breaks can occur before and after an em dash, but not between two em dashes. Pairs of em dashes are sometimes used instead of a single quotation dash. For that reason, the line should not be broken between em dashes.'),
                    Heading(level=3, contents='BK - Mandatory Break (A) - (normative)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters.'),
                    TableRow(contents='000C\ue000FORM FEED'),
                    Paragraph(contents='Form Feed separates pages. The text on the new page starts at the beginning of the line. No paragraph formatting is applied.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. No paragraph formatting is applied.'),
                    Paragraph(contents='This is similar to HTML <BR>'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. Paragraph formatting is applied.'),
                    Paragraph(contents='"NEW LINE FUNCTION (NLF)"'),
                    Paragraph(contents='New line functions provide additional explicit breaks. They are not individual characters, but are expressed as sequences of control characters NEL, LF, and CR. What particular sequence(s) form a NLF depends on the implementation and other circumstances as described in Unicode Technical Report 13, Unicode Newline Guidelines.'),
                    Paragraph(contents='If a character sequence for a new line function contains more than one character, it is kept together. The default behavior is to break after LF or CR, but not between CR and LF. Two additional line break classes have been added for convenience in this operation.'),
                    Heading(level=3, contents='CB - Contingent Break Opportunity (B/A) - (normative)'),
                    Heading(level=3, contents='Contingent Break Opportunity Before and After'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='By default there is a break opportunity both before and after the object. Object-specific line break behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the break opportunities.'),
                    Heading(level=3, contents='CL - Closing Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation must be kept with the preceding character, and the same applies to all forms of wide comma and full stop.'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Paragraph(contents='plus any characters of General Category Pe in the Unicode Character Database.'),
                    Heading(level=3, contents='CM - Attached Characters and Combining Marks (XB) - (normative)'),
                    Heading(level=3, contents='Combining characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purposes of line breaking. The line-breaking behavior of the sequence is that of the base character. If U+0020 SPACE is used as a base character, it is treated as AL instead of SP.'),
                    Paragraph(contents='All characters with General Category Mc, Me, and Mn.'),
                    Heading(level=3, contents='Conjoining Jamos (non-initial)'),
                    TableRow(contents='1160..11F9\ue000Conjoining Jamos'),
                    Paragraph(contents='A sequence of conjoining Jamos is used to make up a Hangul syllable. Breaks are only allowed around the entire Hangul syllable, and then the line break properties are the same for precomposed Hangul syllables as for conjoined sequence of Jamos.'),
                    Paragraph(contents='NOTE: for the purpose of determining line break opportunities, non-initial conjoining Jamos behave like combining marks, while the initial combining Jamos have the same property as Hangul Syllables.'),
                    Heading(level=3, contents='Control and formatting characters'),
                    Paragraph(contents='Most controls and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='NOTE: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by assigning them the AL or ID class instead.'),
                    Paragraph(contents='All characters of General Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='CR - Carriage Return (A) - (normative)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='Do not break if followed by a LF, mandatory break after otherwise'),
                    Heading(level=3, contents='EX - Exclamation / Interrogation (XB)'),
                    Paragraph(contents='These behave like closing characters, except in relation to postfix and ‘non-starter’ characters'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='2762\ue000HEAVY EXCLAMATION MARK ORNAMENT'),
                    TableRow(contents='2763\ue000HEAVY HEART EXCLAMATION MARK ORNAMENT'),
                    TableRow(contents='FE56..FE57\ue000SMALL QUESTION MARK..SMALL EXCLAMATION MARK'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL - Non-breaking ("Glue") (XB/XA) - (normative)'),
                    Paragraph(contents='The action of these characters is to glue together both left and right neighbor character such that they are kept on the same line. If they follow a space character, they still allow a break.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but since it is also used in an unrelated way as a byte order mark the use of the WJ as the preferred interword glue will simplify the handling of FEFF.'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words should be visually separated but kept on the same line, as in the case of a title and a name "Dr.<NBSP>Joseph Becker". NARROW NO-BREAK SPACE is used in Mongolian.'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words must be hyphenated but may not be broken at the hyphen.'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    Paragraph(contents='This looks exactly like a Tibetan tsheg, but can be used to prevent a break. It inhibits breaking on either side, like no-break space.'),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This character has not been encoded in Unicode yet, but is an example of a character that should be given the GL property.'),
                    Heading(level=3, contents='HY - Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from the use as minus sign (or indicator of numerical range). If used as hyphen, it acts like HYPHEN.'),
                    Paragraph(contents='NOTE: In some practice, runs of HYPHEN-MINUS are used to stand in for longer dashes or horizontal rules. If it is desired to treat them like the characters or layout elements they stand for, and actual character code conversion is not performed, line breaking will need to support these special cases explicitly.'),
                    Heading(level=3, contents='ID - Ideographic (B/A)'),
                    Paragraph(contents='NOTE: The name ideographic for this line breaking class was chosen pars pro toto. The actual set of characters in this class includes characters other than Han ideographs.'),
                    Paragraph(contents='Do not require other characters to provide break opportunities, can ordinarily break before and after and between pairs.'),
                    TableRow(contents='1100..115F\ue000Initial Conjoining Jamos'),
                    TableRow(contents='2E80..2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    TableRow(contents='HIRAGANA (except small characters)'),
                    TableRow(contents='KATAKANA (except small characters)'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    TableRow(contents='3400..4DBF\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='4E00..9FAF\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='F900..FAFF\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='AC00..D7AF\ue000HANGUL SYLLABLES'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490..A4CF\ue000YI RADICALS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF10..FF19\ue000WIDE DIGITS'),
                    TableRow(contents='20000..2A6D6\ue000CJK UNIFIED IDEOGRAPHS EXTENSION B'),
                    TableRow(contents='2F800..2FA1D\ue000CJK COMPATIBILITY IDEOGRAPHS SUPPLEMENT'),
                    Paragraph(contents='plus all of the FULLWIDTH LATIN letters and all of the 3000-33FF blocks not covered elsewhere'),
                    Paragraph(contents='NOTE: use 2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Heading(level=3, contents='IN - Inseparable characters (XP)'),
                    Heading(level=3, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used in consecutive sequence. They therefore prevent line breaks absolutely in a series of two character of this class.'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS - Numeric Separator (Infix) (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from following numeric characters, unless space character intervenes. Since they are otherwise sentence ending punctuation, they prevent breaks before.'),
                    Paragraph(contents='There is no break in “100.00” or “10,000”, nor in “12:59”'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    Heading(level=3, contents='LF - Line Feed (A) - (normative)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character.'),
                    Heading(level=3, contents='NS - Non-starters (XB)'),
                    Paragraph(contents='Some characters cannot start a line, but unlike CL they may allow a break in some context when they are following one or more space characters.'),
                    Paragraph(contents='All characters with General Category Lm (Letter, Modifier) and East Asian Width type W or H, and all characters with General Category Sk (Symbol, Modifier) and East Asian width type W plus the following characters:'),
                    TableRow(contents='0E5A..0E5B\ue000THAI CHARACTER ANGKHANKHU..THAI CHARACTER KHOMUT'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D6..17DA\ue000KHMER SIGN CAMNUC PII KUUH..KHMER SIGN KOOMUUT'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK to HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                    TableRow(contents='30FD\ue000KATAKANA ITERATION MARK'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK - HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='Plus all Hiragana, Katakana, and Halfwidth Katakana “small” characters'),
                    Paragraph(contents='NOTE: Optionally, the NS restriction may be relaxed and characters treated like ID, to achieve a more permissive style of line breaking.'),
                    Heading(level=3, contents='NU - Numeric (XP)'),
                    Paragraph(contents='Behave like ordinary characters in the context of ordinary characters, activate the prefix and postfix behavior of prefix and postfix characters'),
                    Paragraph(contents='DECIMAL DIGITS (All characters of General Category Nd, except FULL WIDTH)'),
                    Heading(level=3, contents='OP - Opening Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation must be kept with the following character'),
                    Paragraph(contents='All characters of General Category Ps in the Unicode Character Database.'),
                    Heading(level=3, contents='PO - Postfix (Numeric) (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene.'),
                    Paragraph(contents='For example, there is no break in “(12.00) %”'),
                    Paragraph(contents='The list of post-fix characters is:'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='2126\ue000OHM SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Heading(level=3, contents='PR - Prefix (Numeric) (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, EVEN if space character intervenes.'),
                    Paragraph(contents='There is no break in “$ (100.00)”'),
                    Paragraph(contents='All currency symbols (General Category Sc) except as listed explicitly in PO and the following:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Heading(level=3, contents='QU - Ambiguous Quotation (XB/XA)'),
                    Paragraph(contents='Some paired characters can be either opening or closing depending on usage. The default is to treat them as both opening and closing.'),
                    Paragraph(contents='NOTE: If language information is available, it can be used to determine which character is used as opening and which as closing quote. (See the information in the Unicode Standard, Version 3.0, Chapter 6. [U3.0])'),
                    Paragraph(contents='Characters of General Category Pf or Pi in the Unicode Character Database as well as:'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='23B6\ue000BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    Paragraph(contents='Note: 23B6 is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, since its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one of a kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='SA - Complex-context Dependent Characters (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to e.g. a hyphenation algorithm. For the characters that have this property, no line breaks will be found otherwise, therefore complex context analysis is mandatory.'),
                    Paragraph(contents='NOTE: These characters can be mapped into their equivalent line break classes as result of dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='If dictionary lookup is not available they should be treated as XX.'),
                    Paragraph(contents='All characters of General Category Lo or Lm in these ranges:'),
                    TableRow(contents='0E00..0EFF\ue000THAI / LAO'),
                    TableRow(contents='1000..109F\ue000MYANMAR'),
                    TableRow(contents='1780..17FF\ue000KHMER'),
                    Heading(level=3, contents='SG - Surrogates (XP) - (normative)'),
                    Paragraph(contents='All characters with General Category Cs. There is no break between a high surrogate and a low surrogate.'),
                    Paragraph(contents='NOTE: The line breaking class for a pair of surrogates depends on the character. A useful default is to treat characters in the range 0x00010000 to 0x0001FFFD as AL and characters in the range 0x00020000 to 0x0002FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters, many of which have yet to be assigned.'),
                    Heading(level=3, contents='SP - Space (A) - (normative)'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='The space characters are explicit break opportunities, but spaces at the end of a line are not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, since the last character measured for fit is BEFORE the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    Paragraph(contents='NOTE: SPACE, but none of the other breaking spaces, is used in determining an indirect break.'),
                    Heading(level=3, contents='SY - Symbols Allowing Break After (A)'),
                    Paragraph(contents='URLs are common enough now in regular plain text, that they must be taken into account when assigning general-purpose line breaking properties. The SY line break property is intended to provide a break after, but not in front of digits so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='Slash (SOLIDUS) is allowed as an additional, limited break opportunity to improve layout of web addresses'),
                    Paragraph(contents='NOTE: Normally, symbols are treated as AL. If it is desired to allow other breaks, more symbols can be added to this line breaking class, or classes BA, BB, B2 by tailoring, for example “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this document.'),
                    Heading(level=3, contents='XX - Unknown (XP)'),
                    Paragraph(contents='Unassigned code positions, private use characters and characters for which reliable line breaking information is not available are assigned this default line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to force or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior, e.g. by assigning characters the property ID or another class, if that is more likely to give the correct default behavior for their users, or use other means to determine the correct behavior. For example one implementation might treat any private use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private use characters. The details of such use of private use characters are outside the scope of this standard.'),
                    Paragraph(contents='All characters with General Category Co and all codepoints with General Category Cn.'),
                    Heading(level=3, contents='ZW - Zero Width Space (A) - (normative)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character does not have width. It is used to enable additional (invisible) break opportunities wherever SPACE cannot be used.'),
                    Heading(level=3, contents='5.2 Additional Details on Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow strict standards that guide their use of characters to indicate features of the terms listed. Some of these conventions mark places that can also serve as line breaking opportunities and therefore interact with line breaking and are described here. Where appropriate, these characters have been inserted in the list of characters for the corresponding line breaking property above.'),
                    Paragraph(contents='However, implementing the full conventions in dictionaries requires special support. Looking up the noun “syllable” in eight dictionaries yields eight different conventions, in one dictionary a natural hyphen in a word becomes a tilde dash if the word is split.'),
                    Paragraph(contents='Dictionary of the English Language, Samuel Johnson, 1843 SY´LLABLE where ´ is a U+02B9 (and a large one at that) and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lâ'bl where · is a slightly above middle dot indicating the vowel of the stressed syllable (similar to Johnson's acute). The letter â is really U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIleb(e)l where ' is U+02C8, I is U+026A, e is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´e-bl where the stressed syllable is followed by ´ U+02B9, e is U+0259, - is a hyphen when splitting a word like abate´- ment the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention if splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIlebl where I is U+026A U+0332, e is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIlebe°l where I is U+026A U+0332, and means the same as the BBC. The e is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary. syl·la·ble (sílleb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent (rather than being followed by an accent). The letter e is a schwa in the actual example and ' is apostrophe."),
                    Paragraph(contents="Webster's 3rd New International Dictionary. syl·la·ble /'silebel/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The e's are schwas as usual. Webster splits words at the end of a line with a normal hyphen. When a hyphenated word is split at the hyphen this is indicated by a double hyphen which looks like a light version of the German Fraktur hyphen (short equals sign with a slight slope up to the right)."),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='The Unicode Standard, Version 3.0, describes a particular method for boundary detection in Chapter 5. It is based on a set of hierarchical rules and character classifications. That method would be well suited for implementation of some of the advanced heuristics.'),
                    Paragraph(contents='A slightly simplified implementation of that can be devised that uses a two dimensional table to resolve break opportunities between pairs or characters. It is described in the following section.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules which take line breaking classes as input.'),
                    Heading(level=3, contents='Line breaking rules'),
                    Paragraph(contents='The line breaking rules are stated in terms of regular expressions over the line breaking classes defined above and three special symbols indicating the type of line break opportunity.'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit ”otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent, i.e. they have the same effect.'),
                    Paragraph(contents='The distinction between direct and indirect break is handled by explicitly considering the effect of SP in rule LB12. Because rules are applied in order, rule LB12 implies that a prohibited break in rules 13-19 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ’H’ stands for an ideographs, ’h’ for small kana, ’9’ for digits.'),
                    Heading(level=4, contents='Resolve line break classes:'),
                    Rule(contents='LB 1 Assign a line break category to each character of the input. Resolve AI, CB, SA, SG, XX into other line break classes depending on criteria outside this algorithm.'),
                    Heading(level=4, contents='Start and end of text:'),
                    Rule(contents='LB 2a Never break at the start of text'),
                    Formula(contents='× sot'),
                    Rule(contents='LB 2b Always break at the end of text'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases. Their effect is to have at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text to run over the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Rule(contents='LB 3a Always break after hard line breaks (but never between CR and LF).'),
                    Formula(contents='BK !'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='CR × LF'),
                    Rule(contents='LB 3b Don’t break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB 4 Don’t break before spaces or zero-width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB 5 Break after zero-width space.'),
                    Formula(contents='ZW ÷'),
                    Heading(level=4, contents='Combining Marks:'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Virama are treated as CM so they work correctly. Non-initial Jamo are treated as CM, so each syllable inherits the linebreak class of the initial Jamo and no breaks can occur in the middle of a syllable.'),
                    Rule(contents='LB 6 Don’t break graphemes (before combining marks, around virama or on sequences of conjoining Jamos.'),
                    Formula(contents='Treat X CM* as if it were X'),
                    Formula(contents='(See the Unicode Standard [U3.0] for other rules regarding graphemes.)'),
                    Paragraph(contents='As stated in section 7.9 of The Unicode Standard, Version 3.0 [U3.0], combining characters are shown in isolation by applying them to either U+0020 SPACE (SP) or U+00A0 NO BREAK SPACE (NBSP). The visual appearance is the same, but the line breaking result is different. Correspondingly, if there is no base, or if the base character is SP, CM* or SP CM* behave like ID.'),
                    Rule(contents='LB 7 In all of the following rules, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP CM* in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and so come before rule 12.'),
                    Rule(contents='LB 8 Don’t break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB 9 Don’t break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB 10 Don’t break within ‘”[’, , even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Rule(contents='LB 11 Don’t break within ‘]h’, even with intervening spaces.'),
                    Formula(contents='CL SP* × NS'),
                    Rule(contents='LB 11a Don’t break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 × B2'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB 12 Break after spaces'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB 13 Don’t break before or after NBSP or WORD JOINER'),
                    Formula(contents='× GL'),
                    Formula(contents='GL ×'),
                    Rule(contents='LB 14 Don’t break before or after ‘”’'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB 15 Don’t break before hyphen-minus, other hyphens, fixed-width spaces, small kana and other non- starters, or after acute accents:'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents='LB 15b Break after hyphen-minus, and before acute accents:'),
                    Formula(contents='HY ÷'),
                    Formula(contents='÷ BB'),
                    Rule(contents='LB 16 Don’t break between two ellipses, or between letters or numbers and ellipsis:'),
                    Formula(contents='AL × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ’9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents="Don't break alphanumerics."),
                    Rule(contents='LB 17 Don’t break within ‘a9’, ‘3a’, or ‘H%’'),
                    Formula(contents='ID × PO'),
                    Formula(contents='AL × NU'),
                    Formula(contents='NU × AL'),
                    Paragraph(contents='Numbers are of the form PR ? ( OP | HY ) ? NU (NU | IS) * CL ? PO ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='This is approximated with the following rules. (Some cases already handled above, like ‘9,’, ‘[9’.)'),
                    Rule(contents='LB 18 Don’t break between the following pairs of classes.'),
                    Formula(contents='CL × PO'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='NU × PO'),
                    Formula(contents='PR × AL'),
                    Formula(contents='PR × HY'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-‘, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Finally, join alphabetic letters and break everything else.'),
                    Rule(contents='LB 19 Don’t break between alphabetics (“at”)'),
                    Formula(contents='AL × AL'),
                    Rule(contents='LB 20 Break everywhere else'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair-Table Based Implementation'),
                    Paragraph(contents='A two dimensional table can be used to resolve break opportunities between pairs of characters. The rows of the table are labeled by the possible values of the line breaking property of the leading character in the pair; the columns are labeled by the line breaking property for the following character of the pair. Each intersection is labeled with the resulting line breaking opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of such a table-based definition. However, it uses line breaking classes whose membership is not solely determined by line breaking property (as in this report), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classed defined above.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes of which only 14 appear to be unique. A minimal table representation is unique, except for trivial reordering of rows and columns.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Rules LB 6, and LB 8 - LB11 require extended context for handling combining marks and spaces. This extended context must be built into the code that interprets the pair table.'),
                    Paragraph(contents='By broadening the definition of pair from B A to B SP* A, where A and B are characters and SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line breaking opportunity (i.e. direct and indirect breaks). Rules equivalent to the ones given in section 6 can be formulated without explicit use of SP, by instead using % to express indirect breaks. These rules can then be simplified to involve only pairs of classes, e.g. only constructions of the form'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B ^ A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can then be automatically translated into a pair table, as in the example below. Line break analysis then proceeds by pair table lookup.'),
                    Heading(level=3, contents='7.3 Example Table'),
                    Paragraph(contents='The following example table implements the line breaking behavior described in this Technical Report, within the limitation that only context of the form B SP* A is considered. BK and SP classes are handled explicitly in the outer loop as given in the code sample below. B CM* can be handled in the table, or explicitly in the driving loop, as explained in section 7.5. Using the table entries is equivalent to making the simplifying assumption that combining marks are only applied to AL. (Such an assumption does not hold when conjoining Jamos are used).'),
                    TableRow(contents='‘After’ class'),
                    TableRow(contents='OP\ue000CL\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000%'),
                    TableRow(contents='CL\ue000\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000\ue000%\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='QU\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000%'),
                    TableRow(contents='NS\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='EX\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='SY\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='IS\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='PR\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000%\ue000%\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='PO\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='NU\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000%\ue000%\ue000%\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='AL\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000%\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='ID\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000%\ue000\ue000\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='IN\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='HY\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='BA\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='BB\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000%'),
                    TableRow(contents='B2\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000\ue000\ue000\ue000\ue000%\ue000%\ue000\ue000^\ue000^\ue000%'),
                    TableRow(contents='ZW\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000^\ue000%'),
                    TableRow(contents='CM\ue000\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000\ue000\ue000%\ue000%\ue000\ue000%\ue000%\ue000%\ue000\ue000\ue000^\ue000%'),
                    Paragraph(contents='• ^ denotes a prohibited break: Never break here, even if one or more spaces intervene.'),
                    Paragraph(contents='• As a reminder, A ^ B is equivalent to B SP* × A.'),
                    Paragraph(contents='• % denotes an indirect break opportunity: Don’t break here, unless one or more spaces intervene.'),
                    Paragraph(contents='• As a reminder, A % B is equivalent to B × A and B SP+ ÷ A.'),
                    Paragraph(contents='• _ an empty cell denotes a direct break opportunity (÷ above). These are blank to make them easier to distinguish in the table.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two functions demonstrate how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the following line break classes need to be added: CR, LF, CB, SG, XX. They have been omitted here for brevity.'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    int findComplexBreak(int *pcls, int *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='         if (!cch)'),
                    CodeLine(contents='               return 0;'),
                    CodeLine(contents='         int cls = pcls[0];'),
                    CodeLine(contents='         for(int ich = 0; ich < cch; ich++) {'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                  // .. do complex break analysis here'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                  if (pcls[ich] != SA)'),
                    CodeLine(contents='                         break;'),
                    CodeLine(contents='                  }'),
                    CodeLine(contents='         return ich;'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    CodeLine(contents='\xa0   enum break_action { '),
                    CodeLine(contents='       DBK = 0, // direct break     (blank in table)'),
                    CodeLine(contents='       IBK,     // indirect break   (% in table)'),
                    CodeLine(contents='       PBK };   // prohibited break (^ in table)'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line break classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable)'),
                    CodeLine(contents='    int findLineBrk1(int *pcls, int *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='         if (!cch) '),
                    CodeLine(contents='              return O;'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='         int  cls = pcls[0];'),
                    CodeLine(contents=''),
                    CodeLine(contents='         // loop over all pairs in the string'),
                    CodeLine(contents='         for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              // handle spaces'),
                    CodeLine(contents='              if (pcls[ich] == SP) {'),
                    CodeLine(contents='                   pbrk[ich-1] = PBK;'),
                    CodeLine(contents='                   continue;'),
                    CodeLine(contents='              }'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              // handle complex scripts'),
                    CodeLine(contents='              if (pcls[ich] == SA) {'),
                    CodeLine(contents='                    ich += findComplexBreak(&pcls[ich-1], &pbrk[ich-1], cch - (ich-1));'),
                    CodeLine(contents='                    if (ich < cch)'),
                    CodeLine(contents='                         cls = pcls[ich];'),
                    CodeLine(contents='                    continue;'),
                    CodeLine(contents='              }'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              // lookup pair table information'),
                    CodeLine(contents='              int brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              if (brk == IBK) {'),
                    CodeLine(contents='                    pbrk[ich-1] = ((pcls[ich - 1] == SP) ? IBK : PBK);'),
                    CodeLine(contents='              } else {'),
                    CodeLine(contents='                   pbrk[ich-1] = brk;'),
                    CodeLine(contents='              }'),
                    CodeLine(contents='              cls = pcls[ich];'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        // always break at the end'),
                    CodeLine(contents='        pbrk[ich-1] = DBK;'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='   }'),
                    Paragraph(contents='The function returns all the break opportunities in the array pointed to by pbrk, using the values in the table. The code assumes that the predefined value SS is used for break opportunities marked by an % entry in the table and the value XX for an entry marked by an ^ above.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='If one makes the simplifying assumption that combining marks are only applied to AL, or that applying a combining mark turns the combination into AL, then CM can be handled in the table as shown. (Such an assumption does not hold when conjoining Jamos are used).'),
                    Paragraph(contents='Therefore it is preferable to handle CM outside of the pair table in the driver code. Adding a simple statement in the loop'),
                    CodeLine(contents='    // handle combining marks'),
                    CodeLine(contents='    if (pcls[ich] == CM){'),
                    CodeLine(contents='       if(pcls[ich-1] == SP){'),
                    CodeLine(contents='          cls = ID;'),
                    CodeLine(contents='          if (ich > 1)'),
                    CodeLine(contents='\t     pbrk[ich-2] = brkPairs[pcls[ich-2]][ID] == DBK ? DBK : PBK;'),
                    CodeLine(contents='       }'),
                    CodeLine(contents='       pbrk[ich-1] = PBK;'),
                    CodeLine(contents='       continue;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='would have the effect of letting the CM take on the class of the preceding non-CM characters. It also takes care of rule LB7, treating a combining mark applied to a SP as if it was ID. This also requires a statement in the setup part before the loop to cover the case of a missing base character at the beginning of the line:'),
                    CodeLine(contents='    // handle missing base character'),
                    CodeLine(contents='    if (cls == CM)'),
                    CodeLine(contents='            cls = ID;'),
                    Heading(level=3, contents='7.6 Customization'),
                    Paragraph(contents='A real world line breaking algorithm must be tailorable to some degree. There are three principal ways of tailoring a pair-table based algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters. This is useful for cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes. This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to overriding some of the rules in section 6.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions is equivalent to the preceding, but instead of changing the values for the pair intersection directly in the table, they can be labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be done at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself, which places no limits to possible changes.'),
                    Heading(level=3, contents='7.7 Examples of Customization'),
                    Paragraph(contents='Example 1. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. The sample code sketches a different approach where the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks inside a run of spaces. This cannot be done in the pair-table, but requires a change in the way the driver loop handles spaces.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean uses either implicit breaking around characters (type 2 as defined above in section 3 Description) or uses spaces (type 1). Space based layout is common in informal documents with ragged margins, such as magazines, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersection of ID/ID, AL/ID and ID/AL are affected. For alphabetic style line breaking, breaks for these four cases require space, for ideographic style line breaking, these four cases do not require spaces. Therefore, he defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given (piece of) text.'),
                    Paragraph(contents='Example 4. Sometimes allowing alphabetic characters and digit strings to break anywhere is required in Far Eastern context. According to reference [Suign98] this can again be done in the same way, this time affecting the intersections of NU/NU, NU/AL, AL/AL, and AL/NU.'),
                    Paragraph(contents='Example 5. Some users prefer to force Kana syllables to be kept together, i.e. the syllable kyu, spelled with the two kanas KI and "small yu” would be kept together even though KI and yu are normally atomic. This customization can be handled via the first method, by changing the classification of the Kana small characters from ID to NS as needed.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real world implementation of a pair-table based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. This implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=2, contents='References'),
                    TableRow(contents='[Cedar97]\ue000Cy Cedar, David Veintimilla, Michel Suignard and Asmus Freytag, Report from the Trenches: Microsoft Publisher goes Unicode, Proceedings of the Eleventh International Unicode Conference, San Jose, CA 1997'),
                    TableRow(contents='[Data]\ue000The version of the line break property data file at the time of the publication of this document is http://www.unicode.org/Public/3.2-Update/LineBreak-3.2.0.txt The latest version of the data file is http://www.unicode.org/Public/UNIDATA/LineBreak.txt'),
                    TableRow(contents='[EAW]\ue000Unicode Standard Annex #11, East Asian Width. http://www.unicode.org/unicode/reports/tr11 For a definition of East Asian Width'),
                    TableRow(contents='[FAQ]\ue000Unicode Frequently Asked Questions http://www.unicode.org/unicode/faq/ For answers to common questions on technical issues.'),
                    TableRow(contents='[Glossary]\ue000Unicode Glossary http://www.unicode.org/glossary/ For explanations of terminology used in this and other documents.'),
                    TableRow(contents='[JIS]\ue000JIS X 4051-1995. Line Composition Rules for Japanese Documents. ( 『日本語文晝の行組版方法』) Japanese Standards Association. 1995.'),
                    TableRow(contents='[Knuth78]\ue000Donald E. Knuth and Michael F. Plass, Breaking Lines into Paragraphs, republished in Digital Typography, CSLI 78, (Stanford, California: CLSI Publications1997)'),
                    TableRow(contents='[Reports]\ue000Unicode Technical Reports http://www.unicode.org/unicode/reports/ For information on the status and development process for technical reports, and for a list of technical reports.'),
                    TableRow(contents='[Suign98]\ue000Michel Suignard, Worldwide Typography and How to Apply JIS X 4051-1995 to Unicode, Proceedings of the Twelfth International Unicode/ISO 10646 Conference, Tokyo, Japan, 1998'),
                    TableRow(contents='[TeX]\ue000Donald E. Knuth, TEX, the Program, Volume B of Computers & Typesetting, (Reading, Massachusetts: Addison-Wesley 1986)'),
                    TableRow(contents='[U3.0]\ue000The Unicode Standard, Version 3.0, (Reading, Massachusetts: Addison-Wesley Developers Press 2000) or online as http://www.unicode.org/unicode/uni2book/u2.html'),
                    TableRow(contents='[U3.1]\ue000Unicode Standard Annex #27: Unicode 3.1 http://www.unicode.org/unicode/reports/tr27/'),
                    TableRow(contents='[U3.2]\ue000Unicode Standard Annex #28: Unicode 3.2 http://www.unicode.org/unicode/reports/tr28/'),
                    TableRow(contents='[UCD]\ue000Unicode Character Database http://www.unicode.org/ucd/ For an overview of the Unicode Character Database and a list of its associated files see http://www.unicode.org/Public/UNIDATA/UnicodeCharacterDatabase.html'),
                    TableRow(contents='[Versions]\ue000Versions of the Unicode Standard http://www.unicode.org/unicode/standard/versions/ For details on the precise contents of each version of the Unicode Standard, and how to cite them.'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples.'),
                    Heading(level=2, contents='Modifications'),
                    Paragraph(contents='Change from Revision 11:'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos. [Revision 11, being a proposed update, is superseded and no longer publicly available]'),
                    Paragraph(contents='Change from Revision 10:'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added WORD JOINER to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the datafile. Only characters whose LB class differs from those of characters with related General Category are noted explicitly in this text.'),
                    Paragraph(contents='Change from Revision 9:'),
                    Paragraph(contents='• Change header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Paragraph(contents='Change from Revision 8:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX'),
                    Paragraph(contents='• LB 7: Restored the rule, and fixed the note so it matches the rule and section 7.9 of [U3.0].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair-table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair-table entry PR % ID'),
                    Paragraph(contents='• Reworked section 7.5'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull)'),
                    Paragraph(contents='Change from Revision 7:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX since the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB 6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB 7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB 17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded sections 7.6 and 7.7 to clarify the customization process.'),
                    Paragraph(contents='Change from Revision 6:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Paragraph(contents='Change from Revision 5:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='Copyright © 1998-2002 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report.')],
 Version(4, 0, 0): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Line Breaking Properties'),
                    TableRow(contents='Version\ue0004.0.0'),
                    TableRow(contents='Authors\ue000Asmus Freytag (asmus@unicode.org)'),
                    TableRow(contents='Date\ue0002003-04-17'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/unicode/reports/tr14/tr14-14'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/unicode/reports/tr14/tr14-12'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/unicode/reports/tr14'),
                    TableRow(contents='Tracking Number\ue00014'),
                    Heading(level=3, contents='Summary'),
                    Paragraph(contents='This report presents the specification of line breaking properties for Unicode characters.'),
                    Heading(level=3, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved by the Unicode Technical Committee as a Unicode Standard Annex. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version number of the Unicode Standard at the last point that the UAX document was updated.'),
                    Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this document is found in the References section. For the latest version of the Unicode Standard see [Unicode]. See [Reports] for a list of current Unicode Technical Reports. For more information about versions of the Unicode Standard, see [Versions].'),
                    Heading(level=3, contents='Contents'),
                    Paragraph(contents='• 1 Overview and Scope'),
                    Paragraph(contents='• 2 Definitions'),
                    Paragraph(contents='• 3 Introduction'),
                    Paragraph(contents='• 4 Conformance'),
                    Paragraph(contents='4.1 Line Breaking Properties'),
                    Paragraph(contents='4.2 Line Breaking Algorithm'),
                    Paragraph(contents='• 5 Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Additional Details on Dictionary Usage'),
                    Paragraph(contents='5.3 Additional Details on the Use of Soft Hyphen'),
                    Paragraph(contents='• 6 Line Breaking Algorithm'),
                    Paragraph(contents='• 7 Pair-Table Based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='• 8 Customization'),
                    Paragraph(contents='8.1 Types of Tailoring'),
                    Paragraph(contents='8.2 Examples of Customization'),
                    Paragraph(contents='• References'),
                    Paragraph(contents='• Acknowledgments'),
                    Paragraph(contents='• Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='The Unicode Standard [Unicode] presents limited description of some of the characters with specific function in line-breaking, but does not give a complete specification. This Unicode Standard Annex provides the needed information in a way that reflects best practices. The Unicode Standard assigns normative line-breaking properties to those characters that are intended to explicitly influence line-breaking and for which the line-breaking behavior is therefore expected to be identical across all implementations.'),
                    Paragraph(contents='For all other characters informative line-breaking properties are provided. For these characters, considerable variation in line-breaking behavior can be expected, including variation based on local or stylistic preferences.'),
                    Paragraph(contents='Following the formal definitions and summary of the line-breaking task and a brief section on conformance requirements, there are four main sections:'),
                    Paragraph(contents='• Section 5 Line Breaking Properties contains a narrative description of the line breaking behavior of the characters of the Unicode Standard and their grouping in alphabetical order by line breaking class.'),
                    Paragraph(contents='• Section 6 Line Breaking Algorithm provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='• Section 7 Pair-Table based Implementation provides the detailed description of an efficient pair table based implementation of the algorithm.'),
                    Paragraph(contents='• Section 8 Customization provides a discussion on ways to customize or tailor the algorithm.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard [Unicode]. The notation defined in this technical report differs somewhat from the notation defined elsewhere in the Unicode Standard. All other notation used here without an explicit definition shall be as defined in the Unicode Standard .'),
                    Paragraph(contents='Line fitting - the process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='Line Break - the position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='Line Break Opportunity - a place where a line is allowed to end. Whether a given position in the text is a valid line break opportunity depends on the line breaking rules in force, as well as on context.'),
                    Paragraph(contents='Line Breaking - the process of selecting that part of a text that can be displayed on a line. In other words, selecting one among several line breaking opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                    Paragraph(contents='Line Breaking Property - A character property with enumerated values, as set out in Table 1 and separated into normative and informative. Line breaking property values are used to classify characters, and taken in context, determine the type of break.'),
                    Paragraph(contents='Line Breaking Class - a class of characters with the line breaking property value.'),
                    Paragraph(contents='Mandatory Break - a line must break following a character that has the mandatory break property. Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                    Paragraph(contents='Direct Break - a line breaking opportunity exists between two adjacent characters of the given line breaking classes. This is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity also exists after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='Indirect Break - a line breaking opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces. In this case, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent. This is indicated in the pair table below as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though space characters are not shown in the pair table, an indirect break can only occur if one or more spaces follow B. In the notation of the rules in Section 6, Line Breaking Algorithm this would be represented as two rules: B × A and B SP+ ÷ A.'),
                    Paragraph(contents='Prohibited Break - no line breaking opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters. This is indicated in the pair table below as B ^ A, where B is the character class of the character before and A is the character class of the character after the break and the optional space characters are not shown. In the notation of the the rules in Section 6, Line Breaking Algorithm this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='Hyphenation - Hyphenation uses language specific rules to provide additional line breaking opportunities within a word. Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this document, it is assumed that hyphenation is equivalent to insertion of soft hyphen characters. All other aspects of hyphenation are outside the scope of this document.'),
                    Formula(contents='Table 1 Line Breaking Classes (* = normative)'),
                    TableRow(contents='Class\ue000Descriptive Name\ue000\ue000Examples\ue000\ue000Characters with this property...'),
                    TableRow(contents='Normative Line Breaking Classes'),
                    TableRow(contents='BK *\ue000Mandatory Break\ue000\ue000NL, PS\ue000\ue000cause a line break (after)'),
                    TableRow(contents='CR *\ue000Carriage Return\ue000\ue000CR\ue000\ue000cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF *\ue000Line Feed\ue000\ue000LF\ue000\ue000cause a line break (after)'),
                    TableRow(contents='CM *\ue000Attached Characters and Combining Marks\ue000\ue000Combining Marks\ue000\ue000prohibit a line break between the character and the preceding character'),
                    TableRow(contents='NL *\ue000Next Line\ue000\ue000NEL\ue000\ue000cause a line break (after)'),
                    TableRow(contents='SG *\ue000Surrogates\ue000\ue000Surrogates\ue000\ue000should not occur in well-formed text'),
                    TableRow(contents='WJ *\ue000Word Joiner\ue000\ue000WJ\ue000\ue000prohibit line breaks before or after'),
                    TableRow(contents='ZW *\ue000Zero Width Space\ue000\ue000ZWSP\ue000\ue000provide a break opportunity'),
                    TableRow(contents='GL *\ue000Non-breaking (“Glue”)\ue000\ue000NBSP, ZWNBSP,CGJ\ue000\ue000prohibit line breaks before or after'),
                    TableRow(contents='CB *\ue000Contingent Break Opportunity\ue000\ue000Inline Objects\ue000\ue000provide a line break opportunity contingent on additional information.'),
                    TableRow(contents='SP *\ue000Space\ue000\ue000Space\ue000\ue000generally provide a line break opportunity after the character, enable indirect breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000\ue000EM Dash\ue000\ue000provide a line break opportunity before and after the character'),
                    TableRow(contents='BA\ue000Break Opportunity After\ue000\ue000Spaces, Hyphens\ue000\ue000generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Opportunity Before\ue000\ue000Punctuation used in dictionaries\ue000\ue000generally provide a line break opportunity before the character.'),
                    TableRow(contents='HY\ue000Hyphen\ue000\ue000Hyphen-Minus\ue000\ue000provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='CL\ue000Closing Punctuation\ue000\ue000“)”, “]”, “}”, etc.\ue000\ue000prohibit a line break before'),
                    TableRow(contents='EX\ue000Exclamation/Interrogation\ue000\ue000“!”, “?” etc.\ue000\ue000prohibit line break before'),
                    TableRow(contents='IN\ue000Inseparable\ue000\ue000Leaders\ue000\ue000allow only indirect line breaks between pairs.'),
                    TableRow(contents='NS\ue000Non Starter\ue000\ue000small kana\ue000\ue000allow only indirect line break before'),
                    TableRow(contents='OP\ue000Opening Punctuation\ue000\ue000“(“, “[“, “{“, etc.\ue000\ue000prohibit a line break after'),
                    TableRow(contents='QU\ue000Ambiguous Quotation\ue000\ue000Quotation marks\ue000\ue000act like they are both opening and closing'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='IS\ue000Infix Separator (Numeric)\ue000\ue000. ,\ue000\ue000prevent breaks after any and before numeric'),
                    TableRow(contents='NU\ue000Numeric\ue000\ue000Digits\ue000\ue000form numeric expressions for line breaking purposes'),
                    TableRow(contents='PO\ue000Postfix (Numeric)\ue000\ue000%, ¢\ue000\ue000do not break following a numeric expression'),
                    TableRow(contents="PR\ue000Prefix (Numeric)\ue000\ue000$, £, ¥, etc.\ue000\ue000don't break in front of a numeric expression"),
                    TableRow(contents='SY\ue000Symbols Allowing Breaks\ue000\ue000/\ue000\ue000prevent a break before, and allow a break after'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000\ue000Characters with Ambiguous East Asian Width\ue000\ue000act like AL when the resolved EAW is N otherwise act as ID'),
                    TableRow(contents='AL\ue000Ordinary Alphabetic and Symbol Characters\ue000\ue000Alphabets and regular symbols\ue000\ue000are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='ID\ue000Ideographic\ue000\ue000Ideographs, Hangul, conjoining Jamo\ue000\ue000break before or after, except in some numeric context'),
                    TableRow(contents='SA\ue000Complex Context (South East Asian)\ue000\ue000South East Asian: Thai, Lao, Khmer\ue000\ue000provide a line break opportunity contingent on additional, language specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000\ue000Unassigned Private Use\ue000\ue000are all characters with (as yet) unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Introduction'),
                    Paragraph(contents='Lines are broken as result of either of two conditions. The first condition is the presence of an explicit line breaking character. The second condition results from a formatting algorithm having selected among available line breaking opportunities the particular one that results in the optimal layout of the text.'),
                    Paragraph(contents='The definition of optimal line break is outside the scope of this document. Different formatting algorithms may use different methods of determining an optimal break. For example, simple implementations just consider a line at a time, trying to find a locally optimal line break. A common approach is to allow no compression or expansion of the inter-character and inter-word spaces and consider the longest line that fits. When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates.'),
                    Paragraph(contents='More complex algorithms may take into account the interaction of line breaking decisions for the whole paragraph. The well known text layout system [TEX] implements a example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                    Paragraph(contents='When expanding or compressing inter-word space, only the space marked by U+0020 SPACE and U+3000 IDEOGRAPHIC SPACE are normally subject to compression, and only spaces marked by U+0020 SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters have fixed width.'),
                    Paragraph(contents='Whether to allow expansion of inter-character space to justify a line, and how much, depends on local custom. In some languages, for example, German, inter-character space is commonly used to mark e m p h a s i s (like this). In such languages, allowing variable inter-character spacing would have the unintended effect of adding random emphasis, and should therefore be avoided.'),
                    Paragraph(contents='In table headings that use Han ideographs, on the other hand, even extreme amounts of inter-character space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                    Paragraph(contents='For the purpose of this document, what is important is not so much what defines the optimal amount of text on the line, but how possible line breaking opportunities are determined. Whether a line break opportunity is actually used is up to the full layout system. [TEX] for example, uses line break opportunities based on hyphens only as a last resort.'),
                    Heading(level=3, contents='Determining line breaking opportunities'),
                    Paragraph(contents='Three principal styles of context analysis determine line-breaking opportunities.'),
                    Paragraph(contents='1. Western — spaces and hyphens are used to determine breaks'),
                    Paragraph(contents='2. East Asian — lines can break anywhere, unless prohibited'),
                    Paragraph(contents='3. South East Asian — line breaks require morphological analysis'),
                    Paragraph(contents='The first is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities - however, it requires knowledge of the language and potentially user interaction or overrides.'),
                    Paragraph(contents='The second style of context is used with East Asian ideographic and syllabic scripts. The precise set of prohibited line breaks may depend on user preference or local custom.'),
                    Paragraph(contents='Korean makes use of both styles of line break. When Korean text is laid out justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the first style (relying on spaces) is commonly used instead, even for ideographs.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word-breaks to syllable boundaries, the determination of which requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                    Paragraph(contents='For multilingual text, styles one and two can be unified into a single set of specifications, based on the information provided in this report. Some Unicode characters have explicit line breaking properties assigned to them. These can be utilized with these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                    Paragraph(contents='Determining the line breaks in bidirectional text takes place before applying rule L1 of the Unicode Bidirectional Algorithm [Bidi]. However, it is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='There is no single method for determining line breaks, in fact, the rules may change based on user preference and document layout. Therefore the information in this annex, including the specification of the line breaking algorithm, is informative, rather than normative. However, there are some characters which have been encoded explicitly for the purpose of their effect on line breaking. Users adding such characters to a text must be able to expect that they will have the desired effect. For that reason, these characters have been given normative line breaking behavior.'),
                    Heading(level=3, contents='4.1 Line Breaking Properties'),
                    Paragraph(contents='All line breaking classes are informative, except for the line breaking classes marked with a * in Table 1 Line Breaking Properties. The interpretation of characters with normative line breaking classes by all conforming implementations must be consistent with the specification of the normative property.'),
                    Paragraph(contents='Conformant implementations must not tailor characters with normative line breaking classes to any of the informative line breaking classes, but may tailor characters with informative line breaking classes to one of the normative line breaking classes.'),
                    Paragraph(contents='Higher level protocols may further restrict, override, or extend the line breaking classes of certain characters in some contexts.'),
                    Heading(level=3, contents='4.2 Line Breaking Algorithm'),
                    Paragraph(contents='The specification of the Line Breaking Algorithm in this annex is informative. As stated in [Unicode] Section 3.2, Conformance Requirements, conformant implementations are not required to implement the Unicode Line Breaking Algorithm.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='The main emphasis in this section is to provide additional description of the line breaking behavior and to summarize the membership of character classes for each value of the line breaking property.'),
                    Paragraph(contents='The classification by properties defined here is used as input into two algorithms defined below that implement workable default line breaking methods. In a few instances, the descriptions in this section provide additional detail about handling a given character at the end of a line, which goes beyond the simple determination of line breaks.'),
                    Heading(level=3, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties, as of the time of publication of this document, is available in the current version of the file LineBreak.txt [Data] in the Unicode Character Database [UCD]. This is a tab-delimited, two column plain text file, with code position, line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Paragraph(contents='As more scripts are added to the Unicode Standard, and more scripts become more widely implemented and used on computers, more line breaking classes may be added, or the assignment of line breaking class may be changed for some characters. Implementations should not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the datafile).'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parenthesis for easy reference showing that...'),
                    Paragraph(contents='(A) - the class allows a break opportunity after in specified contexts'),
                    Paragraph(contents='(XA) - the class prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='(B) - the class allows a break opportunity before in specified contexts'),
                    Paragraph(contents='(XB) - the class prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='(P) - the class allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='(XP) - the class prevents a break opportunity for a pair of same characters'),
                    Paragraph(contents='NOTE: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this document, where they indicate position of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI - Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Characters with East Asian Width property A (ambiguous width), and which would otherwise be AL in this classification. They take on the AL line breaking class only when their resolved width is N (narrow) and take the ID line breaking class when their resolved width is W (wide). For more information on East Asian Width, and how to resolve it, see Unicode Standard Annex #11, East Asian Width [EAW]. In the absence of information needed to resolve their East Asian Width, they are treated as class AL.'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm and the pair table in Section 7, Pair Table-based Implementation, assume that all ambiguous characters have been resolved appropriately as part of assigning line breaking classes to the input characters.'),
                    Heading(level=3, contents='AL - Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Require other characters to provide break opportunities, otherwise no breaking between pairs of ordinary characters. However, this is tailorable. In some Far Eastern documents it may be desirable to allow breaking between pairs of ordinary characters.'),
                    Paragraph(contents='NOTE: use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='ALPHABETIC — all characters of General Categories Lu, Ll, Lt, Lm, Lo, except as they appear below. SYMBOLS — all characters of General Categories Sm, Sk, So, except as they appear below.'),
                    Heading(level=3, contents='BA - Break Opportunity After (A)'),
                    Paragraph(contents='Like the SPACE the characters in this class provide a break opportunity, but unlike SPACE they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                    Heading(level=3, contents='Breaking Spaces'),
                    Paragraph(contents='The following subset of characters with General Category Zs'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN SPACE'),
                    TableRow(contents='2003\ue000EM SPACE'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                    Paragraph(contents='The preceding list of space characters all have a specific width, but behave otherwise as breaking spaces. In setting a justified line, normally none of these spaces, except for THIN SPACE when used in mathematical notation, will change in width. See also the SP property.'),
                    Paragraph(contents='See the ID property for U+3000 IDEOGRAPHIC SPACE. For a list of all space characters in the Unicode Standard, see Section 6.2 in [Unicode].'),
                    Heading(level=3, contents='Tabs'),
                    TableRow(contents='0009\ue000TAB'),
                    Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    Heading(level=3, contents='Conditional Hyphens'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY is rendered invisibly and has no width, it merely indicates an optional line break. The rendering of the optional line break depends on the script. For the Latin script rendering the line break typically means displaying a hyphen at the end of the line, however, some languages require a change in spelling surrounding a line break. For examples see Section 5.3 Additional Details on use of Soft Hyphen.'),
                    Heading(level=3, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Since, unlike spaces, they print, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins.'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    Paragraph(contents='The Tibetan thseg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself, like space.'),
                    Paragraph(contents='The Ethiopian word space is a visible word delimiter and is kept on the line before.'),
                    Paragraph(contents='The Ogham space mark is rendered visibly between words but should be elided at the end of a line.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='A hyphenation point is a raised dot, which is used primarily to visibly indicate syllabification of words. Syllable breaks are potential line breaking opportunities in the middle of words. It is mainly used in dictionaries and similar works. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual break opportunity, the vertical bar is rendered as a hyphen.'),
                    Heading(level=3, contents='BB - Break opportunities before characters (B)'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent would move to the next line, and the preceding line ended with a hyphen.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Therefore, the only sensible way to break them is to keep them with the syllable; that is to break before them.'),
                    Paragraph(contents='NOTE: It is hard to find actual examples in most dictionaries, since the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='Despite its name, the Mongolian soft hyphen is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen it stays with the following line. SOFT HYPHEN should be used whenever optional line breaks are to be marked in any script.'),
                    Heading(level=3, contents='B2 - Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The EM DASH is used to set off parenthetical text, normally without spaces, however, this is language dependent, for example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH, but not between two em dashes. Pairs of em dashes are sometimes used instead of a single quotation dash. For that reason, the line should not be broken between em dashes event though not all fonts use connecting glyphs for the EM DASH.'),
                    Heading(level=3, contents='BK - Mandatory Break (A) - (normative)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters.'),
                    TableRow(contents='000C\ue000FORM FEED'),
                    Paragraph(contents='Form Feed separates pages. The text on the new page starts at the beginning of the line. No paragraph formatting is applied.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. No paragraph formatting is applied.'),
                    Paragraph(contents='This is similar to HTML <BR>'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. Paragraph formatting is applied.'),
                    Paragraph(contents='“NEW LINE FUNCTION (NLF)”'),
                    Paragraph(contents='New line functions provide additional explicit breaks. They are not individual characters, but are expressed as sequences of control characters NEL, LF, and CR. What particular sequence(s) form a NLF depends on the implementation and other circumstances as described in [Unicode] Section 5.8, Newline Guidelines.'),
                    Paragraph(contents='If a character sequence for a new line function contains more than one character, it is kept together. The default behavior is to break after LF or CR, but not between CR and LF. Two additional line breaking classes have been added for convenience in this operation.'),
                    Heading(level=3, contents='CB - Contingent Break Opportunity (B/A) - (normative)'),
                    Heading(level=3, contents='Contingent Break Opportunity Before and After'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='By default there is a break opportunity both before and after the object. Object-specific line break behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the break opportunities. Note, that this is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                    Heading(level=3, contents='CL - Closing Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation must be kept with the preceding character, and the same applies to all forms of wide comma and full stop.'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Paragraph(contents='plus any characters of General Category Pe in the Unicode Character Database.'),
                    Heading(level=3, contents='CM - Attached Characters and Combining Marks (XB) - (normative)'),
                    Heading(level=3, contents='Combining characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purposes of line breaking. The line-breaking behavior of the sequence is that of the base character. If U+0020 SPACE is used as a base character, it is treated as AL instead of SP.'),
                    Paragraph(contents='All characters with General Category Mc, Me, and Mn.'),
                    Heading(level=3, contents='Control and formatting characters'),
                    Paragraph(contents='Most controls and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='NOTE: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by assigning them the AL or ID class instead.'),
                    Paragraph(contents='All characters of General Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='CR - Carriage Return (A) - (normative)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                    Paragraph(contents='NOTE: On some platforms the sequence CR, CR, LF is used to indicate the location of actual line breaks, whereas CR LF is treated like a hard line break. As soon as a user edits the text, the location of all the CR CR LF may change as the new text breaks differently, while the relative position of the CR LF to the surrounding text stay the same. This convention allows an editor to return a buffer and the client is able to tell which text is displayed on which line, by counting CR CR LFs and CR LFs.'),
                    Heading(level=3, contents='EX - Exclamation / Interrogation (XB)'),
                    Paragraph(contents='These behave like closing characters, except in relation to postfix and ‘non-starter’ characters'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='2762\ue000HEAVY EXCLAMATION MARK ORNAMENT'),
                    TableRow(contents='2763\ue000HEAVY HEART EXCLAMATION MARK ORNAMENT'),
                    TableRow(contents='FE56..FE57\ue000SMALL QUESTION MARK..SMALL EXCLAMATION MARK'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL - Non-breaking (“Glue”) (XB/XA) - (normative)'),
                    Paragraph(contents='See also WJ.'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                    TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words should be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. NARROW NO-BREAK SPACE is used in Mongolian. The mongolian vowel separator acts like a NNBSP in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in [Unicode] Section 12.3 Mongolian.'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words must be hyphenated but may not be broken at the hyphen.'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    Paragraph(contents='This looks exactly like a Tibetan tsheg, but can be used to prevent a break. It inhibits breaking on either side, like no-break space.'),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This character has not been encoded in Unicode yet, but is an example of a character that should be given the GL property.'),
                    Heading(level=3, contents='HY - Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from the use as minus sign (or indicator of numerical range). If used as hyphen, it acts like HYPHEN.'),
                    Paragraph(contents='NOTE: In some practice, runs of HYPHEN-MINUS are used to stand in for longer dashes or horizontal rules. If it is desired to treat them like the characters or layout elements they stand for, and actual character code conversion is not performed, line breaking will need to support these special cases explicitly.'),
                    Heading(level=3, contents='ID - Ideographic (B/A)'),
                    Paragraph(contents='NOTE: The name ideographic for this line breaking class was chosen pars pro toto. The actual set of characters in this class includes characters other than Han ideographs.'),
                    Paragraph(contents='Characters with this property do not require other characters to provide break opportunities, lines can ordinarily break before and after and between pairs of ideographic characters.'),
                    TableRow(contents='2E80..2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    TableRow(contents='HIRAGANA (except small characters)'),
                    TableRow(contents='KATAKANA (except small characters)'),
                    TableRow(contents='3400..4DBF\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='4E00..9FAF\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='F900..FAFF\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490..A4CF\ue000YI RADICALS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF10..FF19\ue000WIDE DIGITS'),
                    TableRow(contents='20000..2A6D6\ue000CJK UNIFIED IDEOGRAPHS EXTENSION B'),
                    TableRow(contents='2F800..2FA1D\ue000CJK COMPATIBILITY IDEOGRAPHS SUPPLEMENT'),
                    Paragraph(contents='plus all of the FULLWIDTH LATIN letters and all of the 3000-33FF blocks not covered elsewhere'),
                    Paragraph(contents='NOTE: use 2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Heading(level=3, contents='Korean'),
                    Paragraph(contents='Conjoining Jamos form Korean Syllable Blocks which are kept together, see [Boundaries]. Korean uses space based line breaking in many styles of documents. In that case Hangul Syllables and Conjoining Jamo are tailored to use class AL but the default is class ID.'),
                    TableRow(contents='1100..11FF\ue000Conjoining Jamos'),
                    TableRow(contents='AC00..D7AF\ue000HANGUL SYLLABLES'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    Heading(level=3, contents='IN - Inseparable characters (XP)'),
                    Heading(level=3, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used in consecutive sequence. They therefore prevent line breaks absolutely in a series of two character of this class.'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS - Numeric Separator (Infix) (XB)'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from following numeric characters, unless space character intervenes. Since they are otherwise sentence ending punctuation, they prevent breaks before.'),
                    Paragraph(contents='There is no break in “100.00” or “10,000”, nor in “12:59”'),
                    Heading(level=3, contents='LF - Line Feed (A) - (normative)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                    Heading(level=3, contents='NL - Next Line (A) - (normative)'),
                    TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                    Paragraph(contents='There is a mandatory break after any NEL character, but see the discussion under BK.'),
                    Heading(level=3, contents='NS - Non-starters (XB)'),
                    Paragraph(contents='Some characters cannot start a line, but unlike CL they may allow a break in some context when they are following one or more space characters.'),
                    Paragraph(contents='All characters with General Category Lm (Letter, Modifier) and East Asian Width type W or H (such as KATAKANA-HIRAGANA PROLONGED SOUND MARK or the katakana iteration marks) and all characters with General Category Sk (Symbol, Modifier) and East Asian width type W plus the following characters:'),
                    TableRow(contents='0E5A..0E5B\ue000THAI CHARACTER ANGKHANKHU..THAI CHARACTER KHOMUT'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D6..17DA\ue000KHMER SIGN CAMNUC PII KUUH..KHMER SIGN KOOMUUT'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='303C\ue000MASU MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK to HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                    TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK - HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='Plus all Hiragana, Katakana, and Halfwidth Katakana “small” characters'),
                    Paragraph(contents='NOTE: Optionally, the NS restriction may be relaxed and characters treated like ID, to achieve a more permissive style of line breaking.'),
                    Heading(level=3, contents='NU - Numeric (XP)'),
                    Paragraph(contents='Behave like ordinary characters in the context of ordinary characters, activate the prefix and postfix behavior of prefix and postfix characters'),
                    Paragraph(contents='DECIMAL DIGITS (All characters of General Category Nd, except FULL WIDTH)'),
                    Heading(level=3, contents='OP - Opening Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation must be kept with the following character'),
                    Paragraph(contents='All characters of General Category Ps in the Unicode Character Database.'),
                    Heading(level=3, contents='PO - Postfix (Numeric) (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene.'),
                    Paragraph(contents='For example, there is no break in “(12.00) %”'),
                    Paragraph(contents='The list of post-fix characters is:'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='2126\ue000OHM SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Heading(level=3, contents='PR - Prefix (Numeric) (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if space character intervenes.'),
                    Paragraph(contents='There is no break in “$ (100.00)”'),
                    Paragraph(contents='All currency symbols (General Category Sc) except as listed explicitly in PO and the following:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. When used in that way, these currency symbols should be treated as if they had line break class PO'),
                    Heading(level=3, contents='QU - Ambiguous Quotation (XB/XA)'),
                    Paragraph(contents='Some paired characters can be either opening or closing depending on usage. The default is to treat them as both opening and closing.'),
                    Paragraph(contents='NOTE: If language information is available, it can be used to determine which character is used as opening and which as closing quote. (See the information in [Unicode] Section 6.2, General Punctuation)'),
                    Paragraph(contents='Characters of General Category Pf or Pi in the Unicode Character Database as well as:'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='23B6\ue000BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one of a kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='SA - Complex-context Dependent Characters (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to e.g. a hyphenation algorithm. For the characters that have this property, no line breaks will be found otherwise, therefore complex context analysis is mandatory.'),
                    Paragraph(contents='NOTE: These characters can be mapped into their equivalent line breaking classes as result of dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='If dictionary lookup is not available they should be treated as XX.'),
                    Paragraph(contents='All characters of General Category Lo or Lm in these ranges:'),
                    TableRow(contents='0E00..0EFF\ue000THAI / LAO'),
                    TableRow(contents='1000..109F\ue000MYANMAR'),
                    TableRow(contents='1780..17FF\ue000KHMER'),
                    Heading(level=3, contents='SG - Surrogates (XP) - (normative)'),
                    Paragraph(contents='All code points with General Category Cs. The line break behavior of isolated surrogates is undefined.'),
                    Paragraph(contents='NOTE: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that are not supporting characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                    Heading(level=3, contents='SP - Space (A) - (normative)'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='The space characters are explicit break opportunities, but spaces at the end of a line are not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, since the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    Paragraph(contents='NOTE: SPACE, but none of the other breaking spaces, is used in determining an indirect break.'),
                    Heading(level=3, contents='SY - Symbols Allowing Break After (A)'),
                    Paragraph(contents='URLs are common enough now in regular plain text, that they must be taken into account when assigning general-purpose line breaking properties. The SY line break property is intended to provide a break after, but not in front of digits so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='Slash (SOLIDUS) is allowed as an additional, limited break opportunity to improve layout of web addresses'),
                    Paragraph(contents='NOTE: Normally, symbols are treated as AL. If it is desired to allow other breaks, more symbols can be added to this line breaking class, or classes BA, BB, B2 by tailoring, for example “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this document.'),
                    Heading(level=3, contents='WJ - Word joiner (XB/XA) - (normative)'),
                    Paragraph(contents='The action of these characters is to glue together both left and right neighbor character such that they are kept on the same line. If they follow a space character, they still allow a break.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but since it is also used in an unrelated way as a byte order mark the use of the WJ as the preferred interword glue will simplify the handling of FEFF. By definition WJ and ZWNBSP take precedence over the action of SP and ZW.'),
                    Heading(level=3, contents='XX - Unknown (XP)'),
                    Paragraph(contents='All characters with General Category Co and all codepoints with General Category Cn.'),
                    Paragraph(contents='Unassigned code positions, private use characters and characters for which reliable line breaking information is not available are assigned this default line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior, e.g. by assigning characters the property ID or another class, if that is more likely to give the correct default behavior for their users, or use other means to determine the correct behavior. For example one implementation might treat any private use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private use characters. The details of such use of private use characters are outside the scope of this standard.'),
                    Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 0x10000 to 0x1FFFD as AL and characters in the range 0x20000 to 0x2FFFD, and 0x30000 to 0x3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                    Paragraph(contents='For more information on handling default property values for unassigned characters see the discussion on default property values in Section 5.3 of [Unicode].'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm and the pair table in Section 7, Pair Table-based Implementation, assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                    Heading(level=3, contents='ZW - Zero Width Space (A) - (normative)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character does not have width. It is used to enable additional (invisible) break opportunities wherever SPACE cannot be used.'),
                    Heading(level=3, contents='5.2 Additional Details on Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow strict standards that guide their use of characters to indicate features of the terms listed. Some of these conventions mark places that can also serve as line breaking opportunities and therefore interact with line breaking and are described here. Where appropriate, these characters have been inserted in the list of characters for the corresponding line breaking class above.'),
                    Paragraph(contents='However, implementing the full conventions in dictionaries requires special support. Looking up the noun “syllable” in eight dictionaries yields eight different conventions, in one dictionary a natural hyphen in a word becomes a tilde dash if the word is split.'),
                    Paragraph(contents='Dictionary of the English Language, Samuel Johnson, 1843 SY´LLABLE where ´ is a U+02B9 (and a large one at that) and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lâ'bl where · is a slightly above middle dot indicating the vowel of the stressed syllable (similar to Johnson's acute). The letter â is really U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIleb(e)l where ' is U+02C8, I is U+026A, e is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´e-bl where the stressed syllable is followed by ´ U+02B9, e is U+0259, - is a hyphen when splitting a word like abate´- ment the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention if splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIlebl where I is U+026A U+0332, e is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIlebe°l where I is U+026A U+0332, and means the same as the BBC. The e is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary. syl·la·ble (sílleb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent (rather than being followed by an accent). The letter e is a schwa in the actual example and ' is apostrophe."),
                    Paragraph(contents="Webster's 3rd New International Dictionary. syl·la·ble /'silebel/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The e's are schwas as usual. Webster splits words at the end of a line with a normal hyphen. When a hyphenated word is split at the hyphen this is indicated by a double hyphen which looks like a light version of the German Fraktur hyphen (short equals sign with a slight slope up to the right)."),
                    Heading(level=3, contents='5.3 Additional Details on the Use of Soft Hyphen'),
                    Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intra-word line-break position. If the line is broken at that point, then whatever mechanism is appropriate for intra-word line-breaks should be invoked, just as if the line break had been triggered by another mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, such as:'),
                    Paragraph(contents='• simply inserting a hyphen glyph'),
                    Paragraph(contents='• inserting a hyphen glyph and changing spelling in the divided word parts'),
                    Paragraph(contents='• not showing any visible change and simply breaking at that point'),
                    Paragraph(contents='• inserting a hyphen glyph at the beginning of the new line'),
                    Paragraph(contents='Here are some example of spelling changes:'),
                    Paragraph(contents='• in traditional German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”'),
                    Paragraph(contents='• in modern Dutch, a e-diaresis after the hyphenation point can change into a simple “e”: “angeërfde” hyphenates into “ange- / erfde”'),
                    Paragraph(contents='• in German and Swedish, a consonant is sometimes doubled: “tuggummi”; hyphenates into “tugg- / gummi”'),
                    Paragraph(contents='• in Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”'),
                    Paragraph(contents='Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases. The inserted hyphen glyph, if any, can be take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, or U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                    Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line-breaking implementation to make any necessary spelling changes when such a possible hyphenation becomes actual.'),
                    Paragraph(contents="Sometimes it's desirable to encode text that will not be further broken into lines, in other words, text that includes line breaking decisions. If such text includes hyphenations, the spelling must reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like character in Unicode see Section 6.2, General Punctuation in [Unicode]."),
                    Paragraph(contents='There are three types of hyphens: Explicit hyphens, conditional hyphens, and dictionary-inserted hyphens (as a result of a hyphenation process). There is no character code for the third kind of hyphen; therefore if it is desired to make the distinction, the fact that a hyphen is dictionary-inserted must be represented out of band, or by using another control code instead of SHY.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY it is customarily treated as overriding the action of the hyphenator for that word.'),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='UAX#29 Text Boundaries, [Boundaries], describes a particular method for boundary detection. It is based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                    Paragraph(contents='A slightly simplified implementation of such an algorithm can be devised that uses a two dimensional table to resolve break opportunities between pairs or characters. It is described in Section 7, Pair-Table Based Implementation.'),
                    Heading(level=3, contents='Line breaking rules'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules which take line breaking classes as input. The line breaking rules are stated in terms of regular expressions over the line breaking classes defined above and three special symbols indicating the type of line break opportunity.'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit ”otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent, i.e. they have the same effect.'),
                    Paragraph(contents='The distinction between direct and indirect break is handled by explicitly considering the effect of SP in rule LB12. Because rules are applied in order, rule LB12 implies that a prohibited break in rules 13-19 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ’H’ stands for an ideographs, ’h’ for small kana, ’9’ for digits.'),
                    Heading(level=4, contents='Resolve line breaking classes:'),
                    Rule(contents='LB 1 Assign a line break category to each character of the input. Resolve AI, CB, SA, SG, XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                    Paragraph(contents='Alternatively, particularly for text consisting of or predominantly containing of characters with line breaking class SA, it may be useful defer the determination of line breaks to a different algorithm entirely.'),
                    Heading(level=4, contents='Start and end of text:'),
                    Rule(contents='LB 2a Never break at the start of text'),
                    Formula(contents='× sot'),
                    Rule(contents='LB 2b Always break at the end of text'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases. Their effect is to have at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text to run over the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Rule(contents='LB 3a Always break after hard line breaks (but never between CR and LF).'),
                    Formula(contents='BK !'),
                    Rule(contents='LB 3b Treat CR followed by LF, as well as CR, LF and NL as hard line breaks'),
                    Formula(contents='CR × LF'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='NL !'),
                    Rule(contents='LB 3c Don’t break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF | NL )'),
                    Paragraph(contents='Note: A hard line break can consist of BK or a New Line Function (NLF) as described in in Section 5.8 Newline Guidelines of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described.'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB 4 Don’t break before spaces or zero-width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB 5 Break after zero-width space.'),
                    Formula(contents='ZW ÷'),
                    Heading(level=4, contents='Conjoining Jamo:'),
                    Paragraph(contents='Conjoining Jamo form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul Syllables; no breaks can occur in the middle of a syllable block. The effective line breaking class for the syllable block should match the line breaking class for Hangul Syllables, which is ID by default, but is often tailored to AL, see Section 8.'),
                    Rule(contents='LB 6 Don’t break a Korean Syllable Block, and treat it as a single unit of the same LB class as a Hangul Syllable in all the following rules'),
                    Formula(contents='Treat a Korean Syllable block as if it were ID'),
                    Paragraph(contents='See the Unicode Standard Annex #29 [Boundaries] for rules regarding Korean Syllable Blocks.'),
                    Heading(level=4, contents='Combining Marks:'),
                    Rule(contents='LB 7a In all of the following rules, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP CM* in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID'),
                    Paragraph(contents='As stated in [Unicode], Section 7.7 Combining Marks, combining characters are shown in isolation by applying them to either U+0020 SPACE (SP) or U+00A0 NO- BREAK SPACE (NBSP). The visual appearance is the same, but the line breaking result is different. Correspondingly, if there is no base, or if the base character is SP, CM* or SP CM* behave like ID.'),
                    Rule(contents="LB 7b Don't break a combining character sequence and treat it as if it has the LB class of the base character in all of the following rules."),
                    Formula(contents='Treat X CM* as if it were X'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. If there is no base character, in other words at the start of text (sot), treat CM as if following a SP. Virama are treated as CM so they work correctly.'),
                    Rule(contents='LB 7c Treat any remaining combining mark as AL.'),
                    Formula(contents='Treat any remaining CM as it if were AL'),
                    Paragraph(contents='This catches the case where a CM is the first character on the line. However, since combining marks are most commonly applied to characters of class AL, rule 7c alone generally produces correct results even in situations where 7a and 7b cannot be supported.'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and so come before rule 12.'),
                    Rule(contents='LB 8 Don’t break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB 9 Don’t break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB 10 Don’t break within ‘”[’, , even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Rule(contents='LB 11 Don’t break within ‘]h’, even with intervening spaces.'),
                    Formula(contents='CL SP* × NS'),
                    Rule(contents='LB 11a Don’t break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 × B2'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB 11b Don’t break before or after NBSP, WORD JOINER and related characters'),
                    Formula(contents='× GL'),
                    Formula(contents='GL ×'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB 12 Break after spaces'),
                    Formula(contents='SP ÷'),
                    Paragraph(contents='Many existing implementations reverse the order of precedence between rules LB11b and LB12.'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB 14 Don’t break before or after ‘”’'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB 14a Break before and after unresolved CB'),
                    Formula(contents='÷ CB'),
                    Formula(contents='CB ÷'),
                    Paragraph(contents='Conditional breaks should be resolved external to the line break rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                    Rule(contents='LB 15 Don’t break before hyphen-minus, other hyphens, fixed-width spaces, small kana and other non- starters, or after acute accents:'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents='LB 16 Don’t break between two ellipses, or between letters or numbers and ellipsis:'),
                    Formula(contents='AL × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ’9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents="Don't break alphanumerics."),
                    Rule(contents='LB 17 Don’t break within ‘a9’, ‘3a’, or ‘H%’'),
                    Formula(contents='ID × PO'),
                    Formula(contents='AL × NU'),
                    Formula(contents='NU × AL'),
                    Paragraph(contents='Numbers are of the form PR ? ( OP | HY ) ? NU (NU | IS) * CL ? PO ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='This is approximated with the following rules. (Some cases are already handled above, like ‘9,’, ‘[9’.) Regular expression-based line breaking engines will get better results implementing the above regular expression for numeric expressions.'),
                    Rule(contents='LB 18 Don’t break between the following pairs of classes.'),
                    Formula(contents='CL × PO'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='NU × PO'),
                    Formula(contents='PR × AL'),
                    Formula(contents='PR × HY'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-‘, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Rule(contents='LB 18b Break after hyphen-minus, and before acute accents:'),
                    Formula(contents='HY ÷'),
                    Formula(contents='÷ BB'),
                    Heading(level=4, contents='Finally, join alphabetic letters and break everything else.'),
                    Rule(contents='LB 19 Don’t break between alphabetics (“at”)'),
                    Formula(contents='AL × AL'),
                    Rule(contents='LB 20 Break everywhere else'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair-Table Based Implementation'),
                    Paragraph(contents='A two dimensional table can be used to resolve break opportunities between pairs of characters. The rows of the table are labeled by the possible values of the line breaking property of the leading character in the pair; the columns are labeled by the line breaking class for the following character of the pair. Each intersection is labeled with the resulting line breaking opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of such a table-based definition. However, it uses line breaking classes whose membership is not solely determined by the line breaking property (as in this Annex), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classed defined above.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes of which only 14 appear to be unique. A minimal table representation is unique, except for trivial reordering of rows and columns.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Rules LB 7a and LB 7b, as well as LB 9 - LB11 require extended context for handling combining marks and spaces. This extended context must be built into the code that interprets the pair table.'),
                    Paragraph(contents='By broadening the definition of pair from B A, where B is the line breaking class before a break, and A the one after, to B SP* A, where SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line breaking opportunity (i.e. direct and indirect breaks). Rules equivalent to the ones given in Section 6 Line Breaking Algorithm can be formulated without explicit use of SP, by instead using % to express indirect breaks. These rules can then be simplified to involve only pairs of classes, e.g. only constructions of the form'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B ^ A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can then be automatically translated into a pair table, as in the example below. Line break analysis then proceeds by pair table lookup.'),
                    Heading(level=3, contents='7.3 Example Table'),
                    Paragraph(contents='The following example table implements the line breaking behavior described in this Annex, within the limitation that only context of the form B SP* A is considered. BK, CR, LF, NL and SP classes are handled explicitly in the outer loop as given in the code sample below. B CM* can be handled approximately in the table, or explicitly in the driving loop, as explained in Section 7.4 Combining Marks. Using the table for CM is equivalent to making the simplifying assumption that combining marks are only applied to base characters of line breaking class AL. Conjoining Jamos are considered separately in Section 7.5 Conjoining Jamos.'),
                    Paragraph(contents='Table 2 Example Pair Table'),
                    TableRow(contents="'After' class"),
                    TableRow(contents='OP\ue000CL\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM\ue000WJ'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^'),
                    TableRow(contents='CL\ue000_\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='QU\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^'),
                    TableRow(contents='GL\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^'),
                    TableRow(contents='NS\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='EX\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='SY\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='IS\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='PR\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000^\ue000^'),
                    TableRow(contents='PO\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='NU\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='AL\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='ID\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='IN\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='HY\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='BA\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='BB\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^'),
                    TableRow(contents='B2\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000^\ue000^\ue000#\ue000^'),
                    TableRow(contents='ZW\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000^\ue000_\ue000_'),
                    TableRow(contents='CM\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='WJ\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^'),
                    Paragraph(contents='Suppressed: XX SP BK CR LF CB SA AI NL'),
                    Paragraph(contents='• ^ denotes a prohibited break: Never break before A and after B, even if one or more spaces intervene.'),
                    Paragraph(contents='• As a reminder, B ^ A is equivalent to B SP* × A.'),
                    Paragraph(contents='• % denotes an indirect break opportunity: Don’t break before A, unless one or more spaces follow B.'),
                    Paragraph(contents='• As a reminder, B % A is equivalent to B × A and B SP+ ÷ A.'),
                    Paragraph(contents='• # denotes an indirect break opportunity for combining marks following a space. It is similar to an indirect break, but if a break is taken it is before the last space in front of A.'),
                    Paragraph(contents='• In other words, B # A is equivalent to B × A and B SP* ÷ SP A.'),
                    Paragraph(contents='• _ an empty cell denotes a direct break opportunity (equivalent to ÷ as defined above).'),
                    Paragraph(contents='• These are left blank in the table to make them easier to distinguish.'),
                    Paragraph(contents='Hovering over the cells in a browser enabled for tool-tips, reveals the rule number that determines the breaking status in the case in question. When a case has to be tested with and without intervening spaces, multiple rules are given. Hovering over a line break class name gives a sample member of the class and additional information. Clicking on any line break class name anywhere jumps to the definition.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two functions demonstrate how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the following line breaking classes need to be added: CR, LF, NL, CB, XX. They have been omitted here for brevity.'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    int findComplexBreak(int *pcls, int *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='         if (!cch)'),
                    CodeLine(contents='               return 0;'),
                    CodeLine(contents='         int cls = pcls[0];'),
                    CodeLine(contents='         for(int ich = 0; ich < cch; ich++) {'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                  // .. do complex break analysis here'),
                    CodeLine(contents='                  // and report any break opportunities in pbrk ..'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                  if (pcls[ich] != SA)'),
                    CodeLine(contents='                         break;'),
                    CodeLine(contents='                  }'),
                    CodeLine(contents='         return ich;'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    CodeLine(contents='\xa0   enum break_action { '),
                    CodeLine(contents='       DBK = 0, // direct break     (blank in table)'),
                    CodeLine(contents='       IBK,     // indirect break   (% in table)'),
                    CodeLine(contents='       CBK,     // combining break  (# in table)'),
                    CodeLine(contents='       PBK };   // prohibited break (^ in table)'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable)'),
                    CodeLine(contents='    int findLineBrk(int *pcls, int *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='         if (!cch) '),
                    CodeLine(contents='              return O;'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='         int  cls = pcls[0];'),
                    CodeLine(contents=''),
                    CodeLine(contents='         // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='         for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              // handle spaces'),
                    CodeLine(contents='              if (pcls[ich] == SP) {'),
                    CodeLine(contents='                   pbrk[ich-1] = PBK;'),
                    CodeLine(contents='                   continue;'),
                    CodeLine(contents='              }'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              // handle complex scripts'),
                    CodeLine(contents='              if (pcls[ich] == SA) {'),
                    CodeLine(contents='                    ich += findComplexBreak(&pcls[ich-1], &pbrk[ich-1], cch - (ich-1));'),
                    CodeLine(contents='                    if (ich < cch)'),
                    CodeLine(contents='                         cls = pcls[ich];'),
                    CodeLine(contents='                    continue;'),
                    CodeLine(contents='              }'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              // lookup pair table information'),
                    CodeLine(contents='              int brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              if (brk == IBK) {'),
                    CodeLine(contents='                    pbrk[ich-1] = ((pcls[ich - 1] == SP) ? IBK : PBK);'),
                    CodeLine(contents='              } else if (brk == CBK) {'),
                    CodeLine(contents='                    if (ich > 1 && (pcls[ich - 1] == SP))'),
                    CodeLine(contents='                        pbrk[ich-2] = ((pcls[ich - 2] == SP) ? IBK : DBK);'),
                    CodeLine(contents='                    pbrk[ich-1] = PBK;'),
                    CodeLine(contents='              } else {'),
                    CodeLine(contents='                   pbrk[ich-1] = brk;'),
                    CodeLine(contents='              }'),
                    CodeLine(contents='              cls = pcls[ich];'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        // always break at the end'),
                    CodeLine(contents='        pbrk[ich-1] = DBK;'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='   }'),
                    Paragraph(contents='The function returns all the break opportunities in the array pointed to by pbrk, using the values in the table. On return pbrk[ich] is the type of break after the character at index ich.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='If one makes the simplifying assumption that combining marks are only applied to AL, or that applying a combining mark turns the combination into AL, then CM can be handled in the table as shown. (Such an assumption does not hold when conjoining Jamos are used).'),
                    Paragraph(contents='Therefore it is preferable to handle CM outside of the pair table in the driver code. Adding a simple statement in the loop'),
                    CodeLine(contents='    // handle combining marks'),
                    CodeLine(contents='    if (pcls[ich] == CM){'),
                    CodeLine(contents='       if (pcls[ich-1] == SP){'),
                    CodeLine(contents='          cls = ID;'),
                    CodeLine(contents='          if (ich > 1)'),
                    CodeLine(contents='\t     pbrk[ich-2] = brkPairs[pcls[ich-2]][ID] == DBK ? DBK : PBK;'),
                    CodeLine(contents='       }'),
                    CodeLine(contents='       pbrk[ich-1] = PBK;'),
                    CodeLine(contents='       continue;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='would have the effect of letting the CM take on the class of the preceding non-CM characters. It also takes care of rule LB7, treating a combining mark applied to a SP as if it was ID. This also requires a statement in the setup part before the loop to cover the case of a missing base character at the beginning of the line:'),
                    CodeLine(contents='    // handle missing base character'),
                    CodeLine(contents='    if (cls == CM)'),
                    CodeLine(contents='            cls = ID;'),
                    Heading(level=3, contents='7.5 Conjoining Jamos'),
                    Paragraph(contents='In principle, line break analysis would follow grapheme cluster boundary detection. This would handle combining character sequences containing non-spacing marks and conjoining Jamo sequences as units. However, in order to do the analysis in one pass, combining character sequences can be handled approximately as described above. For Korean Syllable Blocks, a simple pair table can be constructed based on the information in [Boundaries]. The input to such a pair table would be Korean Syllable Type values.'),
                    Heading(level=3, contents='8 Customization'),
                    Paragraph(contents='A real world line breaking algorithm must be tailorable to some degree to meet user or document requirements.'),
                    Paragraph(contents='In Korean, for example, two distinct line breaking modes may occur, which can be summarized as breaking after each character, or breaking after spaces (as in Latin text). The former tends to occur when text is set justified, the latter, when ragged margins are used. In that case, even Ideographs are only broken at space characters.'),
                    Paragraph(contents='In Japanese for example, tighter and looser specifications of prohibited line breaks may be used.'),
                    Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how these can be used to customize the algorithm as needed.'),
                    Heading(level=4, contents='8.1 Types of Tailoring'),
                    Paragraph(contents='There are three principal ways of tailoring the line break algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters. This is useful for cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes. This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to overriding some of the rules in Section 6 Line Breaking Algorithm.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions is equivalent to the preceding, but instead of changing the values for the pair intersection directly in the table, they can be labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be enabled at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself, for example by providing specialized rules to recognize and break common constructs, such as URLs. Such open ended customizations place no limits to possible changes, other than to correctly implement characters with normative line-breaking properties.'),
                    Heading(level=3, contents='8.2 Examples of Customization'),
                    Paragraph(contents='Example 1. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. The sample code sketches a different approach where the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks inside a run of spaces. This cannot be done in the pair-table, but requires a change in the way the driver loop handles spaces.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean uses either implicit breaking around characters (type 2 as defined above in Section 3 Introduction) or uses spaces (type 1). Space based layout is common in informal documents with ragged margins, such as magazines, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersection of ID/ID, AL/ID and ID/AL are affected. For alphabetic style line breaking, breaks for these four cases require space, for ideographic style line breaking, these four cases do not require spaces. Therefore, he defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given (piece of) text.'),
                    Paragraph(contents='Example 4. Sometimes allowing alphabetic characters and digit strings to break anywhere is required in Far Eastern context. According to reference [Suign98] this can again be done in the same way, this time affecting the intersections of NU/NU, NU/AL, AL/AL, and AL/NU.'),
                    Paragraph(contents='Example 5. Some users prefer to force Kana syllables to be kept together, i.e. the syllable kyu, spelled with the two kanas KI and “small yu” would be kept together even though KI and yu are normally atomic. This customization can be handled via the first method, by changing the classification of the Kana small characters from ID to NS as needed.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real world implementation of a pair-table based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. This implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=2, contents='References'),
                    TableRow(contents='[Bidi]\ue000Unicode Standard Annex #27: Unicode Bidirectinal Algorithm http://www.unicode.org/unicode/reports/tr9/'),
                    TableRow(contents='[Boundaries]\ue000Unicode Standard Annex #29, Text Boundaries. http://www.unicode.org/unicode/reports/tr29/ For information on grapheme cluster boundaries'),
                    TableRow(contents='[Cedar97]\ue000Cy Cedar, David Veintimilla, Michel Suignard and Asmus Freytag, Report from the Trenches: Microsoft Publisher goes Unicode, Proceedings of the Eleventh International Unicode Conference, San Jose, CA 1997'),
                    TableRow(contents='[Data]\ue000The version of the line break property data file at the time of the publication of this document is http://www.unicode.org/Public/4.0-Update/LineBreak-4.0.0.txt The latest version of the data file is http://www.unicode.org/Public/UNIDATA/LineBreak.txt'),
                    TableRow(contents='[EAW]\ue000Unicode Standard Annex #11, East Asian Width. http://www.unicode.org/unicode/reports/tr11 For a definition of East Asian Width'),
                    TableRow(contents='[FAQ]\ue000Unicode Frequently Asked Questions http://www.unicode.org/unicode/faq/ For answers to common questions on technical issues.'),
                    TableRow(contents='[Feedback]\ue000http://www.unicode.org/reporting.html For reporting errors and requesting information online.'),
                    TableRow(contents='[Glossary]\ue000Unicode Glossary http://www.unicode.org/glossary/ For explanations of terminology used in this and other documents.'),
                    TableRow(contents='[JIS]\ue000JIS X 4051-1995. Line Composition Rules for Japanese Documents. ( 『日本語文晝の行組版方法』) Japanese Standards Association. 1995.'),
                    TableRow(contents='[Knuth78]\ue000Donald E. Knuth and Michael F. Plass, Breaking Lines into Paragraphs, republished in Digital Typography, CSLI 78, (Stanford, California: CLSI Publications1997)'),
                    TableRow(contents='[Reports]\ue000Unicode Technical Reports http://www.unicode.org/unicode/reports/ For information on the status and development process for technical reports, and for a list of technical reports.'),
                    TableRow(contents='[Suign98]\ue000Michel Suignard, Worldwide Typography and How to Apply JIS X 4051-1995 to Unicode, Proceedings of the Twelfth International Unicode/ISO 10646 Conference, Tokyo, Japan, 1998'),
                    TableRow(contents='[TeX]\ue000Donald E. Knuth, TEX, the Program, Volume B of Computers & Typesetting, (Reading, Massachusetts: Addison-Wesley 1986)'),
                    TableRow(contents='[Unicode]\ue000The Unicode Standard, Version 4.0, (Reading, Massachusetts: Addison-Wesley Developers Press 2003, ISBN 0-321-18578-1) or online as http://www.unicode.org/versions/Unicode4.0.0/'),
                    TableRow(contents='[UCD]\ue000Unicode Character Database http://www.unicode.org/ucd/ For an overview of the Unicode Character Database and a list of its associated files see http://www.unicode.org/Public/UNIDATA/UCD.html'),
                    TableRow(contents='[Versions]\ue000Versions of the Unicode Standard http://www.unicode.org/unicode/standard/versions/ For details on the precise contents of each version of the Unicode Standard, and how to cite them.'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples.'),
                    Heading(level=2, contents='Modifications'),
                    Paragraph(contents='Change from Revision 13:'),
                    Paragraph(contents='[Revision 13, being a proposed update is superseded and no longer publicly available]'),
                    Paragraph(contents='Change from Revision 12:'),
                    Paragraph(contents='• Added new line break classes NL and WJ to better support NEL and Word Joiner.'),
                    Paragraph(contents='• Deprecated the use of class SG.'),
                    Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                    Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                    Paragraph(contents='• Clarified the behavior of SHY and mongolian todo soft syphen, as well as WJ and ZWNBSP.'),
                    Paragraph(contents='• Added a new subsection 5.3 on soft hyphen and a new subsection 7.6 on conjoining jamos.'),
                    Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                    Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                    Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                    Paragraph(contents='• Expanded the introduction in Section 3.'),
                    Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                    Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                    Paragraph(contents='Change from Revision 11:'),
                    Paragraph(contents='[Revision 11, being a proposed update, is superseded and no longer publicly available]'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                    Paragraph(contents='Change from Revision 10:'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added WORD JOINER to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the datafile. Only characters whose LB class differs from those of characters with related General Category are noted explicitly in this text.'),
                    Paragraph(contents='Change from Revision 9:'),
                    Paragraph(contents='• Change header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Paragraph(contents='Change from Revision 8:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX'),
                    Paragraph(contents='• LB 7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair-table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair-table entry PR % ID'),
                    Paragraph(contents='• Reworked Section 7.5'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull)'),
                    Paragraph(contents='Change from Revision 7:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX since the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB 6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB 7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB 17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                    Paragraph(contents='Change from Revision 6:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Paragraph(contents='Change from Revision 5:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='Copyright © 1998-2003 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report.')],
 Version(4, 0, 1): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Line Breaking Properties'),
                    TableRow(contents='Version\ue0004.0.1'),
                    TableRow(contents='Authors\ue000Asmus Freytag (asmus@unicode.org)'),
                    TableRow(contents='Date\ue0002004-03-30'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/unicode/reports/tr14/tr14-15.html'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/unicode/reports/tr14/tr14-14.html'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/unicode/reports/tr14/'),
                    TableRow(contents='Tracking Number\ue00015'),
                    Heading(level=3, contents='Summary'),
                    Paragraph(contents='This report presents the specification of line breaking properties for Unicode characters as well as a model algorithm for determining line break opportunities.'),
                    Heading(level=3, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved by the Unicode Technical Committee as a Unicode Standard Annex. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version number of the Unicode Standard at the last point that the UAX document was updated.'),
                    Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this document is found in the References section. For the latest version of the Unicode Standard see [Unicode]. See [Reports] for a list of current Unicode Technical Reports. For more information about versions of the Unicode Standard, see [Versions].'),
                    Heading(level=3, contents='Contents'),
                    Paragraph(contents='1. Overview and Scope'),
                    Paragraph(contents='2. Definitions'),
                    Paragraph(contents='3. Introduction'),
                    Paragraph(contents='4. Conformance'),
                    Paragraph(contents='4.1 Line Breaking Properties'),
                    Paragraph(contents='4.2 Line Breaking Algorithm'),
                    Paragraph(contents='5. Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Additional Details on Dictionary Usage'),
                    Paragraph(contents='5.3 Additional Details on the Use of Soft Hyphen'),
                    Paragraph(contents='5.4 Additional Details on the Use of Double Hyphen'),
                    Paragraph(contents='6. Line Breaking Algorithm'),
                    Paragraph(contents='7. Pair Table-based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Pair Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='8. Customization'),
                    Paragraph(contents='8.1 Types of Tailoring'),
                    Paragraph(contents='8.2 Examples of Customization'),
                    Paragraph(contents='References'),
                    Paragraph(contents='Acknowledgments'),
                    Paragraph(contents='Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='Although the text of The Unicode Standard [Unicode] presents a limited description of some of the characters with specific function in line breaking, it does not give a complete specification of line breaking behavior. This Unicode Standard Annex provides more detailed information about default line breaking behavior in a way that reflects best practices for the support of multilingual texts.'),
                    Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. Therefore, the line breaking properties that are provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. The Unicode Standard assigns normative line breaking properties to those characters.'),
                    Paragraph(contents='The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                    Paragraph(contents='Following the formal definitions and summary of the line breaking task and a brief section on conformance requirements, there are four main sections:'),
                    Paragraph(contents='• Section 5 Line Breaking Properties contains a narrative description of the line breaking behavior of the characters of the Unicode Standard and their grouping in alphabetical order by line breaking class.'),
                    Paragraph(contents='• Section 6 Line Breaking Algorithm provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='• Section 7 Pair Table-based Implementation provides the detailed description of an efficient pair table-based implementation of the algorithm.'),
                    Paragraph(contents='• Section 8 Customization provides a discussion on ways to customize or tailor the algorithm.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard [Unicode]. The notation defined in this technical report differs somewhat from the notation defined elsewhere in the Unicode Standard. All other notation used here without an explicit definition shall be as defined in the Unicode Standard .'),
                    Paragraph(contents='Line fitting — the process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='Line Break — the position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='Line Break Opportunity — a place where a line is allowed to end. Whether a given position in the text is a valid line break opportunity depends on the line breaking rules in force, as well as on context.'),
                    Paragraph(contents='Line Breaking — the process of selecting that part of a text that can be displayed on a line. In other words, selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                    Paragraph(contents='Line Breaking Property — A character property with enumerated values, as set out in Table 1 and separated into normative and informative. Line breaking property values are used to classify characters, and taken in context, determine the type of break.'),
                    Paragraph(contents='Line Breaking Class — a class of characters with the line breaking property value.'),
                    Paragraph(contents='Mandatory Break -—a line must break following a character that has the mandatory break property. Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                    Paragraph(contents='Direct Break — a line break opportunity exists between two adjacent characters of the given line breaking classes. This is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity also exists after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='Indirect Break — a line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces. In this case, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent. This is indicated in the pair table below as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though space characters are not shown in the pair table, an indirect break can only occur if one or more spaces follow B. In the notation of the rules in Section 6, Line Breaking Algorithm this would be represented as two rules: B × A and B SP+ ÷ A.'),
                    Paragraph(contents='Prohibited Break — no line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters. This is indicated in the pair table below as B ^ A, where B is the character class of the character before and A is the character class of the character after the break and the optional space characters are not shown. In the notation of the rules in Section 6, Line Breaking Algorithm this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='Hyphenation — Hyphenation uses language-specific rules to provide additional line break opportunities within a word. Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this document, it is assumed that hyphenation is equivalent to insertion of soft hyphen characters. All other aspects of hyphenation are outside the scope of this document.'),
                    Paragraph(contents='Table 1 Line Breaking Classes (* = normative)'),
                    TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Characters with this property...'),
                    TableRow(contents='Normative Line Breaking Classes'),
                    TableRow(contents='BK *\ue000Mandatory Break\ue000NL, PS\ue000cause a line break (after)'),
                    TableRow(contents='CR *\ue000Carriage Return\ue000CR\ue000cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF *\ue000Line Feed\ue000LF\ue000cause a line break (after)'),
                    TableRow(contents='CM *\ue000Attached Characters and Combining Marks\ue000Combining Marks, control codes\ue000prohibit a line break between the character and the preceding character'),
                    TableRow(contents='NL *\ue000Next Line\ue000NEL\ue000cause a line break (after)'),
                    TableRow(contents='SG *\ue000Surrogates\ue000Surrogates\ue000should not occur in well-formed text'),
                    TableRow(contents='WJ *\ue000Word Joiner\ue000WJ\ue000prohibit line breaks before or after'),
                    TableRow(contents='ZW *\ue000Zero Width Space\ue000ZWSP\ue000provide a break opportunity'),
                    TableRow(contents='GL *\ue000Non-breaking (“Glue”)\ue000NBSP, ZWNBSP, CGJ\ue000prohibit line breaks before or after'),
                    TableRow(contents='CB *\ue000Contingent Break Opportunity\ue000Inline Objects\ue000provide a line break opportunity contingent on additional information.'),
                    TableRow(contents='SP *\ue000Space\ue000Space\ue000generally provide a line break opportunity after the character, enable indirect breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000EM Dash\ue000provide a line break opportunity before and after the character'),
                    TableRow(contents='BA\ue000Break Opportunity After\ue000Spaces, Hyphens\ue000generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Opportunity Before\ue000Punctuation used in dictionaries\ue000generally provide a line break opportunity before the character.'),
                    TableRow(contents='HY\ue000Hyphen\ue000Hyphen-Minus\ue000provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='CL\ue000Closing Punctuation\ue000“)”, “]”, “}”, etc.\ue000prohibit a line break before'),
                    TableRow(contents='EX\ue000Exclamation/Interrogation\ue000“!”, “?” etc.\ue000prohibit line break before'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000allow only indirect line breaks between pairs.'),
                    TableRow(contents='NS\ue000Non Starter\ue000small kana\ue000allow only indirect line break before'),
                    TableRow(contents='OP\ue000Opening Punctuation\ue000“(“, “[“, “{“, etc.\ue000prohibit a line break after'),
                    TableRow(contents='QU\ue000Ambiguous Quotation\ue000Quotation marks\ue000act like they are both opening and closing'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='IS\ue000Infix Separator (Numeric)\ue000. ,\ue000prevent breaks after any and before numeric'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000form numeric expressions for line breaking purposes'),
                    TableRow(contents='PO\ue000Postfix (Numeric)\ue000%, ¢\ue000do not break following a numeric expression'),
                    TableRow(contents="PR\ue000Prefix (Numeric)\ue000$, £, ¥, etc.\ue000don't break in front of a numeric expression"),
                    TableRow(contents='SY\ue000Symbols Allowing Breaks\ue000/\ue000prevent a break before, and allow a break after'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000act like AL when the resolved EAW is N otherwise act as ID'),
                    TableRow(contents='AL\ue000Ordinary Alphabetic and Symbol Characters\ue000Alphabets and regular symbols\ue000are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs, Hangul, conjoining Jamo\ue000break before or after, except in some numeric context'),
                    TableRow(contents='SA\ue000Complex Context (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000provide a line break opportunity contingent on additional, language specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000Unassigned, Private Use\ue000are all characters with (as yet) unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Introduction'),
                    Paragraph(contents='Lines are broken as result of either of two conditions. The first condition is the presence of an explicit line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                    Paragraph(contents='Different formatting algorithms may use different methods of determining an optimal line break. For example, simple implementations just consider a line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the inter-character and inter-word spaces and consider the longest line that fits. When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates.'),
                    Paragraph(contents='When expanding or compressing inter-word space according to common typographical practice, only the spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and U+3000 IDEOGRAPHIC SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing inter-character space the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER are always ignored.'),
                    Paragraph(contents='Local custom or document style determines whether and to what degree expansion of inter-character space is allowed in justifying a line. In those languages, such as German, where inter-character space is commonly used to mark e m p h a s i s (like this), allowing variable inter-character spacing would have the unintended effect of adding random emphasis, and should therefore be avoided altogether.'),
                    Paragraph(contents='In table headings that use Han ideographs, on the other hand, even extreme amounts of inter-character space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                    Paragraph(contents='More complex formatting algorithms may take into account the interaction of line breaking decisions for the whole paragraph. The well known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                    Paragraph(contents='The definition of optimal line break or methods for selecting it are outside the scope of this document. For the purpose of this document, what is important is not so much what defines the optimal amount of text on the line, but how possible line break opportunities are determined. Whether and how a line break opportunity is actually used is up to the full layout system. [TEX] for example, uses line break opportunities based on hyphens only as a last resort.'),
                    Heading(level=3, contents='Determining line break opportunities'),
                    Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                    Paragraph(contents='1. Western — spaces and hyphens are used to determine breaks'),
                    Paragraph(contents='2. East Asian — lines can break anywhere, unless prohibited'),
                    Paragraph(contents='3. South East Asian — line breaks require morphological analysis'),
                    Paragraph(contents='The first is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and potentially user interaction or overrides.'),
                    Paragraph(contents='The second style of context is used with East Asian ideographic and syllabic scripts. The precise set of prohibited line breaks may depend on user preference or local custom.'),
                    Paragraph(contents='Korean makes use of both styles of line break. When Korean text is laid out justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the first style (relying on spaces) is commonly used instead, even for ideographs.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word-breaks to syllable boundaries, the determination of which requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                    Paragraph(contents='For multilingual text, styles one and two can be unified into a single set of specifications, based on the information provided in this report. Some Unicode characters have explicit line breaking properties assigned to them. These can be utilized with these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                    Paragraph(contents='Determining the line breaks in bidirectional text takes place before applying rule L1 of the Unicode Bidirectional Algorithm [Bidi]. However, it is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='There is no single method for determining line breaks; the rules may change based on user preference and document layout. Therefore the information in this annex, including the specification of the line breaking algorithm, is informative, rather than normative. However, some characters have been encoded explicitly for their effect on line breaking. Users adding such characters to a text expect that they will have the desired effect. For that reason, these characters have been given normative line breaking behavior.'),
                    Heading(level=3, contents='4.1 Line Breaking Properties'),
                    Paragraph(contents='All line breaking classes are informative, except for the line breaking classes marked with a * in Table 1 Line Breaking Properties. The interpretation of characters with normative line breaking classes by all conforming implementations must be consistent with the specification of the normative property.'),
                    Paragraph(contents='Conformant implementations must not tailor characters with normative line breaking classes to any of the informative line breaking classes, but may tailor characters with informative line breaking classes to one of the normative line breaking classes.'),
                    Paragraph(contents='Higher-level protocols may further restrict, override, or extend the line breaking classes of certain characters in some contexts.'),
                    Heading(level=3, contents='4.2 Line Breaking Algorithm'),
                    Paragraph(contents='The specification of the Line Breaking Algorithm in this annex is informative. As stated in [Unicode] Section 3.2, Conformance Requirements, conformant implementations are not required to implement the Unicode Line Breaking Algorithm. The relationship between conformance to the Unicode Standard, and conformance to an individual Unicode Standard Annex (UAX) is described in more detail in the Unicode Standard in Section 3.2 Conformance.'),
                    Paragraph(contents='There are many different ways to break lines of text, and the Unicode Standard does not restrict the ways in which implementations can do this. However, any Unicode-conformant implementation that purports to implement this specification must do so as described in the following clause. Implementations are free to deviate from this, as long as they do not purport to conform to this specification.'),
                    TableRow(contents='C1\ue000An implementation that claims conformance to the default Unicode Line Breaking Algorithm shall produce the same results as the algorithm published in this specification. • As specified in Section 3.2 of [Unicode], Unicode specifications are generally described as an algorithm or process, producing a result from a given input. However, these are simply logical specifications; particular implementations can change or optimize the internal processing as long as they provide the same results from the same input.'),
                    TableRow(contents='C2\ue000This specification defines default behavior, which is to be used in the absence of tailoring for particular languages and environments. • Where a particular environment requires tailoring, such modifications to this specification can be done without affecting conformance.'),
                    TableRow(contents="C3\ue000If tailoring is used by an implementation that claims conformance to the default Unicode Line Breaking Algorithm, the existence of such tailoring must be documented. • This does not require that the tailoring be described in a reproducible manner; for example, a statement 'tailored to language X' is sufficient."),
                    Paragraph(contents='At times, this specification recommends best practice. These recommendations are not normative and conformance with this specification does not depend on their realization. These recommendations contain the expression "We recommend ...", "This specification recommends ...", or some similar wording.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='This section provides additional description of the line breaking behavior and summarizes the membership of character classes for each value of the line breaking property.'),
                    Paragraph(contents='The classification by properties defined here is used as input into two algorithms defined below that implement workable default line breaking methods. In a few instances, the descriptions in this section provide additional detail about handling a given character at the end of a line, which goes beyond the simple determination of line breaks.'),
                    Heading(level=3, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties, as of the time of publication of this document, is available in the current version of the file LineBreak.txt [Data] in the Unicode Character Database [UCD]. This is a tab-delimited, two column plain text file, with code position, line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Paragraph(contents='As more scripts are added to the Unicode Standard, and more scripts become more widely implemented and used on computers, more line breaking classes may be added, or the assignment of line breaking class may be changed for some characters. Implementations should not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the datafile).'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parenthesis for easy reference showing that...'),
                    Paragraph(contents='(A) — the class allows a break opportunity after in specified contexts'),
                    Paragraph(contents='(XA) — the class prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='(B) — the class allows a break opportunity before in specified contexts'),
                    Paragraph(contents='(XB) — the class prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='(P) — the class allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='(XP) — the class prevents a break opportunity for a pair of same characters'),
                    Paragraph(contents='NOTE: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this document, where they indicate position of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI — Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Ambiguous characters are those that can act either like alphabetic characters (i.e. those with the AL line breaking class) or like ideographs (or characters with line breaking class ID), depending on context. In the absence of appropriate context information, they are treated as class AL.'),
                    Paragraph(contents='As originally defined, this class contained all characters with East Asian Width property A (ambiguous width), and which would otherwise be AL in this classification. They take the AL line breaking class only when their resolved width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). For more information on East Asian Width, and how to resolve it, see Unicode Standard Annex #11, East Asian Width [EAW].'),
                    Paragraph(contents='The original definition included many Latin, Greek and Cyrillic characters for which a default assignment of the AL line breaking class better corresponds to modern practice. At the same time, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                    Paragraph(contents='As updated, this line breaking class includes all characters with East Asian Width W, except those in the range U+0000..U+1FFF, plus the following characters:'),
                    TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                    TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm and the pair table in Section 7, Pair Table-based Implementation, assume that all ambiguous characters have been resolved appropriately as part of assigning line breaking classes to the input characters.'),
                    Heading(level=3, contents='AL — Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Require other characters to provide break opportunities, otherwise no breaking between pairs of ordinary characters. However, this is tailorable. In some Far Eastern documents it may be desirable to allow breaking between pairs of ordinary characters, particularly Latin characters and symbols.'),
                    Paragraph(contents='NOTE: use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='Except as listed explicitly below as part of another line breaking class, and except as assigned class AI or ID based on East Asian Width, this class contains the following characters:'),
                    Paragraph(contents='ALPHABETIC — all characters of General Categories Lu, Ll, Lt, Lm, Lo. SYMBOLS — all characters of General Categories Sm, Sk, So. NON-DECIMAL NUMBERS — all characters of General Categories Nl and No. PUNCTUATION — all characters of General Categories Pc, Pd and Po.'),
                    Paragraph(contents='plus these characters'),
                    TableRow(contents='0600..0603\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAFHA'),
                    TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                    TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                    TableRow(contents='2061..2063\ue000FUNCTION APPLICATION..INVISIBLE SEPARATOR'),
                    Paragraph(contents='These characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                    Heading(level=3, contents='BA — Break Opportunity After (A)'),
                    Paragraph(contents='Like the SPACE the characters in this class provide a break opportunity, but unlike SPACE they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                    Heading(level=3, contents='Breaking Spaces'),
                    Paragraph(contents='The following subset of characters with General Category Zs'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN SPACE'),
                    TableRow(contents='2003\ue000EM SPACE'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                    Paragraph(contents='The preceding list of space characters all have a specific width, but behave otherwise as breaking spaces. In setting a justified line, normally none of these spaces, except for THIN SPACE when used in mathematical notation, will change in width. See also the SP property.'),
                    Paragraph(contents='See the ID property for U+3000 IDEOGRAPHIC SPACE. For a list of all space characters in the Unicode Standard, see Section 6.2 in [Unicode].'),
                    Paragraph(contents='The Ogham space mark is rendered visibly between words but should be elided at the end of a line.'),
                    Heading(level=3, contents='Tabs'),
                    TableRow(contents='0009\ue000TAB'),
                    Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    Heading(level=3, contents='Conditional Hyphens'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY is rendered invisibly and has no width, it merely indicates an optional line break. The rendering of the optional line break depends on the script. For the Latin script rendering the line break typically means displaying a hyphen at the end of the line, however, some languages require a change in spelling surrounding a line break. For examples see Section 5.3 Additional Details on use of Soft Hyphen.'),
                    Heading(level=3, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Since, unlike spaces, they print, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins.'),
                    Paragraph(contents='Other forms of visible word dividers that provide break opportunities.'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                    TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                    TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                    TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                    Paragraph(contents='The Tibetan thseg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself, like space.'),
                    Paragraph(contents='The Ethiopian word space is a visible word delimiter and is kept on the line before.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='A hyphenation point is a raised dot, which is used primarily to visibly indicate syllabification of words. Syllable breaks are potential line break opportunities in the middle of words. It is mainly used in dictionaries and similar works. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual break opportunity, the vertical bar is rendered as a hyphen.'),
                    Heading(level=3, contents='BB — Break opportunities before characters (B)'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent would move to the next line, and the preceding line ended with a hyphen.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Therefore, the only sensible way to break them is to keep them with the syllable; that is to break before them.'),
                    Paragraph(contents='NOTE: It is hard to find actual examples in most dictionaries, since the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='Despite its name, the Mongolian soft hyphen is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen it stays with the following line. SOFT HYPHEN should be used whenever optional line breaks are to be marked in any script.'),
                    Heading(level=3, contents='B2 — Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The EM DASH is used to set off parenthetical text, normally without spaces, however, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH, but not between two em dashes. Pairs of em dashes are sometimes used instead of a single quotation dash. For that reason, the line should not be broken between em dashes even though not all fonts use connecting glyphs for the EM DASH.'),
                    Heading(level=3, contents='BK — Mandatory Break (A) — (normative)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters.'),
                    TableRow(contents='000C\ue000FORM FEED'),
                    Paragraph(contents='Form Feed separates pages. The text on the new page starts at the beginning of the line. No paragraph formatting is applied.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. No paragraph formatting is applied.'),
                    Paragraph(contents='This is similar to HTML <BR>'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. Paragraph formatting is applied.'),
                    Paragraph(contents='“NEW LINE FUNCTION (NLF)”'),
                    Paragraph(contents='New line functions provide additional explicit breaks. They are not individual characters, but are expressed as sequences of control characters NEL, LF, and CR. What particular sequence(s) form a NLF depends on the implementation and other circumstances as described in [Unicode] Section 5.8, Newline Guidelines.'),
                    Paragraph(contents='If a character sequence for a new line function contains more than one character, it is kept together. The default behavior is to break after LF or CR, but not between CR and LF. Two additional line breaking classes have been added for convenience in this operation.'),
                    Heading(level=3, contents='CB — Contingent Break Opportunity (B/A) — (normative)'),
                    Heading(level=3, contents='Contingent Break Opportunity Before and After'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='By default there is a break opportunity both before and after the object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the break opportunities. Note, that this is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                    Heading(level=3, contents='CL — Closing Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation must be kept with the preceding character, and the same applies to all forms of wide comma and full stop.'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Paragraph(contents='plus any characters of General Category Pe in the Unicode Character Database.'),
                    Heading(level=3, contents='CM — Attached Characters and Combining Marks (XB) — (normative)'),
                    Heading(level=3, contents='Combining characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purposes of line breaking. The line breaking behavior of the sequence is that of the base character. If U+0020 SPACE is used as a base character, it is treated as ID instead of SP.'),
                    Paragraph(contents='All characters with General Category Mc, Me, and Mn, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='Control and formatting characters'),
                    Paragraph(contents='Most controls and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='NOTE: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by assigning them the AL or ID class instead.'),
                    Paragraph(contents='All characters of General Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='CR — Carriage Return (A) — (normative)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                    Paragraph(contents='NOTE: On some platforms the sequence CR, CR, LF is used to indicate the location of actual line breaks, whereas CR LF is treated like a hard line break. As soon as a user edits the text, the location of all the CR CR LF may change as the new text breaks differently, while the relative position of the CR LF to the surrounding text stays the same. This convention allows an editor to return a buffer and the client is able to tell which text is displayed on which line, by counting CR CR LFs and CR LFs.'),
                    Heading(level=3, contents='EX — Exclamation / Interrogation (XB)'),
                    Paragraph(contents='These behave like closing characters, except in relation to postfix and ‘non-starter’ characters'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='1944\ue000LIMBU EXCLAMATION MARK'),
                    TableRow(contents='1945\ue000LIMBU QUESTION MARK'),
                    TableRow(contents='2762\ue000HEAVY EXCLAMATION MARK ORNAMENT'),
                    TableRow(contents='2763\ue000HEAVY HEART EXCLAMATION MARK ORNAMENT'),
                    TableRow(contents='FE56..FE57\ue000SMALL QUESTION MARK..SMALL EXCLAMATION MARK'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL — Non-breaking (“Glue”) (XB/XA) — (normative)'),
                    Paragraph(contents='See also WJ.'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                    TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words should be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. NARROW NO-BREAK SPACE is used in Mongolian. The mongolian vowel separator acts like a NNBSP in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in [Unicode] Section 12.3 Mongolian.'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words must be hyphenated but may not be broken at the hyphen.'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    Paragraph(contents='This looks exactly like a Tibetan tsheg, but can be used to prevent a break. It inhibits breaking on either side, like no-break space.'),
                    TableRow(contents='035D..0362\ue000COMBINING DOUBLE BREVE..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                    Paragraph(contents='These diacritics span two characters, thus no word or line breaks are possible on either side.'),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This character has not been encoded in Unicode yet, but is an example of a character that should be given the GL property.'),
                    Heading(level=3, contents='HY — Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from the use as minus sign (or indicator of numerical range). If used as hyphen, it acts like hyphen.'),
                    Paragraph(contents='NOTE: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If it is desired to treat them like the characters or layout elements they stand for, and actual character code conversion is not performed, line breaking will need to support these runs explicitly.'),
                    Heading(level=3, contents='ID — Ideographic (B/A)'),
                    Paragraph(contents='NOTE: The name ideographic for this line breaking class was chosen pars pro toto. The actual set of characters in this class includes characters other than Han ideographs.'),
                    Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters.'),
                    TableRow(contents='2E80..2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    TableRow(contents='HIRAGANA (except small characters)'),
                    TableRow(contents='KATAKANA (except small characters)'),
                    TableRow(contents='3400..4DBF\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='4E00..9FAF\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='F900..FAFF\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490..A4CF\ue000YI RADICALS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF10..FF19\ue000WIDE DIGITS'),
                    TableRow(contents='20000..2A6D6\ue000CJK UNIFIED IDEOGRAPHS EXTENSION B'),
                    TableRow(contents='2F800..2FA1D\ue000CJK COMPATIBILITY IDEOGRAPHS SUPPLEMENT'),
                    Paragraph(contents='plus all of the FULLWIDTH LATIN letters and all of the 3000-33FF blocks not covered elsewhere'),
                    Paragraph(contents='NOTE: use 2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Paragraph(contents='U+3000 IDEOGRAPHIC SPACE may be subject to expansion or compression during line justification.'),
                    Heading(level=3, contents='Korean'),
                    Paragraph(contents='Conjoining Jamos form Korean Syllable Blocks which are kept together, see [Boundaries]. Korean uses space-based line breaking in many styles of documents. In that case Hangul Syllables and Conjoining Jamo are tailored to use class AL but the default is class ID.'),
                    TableRow(contents='1100..11FF\ue000Conjoining Jamos'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    TableRow(contents='AC00..D7AF\ue000HANGUL SYLLABLES'),
                    Heading(level=3, contents='IN — Inseparable characters (XP)'),
                    Heading(level=3, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used in consecutive sequence. There is never a line break between two character of this class.'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS — Numeric Separator (Infix) (XB)'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                    Paragraph(contents='Since they are otherwise sentence ending punctuation, they prevent breaks before.'),
                    Heading(level=3, contents='LF — Line Feed (A) — (normative)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                    Heading(level=3, contents='NL — Next Line (A) — (normative)'),
                    TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                    Paragraph(contents='There is a mandatory break after any NEL character, but see the discussion under BK.'),
                    Heading(level=3, contents='NS — Non-starters (XB)'),
                    Paragraph(contents='Some characters cannot start a line, but unlike CL they may allow a break in some context when they are following one or more space characters.'),
                    TableRow(contents='0E5A..0E5B\ue000THAI CHARACTER ANGKHANKHU..THAI CHARACTER KHOMUT'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D6..17DA\ue000KHMER SIGN CAMNUC PII KUUH..KHMER SIGN KOOMUUT'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='303C\ue000MASU MARK'),
                    TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK to HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                    TableRow(contents='30FB..30FE\ue000KATAKANA MIDDLE DOT..KATAKANA VOICED ITERATION MARK'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='Plus all Hiragana, Katakana, and Halfwidth Katakana “small” characters'),
                    Paragraph(contents='NOTE: Optionally, the NS restriction may be relaxed and characters treated like ID, to achieve a more permissive style of line breaking, particular in some East Asian contexts.'),
                    Heading(level=3, contents='NU — Numeric (XP)'),
                    Paragraph(contents='Behave like ordinary characters in the context of ordinary characters, activate the prefix and postfix behavior of prefix and postfix characters'),
                    Paragraph(contents='DECIMAL DIGITS (All characters of General Category Nd, except FULL WIDTH) plus these characters'),
                    TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                    TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                    Paragraph(contents='Unlike IS the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                    Heading(level=3, contents='OP — Opening Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation must be kept with the following character'),
                    Paragraph(contents='All characters of General Category Ps in the Unicode Character Database.'),
                    Heading(level=3, contents='PO — Postfix (Numeric) (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene.'),
                    Paragraph(contents='For example, there is no break in “(12.00) %”'),
                    Paragraph(contents='The list of post-fix characters is:'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='FDFC\ue000RIAL SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Paragraph(contents='Alphabetic characters are also widely used as unit designators in a post-fix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                    Heading(level=3, contents='PR — Prefix (Numeric) (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if space character intervenes.'),
                    Paragraph(contents='There is no break in “$ (100.00)”'),
                    Paragraph(contents='All currency symbols (General Category Sc) except as listed explicitly in PO and the following:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. When used in that way, these currency symbols should be treated as if they had line breaking class PO.'),
                    Heading(level=3, contents='QU — Ambiguous Quotation (XB/XA)'),
                    Paragraph(contents='Some paired characters can be either opening or closing depending on usage. The default is to treat them as both opening and closing.'),
                    Paragraph(contents='NOTE: If language information is available, it can be used to determine which character is used as opening and which as closing quote. (See the information in [Unicode] Section 6.2, General Punctuation)'),
                    Paragraph(contents='Characters of General Category Pf or Pi in the Unicode Character Database as well as:'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='23B6\ue000BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one of a kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='SA — Complex-context Dependent Characters (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to e.g. a hyphenation algorithm. For the characters that have this property, no line breaks will be found otherwise, therefore complex context analysis is mandatory.'),
                    Paragraph(contents='NOTE: These characters can be mapped into their equivalent line breaking classes as result of dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='If dictionary lookup is not available they should be treated as XX.'),
                    Paragraph(contents='All characters of General Category Cf, Lo or Lm in these ranges:'),
                    TableRow(contents='0E00..0EFF\ue000THAI / LAO'),
                    TableRow(contents='1000..109F\ue000MYANMAR'),
                    TableRow(contents='1780..17FF\ue000KHMER'),
                    Heading(level=3, contents='SG — Surrogates (XP) — (normative)'),
                    Paragraph(contents='All code points with General Category Cs. The line breaking behavior of isolated surrogates is undefined.'),
                    Paragraph(contents='NOTE: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that are not supporting characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                    Heading(level=3, contents='SP — Space (A) — (normative)'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='The space characters are explicit break opportunities, but spaces at the end of a line are not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, since the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    Paragraph(contents='NOTE: SPACE, but none of the other breaking spaces, is used in determining an indirect break.'),
                    Heading(level=3, contents='SY — Symbols Allowing Break After (A)'),
                    Paragraph(contents='URLs are common enough now in regular plain text, that they must be taken into account when assigning general-purpose line breaking properties. The SY line breaking property is intended to provide a break after, but not in front of digits so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='Slash (SOLIDUS) is allowed as an additional, limited break opportunity to improve layout of web addresses'),
                    Paragraph(contents='NOTE: Normally, symbols are treated as AL. If it is desired to allow other breaks, more symbols can be added to this line breaking class, or classes BA, BB, B2 by tailoring, for example “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this document.'),
                    Heading(level=3, contents='WJ — Word joiner (XB/XA) — (normative)'),
                    Paragraph(contents='The action of these characters is to glue together both left and right neighbor character such that they are kept on the same line. If they follow a space character, they still allow a break.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but since it is also used in an unrelated way as a byte order mark the use of the WJ as the preferred interword glue will simplify the handling of FEFF. By definition WJ and ZWNBSP take precedence over the action of SP and ZW.'),
                    Heading(level=3, contents='XX — Unknown (XP)'),
                    Paragraph(contents='All characters with General Category Co and all code points with General Category Cn.'),
                    Paragraph(contents='Unassigned code positions, private use characters and characters for which reliable line breaking information is not available are assigned this default line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or word joiner around characters of class XX to allow or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior, e.g. by assigning characters the property ID or another class, if that is more likely to give the correct default behavior for their users, or use other means to determine the correct behavior. For example one implementation might treat any private use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private use characters. The details of such use of private use characters are outside the scope of this standard.'),
                    Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 0x10000 to 0x1FFFD as AL and characters in the range 0x20000 to 0x2FFFD, and 0x30000 to 0x3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                    Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3 of [Unicode].'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm and the pair table in Section 7, Pair Table-based Implementation, assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                    Heading(level=3, contents='ZW — Zero Width Space (A) — (normative)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                    Heading(level=3, contents='5.2 Additional Details on Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the listed terms. Some of these conventions mark places that can also serve as line break opportunities and therefore interact with line breaking. Some of these are described here. Where possible, the default line breaking properties for characters commonly used in dictionaries have been assigned so as to accommodate these conventions.'),
                    Paragraph(contents='However, implementing the full conventions in dictionaries requires special support. Looking up the noun “syllable” in eight dictionaries yields eight different conventions, in one dictionary a natural hyphen in a word becomes a tilde dash if the word is split.'),
                    Paragraph(contents='Dictionary of the English Language, Samuel Johnson, 1843 SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson's acute). The letter ă is U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, - is a hyphen when splitting a word like abate´- ment the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention if splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332>, ə is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332>, and means the same as the BBC. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary. syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent (rather than being followed by an accent). The ' is an apostrophe."),
                    Paragraph(contents="Webster's 3rd New International Dictionary. syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə's are schwas as usual. Webster splits words at the end of a line with a normal hyphen. When a hyphenated word is split at the hyphen this is indicated by a double hyphen which looks like a light version of the German Fraktur hyphen (short equals sign with a slight slope up to the right)."),
                    Heading(level=3, contents='5.3 Additional Details on the Use of Soft Hyphen'),
                    Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intra-word line-break position. If the line is broken at that point, then whatever mechanism is appropriate for intra-word line-breaks should be invoked, just as if the line break had been triggered by another mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, such as:'),
                    Paragraph(contents='• simply inserting a hyphen glyph'),
                    Paragraph(contents='• inserting a hyphen glyph and changing spelling in the divided word parts'),
                    Paragraph(contents='• not showing any visible change and simply breaking at that point'),
                    Paragraph(contents='• inserting a hyphen glyph at the beginning of the new line'),
                    Paragraph(contents='Here are a few examples of spelling changes:'),
                    Paragraph(contents='• in traditional German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”'),
                    Paragraph(contents='• in modern Dutch, a e-diaresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/eerd”.'),
                    Paragraph(contents='• in German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”'),
                    Paragraph(contents='• in Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”'),
                    Paragraph(contents='Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases. The inserted hyphen glyph, if any, can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, or U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                    Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation becomes actual.'),
                    Paragraph(contents="Sometimes it's desirable to encode text that will not be further broken into lines, in other words, text that includes line breaking decisions. If such text includes hyphenations, the spelling must reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like character in Unicode see Section 6.2, General Punctuation in [Unicode]."),
                    Paragraph(contents='There are three types of hyphens: Explicit hyphens, conditional hyphens, and dictionary-inserted hyphens (as a result of a hyphenation process). There is no character code for the third kind of hyphen; therefore if it is desired to make the distinction, the fact that a hyphen is dictionary-inserted must be represented out of band, or by using another control code instead of SHY.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY it is customarily treated as overriding the action of the hyphenator for that word.'),
                    Heading(level=3, contents='5.4 Additional Details on the Use of Double Hyphen'),
                    Paragraph(contents='In some fonts, noticeably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is merely a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                    Paragraph(contents="In some dictionaries, for example Webster's 3rd New International Dictionary cited above, double-stroke, oblique hyphens are used to indicate a hyphen at the end of the line that should be retained when the term shown is not line wrapped. It is not necessary to actually store a special character in the data, merely to substitute the glyph of any hyphen that ends up at the end of a line. In such convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen."),
                    Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. In these cases, the character is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='UAX#29 Text Boundaries, [Boundaries], describes a particular method for boundary detection. It is based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                    Paragraph(contents='A slightly simplified implementation of such an algorithm can be devised that uses a two dimensional table to resolve break opportunities between pairs or characters. It is described in Section 7, Pair Table-based Implementation.'),
                    Heading(level=3, contents='Line breaking rules'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules which take line breaking classes as input. The line breaking rules are stated in terms of regular expressions over the line breaking classes defined above and three special symbols indicating the type of line break opportunity.'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit ”otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent, i.e. they have the same effect.'),
                    Paragraph(contents='The distinction between direct and indirect break is handled by explicitly considering the effect of SP in rule LB12. Because rules are applied in order, rule LB12 implies that a prohibited break in rules 13–19 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ’H’ stands for an ideographs, ’h’ for small kana, ’9’ for digits.'),
                    Heading(level=4, contents='Resolve line breaking classes:'),
                    Rule(contents='LB 1 Assign a line breaking class to each character of the input. Resolve AI, CB, SA, SG, XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                    Paragraph(contents='Alternatively, particularly for text consisting of or predominantly containing of characters with line breaking class SA, it may be useful defer the determination of line breaks to a different algorithm entirely.'),
                    Heading(level=4, contents='Start and end of text:'),
                    Rule(contents='LB 2a Never break at the start of text'),
                    Formula(contents='× sot'),
                    Rule(contents='LB 2b Always break at the end of text'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases. Their effect is to have at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text to run over the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Rule(contents='LB 3a Always break after hard line breaks (but never between CR and LF).'),
                    Formula(contents='BK !'),
                    Rule(contents='LB 3b Treat CR followed by LF, as well as CR, LF and NL as hard line breaks'),
                    Formula(contents='CR × LF'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='NL !'),
                    Rule(contents='LB 3c Don’t break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF | NL )'),
                    Paragraph(contents='Note: A hard line break can consist of BK or a New Line Function (NLF) as described in in Section 5.8 Newline Guidelines of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described.'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB 4 Don’t break before spaces or zero-width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB 5 Break after zero-width space.'),
                    Formula(contents='ZW ÷'),
                    Heading(level=4, contents='Conjoining Jamo:'),
                    Paragraph(contents='Conjoining Jamo form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul Syllables; no breaks can occur in the middle of a syllable block. The effective line breaking class for the syllable block should match the line breaking class for Hangul Syllables, which is ID by default, but is often tailored to AL, see Section 8.'),
                    Rule(contents='LB 6 Don’t break a Korean Syllable Block, and treat it as a single unit of the same LB class as a Hangul Syllable in all the following rules'),
                    Formula(contents='Treat a Korean Syllable block as if it were ID'),
                    Paragraph(contents='See the Unicode Standard Annex #29 [Boundaries] for rules regarding Korean Syllable Blocks.'),
                    Heading(level=4, contents='Combining Marks:'),
                    Rule(contents='LB 7a In all of the following rules, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP CM* in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID'),
                    Paragraph(contents='As stated in [Unicode], Section 7.7 Combining Marks, combining characters are shown in isolation by applying them to either U+0020 SPACE (SP) or U+00A0 NO- BREAK SPACE (NBSP). The visual appearance is the same, but the line breaking result is different. Correspondingly, if there is no base, or if the base character is SP, CM* or SP CM* behave like ID.'),
                    Rule(contents="LB 7b Don't break a combining character sequence and treat it as if it has the LB class of the base character in all of the following rules."),
                    Formula(contents='Treat X CM* as if it were X'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. If there is no base character, in other words at the start of text (sot), treat CM as if following a SP. Virama are treated as CM so they work correctly.'),
                    Rule(contents='LB 7c Treat any remaining combining mark as AL.'),
                    Formula(contents='Treat any remaining CM as it if were AL'),
                    Paragraph(contents='This catches the case where a CM is the first character on the line. However, since combining marks are most commonly applied to characters of class AL, rule 7c alone generally produces acceptable results even in implementations that do not explicitly support 7a and 7b.'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and so come before rule 12.'),
                    Rule(contents='LB 8 Don’t break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB 9 Don’t break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB 10 Don’t break within ‘”[’, , even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Rule(contents='LB 11 Don’t break within ‘]h’, even with intervening spaces.'),
                    Formula(contents='CL SP* × NS'),
                    Rule(contents='LB 11a Don’t break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 × B2'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB 11b Don’t break before or after NBSP, WORD JOINER and related characters'),
                    Formula(contents='× GL'),
                    Formula(contents='GL ×'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB 12 Break after spaces'),
                    Formula(contents='SP ÷'),
                    Paragraph(contents='Many existing implementations reverse the order of precedence between rules LB11b and LB12.'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB 14 Don’t break before or after ‘”’'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB 14a Break before and after unresolved CB'),
                    Formula(contents='÷ CB'),
                    Formula(contents='CB ÷'),
                    Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                    Rule(contents='LB 15 Don’t break before hyphen-minus, other hyphens, fixed-width spaces, small kana and other non- starters, or after acute accents:'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents='LB 16 Don’t break between two ellipses, or between letters or numbers and ellipsis:'),
                    Formula(contents='AL × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ’9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents="Don't break alphanumerics."),
                    Rule(contents='LB 17 Don’t break within ‘a9’, ‘3a’, or ‘H%’'),
                    Formula(contents='ID × PO'),
                    Formula(contents='AL × NU'),
                    Formula(contents='NU × AL'),
                    Paragraph(contents='Numbers are of the form PR ? ( OP | HY ) ? NU (NU | IS) * CL ? PO ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='This is approximated with the following rules. (Some cases are already handled above, like ‘9,’, ‘[9’.) Regular expression-based line breaking engines will get better results implementing the above regular expression for numeric expressions.'),
                    Rule(contents='LB 18 Don’t break between the following pairs of classes.'),
                    Formula(contents='CL × PO'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='NU × PO'),
                    Formula(contents='PR × AL'),
                    Formula(contents='PR × HY'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-‘, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Rule(contents='LB 18b Break after hyphen-minus, and before acute accents:'),
                    Formula(contents='HY ÷'),
                    Formula(contents='÷ BB'),
                    Heading(level=4, contents='Finally, join alphabetic letters and break everything else.'),
                    Rule(contents='LB 19 Don’t break between alphabetics (“at”)'),
                    Formula(contents='AL × AL'),
                    Rule(contents='LB 19b Don’t break between numeric punctuation and alphabetics ("e.g.")'),
                    Formula(contents='IS × AL'),
                    Rule(contents='LB 20 Break everywhere else'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair Table-based Implementation'),
                    Paragraph(contents='A two dimensional table can be used to resolve break opportunities between pairs of characters. The rows of the table are labeled by the possible values of the line breaking property of the leading character in the pair; the columns are labeled by the line breaking class for the following character of the pair. Each intersection is labeled with the resulting line break opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of such a table-based definition. However, it uses line breaking classes whose membership is not solely determined by the line breaking property (as in this Annex), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classed defined above.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes of which only 14 appear to be unique. A minimal table representation is unique, except for trivial reordering of rows and columns.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Rules LB 7a and LB 7b, as well as LB 9 - LB11 require extended context for handling combining marks and spaces. This extended context must be built into the code that interprets the pair table.'),
                    Paragraph(contents='By broadening the definition of pair from B A, where B is the line breaking class before a break, and A the one after, to B SP* A, where SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line break opportunity (i.e. direct and indirect breaks). Rules equivalent to the ones given in Section 6 Line Breaking Algorithm can be formulated without explicit use of SP, by instead using % to express indirect breaks. These rules can then be simplified to involve only pairs of classes, e.g. only constructions of the form'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B ^ A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can then be automatically translated into a pair table, as in the example below. line breaking analysis then proceeds by pair table lookup.'),
                    Heading(level=3, contents='7.3 Example Pair Table'),
                    Paragraph(contents='The following example table implements the line breaking behavior described in this Annex, within the limitation that only context of the form B SP* A is considered. BK, CR, LF, NL and SP classes are handled explicitly in the outer loop as given in the code sample below. Pair context of the form B CM* can be handled approximately in the table, or explicitly in the driving loop, as explained in Section 7.4 Combining Marks. Using the example pair table for CM is equivalent to making the simplifying assumption that combining marks are only applied to base characters of line breaking class AL or SP. Conjoining Jamos are considered separately in Section 7.5 Conjoining Jamos.'),
                    Paragraph(contents='Table 2 Example Pair Table'),
                    TableRow(contents='OP\ue000CL\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM\ue000WJ'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^'),
                    TableRow(contents='CL\ue000_\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='QU\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^'),
                    TableRow(contents='GL\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^'),
                    TableRow(contents='NS\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='EX\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='SY\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='IS\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='PR\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000^\ue000^'),
                    TableRow(contents='PO\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='NU\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='AL\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='ID\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='IN\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='HY\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='BA\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='BB\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^'),
                    TableRow(contents='B2\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000^\ue000^\ue000#\ue000^'),
                    TableRow(contents='ZW\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000^\ue000#\ue000_'),
                    TableRow(contents='CM\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='WJ\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^'),
                    Paragraph(contents='Resolved outside pair table: XX SP BK CR LF CB SA AI NL'),
                    Paragraph(contents='• ^ denotes a prohibited break: Never break before A and after B, even if one or more spaces intervene.'),
                    Paragraph(contents='• As a reminder, B ^ A is equivalent to B SP* × A.'),
                    Paragraph(contents='• % denotes an indirect break opportunity: Don’t break before A, unless one or more spaces follow B.'),
                    Paragraph(contents='• As a reminder, B % A is equivalent to B × A and B SP+ ÷ A.'),
                    Paragraph(contents='• # denotes an indirect break opportunity for combining marks following a space. It is similar to an indirect break, but if a break is taken it is before the last space in front of A.'),
                    Paragraph(contents='• In other words, B # A is equivalent to B × A and B SP* ÷ SP A.'),
                    Paragraph(contents='• _ denotes a direct break opportunity (equivalent to ÷ as defined above).'),
                    Paragraph(contents='Hovering over the cells in a browser enabled for tool-tips reveals the rule number that determines the breaking status for the pair in question. When a pair has to be tested with and without intervening spaces, multiple rules are given. Hovering over a line breaking class name gives a representative member of the class and additional information. Clicking on any line break class name anywhere in the document jumps to the definition.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two functions demonstrate how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the following line breaking classes need to be added: CR, LF, NL, CB, XX. They have been omitted here for brevity.'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    int findComplexBreak(int *pcls, int *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='         if (!cch)'),
                    CodeLine(contents='               return 0;'),
                    CodeLine(contents='         int cls = pcls[0];'),
                    CodeLine(contents='         for (int ich = 0; ich < cch; ich++) {'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                  // .. do complex break analysis here'),
                    CodeLine(contents='                  // and report any break opportunities in pbrk ..'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='                  if (pcls[ich] != SA)'),
                    CodeLine(contents='                         break;'),
                    CodeLine(contents='                  }'),
                    CodeLine(contents='         return ich;'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    CodeLine(contents='\xa0   enum break_action {'),
                    CodeLine(contents='       DBK = 0, // direct break     (blank in table)'),
                    CodeLine(contents='       IBK,     // indirect break   (% in table)'),
                    CodeLine(contents='       CBK,     // combining break  (# in table)'),
                    CodeLine(contents='       PBK };   // prohibited break (^ in table)'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable)'),
                    CodeLine(contents='    int findLineBrk(int *pcls, int *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='         if (!cch) '),
                    CodeLine(contents='              return O;'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='         int  cls = pcls[0];'),
                    CodeLine(contents=''),
                    CodeLine(contents='         // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='         for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              // handle spaces'),
                    CodeLine(contents='              if (pcls[ich] == SP) {'),
                    CodeLine(contents='                   pbrk[ich-1] = PBK;'),
                    CodeLine(contents='                   continue;'),
                    CodeLine(contents='              }'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              // handle complex scripts'),
                    CodeLine(contents='              if (pcls[ich] == SA) {'),
                    CodeLine(contents='                    ich += findComplexBreak(&pcls[ich-1], &pbrk[ich-1], cch - (ich-1));'),
                    CodeLine(contents='                    if (ich < cch)'),
                    CodeLine(contents='                         cls = pcls[ich];'),
                    CodeLine(contents='                    continue;'),
                    CodeLine(contents='              }'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              // lookup pair table information'),
                    CodeLine(contents='              int brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='              if (brk == IBK) {'),
                    CodeLine(contents='                    pbrk[ich-1] = ((pcls[ich - 1] == SP) ? IBK : PBK);'),
                    CodeLine(contents='              } else if (brk == CBK) {'),
                    CodeLine(contents='                    if (ich > 1 && (pcls[ich - 1] == SP))'),
                    CodeLine(contents='                        pbrk[ich-2] = ((pcls[ich - 2] == SP) ? IBK : DBK);'),
                    CodeLine(contents='                    pbrk[ich-1] = PBK;'),
                    CodeLine(contents='              } else {'),
                    CodeLine(contents='                   pbrk[ich-1] = brk;'),
                    CodeLine(contents='              }'),
                    CodeLine(contents='              cls = pcls[ich];'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        // always break at the end'),
                    CodeLine(contents='        pbrk[ich-1] = DBK;'),
                    CodeLine(contents='\xa0'),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='   }'),
                    Paragraph(contents='The function returns all the break opportunities in the array pointed to by pbrk, using the values in the table. On return pbrk[ich] is the type of break after the character at index ich.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='If one makes the simplifying assumption that combining marks are only applied to AL or SP, and that applying a combining mark to any other character turns the combination into AL, then CM can be handled in the table as shown, by introducing a specialized type of indirect break. The expression'),
                    Formula(contents='B # A'),
                    Paragraph(contents='denotes an indirect break opportunity for combining marks following a space. It is similar to an indirect break, but if a break is taken it is before the last space in front of A. In other words, B # A is equivalent to applying both B × A and B SP* ÷ SP A.'),
                    Paragraph(contents='However, this is only an approximation and it is still necessary to treat CM at the beginning of the text. Therefore it is preferable to handle CM outside of the pair table in the driver code. Adding a simple statement in the loop'),
                    CodeLine(contents='    // handle combining marks'),
                    CodeLine(contents='   if (pcls[ich] == CM){'),
                    CodeLine(contents='       if (pcls[ich-1] == SP){'),
                    CodeLine(contents='          cls = ID;'),
                    CodeLine(contents='          if (ich > 1)'),
                    CodeLine(contents='\t     pbrk[ich-2] = brkPairs[pcls[ich-2]][ID] == DBK ? DBK : PBK;'),
                    CodeLine(contents='       }'),
                    CodeLine(contents='       pbrk[ich-1] = PBK;'),
                    CodeLine(contents='       continue;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='would have the effect of letting the CM take on the class of the preceding non-CM characters. It also takes care of rule LB7a, treating a combining mark applied to a SP as if it was ID. Covering the case of a missing base character at the beginning of the line (rule LB7c) requires a statement in the setup part before the loop to :'),
                    CodeLine(contents='    // handle missing base character'),
                    CodeLine(contents='  if (cls == CM)'),
                    CodeLine(contents='            cls = AL;'),
                    Heading(level=3, contents='7.5 Conjoining Jamos'),
                    Paragraph(contents='In principle, line breaking analysis would follow grapheme cluster boundary detection. This would handle combining character sequences containing both non-spacing marks and conjoining Jamo sequences as units. However, in order to do the analysis in one pass, combining character sequences can be handled approximately as described above. For Korean Syllable Blocks, a simple pair table can be constructed based on the information in [Boundaries]. The input to such a pair table would be Hangul Syllable Type [HangulST] values.'),
                    Heading(level=3, contents='8 Customization'),
                    Paragraph(contents='A real world line breaking algorithm must be tailorable to some degree to meet user or document requirements.'),
                    Paragraph(contents='In Korean, for example, two distinct line breaking modes may occur, which can be summarized as breaking after each character, or breaking after spaces (as in Latin text). The former tends to occur when text is set justified, the latter, when ragged margins are used. In that case, even Ideographs are only broken at space characters.'),
                    Paragraph(contents='In Japanese for example, tighter and looser specifications of prohibited line breaks may be used.'),
                    Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how these can be used to customize the algorithm as needed.'),
                    Heading(level=4, contents='8.1 Types of Tailoring'),
                    Paragraph(contents='There are three principal ways of tailoring the line breaking algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters. This is useful for cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes. This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to overriding some of the rules in Section 6 Line Breaking Algorithm.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions is equivalent to the preceding, but instead of changing the values for the pair intersection directly in the table, they can be labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be enabled at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself, for example by providing specialized rules to recognize and break common constructs, such as URLs. Such open ended customizations place no limits to possible changes, other than the requirement to correctly implement characters with normative line breaking properties.'),
                    Heading(level=3, contents='8.2 Examples of Customization'),
                    Paragraph(contents='Example 1. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. The sample code sketches a different approach where the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks inside a run of spaces. This cannot be done in the pair-table, but requires a change in the way the driver loop handles spaces.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean uses either implicit breaking around characters (type 2 as defined above in Section 3 Introduction) or uses spaces (type 1). Space-based layout is common in informal documents with ragged margins, such as magazines, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries: Only the intersections of ID/ID, AL/ID and ID/AL are affected. For alphabetic style line breaking, breaks for these four cases require space; for ideographic style line breaking, these four cases do not require spaces. Therefore, one defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given (piece of) text.'),
                    Paragraph(contents='Example 4. Sometimes allowing alphabetic characters and digit strings to break anywhere is required in Far Eastern context. According to reference [Suign98] this can again be done in the same way, this time affecting the intersections of NU/NU, NU/AL, AL/AL, and AL/NU.'),
                    Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables to be kept together, i.e. the syllable kyu, spelled with the two kanas KI and “small yu” would no longer be kept together as if KI and yu were atomic. This customization can be handled via the first method, by changing the classification of the Kana small characters from NS to ID as needed.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real world implementation of a pair table-based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. That implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=2, contents='References'),
                    TableRow(contents='[Bidi]\ue000Unicode Standard Annex #27: Unicode Bidirectinal Algorithm http://www.unicode.org/unicode/reports/tr9/'),
                    TableRow(contents='[Boundaries]\ue000Unicode Standard Annex #29, Text Boundaries. http://www.unicode.org/unicode/reports/tr29/ For information on grapheme cluster boundaries'),
                    TableRow(contents='[Cedar97]\ue000Cy Cedar, David Veintimilla, Michel Suignard and Asmus Freytag, Report from the Trenches: Microsoft Publisher goes Unicode, Proceedings of the Eleventh International Unicode Conference, San Jose, CA 1997'),
                    TableRow(contents='[Data]\ue000The version of the line breaking property data file at the time of the publication of this document is http://www.unicode.org/Public/4.0-Update/LineBreak-4.0.0.txt The latest version of the data file is http://www.unicode.org/Public/UNIDATA/LineBreak.txt'),
                    TableRow(contents='[EAW]\ue000Unicode Standard Annex #11, East Asian Width. http://www.unicode.org/unicode/reports/tr11 For a definition of East Asian Width'),
                    TableRow(contents='[FAQ]\ue000Unicode Frequently Asked Questions http://www.unicode.org/unicode/faq/ For answers to common questions on technical issues.'),
                    TableRow(contents='[Feedback]\ue000http://www.unicode.org/reporting.html For reporting errors and requesting information online.'),
                    TableRow(contents='[Glossary]\ue000Unicode Glossary http://www.unicode.org/glossary/ For explanations of terminology used in this and other documents.'),
                    TableRow(contents='[HangulST]\ue000The latest version of the Hangul Syllable Types property data file is http://www.unicode.org/Public/UNIDATA/HangulSyllableType.txt'),
                    TableRow(contents='[JIS]\ue000JIS X 4051-1995. Line Composition Rules for Japanese Documents. (『日本語文晝の行組版方法』) Japanese Standards Association. 1995.'),
                    TableRow(contents='[Knuth78]\ue000Donald E. Knuth and Michael F. Plass, Breaking Lines into Paragraphs, republished in Digital Typography, CSLI 78, (Stanford, California: CLSI Publications1997)'),
                    TableRow(contents='[Reports]\ue000Unicode Technical Reports http://www.unicode.org/unicode/reports/ For information on the status and development process for technical reports, and for a list of technical reports.'),
                    TableRow(contents='[Suign98]\ue000Michel Suignard, Worldwide Typography and How to Apply JIS X 4051-1995 to Unicode, Proceedings of the Twelfth International Unicode/ISO 10646 Conference, Tokyo, Japan, 1998'),
                    TableRow(contents='[TEX]\ue000Donald E. Knuth, TEX, the Program, Volume B of Computers & Typesetting, (Reading, Massachusetts: Addison-Wesley 1986)'),
                    TableRow(contents='[Unicode]\ue000The Unicode Standard, Version 4.0, (Reading, Massachusetts: Addison-Wesley Developers Press 2003, ISBN 0-321-18578-1) or online as http://www.unicode.org/versions/Unicode4.0.0/'),
                    TableRow(contents='[UCD]\ue000Unicode Character Database http://www.unicode.org/ucd/ For an overview of the Unicode Character Database and a list of its associated files see http://www.unicode.org/Public/UNIDATA/UCD.html'),
                    TableRow(contents='[Versions]\ue000Versions of the Unicode Standard http://www.unicode.org/unicode/standard/versions/ For details on the precise contents of each version of the Unicode Standard, and how to cite them.'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples.'),
                    Heading(level=2, contents='Modifications'),
                    Paragraph(contents='Change from Revision 14:'),
                    Paragraph(contents='• Added new rule 19b.'),
                    Paragraph(contents='• Changed line breaking class: combining double diacritics from CM to GL, 037A and 2126 to match their canonical equivalents, 2140 corrected to AL, Arabic numerical separators from AL to NU, many alphabetic characters that are EAW=Ambiguous from AI to AL to better reflect current practice, remaining circled numbers and letters from AL to AI for consistency.'),
                    Paragraph(contents='• Added a note on the behavior of U+200B and U+3000 when lines are justified.'),
                    Paragraph(contents='• Reconciled the data file and description of line breaking classes in section 5.'),
                    Paragraph(contents='• Reconciled the rules and pair table implementation of the algorithm.'),
                    Paragraph(contents='• Updated the text of the conformance statement in section 4.'),
                    Paragraph(contents='• Added section 5.4 on use of double hyphen.'),
                    Paragraph(contents='• Updated styles and table formatting.'),
                    Paragraph(contents='• Minor edits throughout.'),
                    Paragraph(contents='Change from Revision 13:'),
                    Paragraph(contents='[Revision 13, being a proposed update is superseded and no longer publicly available]'),
                    Paragraph(contents='Change from Revision 12:'),
                    Paragraph(contents='• Added new line breaking classes NL and WJ to better support NEL and Word Joiner.'),
                    Paragraph(contents='• Deprecated the use of class SG.'),
                    Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                    Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                    Paragraph(contents='• Clarified the behavior of SHY and mongolian todo soft hyphen, as well as WJ and ZWNBSP.'),
                    Paragraph(contents='• Added a new subsection 5.3 on soft hyphen and a new subsection 7.6 on conjoining jamos.'),
                    Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                    Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                    Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                    Paragraph(contents='• Expanded the introduction in Section 3.'),
                    Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                    Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                    Paragraph(contents='Change from Revision 11:'),
                    Paragraph(contents='[Revision 11, being a proposed update, is superseded and no longer publicly available]'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                    Paragraph(contents='Change from Revision 10:'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added WORD JOINER to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the datafile. Only characters whose LB class differs from those of characters with related General Category are noted explicitly in this text.'),
                    Paragraph(contents='Change from Revision 9:'),
                    Paragraph(contents='• Change header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Paragraph(contents='Change from Revision 8:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX'),
                    Paragraph(contents='• LB 7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair-table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair-table entry PR % ID'),
                    Paragraph(contents='• Reworked Section 7.5'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull)'),
                    Paragraph(contents='Change from Revision 7:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX since the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB 6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB 7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB 17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                    Paragraph(contents='Change from Revision 6:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Paragraph(contents='Change from Revision 5:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='Copyright © 1998-2004 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.')],
 Version(4, 1, 0): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Line Breaking Properties'),
                    TableRow(contents='Version\ue0004.1.0'),
                    TableRow(contents='Authors\ue000Asmus Freytag (asmus@unicode.org)'),
                    TableRow(contents='Date\ue0002005-08-29'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-17.html'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-15.html'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                    TableRow(contents='Revision\ue00017'),
                    Heading(level=4, contents='Summary'),
                    Paragraph(contents='This report presents the specification of line breaking properties for Unicode characters as well as a model algorithm for determining line break opportunities.'),
                    Heading(level=4, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version number of the Unicode Standard at the last point that the UAX document was updated.'),
                    Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this document is found in the References section. For the latest version of the Unicode Standard see [Unicode]. See [Reports] for a list of current Unicode Technical Reports. For more information about versions of the Unicode Standard, see [Versions].'),
                    Heading(level=4, contents='Contents'),
                    Paragraph(contents='1 Overview and Scope'),
                    Paragraph(contents='2 Definitions'),
                    Paragraph(contents='3 Introduction'),
                    Paragraph(contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='4 Conformance'),
                    Paragraph(contents='4.1 Line Breaking Properties'),
                    Paragraph(contents='4.2 Line Breaking Algorithm'),
                    Paragraph(contents='5 Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Dictionary Usage'),
                    Paragraph(contents='5.3 Use of Soft Hyphen'),
                    Paragraph(contents='5.4 Use of Double Hyphen'),
                    Paragraph(contents='5.5 Tibetan Line Breaking'),
                    Paragraph(contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='6.1 Line Breaking Rules'),
                    Paragraph(contents='7 Pair Table-based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Pair Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='8 Customization'),
                    Paragraph(contents='8.1 Types of Tailoring'),
                    Paragraph(contents='8.2 Examples of Customization'),
                    Paragraph(contents='8.3 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='References'),
                    Paragraph(contents='Acknowledgments'),
                    Paragraph(contents='Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='The text of The Unicode Standard [Unicode] presents a limited description of some of the characters with specific function in line breaking, but does not give a complete specification of line breaking behavior. This Unicode Standard Annex provides more detailed information about default line breaking behavior reflecting best practices for the support of multilingual texts.'),
                    Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. Therefore, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. The Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                    Paragraph(contents='This document opens with formal definitions, a summary of the line breaking task and a brief section on conformance requirements. Four main sections follow:'),
                    Paragraph(contents='• Section 5, Line Breaking Properties contains a narrative description of the line breaking behavior of the characters of the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                    Paragraph(contents='• Section 6, Line Breaking Algorithm provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='• Section 7, Pair Table-based Implementation describes an efficient pair table-based implementation of the algorithm.'),
                    Paragraph(contents='• Section 8, Customization provides a discussion on ways to customize or tailor the algorithm.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard [Unicode]. The notation defined in this technical report differs somewhat from the notation defined elsewhere in the Unicode Standard. All other notation used here without an explicit definition shall be as defined in the Unicode Standard.'),
                    Paragraph(contents='Line fitting — the process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='Line Break — the position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='Line Break Opportunity — a place where a line is allowed to end. Whether a given position in the text is a valid line break opportunity depends on context as well as the line breaking rules in force.'),
                    Paragraph(contents='Line Breaking — the process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                    Paragraph(contents='Line Breaking Property — A character property with enumerated values, as listed in Table 1 and separated into normative and informative. Line breaking property values are used to classify characters, and taken in context, determine the type of break.'),
                    Paragraph(contents='Line Breaking Class — a class of characters with the line breaking property value.'),
                    Paragraph(contents='Mandatory Break -—a line must break following a character that has the mandatory break property. Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                    Paragraph(contents='Direct Break — a line break opportunity exists between two adjacent characters of the given line breaking classes. This is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity also exists after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='Indirect Break — a line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces. In this case, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent. This is indicated in the pair table below as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though space characters are not shown in the pair table, an indirect break can only occur if one or more spaces follow B. In the notation of the rules in Section 6, Line Breaking Algorithm this would be represented as two rules: B × A and B SP+ ÷ A.'),
                    Paragraph(contents='Prohibited Break — no line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters. This is indicated in the pair table below as B ^ A, where B is the character class of the character before and A is the character class of the character after the break and the optional space characters are not shown. In the notation of the rules in Section 6, Line Breaking Algorithm this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='Hyphenation — Hyphenation uses language-specific rules to provide additional line break opportunities within a word. Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this document, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this document.'),
                    Paragraph(contents='Table 1: Line Breaking Classes (* = normative)'),
                    TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Characters with this property...'),
                    TableRow(contents='Normative Line Breaking Classes'),
                    TableRow(contents='BK *\ue000Mandatory Break\ue000NL, PS\ue000cause a line break (after)'),
                    TableRow(contents='CR *\ue000Carriage Return\ue000CR\ue000cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF *\ue000Line Feed\ue000LF\ue000cause a line break (after)'),
                    TableRow(contents='CM *\ue000Attached Characters and Combining Marks\ue000Combining Marks, control codes\ue000prohibit a line break between the character and the preceding character'),
                    TableRow(contents='NL *\ue000Next Line\ue000NEL\ue000cause a line break (after)'),
                    TableRow(contents='SG *\ue000Surrogates\ue000Surrogates\ue000should not occur in well-formed text'),
                    TableRow(contents='WJ *\ue000Word Joiner\ue000WJ\ue000prohibit line breaks before or after'),
                    TableRow(contents='ZW *\ue000Zero Width Space\ue000ZWSP\ue000provide a break opportunity'),
                    TableRow(contents='GL *\ue000Non-breaking (“Glue”)\ue000NBSP, ZWNBSP, CGJ\ue000prohibit line breaks before or after'),
                    TableRow(contents='CB *\ue000Contingent Break Opportunity\ue000Inline Objects\ue000provide a line break opportunity contingent on additional information.'),
                    TableRow(contents='SP *\ue000Space\ue000Space\ue000generally provide a line break opportunity after the character, enable indirect breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000EM Dash\ue000provide a line break opportunity before and after the character'),
                    TableRow(contents='BA\ue000Break Opportunity After\ue000Spaces, Hyphens\ue000generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Opportunity Before\ue000Punctuation used in dictionaries\ue000generally provide a line break opportunity before the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000Hyphen-Minus\ue000provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='CL\ue000Closing Punctuation\ue000“)”, “]”, “}”, etc.\ue000prohibit a line break before'),
                    TableRow(contents='EX\ue000Exclamation/Interrogation\ue000“!”, “?” etc.\ue000prohibit line break before'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000allow only indirect line breaks between pairs.'),
                    TableRow(contents='NS\ue000Non Starter\ue000small kana\ue000allow only indirect line break before'),
                    TableRow(contents='OP\ue000Opening Punctuation\ue000“(“, “[“, “{“, etc.\ue000prohibit a line break after'),
                    TableRow(contents='QU\ue000Ambiguous Quotation\ue000Quotation marks\ue000act like they are both opening and closing'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='IS\ue000Infix Separator (Numeric)\ue000. ,\ue000prevent breaks after any and before numeric'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000form numeric expressions for line breaking purposes'),
                    TableRow(contents='PO\ue000Postfix (Numeric)\ue000%, ¢\ue000do not break following a numeric expression'),
                    TableRow(contents='PR\ue000Prefix (Numeric)\ue000$, £, ¥, etc.\ue000do not break in front of a numeric expression'),
                    TableRow(contents='SY\ue000Symbols Allowing Breaks\ue000/\ue000prevent a break before, and allow a break after'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000act like AL when the resolved EAW is N otherwise act as ID'),
                    TableRow(contents='AL\ue000Ordinary Alphabetic and Symbol Characters\ue000Alphabets and regular symbols\ue000are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000form Korean syllable blocks'),
                    TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000form Korean syllable blocks'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000break before or after, except in some numeric context'),
                    TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining Jamo\ue000form Korean syllable blocks'),
                    TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining Jamo\ue000form Korean syllable blocks'),
                    TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining Jamo\ue000form Korean syllable blocks'),
                    TableRow(contents='SA\ue000Complex Context (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000provide a line break opportunity contingent on additional, language specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000Unassigned, Private Use\ue000have as yet unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Introduction'),
                    Paragraph(contents='Lines are broken as result of one of two conditions. The first condition is the presence of an explicit line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                    Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the inter-character and inter-word spaces and consider the longest line that fits. When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates.'),
                    Paragraph(contents='When expanding or compressing inter-word space according to common typographical practice, only the spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and U+3000 IDEOGRAPHIC SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing inter-character space the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                    Paragraph(contents='Local custom or document style determines whether and to what degree expansion of inter-character space is allowed in justifying a line. In languages, such as German, where inter-character space is commonly used to mark e m p h a s i s (like this), allowing variable inter-character spacing would have the unintended effect of adding random emphasis, and should therefore be avoided.'),
                    Paragraph(contents='In table headings that use Han ideographs, on the other hand, even extreme amounts of inter-character space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                    Paragraph(contents='More complex formatting algorithms may take into account the interaction of line breaking decisions for the whole paragraph. The well known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                    Paragraph(contents='The definition of optimal line breaks is outside the scope of this document, as are methods for their selection. For the purpose of this document, what is important is not so much what defines the optimal amount of text on the line, but how to determine all legal line break opportunities. Whether and how any given line break opportunity is actually used is up to the full layout system. Some layout systems will further evaluate the raw line break opportunities returned from the line breaking algorithm and apply additional rules. [TEX] for example, uses line break opportunities based on hyphens only as a last resort.'),
                    Paragraph(contents='Finally, most text layout systems will support an emergency mode which handles the case of an unusual line that contains no ordinary line break opportunities. In such line layout emergencies line breaks are placed with no regard to the ordinary line breaking behavior of the characters involved.'),
                    Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                    Paragraph(contents='1. Western — spaces and hyphens are used to determine breaks'),
                    Paragraph(contents='2. East Asian — lines can break anywhere, unless prohibited'),
                    Paragraph(contents='3. South East Asian — line breaks require morphological analysis'),
                    Paragraph(contents='The first, or Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and in addition, it may need user interaction or overrides.'),
                    Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                    Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word-breaks to syllable boundaries, the determination of which requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                    Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this report. Unicode characters have explicit line breaking properties assigned to them. These can be utilized with these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                    Paragraph(contents='In bidirectional text, line breaks takes are determined before applying rule L1 of the Unicode Bidirectional Algorithm [Bidi]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='There is no single method for determining line breaks; the rules may change based on user preference and document layout. Therefore the information in this annex, including the specification of the line breaking algorithm, is informative, rather than normative. However, some characters have been encoded explicitly for their effect on line breaking. Users adding such characters to a text expect that they will have the desired effect. For that reason, these characters have been given normative line breaking behavior.'),
                    Heading(level=3, contents='4.1 Line Breaking Properties'),
                    Paragraph(contents='All line breaking classes are informative, except for the line breaking classes marked with a * in Table 1 Line Breaking Properties. The interpretation of characters with normative line breaking classes by all conforming implementations must be consistent with the specification of the normative property.'),
                    Paragraph(contents='Conformant implementations must not tailor characters with normative line breaking classes to any of the informative line breaking classes, but may tailor characters with informative line breaking classes to one of the normative line breaking classes.'),
                    Paragraph(contents='Higher-level protocols may further restrict, override, or extend the line breaking classes of certain characters in some contexts.'),
                    Heading(level=3, contents='4.2 Line Breaking Algorithm'),
                    Paragraph(contents='The specification of the Line Breaking Algorithm in this annex is informative. As stated in [Unicode] Section 3.2, Conformance Requirements, conformant implementations are not required to implement the Unicode Line Breaking Algorithm. The relationship between conformance to the Unicode Standard, and conformance to an individual Unicode Standard Annex (UAX) is described in more detail in the Unicode Standard in Section 3.2 Conformance Requirements.'),
                    Paragraph(contents='There are many different ways to break lines of text, and the Unicode Standard does not restrict the ways in which implementations can do this. However, any Unicode-conformant implementation that purports to implement this specification must do so as described in the following clause. Implementations are free to deviate from this, as long as they do not purport to conform to this specification.'),
                    TableRow(contents='C1\ue000An implementation that claims conformance to the default Unicode Line Breaking Algorithm shall produce the same results as the algorithm published in this specification. • As specified in Section 3.2, Conformance Requirements of [Unicode], Unicode specifications are generally described as an algorithm or process, producing a result from a given input. However, these are simply logical specifications; particular implementations can change or optimize the internal processing as long as they provide the same results from the same input.'),
                    TableRow(contents='C2\ue000This specification defines default behavior, which is to be used in the absence of tailoring for particular languages and environments. • Where a particular environment requires tailoring, such modifications to this specification can be done without affecting conformance.'),
                    TableRow(contents='C3\ue000If tailoring is used by an implementation that claims conformance to the default Unicode Line Breaking Algorithm, the existence of such tailoring must be documented. • This does not require that the tailoring be described in a reproducible manner; for example, a statement "tailored to language X" is sufficient.'),
                    Paragraph(contents='At times, this specification recommends best practice. These recommendations are not normative and conformance with this specification does not depend on their realization. These recommendations contain the expression "This specification recommends ...", or some similar wording.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. In a few instances, the descriptions in this section provide additional detail about handling a given character at the end of a line, which goes beyond the simple determination of line breaks.'),
                    Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be found grouped together in the same line break class.'),
                    Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into two algorithms defined in Section 6, Line Breaking Algorithm and Section 7, Pair-Table-based Implementation. These sections describe workable default line breaking methods. Section 8, Customization discusses how the default line breaking behavior can be tailored to the needs of particular languages for particular document styles and user preferences.'),
                    Heading(level=3, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties, is available in the file LineBreak.txt [Data] in the Unicode Character Database [UCD]. This is a tab-delimited, two column plain text file, with code position, and line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Paragraph(contents='As more scripts are added to the Unicode Standard and become more widely implemented and used on computers, more line breaking classes may be added, or the assignment of line breaking class may be changed for some characters. Implementations should not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the datafile).'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                    Paragraph(contents='(A) — the class allows a break opportunity after in specified contexts'),
                    Paragraph(contents='(XA) — the class prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='(B) — the class allows a break opportunity before in specified contexts'),
                    Paragraph(contents='(XB) — the class prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='(P) — the class allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='(XP) — the class prevents a break opportunity for a pair of same characters'),
                    Paragraph(contents='NOTE: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this document, where they indicate position of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI — Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Ambiguous characters act either like alphabetic characters (that is, those with the AL line breaking class) or like ideographs (that is characters with line breaking class ID), depending on context. In the absence of appropriate context information, they are treated as class AL.'),
                    Paragraph(contents='As originally defined, this class contained all characters with East Asian Width property A (ambiguous width), and which would otherwise be AL in this classification. They take the AL line breaking class only when their resolved width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). For more information on East Asian Width, and how to resolve it, see Unicode Standard Annex #11, East Asian Width [EAW].'),
                    Paragraph(contents='The original definition included many Latin, Greek and Cyrillic characters for which a default assignment of the AL line breaking class better corresponds to modern practice. At the same time, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                    Paragraph(contents='As updated, with the exception of characters in the range U+0000..U+1FFF, this line breaking class includes all characters with East Asian Width A, plus the following characters:'),
                    TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                    TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm and the pair table in Section 7, Pair Table-based Implementation, assume that all ambiguous characters have been resolved appropriately as part of assigning line breaking classes to the input characters.'),
                    Heading(level=3, contents='AL — Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Ordinary characters require other characters to provide break opportunities, otherwise no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents it may be desirable to allow breaking between pairs of ordinary characters, particularly Latin characters and symbols.'),
                    Paragraph(contents='NOTE: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='Except as listed explicitly below as part of another line breaking class, and except as assigned class AI or ID based on East Asian Width, this class contains the following characters:'),
                    Paragraph(contents='ALPHABETIC — all characters of General Categories Lu, Ll, Lt, Lm, Lo SYMBOLS — all characters of General Categories Sm, Sk, So NON-DECIMAL NUMBERS — all characters of General Categories Nl and No PUNCTUATION — all characters of General Categories Pc, Pd and Po'),
                    Paragraph(contents='plus these characters:'),
                    TableRow(contents='0600..0603\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAFHA'),
                    TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                    TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                    TableRow(contents='2061..2063\ue000FUNCTION APPLICATION..INVISIBLE SEPARATOR'),
                    Paragraph(contents='These characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                    Heading(level=3, contents='BA — Break Opportunity After (A)'),
                    Paragraph(contents='Like the SPACE the characters in this class provide a break opportunity, but unlike SPACE they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                    Heading(level=4, contents='Breaking Spaces'),
                    Paragraph(contents='Breaking spaces are the following subset of characters with General Category Zs:'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN SPACE'),
                    TableRow(contents='2003\ue000EM SPACE'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                    Paragraph(contents='The preceding list of space characters all have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                    Paragraph(contents='The Ogham space mark is rendered visibly between words but should be elided at the end of a line.'),
                    Paragraph(contents='See the ID property for U+3000 IDEOGRAPHIC SPACE. For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation in [Unicode].'),
                    Heading(level=4, contents='Tabs'),
                    TableRow(contents='0009\ue000TAB'),
                    Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    Heading(level=4, contents='Conditional Hyphens'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY marks an optional place where a line break may occur inside a word. It can be used with all scripts. SHY is rendered invisibly and has no width: it merely indicates an optional line break. The rendering of the optional line break depends on the script. For the Latin script, rendering the line break typically means displaying a hyphen at the end of the line, however, some languages require a change in spelling surrounding a line break. For examples, see Section 5.3 Use of Soft Hyphen.'),
                    Heading(level=4, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they print, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins.'),
                    Heading(level=4, contents='Visible Word Dividers'),
                    Paragraph(contents='The following are other forms of visible word dividers that provide break opportunities:'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                    TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                    TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                    TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                    Paragraph(contents='The Tibetan thseg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself, like space. For additional information, see Section 5.4 Tibetan Line Breaking.'),
                    Paragraph(contents='The Ethiopian word space is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='A hyphenation point is a raised dot, which is primarily used to visibly indicate syllabification of words. Syllable breaks are potential line break opportunities in the middle of words. It is mainly used in dictionaries and similar works. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual break opportunity, the vertical bar is rendered as a hyphen.'),
                    Heading(level=4, contents='Word Separators'),
                    Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing these should be treated as linebreak opportunities by default. WJ can be used to override this default, where necessary.'),
                    TableRow(contents='16EB\ue000RUNIC SINGLE DOT PUNCTUATION'),
                    TableRow(contents='16EC\ue000RUNIC MULTIPLE DOT PUNCTUATION'),
                    TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                    TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                    TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                    TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                    TableRow(contents='205B\ue000FOUR DOT MARK'),
                    TableRow(contents='205D\ue000TRICOLON'),
                    TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                    Heading(level=4, contents='Dandas'),
                    Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                    TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                    TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                    TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                    TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                    TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                    TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                    TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                    TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                    TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                    TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                    Heading(level=4, contents='Tibetan'),
                    TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                    TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                    TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                    TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                    TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                    Paragraph(contents='For additional information, see Section 5.5 Tibetan Line Breaking.'),
                    Heading(level=4, contents='Other Terminating Punctuation'),
                    Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces.'),
                    TableRow(contents='1802\ue000MONGOLIAN COMMA'),
                    TableRow(contents='1803\ue000MONGOLIAN FULL STOP'),
                    TableRow(contents='1804\ue000MONGOLIAN COLON'),
                    TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                    TableRow(contents='1808\ue000MONGOLIAN MANCHU COMMA'),
                    TableRow(contents='1809\ue000MONGOLIAN MANCHU FULL STOP'),
                    TableRow(contents='1A1E\ue000BUGINESE PALLAWA'),
                    TableRow(contents='2CF9\ue000COPTIC OLD NUBIAN FULL STOP'),
                    TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                    TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                    TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                    TableRow(contents='2CFE\ue000COPTIC FULL STOP'),
                    TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                    TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                    TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                    TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                    TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                    TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                    TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                    Heading(level=3, contents='BB — Break opportunities before characters (B)'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                    Paragraph(contents='NOTE: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                    TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                    TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                    TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                    TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                    TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                    TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                    TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                    TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                    TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                    Paragraph(contents='These characters are Tibetan head letters which allow a break before. For more information, see Section 5.5 Tibetan Line Breaking.'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked, SOFT HYPHEN should be used instead.'),
                    Heading(level=3, contents='B2 — Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH,. Line breaks can occur before and after an EM DASH, but not between a pair of them. Such pairs are sometimes used instead of a single quotation dash. For that reason, the line should not be broken between EM DASHes even though not all fonts use connecting glyphs for the EM DASH.'),
                    Heading(level=3, contents='BK — Mandatory Break (A) — (normative)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters.'),
                    TableRow(contents='000C\ue000FORM FEED'),
                    Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. No paragraph formatting is applied.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. No paragraph formatting is applied.'),
                    Paragraph(contents='This is similar to HTML <BR>'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. Paragraph formatting is applied.'),
                    Paragraph(contents='“NEW LINE FUNCTION (NLF)”'),
                    Paragraph(contents='New line functions provide additional explicit breaks. They are not individual characters, but are expressed as sequences of the control characters NEL, LF, and CR. What particular sequence(s) form a NLF depends on the implementation and other circumstances as described in [Unicode] Section 5.8, Newline Guidelines.'),
                    Paragraph(contents='If a character sequence for a new line function contains more than one character, it is kept together. The default behavior is to break after LF or CR, but not between CR and LF. Two additional line breaking classes have been added for convenience in this operation.'),
                    Heading(level=3, contents='CB — Contingent Break Opportunity (B/A) — (normative)'),
                    Heading(level=4, contents='Contingent Break Opportunity Before and After'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='By default there is a break opportunity both before and after the object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the break opportunities. Note that this is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                    Heading(level=3, contents='CL — Closing Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation must be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This line break class contains the following characters:'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                    TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Paragraph(contents='plus any characters of General Category Pe in the Unicode Character Database.'),
                    Heading(level=3, contents='CM — Attached Characters and Combining Marks (XB) — (normative)'),
                    Heading(level=4, contents='Combining Characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                    Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 No-Break SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                    Paragraph(contents='The CM line break class includes all combining characters with General Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                    Heading(level=4, contents='Control and Formatting Characters'),
                    Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='NOTE: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by assigning them the AL or ID class instead.'),
                    Paragraph(contents='The CM line break class includes all characters of General Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='CR — Carriage Return (A) — (normative)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                    Paragraph(contents='NOTE: On some platforms the sequence CR, CR, LF is used to indicate the location of actual line breaks, whereas CR LF is treated like a hard line break. As soon as a user edits the text, the location of all the CR CR LF may change as the new text breaks differently, while the relative position of the CR LF to the surrounding text stays the same. This convention allows an editor to return a buffer and the client is able to tell which text is displayed on which line, by counting CR CR LFs and CR LFs.'),
                    Heading(level=3, contents='EX — Exclamation / Interrogation (XB)'),
                    Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix and ‘non-starter’ characters. They include:'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                    TableRow(contents='060C\ue000ARABIC COMMA'),
                    TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                    TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                    TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                    TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                    TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                    TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                    TableRow(contents='0F0E\ue000TIBETAN MARK NYIS SHAD'),
                    TableRow(contents='0F0F\ue000TIBETAN MARK TSHEG SHAD'),
                    TableRow(contents='0F10\ue000TIBETAN MARK NYIS TSHEG SHAD'),
                    TableRow(contents='0F11\ue000TIBETAN MARK RIN CHEN SPUNGS SHAD'),
                    TableRow(contents='0F14\ue000TIBETAN MARK GTER TSHEG'),
                    TableRow(contents='1944\ue000LIMBU EXCLAMATION MARK'),
                    TableRow(contents='1945\ue000LIMBU QUESTION MARK'),
                    TableRow(contents='2762\ue000HEAVY EXCLAMATION MARK ORNAMENT'),
                    TableRow(contents='2763\ue000HEAVY HEART EXCLAMATION MARK ORNAMENT'),
                    TableRow(contents='FE56..FE57\ue000SMALL QUESTION MARK..SMALL EXCLAMATION MARK'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    TableRow(contents='FE15\ue000PRESENTATION FORM FOR VERTICAL EXCLAMATION MARK'),
                    TableRow(contents='FE16\ue000PRESENTATION FORM FOR VERTICAL QUESTION MARK'),
                    Heading(level=3, contents='GL — Non-breaking (“Glue”) (XB/XA) — (normative)'),
                    Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NBSP follows SPACE, there is a break opportunity after the SPACE and NBSP will go as visible space onto the next line. See also WJ. The following lists the characters of line break class GL with additional description.'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                    TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words should be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NBSP, there is no break, because there never is a break in front of SPACE. NARROW NO-BREAK SPACE is used in Mongolian. The mongolian vowel separator acts like a NNBSP in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in [Unicode] Section 12.3, Mongolian.'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words must be hyphenated but may not be broken at the hyphen.'),
                    TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                    Paragraph(contents='The TSHEG BstAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information see Section 5.5 Tibetan Line Breaking.'),
                    TableRow(contents='035D..0362\ue000COMBINING DOUBLE BREVE..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                    Paragraph(contents='These diacritics span two characters, thus no word or line breaks are possible on either side.'),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of 205E VERTICAL FOUR DOTS followed by 2060 WORD JOINER.'),
                    Heading(level=3, contents='H2 — Hangul LV Syllable (B/A)'),
                    Paragraph(contents='All characters of Hangul Syllable Type LV.'),
                    Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks which are kept together; see [Boundaries. Korean uses space-based line breaking in many styles of documents. In that case Hangul syllables and conjoining jamo are tailored to use class AL but the default is class ID. See also JL, JT, JV and H3.'),
                    Heading(level=3, contents='H3 — Hangul LVT Syllable (B/A)'),
                    Paragraph(contents='All characters of Hangul Syllable Type LVT. See also JL, JT, JV and H2.'),
                    Heading(level=3, contents='HY — Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from the use as minus sign (or indicator of numerical range). If used as hyphen, it acts like hyphen.'),
                    Paragraph(contents='NOTE: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                    Heading(level=3, contents='ID — Ideographic (B/A)'),
                    Paragraph(contents='NOTE: The actual set of characters in this class includes characters other than Han ideographs.'),
                    Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. The ID line break class consists of:'),
                    TableRow(contents='2E80..2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    TableRow(contents='Hiragana (except small characters)'),
                    TableRow(contents='Katakana (except small characters)'),
                    TableRow(contents='3400..4DBF\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='4E00..9FAF\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='F900..FAFF\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490..A4CF\ue000YI RADICALS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF10..FF19\ue000WIDE DIGITS'),
                    TableRow(contents='20000..2A6D6\ue000CJK UNIFIED IDEOGRAPHS EXTENSION B'),
                    TableRow(contents='2F800..2FA1D\ue000CJK COMPATIBILITY IDEOGRAPHS SUPPLEMENT'),
                    Paragraph(contents='plus all of the FULLWIDTH LATIN letters and all of the 3000-33FF blocks not covered elsewhere.'),
                    Paragraph(contents='NOTE: Use 2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Paragraph(contents='U+3000 IDEOGRAPHIC SPACE may be subject to expansion or compression during line justification.'),
                    Heading(level=4, contents='Korean'),
                    Paragraph(contents='Korean is encoded with conjoining jamo, Hangul syllables or both. See also JL, JT, JV, H2 and H3. The following set of compatibility jamo are treated as ID by default.'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    Heading(level=3, contents='IN — Inseparable characters (XP)'),
                    Heading(level=4, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used in consecutive sequence. There is never a line break between two character of this class.'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS — Numeric Separator (Infix) (XB)'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                    TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                    TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                    Paragraph(contents='Infix separators are sentence ending punctuation when not used in a numeric context. Therefore they always prevent breaks before.'),
                    Heading(level=3, contents='JL — Hangul L Jamo (B)'),
                    Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                    Paragraph(contents='Conjoining Jamos form Korean Syllable Blocks which are kept together; see [Boundaries]. Korean uses space-based line breaking in many styles of documents. In that case Hangul Syllables and Conjoining Jamo are tailored to use class AL but the default is class ID. See Section 8.1, Types of Tailoring. See also JT, JV, H2 and H3.'),
                    Heading(level=3, contents='JT — Hangul T Jamo (A)'),
                    Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2 and H3.'),
                    Heading(level=3, contents='JV — Hangul V Jamo (XA/XB)'),
                    Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2 and H3.'),
                    Heading(level=3, contents='LF — Line Feed (A) — (normative)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                    Heading(level=3, contents='NL — Next Line (A) — (normative)'),
                    TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                    Paragraph(contents='There is a mandatory break after any NEL character, but see the discussion under BK.'),
                    Heading(level=3, contents='NS — Non-starters (XB)'),
                    Paragraph(contents='Non-starter characters cannot start a line, but unlike CL they may allow a break in some context when they follow one or more space characters. Non-starters include:'),
                    TableRow(contents='0E5A..0E5B\ue000THAI CHARACTER ANGKHANKHU..THAI CHARACTER KHOMUT'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D6..17DA\ue000KHMER SIGN CAMNUC PII KUUH..KHMER SIGN KOOMUUT'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='303C\ue000MASU MARK'),
                    TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK to HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                    TableRow(contents='30FB..30FE\ue000KATAKANA MIDDLE DOT..KATAKANA VOICED ITERATION MARK'),
                    TableRow(contents='A015\ue000YI SYLLABLE WU'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='plus all Hiragana, Katakana, and Halfwidth Katakana “small” characters'),
                    Paragraph(contents='NOTE: Optionally, the NS restriction may be relaxed and characters treated like ID, to achieve a more permissive style of line breaking, particular in some East Asian document styles.'),
                    Heading(level=3, contents='NU — Numeric (XP)'),
                    Paragraph(contents='These characters behave like ordinary characters in the context of ordinary characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                    Paragraph(contents='Numeric characters consist of DECIMAL DIGITS (All characters of General Category Nd, except FULL WIDTH) plus these characters:'),
                    TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                    TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                    Paragraph(contents='Unlike IS, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                    Heading(level=3, contents='OP — Opening Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation must be kept with the following character.'),
                    Paragraph(contents='The OP line break class consists of all characters of General Category Ps in the Unicode Character Database.'),
                    Heading(level=3, contents='PO — Postfix (Numeric) (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break in “(12.00) %”'),
                    Paragraph(contents='The list of post-fix characters is:'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='060B\ue000AFGHANI SIGN'),
                    TableRow(contents='20300\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='FDFC\ue000RIAL SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Paragraph(contents='Alphabetic characters are also widely used as unit designators in a post-fix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                    Heading(level=3, contents='PR — Prefix (Numeric) (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if space character intervenes. For example, there is no break in “$ (100.00)”'),
                    Paragraph(contents='The PR line break class consists of all currency symbols (General Category Sc) except as listed explicitly in PO as well as the following:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Paragraph(contents='NOTE: Many currency symbols may be used either as prefix or as postfix, depending on local convention. When used in that way, these currency symbols should be treated as if they have line breaking class PO.'),
                    Heading(level=3, contents='QU — Ambiguous Quotation (XB/XA)'),
                    Paragraph(contents='Some paired characters can be either opening or closing depending on usage. The default is to treat them as both opening and closing.'),
                    Paragraph(contents='NOTE: If language information is available, it can be used to determine which character is used as opening and which as closing quote. See the information in [Unicode] Section 6.2, General Punctuation.'),
                    Paragraph(contents='The QU line break class consists of characters of General Category Pf or Pi in the Unicode Character Database as well as:'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='23B6\ue000BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one of a kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='SA — Complex-context Dependent Characters (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to e.g. a hyphenation algorithm. For the characters that have this property, no line breaks will be found otherwise, therefore complex context analysis is mandatory.'),
                    Paragraph(contents='NOTE: These characters can be mapped into their equivalent line breaking classes as result of dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='If dictionary lookup is not available they should be treated as XX.'),
                    Paragraph(contents='All characters of General Category Cf, Lo or Lm in these ranges:'),
                    TableRow(contents='0E00..0EFF\ue000THAI / LAO'),
                    TableRow(contents='1000..109F\ue000MYANMAR'),
                    TableRow(contents='1780..17FF\ue000KHMER'),
                    Heading(level=3, contents='SG — Surrogates (XP) — (normative)'),
                    Paragraph(contents='Line break class SG comprises all code points with General Category Cs. The line breaking behavior of isolated surrogates is undefined.'),
                    Paragraph(contents='NOTE: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that are not supporting characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                    Heading(level=3, contents='SP — Space (A) — (normative)'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='The space characters are explicit break opportunities, however spaces at the end of a line are not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, because the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    Paragraph(contents='NOTE: SPACE, but none of the other breaking spaces, is used in determining an indirect break.'),
                    Heading(level=3, contents='SY — Symbols Allowing Break After (A)'),
                    Paragraph(contents='URLs are now so common in regular plain text, that they must be taken into account when assigning general-purpose line breaking properties. The SY line breaking property is intended to provide a break after, but not in front of digits so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='Slash (SOLIDUS) is allowed as an additional, limited break opportunity to improve layout of web addresses. As a side effect, some common abbreviations such as "w/o" or "A/S" which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation defined minimal distance.'),
                    Paragraph(contents='NOTE: Normally, symbols are treated as AL. However, additional symbols can be added to this line breaking class, or classes BA, BB, B2 by tailoring. This can be used to allow additional line breaks, for example after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this document.'),
                    Heading(level=3, contents='WJ — Word joiner (XB/XA) — (normative)'),
                    Paragraph(contents='These characters glue together both left and right neighbor character such that they are kept on the same line.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                    Paragraph(contents='By definition WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                    Heading(level=3, contents='XX — Unknown (XP)'),
                    Paragraph(contents='The XX line break class consists of all characters with General Category Co and all code points with General Category Cn.'),
                    Paragraph(contents='Unassigned code positions, private use characters and characters for which reliable line breaking information is not available are assigned this default line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or word joiner around characters of class XX to allow or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior, for example by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private use characters. For example one implementation might treat any private use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private use characters. The details of such use of private use characters are outside the scope of this standard.'),
                    Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 0x10000 to 0x1FFFD as AL and characters in the range 0x20000 to 0x2FFFD, and 0x30000 to 0x3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                    Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters of [Unicode].'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm and the pair table in Section 7, Pair Table-based Implementation, assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                    Heading(level=3, contents='ZW — Zero Width Space (A) — (normative)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                    Heading(level=3, contents='5.2 Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking, for example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                    Paragraph(contents='Examples of conventions used in several dictionaries are briefly described in this subsection. Where possible, the default line breaking properties for characters commonly used in dictionaries have been assigned so as to accommodate these and similar conventions. However, implementing the full conventions in dictionaries requires special support.'),
                    Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                    Paragraph(contents='Dictionary of the English Language, Samuel Johnson, 1843 SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson's acute). The letter ă is U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used, when splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332>, ə is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary. syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                    Paragraph(contents="Webster's 3rd New International Dictionary. syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə's are schwas as usual. Webster splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                    Heading(level=3, contents='5.3 Use of Soft Hyphen'),
                    Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intra-word line-break position. If the line is broken at that point, then whatever mechanism is appropriate for intra-word line-breaks should be invoked, just as if the line break had been triggered by another mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, such as:'),
                    Paragraph(contents='• simply inserting a hyphen glyph'),
                    Paragraph(contents='• inserting a hyphen glyph and changing spelling in the divided word parts'),
                    Paragraph(contents='• not showing any visible change and simply breaking at that point'),
                    Paragraph(contents='• inserting a hyphen glyph at the beginning of the new line'),
                    Paragraph(contents='Here are a few examples of spelling changes:'),
                    Paragraph(contents='• in pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”'),
                    Paragraph(contents='• in modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/eerd”'),
                    Paragraph(contents='• in German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”'),
                    Paragraph(contents='• in Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”'),
                    Paragraph(contents='Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases. The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, or U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                    Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                    Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling must reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like character in Unicode see Section 6.2, General Punctuation in [Unicode].'),
                    Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen; therefore if a distinction is desired, the fact that a hyphen is dictionary-inserted must be represented out of band, or by using another control code instead of SHY.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY it is customarily treated as overriding the action of the hyphenator for that word.'),
                    Heading(level=3, contents='5.4 Use of Double Hyphen'),
                    Paragraph(contents='In some fonts, noticeably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is merely a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                    Paragraph(contents="In some dictionaries, such as Webster's 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate a hyphen at the end of the line that should be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data, merely to substitute the glyph of any ordinary hyphen that ends up at the end of a line. In such convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution."),
                    Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                    Heading(level=3, contents='5.5 Tibetan Line Breaking'),
                    Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the thseg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a "phrase" not a sentence. "Phrases" are often metrical, that is, written after every N syllables, and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                    Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break, that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur in-line: one section ends and a new one starts on the same line and the new section is marked only by the presence of one of these characters.'),
                    Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic - and (often) the title of the section on a separate line. Where this is done, authors do insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semi colon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan and Nepal. Because there are no formal rules for their use in Tibetan they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; these should be treated as in Chinese written horizontally.'),
                    Paragraph(contents='NOTE: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be wholly insufficient for the purpose. In Unicode 4.1.0 the assignment of line break classes for Tibetan has been revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added. As yet there is limited practical experience with the revised assignment of line break classes. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected. Nevertheless the current set of line break classes should provide a good starting point.'),
                    Paragraph(contents='It is the stated intention of the Unicode Consortium to review these assignments in a future version and to furnish a more detailed and complete description of Tibetan line breaking and line formatting behavior.'),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='UAX#29 Text Boundaries, [Boundaries], describes a particular method for boundary detection. It is based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                    Paragraph(contents='A slightly simplified implementation of such an algorithm can be devised that uses a two dimensional table to resolve break opportunities between pairs or characters. It is described in Section 7, Pair Table-based Implementation.'),
                    Heading(level=3, contents='6.1 Line Breaking Rules'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules which take line breaking classes as input. The line breaking rules are stated in terms of regular expressions over the line breaking classes defined in Section 5.2, Description of Line Breaking Properties and three special symbols indicating the type of line break opportunity.'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit ”otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent an alternate set of rules must have the same effect.'),
                    Paragraph(contents='The distinction between a direct and an indirect break is handled by explicitly considering the effect of SP in rule LB12. Because rules are applied in order, rule LB12 implies that a prohibited break in rules LB13– LB19 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ’H’ stands for an ideographs, ’h’ for small kana, ’9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                    Heading(level=4, contents='Resolve line breaking classes:'),
                    Rule(contents='LB 1 Assign a line breaking class to each code point of the input. Resolve AI, CB, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                    Heading(level=4, contents='Start and end of text:'),
                    Rule(contents='LB 2a Never break at the start of text.'),
                    Formula(contents='× sot'),
                    Rule(contents='LB 2b Always break at the end of text.'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Rule(contents='LB 3a Always break after hard line breaks (but never between CR and LF).'),
                    Formula(contents='BK !'),
                    Rule(contents='LB 3b Treat CR followed by LF, as well as CR, LF and NL as hard line breaks.'),
                    Formula(contents='CR × LF'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='NL !'),
                    Rule(contents='LB 3c Do not break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF | NL )'),
                    Paragraph(contents='Note: A hard line break can consist of BK or a New Line Function (NLF) as described in Section 5.8 Newline Guidelines of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB 4 Do not break before spaces or zero-width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB 5 Break after zero-width space.'),
                    Formula(contents='ZW ÷'),
                    Heading(level=4, contents='Combining Marks:'),
                    Rule(contents='LB 6 [replaced by 18b and 18c].'),
                    Rule(contents='LB 7a [deprecated].'),
                    Paragraph(contents='See Section 8.3, Legacy Support for Space Character as Base for Combining Marks.'),
                    Rule(contents='LB 7b Do not break a combining character sequence; treat it as if it has the LB class of the base character in all of the following rules.'),
                    Formula(contents='Treat X CM* as if it were X.'),
                    Paragraph(contents='Where X is any line break class except SP, BK, CR, LF, NL or ZW.'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title of this rule it is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                    Rule(contents='LB 7c Treat any remaining combining mark as AL.'),
                    Formula(contents='Treat any remaining CM as it if were AL.'),
                    Paragraph(contents='This catches the case where a CM is the first character on the line, or follows SP, BK, CR, LF, NL or ZW.'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule 12.'),
                    Rule(contents='LB 8 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB 9 Do not break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB 10 Do not break within ‘”[’, even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Rule(contents='LB 11 Do not break within ‘]h’, even with intervening spaces.'),
                    Formula(contents='CL SP* × NS'),
                    Rule(contents='LB 11a Do not break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 SP* × B2'),
                    Heading(level=4, contents='Word Joiner:'),
                    Rule(contents='LB 11b Do not break before or after WORD JOINER and related characters.'),
                    Formula(contents='× WJ'),
                    Formula(contents='WJ ×'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB 12 Break after spaces.'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB 13 Do not break before or after NBSP and related characters.'),
                    Formula(contents='× GL'),
                    Formula(contents='GL ×'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB 14 Do not break before or after ‘”’.'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB 14a Break before and after unresolved CB.'),
                    Formula(contents='÷ CB'),
                    Formula(contents='CB ÷'),
                    Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                    Rule(contents='LB 15 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana and other non-starters, or after acute accents.'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents='LB 16 Do not break between two ellipses, or between letters or numbers and ellipsis.'),
                    Formula(contents='AL × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ’9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents='Do not break alphanumerics.'),
                    Rule(contents='LB 17 Do not break within ‘a9’, ‘3a’, or ‘H%’.'),
                    Formula(contents='ID × PO'),
                    Formula(contents='AL × NU'),
                    Formula(contents='NU × AL'),
                    Paragraph(contents='In general, lines should not be broken inside numbers of the form described by the following regular expression:'),
                    Formula(contents='PR ? ( OP | HY ) ? NU (NU | SY | IS) * CL ? PO ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='The default line breaking algorithm approximates this with the following rule, together with PR × AL and PR × ID, which handle numeric prefix puncutation. Note that some cases are already handled above, like ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, see Section 8.2, Examples of Customization.'),
                    Rule(contents='LB 18 Do not break between the following pairs of classes.'),
                    Formula(contents='CL × PO'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='NU × PO'),
                    Formula(contents='PR × AL'),
                    Formula(contents='PR × HY'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-‘, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Korean syllable blocks'),
                    Paragraph(contents='Conjoining jamo, Hangul syllables or combinations of both form Korean syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See the Unicode Standard Annex #29: Text Boundaries [Boundaries] for more information on Korean Syllable Blocks.'),
                    Rule(contents='LB 18b Do not break a Korean syllable.'),
                    Formula(contents='JL × JL | JV | H2 | H3'),
                    Formula(contents='JV | H2 × JV | JT'),
                    Formula(contents='JT | H3 × JT'),
                    Paragraph(contents='The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                    Rule(contents='LB 18c Treat a Korean Syllable Block the same as ID.'),
                    Formula(contents='JL | JV | JT | H2 | H3 × IN'),
                    Formula(contents='JL | JV | JT | H2 | H3 × PO'),
                    Formula(contents='PR × JL | JV | JT | H2 | H3'),
                    Paragraph(contents='When Korean uses SPACE for line breaking, these classes and characters of class ID are often tailored to AL: see Section 8, Tailoring.'),
                    Heading(level=4, contents='Finally, join alphabetic letters and break everything else.'),
                    Rule(contents='LB 19 Do not break between alphabetics (“at”).'),
                    Formula(contents='AL × AL'),
                    Rule(contents='LB 19b Do not break between numeric punctuation and alphabetics ("e.g.").'),
                    Formula(contents='IS × AL'),
                    Rule(contents='LB 20 Break everywhere else.'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair Table-based Implementation'),
                    Paragraph(contents='A two-dimensional table can be used to resolve break opportunities between pairs of characters. The rows of the table are labeled by the possible values of the line breaking property of the leading character in the pair. The columns are labeled by the line breaking class for the following character of the pair. Each intersection is labeled with the resulting line break opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of such a table-based definition. However, it uses line breaking classes whose membership is not solely determined by the line breaking property (as in this Annex), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classes defined above.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, then the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes of which only 14 appear to be unique. A minimal table representation is unique, except for trivial reordering of rows and columns.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Most of the rules in Section 6, Line Breaking Algorithm involve only pairs of characters, or they apply to a single line break class preceded or followed by any character. These rules can be represented directly in a pair table. However, rules LB9 - LB11 similarly require extended context to handle spaces.'),
                    Paragraph(contents='By broadening the definition of pair from B A, where B is the line breaking class before a break, and A the one after, to B SP* A, where SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line break opportunity (that is, direct and indirect breaks). Rules equivalent to the ones given in Section 6, Line Breaking Algorithm can be formulated without explicit use of SP by using % to express indirect breaks instead. These rules can then be simplified to involve only pairs of classes, that is, only constructions of the form:'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B ^ A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can be automatically translated into a pair table, as in Table 2 below. Line breaking analysis then proceeds by pair table lookup as explained below.'),
                    Paragraph(contents='Rule LB7b requires extended context for handling combining marks. This extended context must also be built into the code that interprets the pair table. For convenience in detecting the condition where A = CM, the symbols # and @ are used, instead of % and ^, respectively. See Section 7.5, Combining Marks.'),
                    Heading(level=3, contents='7.3 Example Pair Table'),
                    Paragraph(contents='Table 2 implements the line breaking behavior described in this Annex, with the limitation that only context of the form B SP* A is considered. BK, CR, LF, NL and SP classes are handled explicitly in the outer loop as given in the code sample below. Pair context of the form B CM* can be handled by handling the special entries @ and # in the driving loop, as explained in Section 7.5, Combining Marks. Conjoining jamos are considered separately in Section 7.6, Conjoining Jamos. In Table 2, the rows are labeled with the B class and the columns are labeled with the A class.'),
                    Paragraph(contents='Table 2: Example Pair Table'),
                    TableRow(contents='OP\ue000CL\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM\ue000WJ'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000@\ue000^'),
                    TableRow(contents='CL\ue000_\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='QU\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^'),
                    TableRow(contents='GL\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^'),
                    TableRow(contents='NS\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='EX\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='SY\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='IS\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='PR\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='PO\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='NU\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='AL\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='ID\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='IN\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='HY\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='BA\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='BB\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^'),
                    TableRow(contents='B2\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000^\ue000^\ue000#\ue000^'),
                    TableRow(contents='ZW\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000^\ue000_\ue000_'),
                    TableRow(contents='CM\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^'),
                    TableRow(contents='WJ\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^'),
                    Paragraph(contents='Resolved outside the pair table: XX SP BK SG CR LF CB SA AI NL'),
                    Paragraph(contents='Table 2 uses the following notation:'),
                    Paragraph(contents='^ denotes a prohibited break: B ^ A is equivalent to B SP* × A; in other words, never break before A and after B, even if one or more spaces intervene.'),
                    Paragraph(contents='% denotes an indirect break opportunity. B % A is equivalent to B × A and B SP+ ÷ A; in other words, do not break before A, unless one or more spaces follow B.'),
                    Paragraph(contents='@ denotes a prohibited break for combining marks: B @ A is equivalent to B SP* × A, where A is of class CM. For more details see >Section 7.5, Combining Marks.'),
                    Paragraph(contents='# denotes an indirect break opportunity for combining marks following a space. B # A is equivalent to (B × A and B SP+ ÷ A) where A is of cla5ss CM.'),
                    Paragraph(contents='_ denotes a direct break opportunity (equivalent to ÷ as defined above).'),
                    Paragraph(contents='Hovering over the cells in a browser with tool-tips enabled reveals the rule number that determines the breaking status for the pair in question. When a pair must be tested with and without intervening spaces, multiple rules are given. Hovering over a line breaking class name gives a representative member of the class and additional information. Clicking on any line break class name anywhere in the document jumps to the definition.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two functions provide sample code [Code] that demonstrates how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the line breaking classes CR, LF, and NL need to be added. They have been omitted here for brevity, but see Section 7.7, Explicit Breaks.'),
                    Paragraph(contents='The sample code assumes that the line breaking classes AI, CB, SG, and XX have been resolved according to rule LB1 as part of initializing the pcls array. The code further assumes that the complex line break analysis for characters with line break class SA is handled in function findComplexBreak, for which the following placeholder is given:'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    // cls - resolved line break class, may differ from pcls[0]'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line breaking opportunities (output)'),
                    CodeLine(contents='    // cch - remaining length of input '),
                    CodeLine(contents='    int findComplexBreak(enum break_class cls, enum break_class *pcls, '),
                    CodeLine(contents='                             enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='            if (!cch)'),
                    CodeLine(contents='                return 0;'),
                    CodeLine(contents='            for (int ich = 0; ich < cch; ich++) {'),
                    CodeLine(contents='    '),
                    CodeLine(contents='                // .. do complex break analysis here'),
                    CodeLine(contents='                // and report any break opportunities in pbrk ..'),
                    CodeLine(contents='    '),
                    CodeLine(contents='                if (pcls[ich] != SA)'),
                    CodeLine(contents='                        break;'),
                    CodeLine(contents='                }'),
                    CodeLine(contents='            return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The entries in the example pair table correspond to the following enumeration. For diagnostic purposes, the sample code returns these value to indicate not only the location but also the type of rule that triggered a given break opportunity.'),
                    CodeLine(contents='    enum break_action {'),
                    CodeLine(contents='           DIRECT_BRK = 0,             // _ in table'),
                    CodeLine(contents='           INDIRECT_BRK,               // % in table'),
                    CodeLine(contents='           COMBINING_INDIRECT_BRK,     // # in table'),
                    CodeLine(contents='           COMBINING_PROHIBITED_BRK,   // @ in table'),
                    CodeLine(contents='           PROHIBITED_BRK,             // ^ in table'),
                    CodeLine(contents='           EXPLICTI_BRK };             // ! in rules    '),
                    Paragraph(contents='Because the contexts involved in indirect breaks of the form B SP* A are of indefinite length, they need to be handled explicitly in the driver code. The sample implementation of a findLineBrk function below remembers the line break class for the last characters seen, but skips any occurrence of SP without resetting this value. Once character A is encountered, a simple lookback is used to see if it is preceded by a SP. This lookback is only necessary if B % A.'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable) (returned value)'),
                    CodeLine(contents="    // cls - current resolved line break class for 'before' character (variable)"),
                    CodeLine(contents='    // fTailorSPCM - selects a tailoring to keep SP CM together (see section 8.3)'),
                    CodeLine(contents='    int findLineBrk(enum break_class *pcls, enum break_action *pbrk, int cch, bool fTailorSPCM)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='        if (!cch) '),
                    CodeLine(contents='            return 0;'),
                    CodeLine(contents='    '),
                    CodeLine(contents="        enum break_class cls = pcls[0];   // class of 'before' character"),
                    CodeLine(contents='      '),
                    CodeLine(contents='        // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='        for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents='    '),
                    CodeLine(contents='            // handle explicit breaks here (see Section 7.7)'),
                    CodeLine(contents='            // handle spaces explicitly'),
                    CodeLine(contents='            if (pcls[ich] == SP) {'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;   // apply rule LB4: × SP'),
                    CodeLine(contents='                continue;                       // do not update cls'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='    '),
                    CodeLine(contents='            // handle complex scripts in a separate function'),
                    CodeLine(contents='            if (pcls[ich] == SA) {'),
                    CodeLine(contents='                ich += findComplexBreak(cls, &pcls[ich-1], &pbrk[ich-1], cch - (ich-1));'),
                    CodeLine(contents='                if (ich < cch)'),
                    CodeLine(contents='                    cls = pcls[ich];'),
                    CodeLine(contents='                continue;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='        '),
                    CodeLine(contents='            // lookup pair table information in brkPairs[before, after];'),
                    CodeLine(contents='            enum break_action brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents='    '),
                    CodeLine(contents='            pbrk[ich-1] = brk;                     // save break action in output array'),
                    CodeLine(contents='    '),
                    CodeLine(contents='            if (brk == INDIRECT_BRK) {             // resolve indirect break'),
                    CodeLine(contents='                if (pcls[ich - 1] == SP)           // if context is A SP * B'),
                    CodeLine(contents='                    pbrk[ich-1] = INDIRECT_BRK;    //       break opportunity'),
                    CodeLine(contents='                else                               // else'),
                    CodeLine(contents='                    pbrk[ich-1] = PROHIBITED_BRK;  //       no break opportunity'),
                    CodeLine(contents='            } '),
                    CodeLine(contents='            '),
                    CodeLine(contents='            // handle breaks involving a combining mark (see Section 7.5)'),
                    CodeLine(contents=''),
                    CodeLine(contents="            // save cls of 'before' character (unless bypassed by 'continue')"),
                    CodeLine(contents='            cls = pcls[ich];                                '),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        // always break at the end'),
                    CodeLine(contents='        pbrk[ich-1] = EXPLICIT_BRK;'),
                    CodeLine(contents='    '),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The function returns all the break opportunities in the array pointed to by pbrk, using the values in the table. On return pbrk[ich] is the type of break after the character at index ich.'),
                    Paragraph(contents='A common optimization in implementation is to determine only the nearest line break opportunity prior to the position of the first character that would cause the line to become overfull. Such an optimization requires backwards traversal of the string instead of forwards as shown in the sample code.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='The implementation of combining marks in the pair table presents an additional complication because rule LB7b defines a context X CM* that is of arbitrary length. There are some similarities to the way contexts of the form B SP* A that are involved in indirect breaks are evaluated. However, contexts of the form SP CM* or CM* SP also need to be handled, while rule LB7c requires some CM* to be treated like AL.'),
                    Paragraph(contents='The latter can be reflected directly in the example pair table in Table 2 by assigning the same values in the row marked CM as in the row marked AL. This is equivalent to rewriting the rules LB8—LB20 by duplicating any expression that contains an AL with another expression that contains a CM. For example, in LB16'),
                    Formula(contents='AL × IN'),
                    Paragraph(contents='becomes'),
                    Formula(contents='AL × IN CM × IN.'),
                    Paragraph(contents='This is fully equivalent to rule LB7c because rule LB7b already accounts for all CMs that are not supposed to be treated like AL.'),
                    Paragraph(contents="Rule LB7b is implemented in the example pair table in Table 2 by assigning a special # entry in the column marked CM for all rows referring to a line break class that allows a direct or indirect break after itself. (Note that the intersection between the row for class ZW and the column for class CM must be assigned '_' because of rule LB5.) The # corresponds to a break_action value of COMBINING_INDIRECT_BREAK, which triggers the following code in the sample implementation:"),
                    CodeLine(contents='    else if (brk == COMBINING_INDIRECT_BRK) {    // resolve combining mark break'),
                    CodeLine(contents="        pbrk[ich-1] = PROHIBITED_BRK;            // don't break before CM"),
                    CodeLine(contents='        if (pcls[ich-1] == SP){'),
                    CodeLine(contents='            if (!fTailorSPCM)                    // untailored:'),
                    CodeLine(contents='                pbrk[ich-1] = COMBINING_INDIRECT_BRK;    // apply rule SP ÷ '),
                    CodeLine(contents='            else                                 '),
                    CodeLine(contents='            {'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;    // optionally, keep SP CM together'),
                    CodeLine(contents='                if (ich > 1)'),
                    CodeLine(contents='                    pbrk[ich-2] = ((pcls[ich - 2] == SP) ? INDIRECT_BRK : DIRECT_BRK);'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='        } else                                   // apply rule LB7b: X CM * -> X'),
                    CodeLine(contents="            continue;                            // don't update cls"),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    Paragraph(contents='The last remembered line break class in variable cls is not updated, except for those cases covered by rule LB7c. A tailoring of rule LB7b that keeps the last SPACE character preceding a combining mark, if any, and therefore breaks before that SPACE character can easily be implemented as shown in the sample code.'),
                    Paragraph(contents="Rows for line break classes that prohibit breaks after must be assigned a special entry '@' which corresponds to a break action of COMBINING_PROHIBITED_BREAK and triggers the following code:"),
                    CodeLine(contents='    else if (brk == COMBINING_PROHIBITED_BRK) {  // this is the case OP SP* CM'),
                    CodeLine(contents='        pbrk[ich-1] = COMBINING_PROHIBITED_BRK;  // no break allowed'),
                    CodeLine(contents='        if (pcls[ich-1] != SP)'),
                    CodeLine(contents='            continue;                            // apply rule LB7b: X CM* -> X'),
                    CodeLine(contents='    } '),
                    Paragraph(contents='The only line break class that unconditionally prevents breaks across a following SP is OP. This code ensures that OP CM is handled according to rule LB7c and OP SP CM is handled as OP SP AL according to rule LB7c.'),
                    Heading(level=3, contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='For Korean syllable blocks, a simple pair table can be constructed based on the information in rule LB18b, and shown in Table 3 below.'),
                    Paragraph(contents='Table 3: Korean Syllable Block Pair Table'),
                    TableRow(contents='H2\ue000H3\ue000JL\ue000JV\ue000JT'),
                    TableRow(contents='H2\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='H3\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JL\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='JV\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='JT\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='The pair table for Korean syllable blocks in Table 3 can be merged with the example pair table in Table 2 by adding the cells from Table 3 beyond the lower right corner of Table 2. Next, according to rule LB18c, any empty cells in the new rows are filled with the same values as the existing row for class ID, and any empty cells for the new columns are filled with the same values as the existing column for class ID. Such a merged table can be handled with the same sample code as above.'),
                    Heading(level=3, contents='7.7 Explicit Breaks'),
                    Paragraph(contents='Handling explicit breaks is straightforward in the driver code, although it does clutter up the loop condition and body of the loop a bit. For completeness, the following sample shows how to change the loop condition and add if statements to the loop that handle BK, CR, and LF. Because NL and BK behave identically by default, this code assumes that BK has been substituted for NL.'),
                    CodeLine(contents='    // handle case where input starts with an LF'),
                    CodeLine(contents='    if (cls == LF)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='    for (int ich = 1; (ich < cch) && (cls != BK) && (cls != CR || pcls[ich] == LF); ich++) {'),
                    CodeLine(contents='    '),
                    CodeLine(contents='        // handle BK and LF explicitly'),
                    CodeLine(contents='        if (pcls[ich] == BK || pcls[ich] == LF) {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = BK;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='    '),
                    CodeLine(contents='        // handle CR explicitly'),
                    CodeLine(contents='        if(pcls[ich] == CR)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = CR;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='            '),
                    CodeLine(contents='        // handle spaces explicitly...'),
                    CodeLine(contents='            '),
                    Heading(level=2, contents='8 Customization'),
                    Paragraph(contents='A real world line breaking algorithm must be tailorable to some degree to meet user or document requirements.'),
                    Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character, or breaking after spaces (as in Latin text). The former tends to occur when text is set justified, the latter, when ragged margins are used. In that case, even ideographs are only broken at space characters.'),
                    Paragraph(contents='In Japanese for example, tighter and looser specifications of prohibited line breaks may be used.'),
                    Paragraph(contents="Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text which commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB18 within the scope of a URL to allow breaks after a '/' separated segment in the URL regardless of whether the next segment starts with a digit or not."),
                    Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how to customize the pair table implementation of the line breaking algorithm for these tailorings.'),
                    Heading(level=3, contents='8.1 Types of Tailoring'),
                    Paragraph(contents='There are three principal ways of tailoring the sample implementation of the line breaking algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to overriding some of the rules in Section 6, Line Breaking Algorithm.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions is equivalent to the preceding, but instead of changing the values for the pair intersection directly in the table, they can be labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be enabled at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself, for example by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, etc. Such open ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                    Paragraph(contents='Note: Reference [Cedar97] reports on a real world implementation of a pair table-based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. That implementation simultaneously met the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=3, contents='8.2 Examples of Customization'),
                    Paragraph(contents='Example 1. The exact method of resolving the line break class for characters wtih class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of or predominantly containing characters with line breaking class SA, it may be useful instead defer the determination of line breaks to a different algorithm entirely. Section 7.4, Sample Code sketches such approach in which the interface to the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks inside a run of spaces. This requires a change in the way the driver loop handles spaces and therefore cannot be simply done by customizing the pair-table. However, the additional task of line wrapping runs of spaces could also be performed after the fact at the layout system level while leaving unchanged the actual line breaking algorithm.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean uses either implicit breaking around characters (type 2 as defined above in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersections of ID/ID, AL/ID and ID/AL are affected. For alphabetic style line breaking, breaks for these four cases require space; for ideographic style line breaking, these four cases do not require spaces. Therefore, one defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given text.'),
                    Paragraph(contents='Example 4. Sometimes in Far Eastern context it is required to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98] this can again be done in the same way as Korean. In this case the intersections of NU/NU, NU/AL, AL/AL, and AL/NU are affected.'),
                    Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables to be kept together, for example, the syllable kyu, spelled with the two kanas KI and “small yu” would no longer be kept together as if KI and yu were atomic. This customization can be handled via the first method by changing the classification of the Kana small characters from NS to ID as needed.'),
                    Paragraph(contents='Example 6. Some implementations may wish to tailor the line breaking algorithm to resolve grapheme clusters according to UAX #29: Text Boundaries [Boundaries] as a first stage. Generally, the line break algorithm does not create line break opportunities within default grapheme clusters, therefore such a tailoring would be expected to produce results that for most practical cases are close to what are defined by the default algorithm. However, if such a tailoring is chosen, characters that are members of line break class CM but not part of the definition of default grapheme clusters must still be handled by rules LB7b and LB7c, or by some additional tailoring.'),
                    Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions'),
                    Formula(contents='PR ? ( OP | HY ) ? NU (NU | SY | IS) * CL ? PO ?'),
                    Paragraph(contents='together with PR × AL and PR × ID from rule LB18. In that case, LB8 must be tailored as follows'),
                    Formula(contents='[^NU] × CL'),
                    Formula(contents='× EX'),
                    Formula(contents='[^NU] × IS'),
                    Formula(contents='[^NU] × SY'),
                    Paragraph(contents='otherwise single digits may be handled by rule LB8 before being handled in the regular expression.'),
                    Paragraph(contents='Example 8. Some implementations may wish to tailor the algorithm to omit rule LB7b due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB7c alone generally produces acceptable results for such implementations.'),
                    Heading(level=3, contents='8.3 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='As stated in [Unicode], Section 7.7, Combining Marks, combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. This use of SPACE for this purpose is now deprecated because it has been found to lead to many complications in text processing. For either NBSP or SPACE the visual appearance is the same, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* or SP CM* were defined to act like an indivisible cluster allowing breaks on either side like ID.'),
                    Paragraph(contents='Where backwards compatibility with documents created under the prior practice is desired, the following tailoring should be applied in place of the deprecated rule LB7a.'),
                    Paragraph(contents='In all of the following rules, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID.'),
                    Paragraph(contents='The application of this rule should be limited to those CM characters with General Category M.'),
                    Heading(level=2, contents='References'),
                    TableRow(contents='[Bidi]\ue000Unicode Standard Annex #9: Unicode Bidirectional Algorithm http://www.unicode.org/reports/tr9/'),
                    TableRow(contents='[Boundaries]\ue000Unicode Standard Annex #29, Text Boundaries. http://www.unicode.org/reports/tr29/ For information on grapheme cluster boundaries'),
                    TableRow(contents='[Cedar97]\ue000Cy Cedar, David Veintimilla, Michel Suignard and Asmus Freytag, Report from the Trenches: Microsoft Publisher goes Unicode, Proceedings of the Eleventh International Unicode Conference, San Jose, CA 1997'),
                    TableRow(contents='[Code]\ue000Sample code implementing the pair table http://www.unicode.org/Public/PROGRAMS/LineBreakSampleCpp/ Contains the code samples shown in this document together with driver code'),
                    TableRow(contents='[Data]\ue000Line Break property data file For the latest version, see: http://www.unicode.org/Public/UNIDATA/LineBreak.txt For the current version, see: http://www.unicode.org/Public/4.1.0/ucd/LineBreak.txt For other versions, see: http://www.unicode.org/versions/'),
                    TableRow(contents='[EAW]\ue000Unicode Standard Annex #11, East Asian Width. http://www.unicode.org/reports/tr11/ For a definition of East Asian Width'),
                    TableRow(contents='[FAQ]\ue000Unicode Frequently Asked Questions http://www.unicode.org/faq/ For answers to common questions on technical issues.'),
                    TableRow(contents='[Feedback]\ue000http://www.unicode.org/reporting.html For reporting errors and requesting information online.'),
                    TableRow(contents='[Glossary]\ue000Unicode Glossary http://www.unicode.org/glossary/ For explanations of terminology used in this and other documents.'),
                    TableRow(contents='[HangulST]\ue000The latest version of the Hangul Syllable Types property data file is http://www.unicode.org/Public/UNIDATA/HangulSyllableType.txt'),
                    TableRow(contents='[JIS]\ue000JIS X 4051-1995. Line Composition Rules for Japanese Documents. (『日本語文晝の行組版方法』) Japanese Standards Association. 1995.'),
                    TableRow(contents='[Knuth78]\ue000Donald E. Knuth and Michael F. Plass, Breaking Lines into Paragraphs, republished in Digital Typography, CSLI 78, (Stanford, California: CLSI Publications 1997)'),
                    TableRow(contents='[Reports]\ue000Unicode Technical Reports http://www.unicode.org/reports/ For information on the status and development process for technical reports, and for a list of technical reports.'),
                    TableRow(contents='[Suign98]\ue000Michel Suignard, Worldwide Typography and How to Apply JIS X 4051-1995 to Unicode, Proceedings of the Twelfth International Unicode/ISO 10646 Conference, Tokyo, Japan, 1998'),
                    TableRow(contents='[TEX]\ue000Donald E. Knuth, TEX, the Program, Volume B of Computers & Typesetting, (Reading, Massachusetts: Addison-Wesley 1986)'),
                    TableRow(contents='[Unicode]\ue000The Unicode Standard, Version 4.0, (Reading, Massachusetts: Addison-Wesley Developers Press 2003, ISBN 0-321-18578-1) or online as http://www.unicode.org/versions/Unicode4.0.0/'),
                    TableRow(contents='[UCD]\ue000Unicode Character Database http://www.unicode.org/ucd/ For an overview of the Unicode Character Database and a list of its associated files see http://www.unicode.org/Public/UNIDATA/UCD.html'),
                    TableRow(contents='[Versions]\ue000Versions of the Unicode Standard http://www.unicode.org/versions/ For details on the precise contents of each version of the Unicode Standard, and how to cite them.'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Christopher Fynn provided the background information on Tibetan line break. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters respectively. Many others provided additional review of the rules and property assignments.'),
                    Heading(level=2, contents='Modifications'),
                    Paragraph(contents='This section indicates the changes introduced by each revision.'),
                    Heading(level=4, contents='Revision 17:'),
                    Paragraph(contents='• [2005-08-29 Erratum] The status section inadvertently proclaimed this to be a proposed update, this was corrected to correctly reflect the status of the document.'),
                    Paragraph(contents='• Significantly revised the line break classes for Tibetan, as well as Mongolian and Arabic Punctuation.'),
                    Paragraph(contents='• Added section 5.5 on Tibetan and section 7.7 on handling explicit breaks.'),
                    Paragraph(contents='• Added line break class assignments for Unicode 4.1 characters.'),
                    Paragraph(contents='• Significantly revised the line break class assignments for danda characters and made it consistent across scripts.'),
                    Paragraph(contents='• LB6: Replaced by new rules 18b and 18c, using new classes JL, JV, JT, H2, and H3.'),
                    Paragraph(contents='• LB7a: Deprecated rule 7a because SPACE as base character for standalone combining marks is deprecated.'),
                    Paragraph(contents='• LB7b: Revised 7b and section 7.5 as well as Table 2 to match the deprecation of rule 7a.'),
                    Paragraph(contents='• LB7b: Clarified that this rule does not apply to SP.'),
                    Paragraph(contents='• LB11a: Added a missing SP * to make the formula match the rule.'),
                    Paragraph(contents='• LB18b: Removed the existing rule 18b because it was redundant.'),
                    Paragraph(contents='• Corrected an erratum on revision 14 by splitting GL from WJ in rule 11b and moving to a new rule 13.'),
                    Paragraph(contents='• Updated the pair table and sample code to match the changes in the rules.'),
                    Paragraph(contents='• Updated the regular expression for numbers.'),
                    Paragraph(contents='• Added several notes on implementation techniques.'),
                    Paragraph(contents='• Moved all suggested tailorings from the rules section to the examples in section 8.2.'),
                    Paragraph(contents='[Revision 16, being a proposed update, is superseded and no longer publicly available. Only modifications between revisions 10 and 12 are tracked here.]'),
                    Heading(level=4, contents='Revision 15:'),
                    Paragraph(contents='• LB19b: Added new rule 19b.'),
                    Paragraph(contents='• Changed line breaking class: combining double diacritics from CM to GL, 037A and 2126 to match their canonical equivalents, 2140 corrected to AL, Arabic numerical separators from AL to NU, many alphabetic characters that are EAW=Ambiguous from AI to AL to better reflect current practice, remaining circled numbers and letters from AL to AI for consistency.'),
                    Paragraph(contents='• Added a note on the behavior of U+200B and U+3000 when lines are justified.'),
                    Paragraph(contents='• Reconciled the data file and description of line breaking classes in section 5.'),
                    Paragraph(contents='• Reconciled the rules and pair table implementation of the algorithm.'),
                    Paragraph(contents='• Updated the text of the conformance statement in section 4.'),
                    Paragraph(contents='• Added section 5.4 on use of double hyphen.'),
                    Paragraph(contents='• Updated styles and table formatting.'),
                    Paragraph(contents='• Minor edits throughout.'),
                    Heading(level=4, contents='Revision 14:'),
                    Paragraph(contents='• Added new line breaking classes NL and WJ to better support NEL and Word Joiner.'),
                    Paragraph(contents='• Deprecated the use of class SG.'),
                    Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and 7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                    Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                    Paragraph(contents='• Clarified the behavior of SHY and MONGOLIAN TODO SOFT HYPHEN, as well as WJ and ZWNBSP.'),
                    Paragraph(contents='• Added a new subsection 5.3 on SOFT HYPHEN and a new subsection 7.6 on conjoining jamos.'),
                    Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                    Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                    Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                    Paragraph(contents='• Expanded the introduction in Section 3.'),
                    Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                    Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                    Paragraph(contents='[Revision 13, being a proposed update, is superseded and no longer publicly available. Only modifications between revisions 12 and 14 are tracked here.]'),
                    Heading(level=4, contents='Revision 12:'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added WORD JOINER to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the datafile. Only characters whose LB class differs from those of characters with related General Category are noted explicitly in this text.'),
                    Paragraph(contents='[Revision 11, being a proposed update, is superseded and no longer publicly available. Only modifications between revisions 10 and 12 are tracked here.]'),
                    Heading(level=4, contents='Revision 10:'),
                    Paragraph(contents='• Change header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Heading(level=4, contents='Revision 9:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX.'),
                    Paragraph(contents='• LB7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair-table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair-table entry PR % ID'),
                    Paragraph(contents='• Reworked Section 7.5'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull)'),
                    Heading(level=4, contents='Revision 8:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX because the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                    Heading(level=4, contents='Revision 7:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Heading(level=4, contents='Revision 6:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='[No change history is available for earlier revisions.]'),
                    Paragraph(contents='Copyright © 1998-2005 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.')],
 Version(5, 0, 0): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Line Breaking Properties'),
                    TableRow(contents='Version\ue000Unicode 5.0.0'),
                    TableRow(contents='Authors\ue000Asmus Freytag (asmus@unicode.org)'),
                    TableRow(contents='Date\ue0002006-08-22'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-19.html'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-17.html'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                    TableRow(contents='Revision\ue00019'),
                    Heading(level=4, contents='Summary'),
                    Paragraph(contents='This annex presents the specification of line breaking properties for Unicode characters as well as a default algorithm for determining line break opportunities. A model implementation using pair tables is also provided.'),
                    Heading(level=4, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                    Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions].'),
                    Heading(level=4, contents='Contents'),
                    Paragraph(contents='1 Overview and Scope'),
                    Paragraph(contents='2 Definitions'),
                    Paragraph(contents='3 Introduction'),
                    Paragraph(contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='4 Conformance'),
                    Paragraph(contents='4.1 Line Breaking Algorithm'),
                    Paragraph(contents='4.2 Line Breaking Properties'),
                    Paragraph(contents='4.3 Higher-Level Protocols'),
                    Paragraph(contents='5 Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Dictionary Usage'),
                    Paragraph(contents='5.3 Use of Soft Hyphen'),
                    Paragraph(contents='5.4 Use of Double Hyphen'),
                    Paragraph(contents='5.5 Tibetan Line Breaking'),
                    Paragraph(contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Pair Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='8 Customization'),
                    Paragraph(contents='8.1 Types of Tailoring'),
                    Paragraph(contents='8.2 Examples of Customization'),
                    Paragraph(contents='9 Implementation Notes'),
                    Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='References'),
                    Paragraph(contents='Acknowledgments'),
                    Paragraph(contents='Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='The text of The Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior reflecting best practices for the support of multilingual texts.'),
                    Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. The Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                    Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and a brief section on conformance requirements. Three main sections follow:'),
                    Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters of the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                    Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='• Section 7, Pair Table-Based Implementation, describes an efficient pair table-based implementation of the algorithm.'),
                    Paragraph(contents='The final two sections discuss issues of customization and implementation.'),
                    Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                    Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard [Unicode5.0]. The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard. All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard.'),
                    Paragraph(contents='LD1 Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='LD2 Line Break: The position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='LD3 Line Break Opportunity: A place where a line is allowed to end.'),
                    Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                    Paragraph(contents='LD4 Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                    Paragraph(contents='LD5 Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative.'),
                    Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of break.'),
                    Paragraph(contents='LD6 Line Breaking Class: A class of characters with the same line breaking property value.'),
                    Paragraph(contents='The Line Breaking Classes are described in Section 5.1, Description of Line Breaking Properties.'),
                    Paragraph(contents='LD7 Mandatory Break: A line must break following a character that has the mandatory break property.'),
                    Paragraph(contents='Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                    Paragraph(contents='LD8 Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                    Paragraph(contents='A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity also exists after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='LD9 Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                    Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                    Paragraph(contents='An indirect break is indicated in the pair table in Table 2 as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though space characters are not shown in the pair table, an indirect break can occur only if one or more spaces follow B. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be represented as two rules: B × A and B SP+ ÷ A.'),
                    Paragraph(contents='LD10 Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                    Paragraph(contents='A direct break is indicated in the pair table in Table 2 as B ^ A, where B is the character class of the character before and A is the character class of the character after the break, and the optional space characters are not shown. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='LD11 Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                    Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                    Paragraph(contents='Table 1 provides a summary listing of all line breaking classes while Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                    Paragraph(contents='Table 1. Line Breaking Classes (* = non-tailorable)'),
                    TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Characters with This Property...'),
                    TableRow(contents='Non-tailorable Line Breaking Classes'),
                    TableRow(contents='BK *\ue000Mandatory Break\ue000NL, PS\ue000Cause a line break (after)'),
                    TableRow(contents='CR *\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF *\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                    TableRow(contents='CM *\ue000Attached Characters and Combining Marks\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                    TableRow(contents='NL *\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                    TableRow(contents='SG *\ue000Surrogates\ue000Surrogates\ue000Should not occur in well-formed text'),
                    TableRow(contents='WJ *\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before or after'),
                    TableRow(contents='ZW *\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                    TableRow(contents='GL *\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before or after'),
                    TableRow(contents='SP *\ue000Space\ue000SPACE\ue000Generally provide a line break opportunity after the character, enable indirect breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                    TableRow(contents='BA\ue000Break Opportunity After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Opportunity Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='CL\ue000Closing Punctuation\ue000“)”, “]”, “}”, etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                    TableRow(contents='NS\ue000Nonstarter\ue000small kana\ue000Allow only indirect line breaks before'),
                    TableRow(contents='OP\ue000Opening Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                    TableRow(contents='QU\ue000Ambiguous Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='IS\ue000Infix Separator (Numeric)\ue000. ,\ue000Prevent breaks after any and before numeric'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                    TableRow(contents='PO\ue000Postfix (Numeric)\ue000%, ¢\ue000Do not break following a numeric expression'),
                    TableRow(contents='PR\ue000Prefix (Numeric)\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                    TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                    TableRow(contents='AL\ue000Ordinary Alphabetic and Symbol Characters\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                    TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000Unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Introduction'),
                    Paragraph(contents='Lines are broken as result of one of two conditions. The first condition is the presence of an explicit line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                    Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates.'),
                    Paragraph(contents='When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and U+3000 IDEOGRAPHIC SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                    Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and should therefore be avoided.'),
                    Paragraph(contents='In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                    Paragraph(contents='More complex formatting algorithms may take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                    Paragraph(contents='The definition of optimal line breaks is outside the scope of this annex, as are methods for their selection. For the purpose of this annex, what is important is not so much what defines the optimal amount of text on the line, but how to determine all legal line break opportunities. Whether and how any given line break opportunity is actually used is up to the full layout system. Some layout systems will further evaluate the raw line break opportunities returned from the line breaking algorithm and apply additional rules. TEX, for example, uses line break opportunities based on hyphens only as a last resort.'),
                    Paragraph(contents='Finally, most text layout systems will support an emergency mode that handles the case of an unusual line that contains no ordinary line break opportunities. In such line layout emergencies, line breaks are placed with no regard to the ordinary line breaking behavior of the characters involved.'),
                    Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                    Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                    Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                    Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                    Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                    Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                    Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, the determination of which requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                    Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These can be utilized with these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                    Paragraph(contents='In bidirectional text, line breaks takes are determined before applying rule L1 of the Unicode Bidirectional Algorithm [Bidi]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. Therefore the information in this annex, including the specification of the line breaking algorithm, must allow for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Users adding such characters to a text expect that they will have the desired effect. For that reason, these characters have been given non-tailorable line breaking behavior. The conformance requirements are spelled out in the following subsections.'),
                    Paragraph(contents='At times, this specification recommends best practice. These recommendations are not normative and conformance with this specification does not depend on their realization. These recommendations contain the expression “This specification recommends ...”, or some similar wording.'),
                    Heading(level=3, contents='4.1 Line Breaking Algorithm'),
                    Paragraph(contents='UAX14-C1. In the absence of a permissible higher-level protocol, a process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex.'),
                    Paragraph(contents='• As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode], and the notes following.'),
                    Paragraph(contents='• The line breaking algorithm specifies part of the intrinsic semantics of characters specifically encoded for their line breaking behavior and, therefore, is required for conformance to the Unicode Standard where text containing such characters is broken into lines.'),
                    Paragraph(contents='UAX14-C2. The permissible higher-level protocols are described in Section 4.3, Higher-Level Protocols.'),
                    Heading(level=3, contents='4.2 Line Breaking Properties'),
                    Paragraph(contents='All line breaking classes are normative, but overridable, except for those line breaking classes marked with * in Table 1, which are not overridable.'),
                    Heading(level=3, contents='4.3 Higher-Level Protocols'),
                    Paragraph(contents='There are many different ways to break lines of text, and the Unicode Standard does not intend to unnecessarily restrict the ways in which implementations can do this. However, for characters that are encoded solely or primarily for their line breaking behavior, interpretation of these characters must be consistent with their semantics as defined by their normative line breaking behavior. This leads to the following permissible higher-level protocols:'),
                    Paragraph(contents='UAX14-HL1. Override rule 2 and report a break at the start of text.'),
                    Paragraph(contents='• A higher-level protocol may report a break at the start of text (sot). As written, the rule is intended to ensure that the line breaking algorithm always produces lines that have at least one character in them. However, an analysis in terms of text boundaries would more naturally report a boundary at the sot, leaving it to any client to skip past that boundary in breaking lines.'),
                    Paragraph(contents='UAX14-HL2. Tailor any tailorable line break class.'),
                    Paragraph(contents='• A higher-level protocol may change the algorithm to produce results as if the membership of any tailorable line break class had been changed.'),
                    Paragraph(contents='UAX14-HL3. Override any rule in Section 6.2,Tailorable Line Breaking Rules, or add new rules to that section.'),
                    Paragraph(contents='• A higher-level protocol my change the algorithm to produce results as if any of the rules in Section 6.2, Tailorable Line Breaking Rules, had been deleted or amended, or as if new rules had been added.'),
                    Paragraph(contents='Because of the way the specification is set up, HL2 and HL3 have no effect on the results for text containing only characters of the non-tailorable line breaking classes. However, they allow for unrestricted tailoring of the results for texts containing only characters from the tailorable line breaking classes as well as wide latitude in defining the behavior of mixed texts.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. In a few instances, the descriptions in this section provide additional detail about handling a given character at the end of a line, which goes beyond the simple determination of line breaks.'),
                    Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be found grouped together in the same line break class.'),
                    Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into two algorithms defined in Section 6, Line Breaking Algorithm, and Section 7, Pair Table-Based Implementation. These sections describe workable default line breaking methods. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of particular languages for particular document styles and user preferences.'),
                    Heading(level=4, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a tab-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Heading(level=4, contents='Future Updates'),
                    Paragraph(contents='As more scripts are added to the Unicode Standard and become more widely implemented and used on computers, more line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementations should not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                    Paragraph(contents='(A)—the class allows a break opportunity after in specified contexts'),
                    Paragraph(contents='(XA)—the class prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='(B)—the class allows a break opportunity before in specified contexts'),
                    Paragraph(contents='(XB)—the class prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='(P)—the class allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='(XP)—the class prevents a break opportunity for a pair of same characters'),
                    Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Some characters that ordinarily act like alphabetic or symbol characters (which have the AL line breaking class) are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL, but see the note at the end of this description.'),
                    Paragraph(contents='As originally defined, the line break class AI contained all characters with East Asian Width property A (ambiguous width) that would otherwise be AL in this classification. They take the AL line breaking class only when their resolved width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). For more information on East Asian Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [EAW].'),
                    Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                    Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                    Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                    TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                    TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, assume that all ambiguous characters have been resolved appropriately as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Note: Normally characters with class AI are resolved to either ID or AL. However, the following two characters are used as punctuation marks in Spanish, where they would behave more like a character of class OP. Implementations might therefore wish to tailor these characters to class OP for use in Spanish.'),
                    TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                    TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                    Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                    Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='Except as listed explicitly below as part of another line breaking class, and except as assigned class AI or ID based on East Asian Width, this class contains the following characters:'),
                    Paragraph(contents='ALPHABETIC—all remaining characters of General Categories Lu, Ll, Lt, Lm, and Lo SYMBOLS—all remaining characters of General Categories Sm, Sk, and So NON-DECIMAL NUMBERS—all remaining characters of General Categories Nl, and No PUNCTUATION—all remaining characters of General Categories Pc, Pd, and Po'),
                    Paragraph(contents='Plus these characters:'),
                    TableRow(contents='0600..0603\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAFHA'),
                    TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                    TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                    TableRow(contents='2061..2063\ue000FUNCTION APPLICATION..INVISIBLE SEPARATOR'),
                    Paragraph(contents='These characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                    Heading(level=3, contents='BA: Break Opportunity After (A)'),
                    Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                    Heading(level=4, contents='Breaking Spaces'),
                    Paragraph(contents='Breaking spaces are the following subset of characters with General_Category Zs:'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN SPACE'),
                    TableRow(contents='2003\ue000EM SPACE'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                    Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                    Paragraph(contents='The Ogham space mark is rendered visibly between words but should be elided at the end of a line.'),
                    Paragraph(contents='See the ID property for U+3000 IDEOGRAPHIC SPACE. For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode5.0].'),
                    Heading(level=4, contents='Tabs'),
                    TableRow(contents='0009\ue000TAB'),
                    Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    Heading(level=4, contents='Conditional Hyphens'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY marks an optional place where a line break may occur inside a word. It can be used with all scripts. SHY is rendered invisibly and has no width: it merely indicates an optional line break. The rendering of the optional line break depends on the script. For the Latin script, rendering the line break typically means displaying a hyphen at the end of the line; however, some languages require a change in spelling surrounding a line break. For examples, see Section 5.3, Use of Soft Hyphen.'),
                    Heading(level=4, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they print, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins.'),
                    Heading(level=4, contents='Visible Word Dividers'),
                    Paragraph(contents='The following are other forms of visible word dividers that provide break opportunities:'),
                    TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                    TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                    TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                    TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                    TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                    TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                    Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.5, Tibetan Line Breaking.'),
                    Paragraph(contents='The ethiopic word space is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual break opportunity, the vertical bar is rendered as a hyphen.'),
                    Heading(level=4, contents='Word Separators'),
                    Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing these should be treated as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                    TableRow(contents='16EB\ue000RUNIC SINGLE DOT PUNCTUATION'),
                    TableRow(contents='16EC\ue000RUNIC MULTIPLE DOT PUNCTUATION'),
                    TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                    TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                    TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                    TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                    TableRow(contents='205B\ue000FOUR DOT MARK'),
                    TableRow(contents='205D\ue000TRICOLON'),
                    TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                    Heading(level=4, contents='Dandas'),
                    Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                    TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                    TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                    TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                    TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                    TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                    TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                    TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                    TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                    TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                    TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                    Heading(level=4, contents='Tibetan'),
                    TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                    TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                    TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                    TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                    TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                    Paragraph(contents='For additional information, see Section 5.5, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Other Terminating Punctuation'),
                    Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces.'),
                    TableRow(contents='1802\ue000MONGOLIAN COMMA'),
                    TableRow(contents='1803\ue000MONGOLIAN FULL STOP'),
                    TableRow(contents='1804\ue000MONGOLIAN COLON'),
                    TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                    TableRow(contents='1808\ue000MONGOLIAN MANCHU COMMA'),
                    TableRow(contents='1809\ue000MONGOLIAN MANCHU FULL STOP'),
                    TableRow(contents='1A1E\ue000BUGINESE PALLAWA'),
                    TableRow(contents='2CF9\ue000COPTIC OLD NUBIAN FULL STOP'),
                    TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                    TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                    TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                    TableRow(contents='2CFE\ue000COPTIC FULL STOP'),
                    TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                    TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                    TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                    TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                    TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                    TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                    TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                    Heading(level=3, contents='BB: Break Opportunities Before (B)'),
                    Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                    Heading(level=4, contents='Dictionary Use'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                    Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    Heading(level=4, contents='Tibetan Head Letters'),
                    TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                    TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                    TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                    TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                    TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                    TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                    TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                    TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                    TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                    TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                    Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.5, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Mongolian'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked, SOFT HYPHEN should be used instead.'),
                    Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH, but not between a pair of them. Such pairs are sometimes used instead of a single quotation dash. For that reason, the line should not be broken between EM DASHes even though not all fonts use connecting glyphs for the EM DASH.'),
                    Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                    TableRow(contents='000C\ue000FORM FEED (FF)'),
                    TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                    Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. No paragraph formatting is applied.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR (LS)'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. No paragraph formatting is applied. This is similar to HTML <BR>.'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR (PS)'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. Paragraph formatting is applied.'),
                    Heading(level=4, contents='Newline Function (NLF)'),
                    Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional explicit breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode5.0].'),
                    Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                    Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                    Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                    Heading(level=3, contents='CL: Closing Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation must be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This line break class contains the following characters plus any characters of General_Category Pe in the Unicode Character Database.'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                    TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Heading(level=3, contents='CM: Attached Characters and Combining Marks (XB)'),
                    Heading(level=4, contents='Combining Characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                    Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 No-Break SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                    Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol when using enclosing combining marks (General_Category Me).'),
                    Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                    Heading(level=4, contents='Control and Formatting Characters'),
                    Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by assigning them the AL or ID class instead.'),
                    Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                    Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences.'),
                    Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                    Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS).'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                    TableRow(contents='060C\ue000ARABIC COMMA'),
                    TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                    TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                    TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                    TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                    TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                    TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                    TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                    TableRow(contents='0F0E\ue000TIBETAN MARK NYIS SHAD'),
                    TableRow(contents='0F0F\ue000TIBETAN MARK TSHEG SHAD'),
                    TableRow(contents='0F10\ue000TIBETAN MARK NYIS TSHEG SHAD'),
                    TableRow(contents='0F11\ue000TIBETAN MARK RIN CHEN SPUNGS SHAD'),
                    TableRow(contents='0F14\ue000TIBETAN MARK GTER TSHEG'),
                    TableRow(contents='1944\ue000LIMBU EXCLAMATION MARK'),
                    TableRow(contents='1945\ue000LIMBU QUESTION MARK'),
                    TableRow(contents='2762\ue000HEAVY EXCLAMATION MARK ORNAMENT'),
                    TableRow(contents='2763\ue000HEAVY HEART EXCLAMATION MARK ORNAMENT'),
                    TableRow(contents='A876\ue000PHAGS-PA MARK SHAD'),
                    TableRow(contents='A877\ue000PHAGS-PA MARK DOUBLE SHAD'),
                    TableRow(contents='FE15\ue000PRESENTATION FORM FOR VERTICAL EXCLAMATION MARK'),
                    TableRow(contents='FE16\ue000PRESENTATION FORM FOR VERTICAL QUESTION MARK'),
                    TableRow(contents='FE56..FE57\ue000SMALL QUESTION MARK..SMALL EXCLAMATION MARK'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NBSP follows SPACE, there is a break opportunity after the SPACE and NBSP will go as visible space onto the next line. See also WJ. The following lists the characters of line break class GL with additional description.'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                    TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words should be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NBSP, there is no break, because there never is a break in front of SPACE. NARROW NO-BREAK SPACE is used in Mongolian. The mongolian vowel separator acts like a NNBSP in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in Section 13.2, Mongolian, of [Unicode5.0].'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words must be hyphenated but may not be broken at the hyphen.'),
                    TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                    Paragraph(contents='The TSHEG BstAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.5, Tibetan Line Breaking.'),
                    TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                    Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                    Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                    Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see [Boundaries]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamo need to be tailored to use class AL, while the default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                    Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                    Heading(level=3, contents='HY: Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like hyphen.'),
                    Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                    Heading(level=3, contents='ID: Ideographic (B/A)'),
                    Paragraph(contents='Note: This class includes characters other than Han ideographs.'),
                    Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. The ID line break class consists of the following characters:'),
                    TableRow(contents='2E80..2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                    TableRow(contents='30A0..30FF\ue000Katakana (except small characters)'),
                    TableRow(contents='3400..4DBF\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='4E00..9FAF\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='F900..FAFF\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490..A4CF\ue000YI RADICALS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF10..FF19\ue000WIDE DIGITS'),
                    TableRow(contents='20000..2A6D6\ue000CJK UNIFIED IDEOGRAPHS EXTENSION B'),
                    TableRow(contents='2F800..2FA1D\ue000CJK COMPATIBILITY IDEOGRAPHS SUPPLEMENT'),
                    Paragraph(contents='It also includes all of the FULLWIDTH LATIN letters and all of the blocks in the range 3000..33FF not covered elsewhere.'),
                    Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Paragraph(contents='U+3000 IDEOGRAPHIC SPACE may be subject to expansion or compression during line justification.'),
                    Heading(level=4, contents='Korean'),
                    Paragraph(contents='Korean is encoded with conjoining jamo, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                    Heading(level=4, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used in consecutive sequence. There is never a line break between two character of this class.'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS: Numeric Separator (Infix) (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                    TableRow(contents='07F8\ue000NKO COMMA'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                    TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                    TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                    Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                    Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                    Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                    Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see [Boundaries]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamo need to be tailored to use class AL, while the default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                    Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                    Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                    Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                    Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                    Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                    Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                    TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                    Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                    Heading(level=3, contents='NS: Nonstarters (XB)'),
                    Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some context when they follow one or more space characters. Nonstarters include'),
                    TableRow(contents='0E5A..0E5B\ue000THAI CHARACTER ANGKHANKHU..THAI CHARACTER KHOMUT'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='203D\ue000INTERROBANG'),
                    TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                    TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                    TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='303C\ue000MASU MARK'),
                    TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                    TableRow(contents='30FB..30FE\ue000KATAKANA MIDDLE DOT..KATAKANA VOICED ITERATION MARK'),
                    TableRow(contents='A015\ue000YI SYLLABLE WU'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='plus all Hiragana, Katakana, and Halfwidth Katakana “small” characters.'),
                    Paragraph(contents='Note: Optionally, the NS restriction may be relaxed and characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles.'),
                    Heading(level=3, contents='NU: Numeric (XP)'),
                    Paragraph(contents='These characters behave like ordinary characters in the context of ordinary characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                    Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                    TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                    TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                    Paragraph(contents='Unlike with IS, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                    Heading(level=3, contents='OP: Opening Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation must be kept with the following character. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database.'),
                    Heading(level=3, contents='PO: Postfix (Numeric) (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break in “(12.00) %”.'),
                    Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                    Paragraph(contents='The list of postfix characters is'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='060B\ue000AFGHANI SIGN'),
                    TableRow(contents='20300\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='FDFC\ue000RIAL SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                    Heading(level=3, contents='PR: Prefix (Numeric) (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break in “$ (100.00)”.'),
                    Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                    Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except as listed explicitly in PO, as well as the following:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                    Heading(level=3, contents='QU: Ambiguous Quotation (XB/XA)'),
                    Paragraph(contents='Some paired characters can be either opening or closing depending on usage. The default is to treat them as both opening and closing.'),
                    Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode5.0].'),
                    Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database as well as'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no line breaks will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks.'),
                    Paragraph(contents='If such analysis is not available, they should be treated as AL.'),
                    Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes as the result of dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following ranges, except as noted elsewhere:'),
                    TableRow(contents='0E00..0E7F\ue000Thai'),
                    TableRow(contents='0E80..0EFF\ue000Lao'),
                    TableRow(contents='1000..109F\ue000Myanmar'),
                    TableRow(contents='1780..17FF\ue000Khmer'),
                    TableRow(contents='1950..197F\ue000Tai Le'),
                    TableRow(contents='1980..19DF\ue000New Tai Lue'),
                    Heading(level=3, contents='SG: Surrogates (XP) (Non-tailorable)'),
                    Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined.'),
                    Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that do not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                    Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                    Paragraph(contents='The space characters are explicit break opportunities; however, spaces at the end of a line are not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, because the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                    Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                    Paragraph(contents='URLs are now so common in regular plain text that they must be taken into account when assigning general-purpose line breaking properties. The SY line breaking property is intended to provide a break after, but not in front of, digits so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                    Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                    Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                    Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                    Heading(level=3, contents='XX: Unknown (XP)'),
                    Paragraph(contents='The XX line break class consists of all characters with General_Category Co and all code points with General_Category Cn.'),
                    Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this default line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or word joiner around characters of class XX to allow or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                    Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                    Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode5.0].'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                    Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                    Heading(level=3, contents='5.2 Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                    Paragraph(contents='Examples of conventions used in several dictionaries are briefly described in this subsection. Where possible, the default line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions. However, implementing the full conventions in dictionaries requires special support.'),
                    Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                    Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                    Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                    Heading(level=3, contents='5.3 Use of Soft Hyphen'),
                    Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results—for example'),
                    Paragraph(contents='• Simply inserting a hyphen glyph'),
                    Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                    Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                    Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                    Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                    Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                    Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                    Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                    Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                    Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                    Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                    Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling must reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode5.0].'),
                    Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it, looking as if the mark is placed and the line divided after the contextual shapes for the line have been determined. For more information on shaping, see [Bidi] and Section 8.2, Arabic, of [Unicode5.0].'),
                    Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted must be represented out of band or by using another control code instead of SHY.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                    Heading(level=3, contents='5.4 Use of Double Hyphen'),
                    Paragraph(contents='In some fonts, noticeably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is merely a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                    Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate a hyphen at the end of the line that should be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In such convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution.'),
                    Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                    Heading(level=3, contents='5.5 Tibetan Line Breaking'),
                    Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a “phrase,” not a sentence. “Phrases” are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                    Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                    Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; these should be treated as in Chinese written horizontally.'),
                    Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be wholly insufficient for the purpose. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                    Paragraph(contents='The set of line break classes for Tibetan should provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                    Paragraph(contents='It is the stated intention of the Unicode Consortium to review these assignments in a future version and to furnish a more detailed and complete description of Tibetan line breaking and line formatting behavior.'),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='Unicode Standard Annex #29, “Text Boundaries” [Boundaries], describes a particular method for boundary detection. It is based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                    Paragraph(contents='A slightly simplified implementation of such an algorithm can be devised that uses a two-dimensional table to resolve break opportunities between pairs or characters. It is described in Section 7, Pair Table-Based Implementation.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.2, Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                    Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                    Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                    Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, WJ, and ZW are not tailorable; see Section 4, Conformance.'),
                    Heading(level=4, contents='Resolve line breaking classes:'),
                    Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                    Paragraph(contents='In the absence of such criteria, it is recommended that classes AI, SA, SG, and XX be resolved to AL, except that characters of class SA that have General_Category Mn or Mc be resolved to CM (see SA). Unresolved class CB is handled in rule LB20.'),
                    Heading(level=4, contents='Start and end of text:'),
                    Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                    Rule(contents='LB2 Never break at the start of text.'),
                    Formula(contents='sot ×'),
                    Rule(contents='LB3 Always break at the end of text.'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode5.0]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                    Rule(contents='LB4 Always break after hard line breaks (but never between CR and LF).'),
                    Formula(contents='BK !'),
                    Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                    Formula(contents='CR × LF'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='NL !'),
                    Rule(contents='LB6 Do not break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF | NL )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB7 Do not break before spaces or zero width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB8 Break after zero width space.'),
                    Formula(contents='ZW ÷'),
                    Heading(level=4, contents='Combining marks:'),
                    Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                    Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules.'),
                    Formula(contents='Treat X CM* as if it were X.'),
                    Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title of this rule it is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                    Rule(contents='LB10 Treat any remaining combining mark as AL.'),
                    Formula(contents='Treat any remaining CM as it if were AL.'),
                    Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                    Heading(level=4, contents='Word joiner:'),
                    Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                    Formula(contents='× WJ'),
                    Formula(contents='WJ ×'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12 Do not break before or after NBSP and related characters.'),
                    Formula(contents='[^SP] × GL'),
                    Formula(contents='GL ×'),
                    Paragraph(contents='Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. The expression [^SP] designates any line break class other than SP. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                    Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='The following rules and classes referenced in them can be tailored by a conformant implementations; see Section 4, Conformance.'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule 19.'),
                    Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Rule(contents='LB16 Do not break within ‘]h’, even with intervening spaces.'),
                    Formula(contents='CL SP* × NS'),
                    Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 SP* × B2'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB18 Break after spaces.'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB20 Break before and after unresolved CB.'),
                    Formula(contents='÷ CB'),
                    Formula(contents='CB ÷'),
                    Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                    Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents='LB22 Do not break between two ellipses, or between letters or numbers and ellipsis.'),
                    Formula(contents='AL × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents='Do not break alphanumerics.'),
                    Rule(contents='LB23 Do not break within ‘a9’, ‘3a’, or ‘H%’.'),
                    Formula(contents='ID × PO'),
                    Formula(contents='AL × NU'),
                    Formula(contents='NU × AL'),
                    Rule(contents='LB24 Do not break between prefix and letters or ideographs.'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × AL'),
                    Formula(contents='PO × AL'),
                    Paragraph(contents='In general, lines should not be broken inside numbers of the form described by the following regular expression:'),
                    Formula(contents='( PR | PO ) ? ( OP | HY ) ? NU (NU | SY | IS) * CL ? ( PR | PO ) ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, see Section 8.2, Examples of Customization.'),
                    Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                    Formula(contents='CL × PO'),
                    Formula(contents='CL × PR'),
                    Formula(contents='NU × PO'),
                    Formula(contents='NU × PR'),
                    Formula(contents='PO × OP'),
                    Formula(contents='PO × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='PR × NU'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Korean syllable blocks'),
                    Paragraph(contents='Conjoining jamo, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Text Boundaries” [Boundaries], for more information on Korean Syllable Blocks.'),
                    Rule(contents='LB26 Do not break a Korean syllable.'),
                    Formula(contents='JL × (JL | JV | H2 | H3)'),
                    Formula(contents='(JV | H2) × (JV | JT)'),
                    Formula(contents='(JT | H3) × JT'),
                    Paragraph(contents='The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                    Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                    Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                    Paragraph(contents='When Korean uses SPACE for line breaking, these classes, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                    Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                    Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                    Formula(contents='AL × AL'),
                    Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                    Formula(contents='IS × AL'),
                    Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing punctuation.'),
                    Formula(contents='(AL | NU) × OP'),
                    Formula(contents='CL × (AL | NU)'),
                    Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                    Rule(contents='LB31 Break everywhere else.'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='A two-dimensional table can be used to resolve break opportunities between pairs of characters. The rows of the table are labeled with the possible values of the line breaking property of the leading character in the pair. The columns are labeled with the line breaking class for the following character of the pair. Each intersection is labeled with the resulting line break opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of such a table-based definition. However, it uses line breaking classes whose membership is not solely determined by the line breaking property (as in this annex), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classes defined previously.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, then the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes, of which only 14 appear to be unique. Any minimal table representation is unique, except for trivial reordering of rows and columns.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Most of the rules in Section 6, Line Breaking Algorithm, involve only pairs of characters, or they apply to a single line break class preceded or followed by any character. These rules can be represented directly in a pair table. However, rules LB14–LB17 require extended context to handle spaces.'),
                    Paragraph(contents='By broadening the definition of a pair from B A, where B is the line breaking class before a break and A the one after, to B SP* A, where SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line break opportunity (that is, direct and indirect breaks). Rules equivalent to the ones given in Section 6, Line Breaking Algorithm, can be formulated without explicit use of SP by using % to express indirect breaks instead. These rules can then be simplified to involve only pairs of classes—that is, only constructions of the form:'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B × A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can be automatically translated into a pair table, as in Table 2. Line breaking analysis then proceeds by pair table lookup as explained below. (For readability in table layout, the symbol ^ is used in the table instead of × and _ is used instead of ÷.)'),
                    Paragraph(contents='Rule LB9 requires extended context for handling combining marks. This extended context must also be built into the code that interprets the pair table. For convenience in detecting the condition where A = CM, the symbols # and @ are used in the pair table, instead of % and ^, respectively. See Section 7.5, Combining Marks.'),
                    Heading(level=3, contents='7.3 Example Pair Table'),
                    Paragraph(contents='Table 2 implements the line breaking behavior described in this annex, with the limitation that only context of the form B SP* A is considered. BK, CR, LF, NL, and SP classes are handled explicitly in the outer loop, as given in the code sample below. Pair context of the form B CM* can be handled by handling the special entries @ and # in the driving loop, as explained in Section 7.5, Combining Marks. Conjoining jamos are considered separately in Section 7.6, Conjoining Jamos. In Table 2, the rows are labeled with the B class and the columns are labeled with the A class.'),
                    Paragraph(contents='Table 2. Example Pair Table'),
                    TableRow(contents='OP\ue000CL\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM\ue000WJ\ue000H2\ue000H3\ue000JL\ue000JV\ue000JT'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000@\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^'),
                    TableRow(contents='CL\ue000_\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='QU\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='NS\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='EX\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='SY\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IS\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='PR\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='PO\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='NU\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='AL\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ID\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IN\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HY\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BA\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BB\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='B2\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000^\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ZW\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CM\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='WJ\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='H2\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='H3\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JL\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='JV\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='JT\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='Resolved outside the pair table: AI, BK, CB, CR, LF, NL, SA, SG, SP, XX'),
                    Paragraph(contents='Table 2 uses the following notation:'),
                    Paragraph(contents='^ denotes a prohibited break: B ^ A is equivalent to B SP* × A; in other words, never break before A and after B, even if one or more spaces intervene.'),
                    Paragraph(contents='% denotes an indirect break opportunity: B % A is equivalent to B × A and B SP+ ÷ A; in other words, do not break before A, unless one or more spaces follow B.'),
                    Paragraph(contents='@ denotes a prohibited break for combining marks: B @ A is equivalent to B SP* × A, where A is of class CM. For more details, see Section 7.5, Combining Marks.'),
                    Paragraph(contents='# denotes an indirect break opportunity for combining marks following a space: B # A is equivalent to (B × A and B SP+ ÷ A), where A is of class CM.'),
                    Paragraph(contents='_ denotes a direct break opportunity (equivalent to ÷ as defined above).'),
                    Paragraph(contents='Note: In the online edition, hovering over the cells in a browser with tool-tips enabled reveals the rule number that determines the breaking status for the pair in question. When a pair must be tested both with and without intervening spaces, multiple rules are given. Hovering over a line breaking class name gives a representative member of the class and additional information. Clicking on any line break class name anywhere in the document jumps to the definition.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two sections provide sample code [Code14] that demonstrates how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the line breaking classes CR, LF, and NL need to be added. They have been omitted here for brevity, but see Section 7.7, Explicit Breaks.'),
                    Paragraph(contents='The sample code assumes that the line breaking classes AI, CB, SG, and XX have been resolved according to rule LB1 as part of initializing the pcls array. The code further assumes that the complex line break analysis for characters with line break class SA is handled in function findComplexBreak, for which the following placeholder is given:'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    // cls - resolved line break class, may differ from pcls[0]'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line breaking opportunities (output)'),
                    CodeLine(contents='    // cch - remaining length of input '),
                    CodeLine(contents='    int '),
                    CodeLine(contents='   findComplexBreak(enum break_class cls, enum break_class *pcls, '),
                    CodeLine(contents='                             enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='            if (!cch)'),
                    CodeLine(contents='                return 0;'),
                    CodeLine(contents='            for (int ich = 1; ich < cch; ich++) {'),
                    CodeLine(contents='    '),
                    CodeLine(contents='                // .. do complex break analysis here'),
                    CodeLine(contents='                // and report any break opportunities in pbrk ..'),
                    CodeLine(contents='               '),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK; // by default, no break'),
                    CodeLine(contents='               '),
                    CodeLine(contents='                if (pcls[ich] != SA)'),
                    CodeLine(contents='                    break;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='            return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The entries in the example pair table correspond to the following enumeration. For diagnostic purposes, the sample code returns these value to indicate not only the location but also the type of rule that triggered a given break opportunity.'),
                    CodeLine(contents='    enum break_action {'),
                    CodeLine(contents='           DIRECT_BRK = 0,             // _ in table'),
                    CodeLine(contents='           INDIRECT_BRK,               // % in table'),
                    CodeLine(contents='           COMBINING_INDIRECT_BRK,     // # in table'),
                    CodeLine(contents='           COMBINING_PROHIBITED_BRK,   // @ in table'),
                    CodeLine(contents='           PROHIBITED_BRK,             // ^ in table'),
                    CodeLine(contents='           EXPLICTI_BRK };             // ! in rules    '),
                    Paragraph(contents='Because the contexts involved in indirect breaks of the form B SP* A are of indefinite length, they need to be handled explicitly in the driver code. The sample implementation of a findLineBrk function below remembers the line break class for the last characters seen, but skips any occurrence of SP without resetting this value. Once character A is encountered, a simple lookback is used to see if it is preceded by a SP. This lookback is necessary only if B % A.'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable) (returned value)'),
                    CodeLine(contents="    // cls - current resolved line break class for 'before' character (variable)"),
                    CodeLine(contents=''),
                    CodeLine(contents='    int '),
                    CodeLine(contents='    findLineBrk(enum break_class *pcls, enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='        if (!cch) return 0;'),
                    CodeLine(contents='    '),
                    CodeLine(contents="        enum break_class cls = pcls[0];   // class of 'before' character"),
                    CodeLine(contents='      '),
                    CodeLine(contents='        // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='        for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents='    '),
                    CodeLine(contents='            // handle explicit breaks here (see Section 7.7)'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle spaces explicitly'),
                    CodeLine(contents='            if (pcls[ich] == SP) {'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;   // apply rule LB7: × SP'),
                    CodeLine(contents='                continue;                       // do not update cls'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='    '),
                    CodeLine(contents='            // handle complex scripts in a separate function'),
                    CodeLine(contents='            if (pcls[ich] == SA) {'),
                    CodeLine(contents='                ich += findComplexBreak(cls, &pcls[ich-1], &pbrk[ich-1], '),
                    CodeLine(contents='                           cch - (ich-1));'),
                    CodeLine(contents='                if (ich < cch)'),
                    CodeLine(contents='                    cls = pcls[ich];'),
                    CodeLine(contents='                continue;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='        '),
                    CodeLine(contents='            // lookup pair table information in brkPairs[before, after];'),
                    CodeLine(contents='            enum break_action brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents='    '),
                    CodeLine(contents='            pbrk[ich-1] = brk;                     // save break action in output array'),
                    CodeLine(contents='    '),
                    CodeLine(contents='            if (brk == INDIRECT_BRK) {             // resolve indirect break'),
                    CodeLine(contents='                if (pcls[ich - 1] == SP)           // if context is A SP * B'),
                    CodeLine(contents='                    pbrk[ich-1] = INDIRECT_BRK;    //       break opportunity'),
                    CodeLine(contents='                else                               // else'),
                    CodeLine(contents='                    pbrk[ich-1] = PROHIBITED_BRK;  //       no break opportunity'),
                    CodeLine(contents='            } '),
                    CodeLine(contents='            '),
                    CodeLine(contents='            // handle breaks involving a combining mark (see Section 7.5)'),
                    CodeLine(contents=''),
                    CodeLine(contents="            // save cls of 'before' character (unless bypassed by 'continue')"),
                    CodeLine(contents='            cls = pcls[ich];                                '),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        pbrk[ich-1] = EXPLICIT_BRK;                                      // always break at the end'),
                    CodeLine(contents='    '),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The function returns all of the break opportunities in the array pointed to by pbrk, using the values in the table. On return, pbrk[ich] is the type of break after the character at index ich.'),
                    Paragraph(contents='A common optimization in implementation is to determine only the nearest line break opportunity prior to the position of the first character that would cause the line to become overfull. Such an optimization requires backward traversal of the string instead of forward traversal as shown in the sample code.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='The implementation of combining marks in the pair table presents an additional complication because rule LB9 defines a context X CM* that is of arbitrary length. There are some similarities to the way contexts of the form B SP* A that are involved in indirect breaks are evaluated. However, contexts of the form SP CM* or CM* SP also need to be handled, while rule LB10 requires some CM* to be treated like AL.'),
                    Paragraph(contents='Implementing LB10. This rule can be reflected directly in the example pair table in Table 2 by assigning the same values in the row marked CM as in the row marked AL. Incidentally, this is equivalent to rewriting the rules LB11–LB31 by duplicating any expression that contains an AL on its lefthand side with another expression that contains a CM. For example, in LB22'),
                    Formula(contents='AL × IN'),
                    Paragraph(contents='would become'),
                    Formula(contents='AL × IN CM × IN'),
                    Paragraph(contents='Rewriting these rules as indicated here (and then deleting LB10) is fully equivalent to the original rules because rule LB9 already accounts for all CMs that are not supposed to be treated like AL. For complete prescription see Example 9 in Section 8.2, Examples of Customization.'),
                    Paragraph(contents='Implementing LB9. Rule LB9 is implemented in the example pair table in Table 2 by assigning a special # entry in the column marked CM for all rows referring to a line break class that allows a direct or indirect break after itself. (Note that the intersection between the row for class ZW and the column for class CM must be assigned “_” because of rule LB8.) The # corresponds to a break_action value of COMBINING_INDIRECT_BREAK, which triggers the following code in the sample implementation:'),
                    CodeLine(contents='    else if (brk == COMBINING_INDIRECT_BRK) {    // resolve combining mark break'),
                    CodeLine(contents='        pbrk[ich-1] = PROHIBITED_BRK;             // do not break before CM'),
                    CodeLine(contents='        if (pcls[ich-1] == SP){'),
                    CodeLine(contents='            #ifndef LEGACY_CM                    // new: space is not a base'),
                    CodeLine(contents='                pbrk[ich-1] = COMBINING_INDIRECT_BRK;    // apply rule SP ÷ '),
                    CodeLine(contents='            #else                                 '),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;      // legacy: keep SP CM together'),
                    CodeLine(contents='                if (ich > 1)'),
                    CodeLine(contents='                    pbrk[ich-2] = ((pcls[ich - 2] == SP) ? '),
                    CodeLine(contents='                                                  INDIRECT_BRK : DIRECT_BRK);'),
                    CodeLine(contents='            #endif'),
                    CodeLine(contents='        } else                                   // apply rule LB9: X CM * -> X'),
                    CodeLine(contents='            continue;                            // do not update cls'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    Paragraph(contents='When handling a COMBINING_INDIRECT_BREAK, the last remembered line break class in variable cls is not updated, except for those cases covered by rule LB10. A tailoring of rule LB9 that keeps the last SPACE character preceding a combining mark, if any, and therefore breaks before that SPACE character can easily be implemented as shown in the sample code. (See Section 9.2, Legacy Support for Space Character as Base for Combining Marks.)'),
                    Paragraph(contents='Any rows in Table 2 for line break classes that prohibit breaks after must be handled explicitly. In the example pair table, these are assigned a special entry “@”, which corresponds to a special break action of COMBINING_PROHIBITED_BREAK that triggers the following code:'),
                    CodeLine(contents='    else if (brk == COMBINING_PROHIBITED_BRK) { // this is the case OP SP* CM'),
                    CodeLine(contents='        pbrk[ich-1] = COMBINING_PROHIBITED_BRK;  // no break allowed'),
                    CodeLine(contents='        if (pcls[ich-1] != SP)'),
                    CodeLine(contents='            continue;                          // apply rule LB9: X CM* -> X'),
                    CodeLine(contents='    } '),
                    Paragraph(contents='The only line break class that unconditionally prevents breaks across a following SP is OP. The preceding code fragment ensures that OP CM is handled according to rule LB9 and OP SP CM is handled as OP SP AL according to rule LB10.'),
                    Heading(level=3, contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='For Korean Syllable Blocks, the information in rule LB26 is represented by a simple pair table shown in Table 3.'),
                    Paragraph(contents='Table 3. Korean Syllable Block Pair Table'),
                    TableRow(contents='H2\ue000H3\ue000JL\ue000JV\ue000JT'),
                    TableRow(contents='H2\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='H3\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JL\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='JV\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='JT\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='When constructing a pair table such as Table 2, this pair table for Korean syllable blocks in Table 3 is merged with the main pair table for all other line break classes by adding the cells from Table 3 beyond the lower-right corner of the main pair table. Next, according to rule LB27, any empty cells in the new rows are filled with the same values as in the existing row for class ID, and any empty cells for the new columns are filled with the same values as in the existing column for class ID. The resulting merged table is shown in Table 2.'),
                    Heading(level=3, contents='7.7 Explicit Breaks'),
                    Paragraph(contents='Handling explicit breaks is straightforward in the driver code, although it does clutter up the loop condition and body of the loop a bit. For completeness, the following sample shows how to change the loop condition and add if statements to the loop that handle BK, NL, CR, and LF. Because NL and BK behave identically by default, this code can be simplified in implementations where the character classification is changed so that BK will always be substituted for NL when assigning the line break class. Because this optimization does not change the result, it is not considered a tailoring and does not affect conformance.'),
                    CodeLine(contents='    // handle case where input starts with an LF'),
                    CodeLine(contents='    if (cls == LF)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // treat NL like BK'),
                    CodeLine(contents='    if (cls == NL)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // loop over all pairs in the string up to a hard break or CRLF pair'),
                    CodeLine(contents='    for (int ich = 1; (ich < cch) && (cls != BK) && (cls != CR || pcls[ich] == LF); ich++) {'),
                    CodeLine(contents='    '),
                    CodeLine(contents='        // handle BK, NL and LF explicitly'),
                    CodeLine(contents='        if (pcls[ich] == BK ||pcls[ich] == NL ||  pcls[ich] == LF) '),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = BK;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='    '),
                    CodeLine(contents='        // handle CR explicitly'),
                    CodeLine(contents='        if(pcls[ich] == CR)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = CR;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='            '),
                    CodeLine(contents='        // handle spaces explicitly...'),
                    CodeLine(contents='            '),
                    Heading(level=2, contents='8 Customization'),
                    Paragraph(contents='A real-world line breaking algorithm must be tailorable to some degree to meet user or document requirements.'),
                    Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                    Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                    Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how to customize the pair table implementation of the line breaking algorithm for these tailorings.'),
                    Heading(level=3, contents='8.1 Types of Tailoring'),
                    Paragraph(contents='There are three principal ways of tailoring the sample pair table implementation of the line breaking algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to permanently overriding some of the rules in Section 6, Line Breaking Algorithm.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions This is a dynamic equivalent of the preceding. Instead of changing the values for the pair intersection directly in the table, they are labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be enabled at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real-world implementation of a pair table-based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. That implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=3, contents='8.2 Examples of Customization'),
                    Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm entirely. Section 7.4, Sample Code, sketches such approach in which the interface to the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks inside a run of spaces. This requires a change in the way the driver loop handles spaces and, therefore, cannot be simply done by customizing the pair table. However, the additional task of line wrapping runs of spaces could also be performed after the fact at the layout system level while leaving unchanged the actual line breaking algorithm.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined above in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersections of ID/ID, AL/ID, and ID/AL are affected. For alphabetic style line breaking, breaks for these cases require space; for ideographic style line breaking, these cases do not require spaces. Therefore, one defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given text.'),
                    Paragraph(contents='Example 4. Sometimes in a Far Eastern context it is necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. In this case the intersections of NU/NU, NU/AL, AL/AL, and AL/NU are affected.'),
                    Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled via the first method by changing the classification of the Kana small characters from NS to ID as needed.'),
                    Paragraph(contents='Example 6. Some implementations may wish to tailor the line breaking algorithm to resolve grapheme clusters according to Unicode Standard Annex #29, “Text Boundaries” [Boundaries], as a first stage. Generally, the line breaking algorithm does not create line break opportunities within default grapheme clusters; therefore such a tailoring would be expected to produce results that for most practical cases are close to what are defined by the default algorithm. However, if such a tailoring is chosen, characters that are members of line break class CM but not part of the definition of default grapheme clusters must still be handled by rules LB9 and LB10, or by some additional tailoring.'),
                    Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                    Formula(contents='( PR | PO ) ? ( OP | HY ) ? NU (NU | SY | IS) * CL ? ( PR | PO ) ?'),
                    Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                    Paragraph(contents='Regex-Number: Do not break numbers.'),
                    Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                    Formula(contents='( OP | HY ) × NU'),
                    Formula(contents='NU × (NU | SY | IS)'),
                    Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL)'),
                    Formula(contents='NU (NU | SY | IS)* CL? × (PO | PR)'),
                    Paragraph(contents='This customized rule uses extended contexts that cannot be represented in a pair table.'),
                    Paragraph(contents='When the tailored rule is used, LB13 must also be tailored as follows:'),
                    Formula(contents='[^NU] × CL'),
                    Formula(contents='× EX'),
                    Formula(contents='[^NU] × IS'),
                    Formula(contents='[^NU] × SY'),
                    Paragraph(contents='Otherwise, single digits may be handled by rule LB13 before being handled in the regular expression. In these tailored rules, [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                    Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                    Heading(level=2, contents='9 Implementation Notes'),
                    Paragraph(contents='This section provides additional notes on implementation issues.'),
                    Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='For implementations that use regular expressions, it is not possible to directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                    Paragraph(contents='To replace rule LB9, terms of the form'),
                    Paragraph(contents='B # A'),
                    Paragraph(contents='B SP* # A'),
                    Paragraph(contents='B #'),
                    Paragraph(contents='B SP* #'),
                    Paragraph(contents='are replaced by terms of the form'),
                    Paragraph(contents='B CM* # A'),
                    Paragraph(contents='B CM* SP* # A'),
                    Paragraph(contents='B CM* #'),
                    Paragraph(contents='B CM* SP* #'),
                    Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                    Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                    Paragraph(contents='Replace LB10 by the following rule:'),
                    Paragraph(contents='× CM'),
                    Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                    Paragraph(contents='(AL | NU) × OP'),
                    Paragraph(contents='add another rule'),
                    Paragraph(contents='CM × OP.'),
                    Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Text Boundaries” [Boundaries].'),
                    Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='As stated in [Unicode5.0], Section 7.9, Combining Marks, combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. This use of SPACE for this purpose is now deprecated because it has been found to lead to many complications in text processing. When using either NBSP or SPACE as the base character, the visual appearance is the same, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                    Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                    Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID.'),
                    Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it should ordinarily not affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                    Heading(level=2, contents='References'),
                    Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.”'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='Asmus Freytag is the author of the initial version and has added to and maintained the text of this annex.'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Andy Heninger reviewed the rules and provided input on regular expression-based implementations. Many others provided additional review of the rules and property assignments.'),
                    Heading(level=2, contents='Modifications'),
                    Heading(level=3, contents='Change History'),
                    Paragraph(contents='For details of the change history, see the online copy of this annex at http://www.unicode.org/reports/tr14/.'),
                    Heading(level=3, contents='Rule Numbering Across Versions'),
                    Paragraph(contents='Table 4 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                    Paragraph(contents='Table 4. Rule Numbering Across Versions'),
                    TableRow(contents='5.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                    TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                    TableRow(contents='LB2\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                    TableRow(contents='LB3\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                    TableRow(contents='LB4\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB5\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB6\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                    TableRow(contents='LB7\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                    TableRow(contents='LB8\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                    TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                    TableRow(contents='LB9\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB10\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                    TableRow(contents='LB11\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB13\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                    TableRow(contents='LB14\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                    TableRow(contents='LB15\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                    TableRow(contents='LB16\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                    TableRow(contents='LB17\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                    TableRow(contents='LB18\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                    TableRow(contents='LB19\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                    TableRow(contents='LB20\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                    TableRow(contents='LB21\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                    TableRow(contents='LB22\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                    TableRow(contents='LB23\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                    TableRow(contents='LB24\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='LB25\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                    TableRow(contents='LB26\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB27\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB28\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                    TableRow(contents='LB29\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB31\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                    Heading(level=3, contents='Change History'),
                    Paragraph(contents='The following documents the changes introduced by each revision.'),
                    Heading(level=4, contents='Revision 19:'),
                    Paragraph(contents='• Changed 000B from CM to BK, changed 035C from CM to GL.'),
                    Paragraph(contents='• Changed 17D9 from NS to AL. 203D, 2047..2049 from AL to NS.'),
                    Paragraph(contents='• Corrected listing of NS property to match the data file to remove 17D8 and 17DA.'),
                    Paragraph(contents='• The data file has been corrected to match the listing of the BA property to include 1735 and 1736, also changed 05BE and 103D0 from AL to BA.'),
                    Paragraph(contents='• Changed the brackets 23B4.23B6 to AL.'),
                    Paragraph(contents='• Updated the SA property to make it more generic, includes changing many characters from CM to SA.'),
                    Paragraph(contents='• Reflected new characters'),
                    Paragraph(contents='• Made several text changes for clarifications, including reworded the intro to Section 6.'),
                    Paragraph(contents='• Added Section 9.'),
                    Paragraph(contents='• Restated the conformance clauses and reorganized the algorithm into a tailorable and a non-tailorable part; this affects text in Sections 4, 5, and 6.'),
                    Paragraph(contents='• Removed redundant term PR x HY from rule 18 and rule into new LB24 and LB26 to provide better granularity for tailoring,'),
                    Paragraph(contents='• Moved rule 11b and 13 above rule 8 (new LB13), restating rule 13 (new LB12) to preserve its effect in the new location.'),
                    Paragraph(contents='• Added new rule LB30 to handle words like “person(s)”.'),
                    Paragraph(contents='• Renumbered the rules.'),
                    Paragraph(contents='• Extensive copy-editing as part of Unicode 5.0 publication.'),
                    Paragraph(contents='Revision 18 being a proposed update, only changes between revisions 17 and 19 are noted here.'),
                    Heading(level=4, contents='Revision 17:'),
                    Paragraph(contents='• Significantly revised the line break classes for Tibetan, as well as Mongolian and Arabic Punctuation.'),
                    Paragraph(contents='• Added section 5.5 on Tibetan and section 7.7 on handling explicit breaks.'),
                    Paragraph(contents='• Added line break class assignments for Unicode 4.1 characters.'),
                    Paragraph(contents='• Significantly revised the line break class assignments for danda characters and made it consistent across scripts.'),
                    Paragraph(contents='• LB6: Replaced by new rules 18b and 18c, using new classes JL, JV, JT, H2, and H3.'),
                    Paragraph(contents='• LB7a: Deprecated rule 7a because SPACE as base character for standalone combining marks is deprecated.'),
                    Paragraph(contents='• LB7b: Revised 7b and section 7.5 as well as Table 2 to match the deprecation of rule 7a.'),
                    Paragraph(contents='• LB7b: Clarified that this rule does not apply to SP.'),
                    Paragraph(contents='• LB11a: Added a missing SP * to make the formula match the rule.'),
                    Paragraph(contents='• LB18b: Removed the existing rule 18b because it was redundant.'),
                    Paragraph(contents='• Corrected an erratum on revision 14 by splitting GL from WJ in rule 11b and moving to a new rule 13.'),
                    Paragraph(contents='• Updated the pair table and sample code to match the changes in the rules.'),
                    Paragraph(contents='• Updated the regular expression for numbers.'),
                    Paragraph(contents='• Added several notes on implementation techniques.'),
                    Paragraph(contents='• Moved all suggested tailorings from the rules section to the examples in section 8.2.'),
                    Paragraph(contents='Revision 16 being a proposed update, only changes between revisions 17 and 15 are noted here.'),
                    Heading(level=4, contents='Revision 15:'),
                    Paragraph(contents='• LB19b: Added new rule 19b.'),
                    Paragraph(contents='• Changed line breaking class: combining double diacritics from CM to GL, 037A and 2126 to match their canonical equivalents, 2140 corrected to AL, Arabic numerical separators from AL to NU, many alphabetic characters that are EAW=Ambiguous from AI to AL to better reflect current practice, remaining circled numbers and letters from AL to AI for consistency.'),
                    Paragraph(contents='• Added a note on the behavior of U+200B and U+3000 when lines are justified.'),
                    Paragraph(contents='• Reconciled the data file and description of line breaking classes in section 5.'),
                    Paragraph(contents='• Reconciled the rules and pair table implementation of the algorithm.'),
                    Paragraph(contents='• Updated the text of the conformance statement in section 4.'),
                    Paragraph(contents='• Added section 5.4 on use of double hyphen.'),
                    Paragraph(contents='• Updated styles and table formatting.'),
                    Paragraph(contents='• Minor edits throughout.'),
                    Heading(level=4, contents='Revision 14:'),
                    Paragraph(contents='• Added new line breaking classes NL and WJ to better support NEL and Word Joiner.'),
                    Paragraph(contents='• Deprecated the use of class SG.'),
                    Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and 7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                    Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                    Paragraph(contents='• Clarified the behavior of SHY and MONGOLIAN TODO SOFT HYPHEN, as well as WJ and ZWNBSP.'),
                    Paragraph(contents='• Added a new subsection 5.3 on SOFT HYPHEN and a new subsection 7.6 on conjoining jamos.'),
                    Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                    Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                    Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                    Paragraph(contents='• Expanded the introduction in Section 3.'),
                    Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                    Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                    Paragraph(contents='Revision 11 being a proposed update, only changes between revisions 12 and 14 are noted here.'),
                    Heading(level=4, contents='Revision 12:'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added Word joiner to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the data file. Only characters whose LB class differs from those of characters with related General_Category are noted explicitly in this text.'),
                    Paragraph(contents='Revision 11, being a proposed update, only changes between revisions 10 and 12 are noted here.]'),
                    Heading(level=4, contents='Revision 10:'),
                    Paragraph(contents='• Changed header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Heading(level=4, contents='Revision 9:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX.'),
                    Paragraph(contents='• LB7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode4.0].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair table entry PR % ID'),
                    Paragraph(contents='• Reworked Section 7.5'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull)'),
                    Heading(level=4, contents='Revision 8:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to Table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX because the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                    Heading(level=4, contents='Revision 7:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Heading(level=4, contents='Revision 6:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='No change history is available for earlier revisions.'),
                    Paragraph(contents='Copyright © 1998-2006 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                    Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(5, 1, 0): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                    TableRow(contents='Version\ue000Unicode 5.1.0'),
                    TableRow(contents='Authors\ue000Asmus Freytag (asmus@unicode.org), Andy Heninger (andy.heninger@gmail.com)'),
                    TableRow(contents='Date\ue0002008-03-31'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-22.html'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-19.html'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                    TableRow(contents='Revision\ue00022'),
                    Heading(level=4, contents='Summary'),
                    Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display. A model implementation using pair tables is also provided.'),
                    Heading(level=4, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                    Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions].'),
                    Heading(level=4, contents='Contents'),
                    Paragraph(contents='1 Overview and Scope'),
                    Paragraph(contents='2 Definitions'),
                    Paragraph(contents='3 Introduction'),
                    Paragraph(contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='4 Conformance'),
                    Paragraph(contents='4.1 Conformance Requirements'),
                    Paragraph(contents='5 Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Dictionary Usage'),
                    Paragraph(contents='5.3 Use of Hyphen'),
                    Paragraph(contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='5.7 Word Separator Characters'),
                    Paragraph(contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Pair Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='8 Customization'),
                    Paragraph(contents='8.1 Types of Tailoring'),
                    Paragraph(contents='8.2 Examples of Customization'),
                    Paragraph(contents='9 Implementation Notes'),
                    Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='10 Testing'),
                    Paragraph(contents='References'),
                    Paragraph(contents='Acknowledgments'),
                    Paragraph(contents='Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='The text of The Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior reflecting best practices for the support of multilingual texts.'),
                    Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                    Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout followed by a brief section on conformance requirements. Three main sections follow:'),
                    Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters of the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                    Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='• Section 7, Pair Table-Based Implementation, describes an efficient pair table-based implementation of the algorithm.'),
                    Paragraph(contents='The final two sections discuss issues of customization and implementation.'),
                    Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                    Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard [Unicode5.0]. The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard. All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard.'),
                    Paragraph(contents='LD1 Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='LD2 Line Break: The position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='LD3 Line Break Opportunity: A place where a line is allowed to end.'),
                    Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                    Paragraph(contents='LD4 Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                    Paragraph(contents='LD5 Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                    Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                    Paragraph(contents='LD6 Line Breaking Class: A class of characters with the same line breaking property value.'),
                    Paragraph(contents='The Line Breaking Classes are described in Section 5.1, Description of Line Breaking Properties.'),
                    Paragraph(contents='LD7 Mandatory Break: A line must break following a character that has the mandatory break property.'),
                    Paragraph(contents='Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                    Paragraph(contents='LD8 Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                    Paragraph(contents='A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='LD9 Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                    Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                    Paragraph(contents='An indirect break is indicated in the pair table in Table 2 as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though space characters are not shown in the pair table, an indirect break can occur only if one or more spaces follow B. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                    Paragraph(contents='LD10 Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                    Paragraph(contents='A prohibited break is indicated in the pair table in Table 2 as B ^ A, where B is the character class of the character before and A is the character class of the character after the break, and the optional space characters are not shown. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='LD11 Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                    Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                    Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                    Paragraph(contents='Table 1. Line Breaking Classes (* = non-tailorable)'),
                    TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Characters with This Property...'),
                    TableRow(contents='Non-tailorable Line Breaking Classes'),
                    TableRow(contents='BK *\ue000Mandatory Break\ue000NL, PS\ue000Cause a line break (after)'),
                    TableRow(contents='CR *\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF *\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                    TableRow(contents='CM *\ue000Attached Characters and Combining Marks\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                    TableRow(contents='NL *\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                    TableRow(contents='SG *\ue000Surrogates\ue000Surrogates\ue000Do not occur in well-formed text'),
                    TableRow(contents='WJ *\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                    TableRow(contents='ZW *\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                    TableRow(contents='GL *\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                    TableRow(contents='SP *\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                    TableRow(contents='BA\ue000Break Opportunity After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Opportunity Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='CL\ue000Closing Punctuation\ue000“)”, “]”, “}”, etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                    TableRow(contents='NS\ue000Nonstarter\ue000small kana\ue000Allow only indirect line breaks before'),
                    TableRow(contents='OP\ue000Opening Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                    TableRow(contents='QU\ue000Ambiguous Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='IS\ue000Infix Separator (Numeric)\ue000. ,\ue000Prevent breaks after any and before numeric'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                    TableRow(contents='PO\ue000Postfix (Numeric)\ue000%, ¢\ue000Do not break following a numeric expression'),
                    TableRow(contents='PR\ue000Prefix (Numeric)\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                    TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                    TableRow(contents='AL\ue000Ordinary Alphabetic and Symbol Characters\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                    TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000Unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Introduction'),
                    Paragraph(contents='Lines are broken as result of one of two conditions. The first condition is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                    Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                    Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and U+3000 IDEOGRAPHIC SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                    Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                    Paragraph(contents='In linebreaking it is necessary to distinguish between two related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Break Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection.'),
                    Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                    Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                    Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                    Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                    Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                    Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                    Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                    Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, the determination of which requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                    Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                    Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [Bidi]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. Therefore the information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Users adding such characters to a text expect that they will have the desired effect. For that reason, these characters have been given required line breaking behavior.'),
                    Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include the use of dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; the use of dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                    Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Break Algorithm. The approach taken here is to require that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                    Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                    Heading(level=3, contents='4.1 Conformance Requirements'),
                    Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                    Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                    Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                    Paragraph(contents='Example: An xml format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                    Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. In many instances, the descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                    Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be found grouped together in the same line break class.'),
                    Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into two algorithms defined in Section 6, Line Breaking Algorithm, and Section 7, Pair Table-Based Implementation. These sections describe workable default line breaking methods. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of particular languages for particular document styles and user preferences.'),
                    Heading(level=4, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a tab-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Heading(level=4, contents='Future Updates'),
                    Paragraph(contents='As more scripts are added to the Unicode Standard and become more widely implemented and used on computers, more line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                    Paragraph(contents='(A)—the class allows a break opportunity after in specified contexts'),
                    Paragraph(contents='(XA)—the class prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='(B)—the class allows a break opportunity before in specified contexts'),
                    Paragraph(contents='(XB)—the class prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='(P)—the class allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='(XP)—the class prevents a break opportunity for a pair of same characters'),
                    Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Some characters that ordinarily act like alphabetic or symbol characters (which have the AL line breaking class) are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL, see the note at the end of this description.'),
                    Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [EAW].'),
                    Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                    Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                    Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                    TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                    TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                    Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, merely require that all ambiguous characters have been resolved appropriately as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves, or conversely. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                    Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                    Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='Except as listed explicitly below as part of another line breaking class, and except as assigned class AI or ID based on East Asian Width, this class contains the following characters:'),
                    Paragraph(contents='ALPHABETIC—all remaining characters of General Categories Lu, Ll, Lt, Lm, and Lo SYMBOLS—all remaining characters of General Categories Sm, Sk, and So NON-DECIMAL NUMBERS—all remaining characters of General Categories Nl, and No PUNCTUATION—all remaining characters of General Categories Pc, Pd, and Po'),
                    Paragraph(contents='Plus these characters:'),
                    TableRow(contents='0600..0603\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAFHA'),
                    TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                    TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                    TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                    Paragraph(contents='These characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                    Heading(level=3, contents='BA: Break Opportunity After (A)'),
                    Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                    Heading(level=4, contents='Breaking Spaces'),
                    Paragraph(contents='Breaking spaces are the following subset of characters with General_Category Zs:'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN SPACE'),
                    TableRow(contents='2003\ue000EM SPACE'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                    Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                    Paragraph(contents='The Ogham space mark may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7,, Word Separator Characters.'),
                    Paragraph(contents='See the ID property for U+3000 IDEOGRAPHIC SPACE. For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode5.0].'),
                    Heading(level=4, contents='Tabs'),
                    TableRow(contents='0009\ue000TAB'),
                    Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    Heading(level=4, contents='Conditional Hyphens'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY marks the place where an optional line break may occur inside a word. It can be used with all scripts. SHY is rendered invisibly and has no width: it merely indicates an optional line break. The rendering of the optional line break depends on the script. For the Latin script, rendering the line break typically means displaying a hyphen at the end of the line; however, some languages require a change in spelling surrounding an optional line break. For examples, see Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=4, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Visible Word Dividers'),
                    Paragraph(contents='The following are other forms of visible word dividers that provide break opportunities:'),
                    TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                    TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                    Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Paragraph(contents='The Ethiopic word space is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual break opportunity, the vertical bar is rendered as a hyphen in such usage.'),
                    Heading(level=4, contents='Historic Word Separators'),
                    Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                    TableRow(contents='16EB\ue000RUNIC SINGLE DOT PUNCTUATION'),
                    TableRow(contents='16EC\ue000RUNIC MULTIPLE DOT PUNCTUATION'),
                    TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                    TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                    TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                    TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                    TableRow(contents='205B\ue000FOUR DOT MARK'),
                    TableRow(contents='205D\ue000TRICOLON'),
                    TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                    TableRow(contents='2E19\ue000PALM BRANCH'),
                    TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                    TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                    TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                    TableRow(contents='2E2D\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='2E30\ue000RING POINT'),
                    TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                    TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                    TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                    TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                    TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                    TableRow(contents='1091F\ue000PHOENICIAN WORD DIVIDER'),
                    TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                    Heading(level=4, contents='Dandas'),
                    Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                    TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                    TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                    TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                    TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                    TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                    TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                    TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                    TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                    TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                    TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                    TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                    TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                    TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                    TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                    TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                    TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                    Heading(level=4, contents='Tibetan'),
                    TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                    TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                    TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                    TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                    TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                    TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                    Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Other Terminating Punctuation'),
                    Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces.'),
                    TableRow(contents='1804\ue000MONGOLIAN COLON'),
                    TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                    TableRow(contents='1B5A\ue000BALINESE PANTI'),
                    TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                    TableRow(contents='1B5C\ue000BALINESE WINDU'),
                    TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                    TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                    TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                    TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                    TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                    TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                    TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                    TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                    TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                    TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                    TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                    TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                    TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                    TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                    TableRow(contents='2E17\ue000OBLIQUE DOUBLE HYPHEN'),
                    TableRow(contents='A60D\ue000VAI COMMA'),
                    TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                    TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                    TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                    TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                    TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                    TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                    TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                    TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                    TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                    Heading(level=3, contents='BB: Break Opportunities Before (B)'),
                    Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                    Heading(level=4, contents='Dictionary Use'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    TableRow(contents='1FFD\ue000GREEK OXIA'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                    TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                    Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                    Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                    TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                    TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                    TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                    TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                    TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                    TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                    TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                    TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                    TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                    TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                    TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                    TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                    TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                    Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Mongolian'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                    Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                    Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                    TableRow(contents='000C\ue000FORM FEED (FF)'),
                    TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                    Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR (LS)'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. This is similar to HTML <BR>.'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR (PS)'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LS, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                    Heading(level=4, contents='Newline Function (NLF)'),
                    Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode5.0].'),
                    Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                    Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                    Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                    Heading(level=3, contents='CL: Closing Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, so as to prevent the appearance of a bare closing punctuation mark at the head of a line. The CL line break class contains the following characters plus any characters of General_Category Pe in the Unicode Character Database.'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                    TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Heading(level=3, contents='CM: Attached Characters and Combining Marks (XB) (Non-tailorable)'),
                    Heading(level=4, contents='Combining Characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                    Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 No-Break SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                    Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                    Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                    Heading(level=4, contents='Control and Formatting Characters'),
                    Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                    Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                    Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                    Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                    Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS).'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                    TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                    TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                    TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                    TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                    TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                    TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                    TableRow(contents='0F0E\ue000TIBETAN MARK NYIS SHAD'),
                    TableRow(contents='0F0F\ue000TIBETAN MARK TSHEG SHAD'),
                    TableRow(contents='0F10\ue000TIBETAN MARK NYIS TSHEG SHAD'),
                    TableRow(contents='0F11\ue000TIBETAN MARK RIN CHEN SPUNGS SHAD'),
                    TableRow(contents='0F14\ue000TIBETAN MARK GTER TSHEG'),
                    TableRow(contents='1802\ue000MONGOLIAN COMMA'),
                    TableRow(contents='1803\ue000MONGOLIAN FULL STOP'),
                    TableRow(contents='1808\ue000MONGOLIAN MANCHU COMMA'),
                    TableRow(contents='1809\ue000MONGOLIAN MANCHU FULL STOP'),
                    TableRow(contents='1944\ue000LIMBU EXCLAMATION MARK'),
                    TableRow(contents='1945\ue000LIMBU QUESTION MARK'),
                    TableRow(contents='2762\ue000HEAVY EXCLAMATION MARK ORNAMENT'),
                    TableRow(contents='2763\ue000HEAVY HEART EXCLAMATION MARK ORNAMENT'),
                    TableRow(contents='2CF9\ue000COPTIC OLD NUBIAN FULL STOP'),
                    TableRow(contents='2CFE\ue000COPTIC FULL STOP'),
                    TableRow(contents='2E2E\ue000REVERSED QUESTION MARK'),
                    TableRow(contents='A60C\ue000VAI SYLLABLE LENGTHENER'),
                    TableRow(contents='A60E\ue000VAI FULL STOP'),
                    TableRow(contents='A876\ue000PHAGS-PA MARK SHAD'),
                    TableRow(contents='A877\ue000PHAGS-PA MARK DOUBLE SHAD'),
                    TableRow(contents='FE15\ue000PRESENTATION FORM FOR VERTICAL EXCLAMATION MARK'),
                    TableRow(contents='FE16\ue000PRESENTATION FORM FOR VERTICAL QUESTION MARK'),
                    TableRow(contents='FE56..FE57\ue000SMALL QUESTION MARK..SMALL EXCLAMATION MARK'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NBSP follows SPACE, there is a break opportunity after the SPACE and NBSP will go as visible space onto the next line. See also WJ. The following lists the characters of line break class GL with additional description.'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                    TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NBSP, there is no break, because there never is a break in front of SPACE. NARROW NO-BREAK SPACE is used in Mongolian. The mongolian vowel separator acts like a NNBSP in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in Section 13.2, Mongolian, of [Unicode5.0].'),
                    Paragraph(contents='NARROW NO-BREAK SPACE (NNBSP) is a narrow version of NO-BREAK SPACE, which except for its display width behaves exactly the same in its line breaking behavior. It is regularly used in Mongolian in certain grammatical contexts (before a particle), where it also influences the shaping of the glyphs for the particle. In Mongolian text, the NNBSP is typically displayed with 1/3 the width of a normal space character.'),
                    Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                    Paragraph(contents='The MONGOLIAN VOWEL SEPARATOR is equivalent to a NNBSP in its line breaking behavior, but has different effects in controlling the shaping of its preceding and following characters. It constitutes a word-internal space and is typically displayed with half the width of a NNBSP.'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of this use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                    TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                    Paragraph(contents='The TSHEG BstAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                    Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                    Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                    Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see [Boundaries]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamo need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                    Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                    Heading(level=3, contents='HY: Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like hyphen, which has line break class BA.'),
                    Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                    Heading(level=3, contents='ID: Ideographic (B/A)'),
                    Paragraph(contents='Note: This class includes characters other than Han ideographs.'),
                    Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. The ID line break class consists of the following characters:'),
                    TableRow(contents='2E80..2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                    TableRow(contents='30A0..30FF\ue000Katakana (except small characters)'),
                    TableRow(contents='3400..4DB5\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='4E00..9FBB\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='F900..FAD9\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490..A4CF\ue000YI RADICALS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF10..FF19\ue000WIDE DIGITS'),
                    TableRow(contents='20000..2A6D6\ue000CJK UNIFIED IDEOGRAPHS EXTENSION B'),
                    TableRow(contents='2F800..2FA1D\ue000CJK COMPATIBILITY IDEOGRAPHS SUPPLEMENT'),
                    Paragraph(contents='It also includes all of the FULLWIDTH LATIN letters and all of the blocks in the range 3000..33FF not covered elsewhere.'),
                    Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Paragraph(contents='U+3000 IDEOGRAPHIC SPACE may be subject to expansion or compression during line justification.'),
                    Heading(level=4, contents='Korean'),
                    Paragraph(contents='Korean is encoded with conjoining jamo, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                    Heading(level=4, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used in consecutive sequence. There is never a line break between two character of this class.'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS: Numeric Separator (Infix) (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    TableRow(contents='060C\ue000ARABIC COMMA'),
                    TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                    TableRow(contents='07F8\ue000NKO COMMA'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                    TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                    TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                    Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                    Paragraph(contents='Note: Figure Space, not being a punctuation mark, has been given the line break class GL.'),
                    Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                    Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                    Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see [Boundaries]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamo need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                    Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                    Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                    Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                    Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                    Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                    Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                    TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                    Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                    Heading(level=3, contents='NS: Nonstarters (XB)'),
                    Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include'),
                    TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='203D\ue000INTERROBANG'),
                    TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                    TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                    TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='303C\ue000MASU MARK'),
                    TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                    TableRow(contents='30FB..30FE\ue000KATAKANA MIDDLE DOT..KATAKANA VOICED ITERATION MARK'),
                    TableRow(contents='A015\ue000YI SYLLABLE WU (misnomer for YI SYLLABLE ITERATION MARK)'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='plus all Hiragana, Katakana, and Halfwidth Katakana “small” characters.'),
                    Paragraph(contents='Note: Optionally, the NS restriction may be relaxed and some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles.'),
                    Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                    Heading(level=3, contents='NU: Numeric (XP)'),
                    Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                    Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                    TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                    TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                    Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                    Heading(level=3, contents='OP: Opening Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation should be kept with the following character. This is desirable, even when there are intervening space characters, so as to prevent the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                    TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                    TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                    TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                    Paragraph(contents='Note: The first two of these characters used to be classed AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                    Heading(level=3, contents='PO: Postfix (Numeric) (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                    Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                    Paragraph(contents='The list of postfix characters is'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='060B\ue000AFGHANI SIGN'),
                    TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='FDFC\ue000RIAL SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                    Heading(level=3, contents='PR: Prefix (Numeric) (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                    Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                    Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except as listed explicitly in PO, as well as the following:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                    Heading(level=3, contents='QU: Ambiguous Quotation (XB/XA)'),
                    Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                    Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode5.0]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                    Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database as well as'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                    TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                    TableRow(contents='2E0B\ue000RAISED SQUARE'),
                    Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks.'),
                    Paragraph(contents='If such analysis is not available, it is recommended to treat them as AL.'),
                    Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes as the result of dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following ranges, except as noted elsewhere:'),
                    TableRow(contents='0E00..0E7F\ue000Thai'),
                    TableRow(contents='0E80..0EFF\ue000Lao'),
                    TableRow(contents='1000..109F\ue000Myanmar'),
                    TableRow(contents='1780..17FF\ue000Khmer'),
                    TableRow(contents='1950..197F\ue000Tai Le'),
                    TableRow(contents='1980..19DF\ue000New Tai Lue'),
                    Heading(level=3, contents='SG: Surrogates (XP) (Non-tailorable)'),
                    Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                    Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                    Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                    Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                    Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                    Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                    Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                    Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                    Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                    Heading(level=3, contents='XX: Unknown (XP)'),
                    Paragraph(contents='The XX line break class consists of all characters with General_Category Co and all code points with General_Category Cn.'),
                    Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this default line breaking property by default. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or word joiner around characters of class XX to allow or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                    Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                    Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode5.0].'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                    Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                    Heading(level=3, contents='5.2 Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                    Paragraph(contents='Examples of conventions used in several dictionaries are briefly described in this subsection. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                    Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                    Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                    Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                    Heading(level=3, contents='5.3 Use of Hyphen'),
                    Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                    Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                    Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                    Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                    Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verbs forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                    Paragraph(contents='dispara- te'),
                    Paragraph(contents='and the latter as'),
                    Paragraph(contents='dispara- -te.'),
                    Paragraph(contents='A recommended practice is to type <SHY, NBHY> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results—for example'),
                    Paragraph(contents='• Simply inserting a hyphen glyph'),
                    Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                    Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                    Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                    Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                    Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                    Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                    Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                    Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                    Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                    Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                    Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode5.0].'),
                    Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [Bidi] and Section 8.2, Arabic, of [Unicode5.0].'),
                    Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                    Paragraph(contents='The sequence <SHY, NBHY> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                    Heading(level=3, contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='In some fonts, noticeably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is merely a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                    Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line, in other words, a hyphen that would be retained when the term shown is not line wrapped. To support this, it is not necessary to store a special character in the data; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. For example, if the shape of the special hyphen, as in this case, matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. In such convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                    Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                    Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                    Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a “phrase,” not a sentence. “Phrases” are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                    Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                    Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in Chinese written horizontally.'),
                    Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be wholly insufficient for the purpose. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                    Paragraph(contents='The set of line break classes for Tibetan are expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                    Paragraph(contents='It is the stated intention of the Unicode Consortium to review these assignments in a future version and to furnish a more detailed and complete description of Tibetan line breaking and line formatting behavior.'),
                    Heading(level=3, contents='5.7 Word Separator Characters'),
                    Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between "brown" and "fox". The desired visual appearance could be one of the following:'),
                    Paragraph(contents='1. suppress the visible word separator'),
                    Paragraph(contents='The:quick:brown fox:jumped.'),
                    Paragraph(contents='2. break before the visible word separator'),
                    Paragraph(contents='The:quick:brown :fox:jumped.'),
                    Paragraph(contents='3. break after the visible word separator'),
                    Paragraph(contents='The:quick:brown: fox:jumped.'),
                    Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                    Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='Unicode Standard Annex #29, “Text Boundaries” [Boundaries], describes a particular method for boundary detection. It is based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                    Paragraph(contents='A slightly simplified implementation of such an algorithm can be devised that uses a two-dimensional table to resolve break opportunities between pairs or characters. It is described in Section 7, Pair Table-Based Implementation.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.2, Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                    Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                    Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                    Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, and ZW define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                    Heading(level=4, contents='Resolve line breaking classes:'),
                    Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                    Paragraph(contents='In the absence of such criteria, it is recommended that classes AI, SA, SG, and XX be resolved to AL, except that characters of class SA that have General_Category Mn or Mc be resolved to CM (see SA). Unresolved class CB is handled in rule LB20.'),
                    Heading(level=4, contents='Start and end of text:'),
                    Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                    Rule(contents='LB2 Never break at the start of text.'),
                    Formula(contents='sot ×'),
                    Rule(contents='LB3 Always break at the end of text.'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode5.0]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                    Rule(contents='LB4 Always break after hard line breaks.'),
                    Formula(contents='BK !'),
                    Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                    Formula(contents='CR × LF'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='NL !'),
                    Rule(contents='LB6 Do not break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF | NL )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB7 Do not break before spaces or zero width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB8 Break after zero width space.'),
                    Formula(contents='ZW ÷'),
                    Heading(level=4, contents='Combining marks:'),
                    Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                    Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules.'),
                    Formula(contents='Treat X CM* as if it were X.'),
                    Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title of this rule it is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                    Rule(contents='LB10 Treat any remaining combining mark as AL.'),
                    Formula(contents='Treat any remaining CM as it if were AL.'),
                    Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                    Heading(level=4, contents='Word joiner:'),
                    Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                    Formula(contents='× WJ'),
                    Formula(contents='WJ ×'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12 Do not break after NBSP and related characters.'),
                    Formula(contents='GL ×'),
                    Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations SHOULD implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens'),
                    Formula(contents='[^SP BA HY] × GL'),
                    Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                    Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                    Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                    Formula(contents='CL SP* × NS'),
                    Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 SP* × B2'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB18 Break after spaces.'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB20 Break before and after unresolved CB.'),
                    Formula(contents='÷ CB'),
                    Formula(contents='CB ÷'),
                    Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                    Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents='LB22 Do not break between two ellipses, or between letters or numbers and ellipsis.'),
                    Formula(contents='AL × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents='Do not break alphanumerics.'),
                    Rule(contents='LB23 Do not break within ‘a9’, ‘3a’, or ‘H%’.'),
                    Formula(contents='ID × PO'),
                    Formula(contents='AL × NU'),
                    Formula(contents='NU × AL'),
                    Rule(contents='LB24 Do not break between prefix and letters or ideographs.'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × AL'),
                    Formula(contents='PO × AL'),
                    Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                    Formula(contents='( PR | PO ) ? ( OP | HY ) ? NU (NU | SY | IS) * CL ? ( PR | PO ) ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                    Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                    Formula(contents='CL × PO'),
                    Formula(contents='CL × PR'),
                    Formula(contents='NU × PO'),
                    Formula(contents='NU × PR'),
                    Formula(contents='PO × OP'),
                    Formula(contents='PO × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='PR × NU'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Korean syllable blocks'),
                    Paragraph(contents='Conjoining jamo, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Text Boundaries” [Boundaries], for more information on Korean Syllable Blocks.'),
                    Rule(contents='LB26 Do not break a Korean syllable.'),
                    Formula(contents='JL × (JL | JV | H2 | H3)'),
                    Formula(contents='(JV | H2) × (JV | JT)'),
                    Formula(contents='(JT | H3) × JT'),
                    Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                    Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                    Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                    Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                    Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                    Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                    Formula(contents='AL × AL'),
                    Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                    Formula(contents='IS × AL'),
                    Rule(contents='LB30 Withdrawn. In Unicode 5.0, rule LB30 was intended to prevent breaks in cases where a part of a word appears between delimiters—for example, in “person(s)”. The rule was withdrawn because it prevented desirable breaks after certain Asian punctuation characters with class CL. See Example 9 of Section 8, Customization, for options for restoring the functionality.'),
                    Rule(contents='LB31 Break everywhere else.'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='A two-dimensional table can be used to resolve break opportunities between pairs of characters. This section defines such a table. The rows of the table are labeled with the possible values of the line breaking property of the leading character in the pair. The columns are labeled with the line breaking class for the following character of the pair. Each intersection is labeled with the resulting line break opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of a similar table-based definition. However, it uses line breaking classes whose membership is not solely determined by the line breaking property (as in this annex), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classes defined previously.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, then the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes, of which only 14 appear to be unique. Any minimal table representation is unique, except for trivial reordering of rows and columns. Minimal tables for which the rows and columns are sorted alphabetically can be mechanically compared for differences. This is in contrast to the rules, where identical results can be achieved by sets of rules that cannot be easily compared by looking at their textual representation. However, any set of rules that is equivalent to a minimal pair table can be used to automatically generate such a table, which can then be used for comparison. The rules in Section 6, Line Breaking Algorithm, can be expressed as minimal pair tables if the extended context used as described below.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Most of the rules in Section 6, Line Breaking Algorithm, involve only pairs of characters, or they apply to a single line break class preceded or followed by any character. These rules can be represented directly in a pair table. However, rules LB14–LB17 require extended context to handle spaces.'),
                    Paragraph(contents='By broadening the definition of a pair from B A, where B is the line breaking class before a break and A the one after, to B SP* A, where SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line break opportunity (that is, direct and indirect breaks). Rules equivalent to the ones given in Section 6, Line Breaking Algorithm, can be formulated without explicit use of SP by using % to express indirect breaks instead. These rules can then be simplified to involve only pairs of classes—that is, only constructions of the form:'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B × A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can be automatically translated into a pair table, as in Table 2. Line breaking analysis then proceeds by pair table lookup as explained below. (For readability in table layout, the symbol ^ is used in the table instead of × and _ is used instead of ÷.)'),
                    Paragraph(contents='Rule LB9 requires extended context for handling combining marks. This extended context must also be built into the code that interprets the pair table. For convenience in detecting the condition where A = CM, the symbols # and @ are used in the pair table, instead of % and ^, respectively. See Section 7.5, Combining Marks.'),
                    Heading(level=3, contents='7.3 Example Pair Table'),
                    Paragraph(contents='Table 2 implements the line breaking behavior described in this annex, with the limitation that only context of the form B SP* A is considered. BK, CR, LF, NL, and SP classes are handled explicitly in the outer loop, as given in the code sample below. Pair context of the form B CM* can be handled by handling the special entries @ and # in the driving loop, as explained in Section 7.5, Combining Marks. Conjoining jamos are considered separately in Section 7.6, Conjoining Jamos. In Table 2, the rows are labeled with the B class and the columns are labeled with the A class.'),
                    Paragraph(contents='Table 2. Example Pair Table'),
                    TableRow(contents='OP\ue000CL\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM\ue000WJ\ue000H2\ue000H3\ue000JL\ue000JV\ue000JT'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000@\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^'),
                    TableRow(contents='CL\ue000_\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='QU\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='NS\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='EX\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='SY\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IS\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='PR\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='PO\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='NU\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='AL\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ID\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IN\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HY\ue000_\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BA\ue000_\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BB\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='B2\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000^\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ZW\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CM\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='WJ\ue000%\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='H2\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='H3\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JL\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='JV\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='JT\ue000_\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='Resolved outside the pair table: AI, BK, CB, CR, LF, NL, SA, SG, SP, XX'),
                    Paragraph(contents='Table 2 uses the following notation:'),
                    Paragraph(contents='^ denotes a prohibited break: B ^ A is equivalent to B SP* × A; in other words, never break before A and after B, even if one or more spaces intervene.'),
                    Paragraph(contents='% denotes an indirect break opportunity: B % A is equivalent to B × A and B SP+ ÷ A; in other words, do not break before A, unless one or more spaces follow B.'),
                    Paragraph(contents='@ denotes a prohibited break for combining marks: B @ A is equivalent to B SP* × A, where A is of class CM. For more details, see Section 7.5, Combining Marks.'),
                    Paragraph(contents='# denotes an indirect break opportunity for combining marks following a space: B # A is equivalent to (B × A and B SP+ ÷ A), where A is of class CM.'),
                    Paragraph(contents='_ denotes a direct break opportunity (equivalent to ÷ as defined above).'),
                    Paragraph(contents='Note: In the online edition, hovering over the cells in a browser with tool-tips enabled reveals the rule number that determines the breaking status for the pair in question. When a pair must be tested both with and without intervening spaces, multiple rules are given. Hovering over a line breaking class name gives a representative member of the class and additional information. Clicking on any line break class name anywhere in the document jumps to the definition.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two sections provide sample code [Code14] that demonstrates how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the line breaking classes CR, LF, and NL need to be added. They have been omitted here for brevity, but see Section 7.7, Explicit Breaks.'),
                    Paragraph(contents='The sample code assumes that the line breaking classes AI, CB, SG, and XX have been resolved according to rule LB1 as part of initializing the pcls array. The code further assumes that the complex line break analysis for characters with line break class SA is handled in function findComplexBreak, for which the following placeholder is given:'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    // cls - resolved line break class, may differ from pcls[0]'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line breaking opportunities (output)'),
                    CodeLine(contents='    // cch - remaining length of input '),
                    CodeLine(contents='    int '),
                    CodeLine(contents='   findComplexBreak(enum break_class cls, enum break_class *pcls,'),
                    CodeLine(contents='                             enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='            if (!cch)'),
                    CodeLine(contents='                return 0;'),
                    CodeLine(contents='            for (int ich = 1; ich < cch; ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='                // .. do complex break analysis here'),
                    CodeLine(contents='                // and report any break opportunities in pbrk ..'),
                    CodeLine(contents=''),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK; // by default, no break'),
                    CodeLine(contents=''),
                    CodeLine(contents='                if (pcls[ich] != SA)'),
                    CodeLine(contents='                    break;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='            return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The entries in the example pair table correspond to the following enumeration. For diagnostic purposes, the sample code returns these value to indicate not only the location but also the type of rule that triggered a given break opportunity.'),
                    CodeLine(contents='    enum break_action {'),
                    CodeLine(contents='           DIRECT_BRK = 0,             // _ in table'),
                    CodeLine(contents='           INDIRECT_BRK,               // % in table'),
                    CodeLine(contents='           COMBINING_INDIRECT_BRK,     // # in table'),
                    CodeLine(contents='           COMBINING_PROHIBITED_BRK,   // @ in table'),
                    CodeLine(contents='           PROHIBITED_BRK,             // ^ in table'),
                    CodeLine(contents='           EXPLICIT_BRK };             // ! in rules'),
                    Paragraph(contents='Because the contexts involved in indirect breaks of the form B SP* A are of indefinite length, they need to be handled explicitly in the driver code. The sample implementation of a findLineBrk function below remembers the line break class for the last characters seen, but skips any occurrence of SP without resetting this value. Once character A is encountered, a simple lookback is used to see if it is preceded by a SP. This lookback is necessary only if B % A. To handle the case of a SP following sot, it is necessary to set cls to a dummy value. Using WJ gives the correct result and, as required, is unaffected by any tailoring.'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable) (returned value)'),
                    CodeLine(contents="    // cls - current resolved line break class for 'before' character (variable)"),
                    CodeLine(contents=''),
                    CodeLine(contents='    int'),
                    CodeLine(contents='    findLineBrk(enum break_class *pcls, enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='        if (!cch) return 0;'),
                    CodeLine(contents=''),
                    CodeLine(contents="        enum break_class cls = pcls[0];   // class of 'before' character"),
                    CodeLine(contents=''),
                    CodeLine(contents='        // treat SP at start of input as if it followed a WJ'),
                    CodeLine(contents='        if (cls == SP)'),
                    CodeLine(contents='            cls = WJ;'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='        for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // to handle explicit breaks, replace code from "for" loop condition'),
                    CodeLine(contents='            // above to comment below by code given in Section 7.7'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle spaces explicitly'),
                    CodeLine(contents='            if (pcls[ich] == SP) {'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;   // apply rule LB7: × SP'),
                    CodeLine(contents='                continue;                       // do not update cls'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle complex scripts in a separate function'),
                    CodeLine(contents='            if (pcls[ich] == SA) {'),
                    CodeLine(contents='                ich += findComplexBreak(cls, &pcls[ich-1], &pbrk[ich-1],'),
                    CodeLine(contents='                           cch - (ich-1));'),
                    CodeLine(contents='                if (ich < cch)'),
                    CodeLine(contents='                    cls = pcls[ich];'),
                    CodeLine(contents='                continue;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // lookup pair table information in brkPairs[before, after];'),
                    CodeLine(contents='            enum break_action brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents=''),
                    CodeLine(contents='            pbrk[ich-1] = brk;                     // save break action in output array'),
                    CodeLine(contents=''),
                    CodeLine(contents='            if (brk == INDIRECT_BRK) {             // resolve indirect break'),
                    CodeLine(contents='                if (pcls[ich - 1] == SP)           // if context is A SP + B'),
                    CodeLine(contents='                    pbrk[ich-1] = INDIRECT_BRK;    //       break opportunity'),
                    CodeLine(contents='                else                               // else'),
                    CodeLine(contents='                    pbrk[ich-1] = PROHIBITED_BRK;  //       no break opportunity'),
                    CodeLine(contents='            } '),
                    CodeLine(contents='            '),
                    CodeLine(contents='            // handle breaks involving a combining mark (see Section 7.5)'),
                    CodeLine(contents=''),
                    CodeLine(contents="            // save cls of 'before' character (unless bypassed by 'continue')"),
                    CodeLine(contents='            cls = pcls[ich];'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        pbrk[ich-1] = EXPLICIT_BRK;                // always break at the end'),
                    CodeLine(contents=''),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The function returns all of the break opportunities in the array pointed to by pbrk, using the values in the table. On return, pbrk[ich] is the type of break after the character at index ich.'),
                    Paragraph(contents='A common optimization in implementation is to determine only the nearest line break opportunity prior to the position of the first character that would cause the line to become overfull. Such an optimization requires backward traversal of the string instead of forward traversal as shown in the sample code.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='The implementation of combining marks in the pair table presents an additional complication because rule LB9 defines a context X CM* that is of arbitrary length. There are some similarities to the way contexts of the form B SP* A that are involved in indirect breaks are evaluated. However, contexts of the form SP CM* or CM* SP also need to be handled, while rule LB10 requires some CM* to be treated like AL.'),
                    Paragraph(contents='Implementing LB10. This rule can be reflected directly in the example pair table in Table 2 by assigning the same values in the row marked CM as in the row marked AL. Incidentally, this is equivalent to rewriting the rules LB11–LB31 by duplicating any expression that contains an AL on its lefthand side with another expression that contains a CM. For example, in LB22'),
                    Formula(contents='AL × IN'),
                    Paragraph(contents='would become'),
                    Formula(contents='AL × IN CM × IN'),
                    Paragraph(contents='Rewriting these rules as indicated here (and then deleting LB10) is fully equivalent to the original rules because rule LB9 already accounts for all CMs that are not supposed to be treated like AL. For complete prescription see Example 9 in Section 8.2, Examples of Customization.'),
                    Paragraph(contents='Implementing LB9. Rule LB9 is implemented in the example pair table in Table 2 by assigning a special # entry in the column marked CM for all rows referring to a line break class that allows a direct or indirect break after itself. (Note that the intersection between the row for class ZW and the column for class CM must be assigned “_” because of rule LB8.) The # corresponds to a break_action value of COMBINING_INDIRECT_BREAK, which triggers the following code in the sample implementation:'),
                    CodeLine(contents='    else if (brk == COMBINING_INDIRECT_BRK) {    // resolve combining mark break'),
                    CodeLine(contents='        pbrk[ich-1] = PROHIBITED_BRK;             // do not break before CM'),
                    CodeLine(contents='        if (pcls[ich-1] == SP){'),
                    CodeLine(contents='            #ifndef LEGACY_CM                    // new: space is not a base'),
                    CodeLine(contents='                pbrk[ich-1] = COMBINING_INDIRECT_BRK;    // apply rule SP ÷ '),
                    CodeLine(contents='            #else'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;      // legacy: keep SP CM together'),
                    CodeLine(contents='                if (ich > 1)'),
                    CodeLine(contents='                    pbrk[ich-2] = ((pcls[ich - 2] == SP) ?'),
                    CodeLine(contents='                                                  INDIRECT_BRK : DIRECT_BRK);'),
                    CodeLine(contents='            #endif'),
                    CodeLine(contents='        } else                                   // apply rule LB9: X CM * -> X'),
                    CodeLine(contents='            continue;                            // do not update cls'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    Paragraph(contents='When handling a COMBINING_INDIRECT_BREAK, the last remembered line break class in variable cls is not updated, except for those cases covered by rule LB10. A tailoring of rule LB9 that keeps the last SPACE character preceding a combining mark, if any, and therefore breaks before that SPACE character can easily be implemented as shown in the sample code. (See Section 9.2, Legacy Support for Space Character as Base for Combining Marks.)'),
                    Paragraph(contents='Any rows in Table 2 for line break classes that prohibit breaks after must be handled explicitly. In the example pair table, these are assigned a special entry “@”, which corresponds to a special break action of COMBINING_PROHIBITED_BREAK that triggers the following code:'),
                    CodeLine(contents='    else if (brk == COMBINING_PROHIBITED_BRK) { // this is the case OP SP* CM'),
                    CodeLine(contents='        pbrk[ich-1] = COMBINING_PROHIBITED_BRK;  // no break allowed'),
                    CodeLine(contents='        if (pcls[ich-1] != SP)'),
                    CodeLine(contents='            continue;                          // apply rule LB9: X CM* -> X'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The only line break class that unconditionally prevents breaks across a following SP is OP. The preceding code fragment ensures that OP CM is handled according to rule LB9 and OP SP CM is handled as OP SP AL according to rule LB10.'),
                    Heading(level=3, contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='For Korean Syllable Blocks, the information in rule LB26 is represented by a simple pair table shown in Table 3.'),
                    Paragraph(contents='Table 3. Korean Syllable Block Pair Table'),
                    TableRow(contents='H2\ue000H3\ue000JL\ue000JV\ue000JT'),
                    TableRow(contents='H2\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='H3\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JL\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='JV\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='JT\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='When constructing a pair table such as Table 2, this pair table for Korean syllable blocks in Table 3 is merged with the main pair table for all other line break classes by adding the cells from Table 3 beyond the lower-right corner of the main pair table. Next, according to rule LB27, any empty cells in the new rows are filled with the same values as in the existing row for class ID, and any empty cells for the new columns are filled with the same values as in the existing column for class ID. The resulting merged table is shown in Table 2.'),
                    Heading(level=3, contents='7.7 Explicit Breaks'),
                    Paragraph(contents='Handling explicit breaks is straightforward in the driver code, although it does clutter up the loop condition and body of the loop a bit. For completeness, the following sample shows how to change the loop condition and add if statements—both before and inside the loop—that handle BK, NL, CR, and LF. Because NL and BK behave identically by default, this code can be simplified in implementations where the character classification is changed so that BK will always be substituted for NL when assigning the line break class. Because this optimization does not change the result, it is not considered a tailoring and does not affect conformance.'),
                    CodeLine(contents='    // handle case where input starts with an LF'),
                    CodeLine(contents='    if (cls == LF)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // treat initial NL like BK'),
                    CodeLine(contents='    if (cls == NL)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // loop over all pairs in the string up to a hard break or CRLF pair'),
                    CodeLine(contents='    for (int ich = 1; (ich < cch) && (cls != BK) && (cls != CR || pcls[ich] == LF); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle BK, NL and LF explicitly'),
                    CodeLine(contents='        if (pcls[ich] == BK ||pcls[ich] == NL ||  pcls[ich] == LF)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = BK;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle CR explicitly'),
                    CodeLine(contents='        if(pcls[ich] == CR)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = CR;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle spaces explicitly...'),
                    CodeLine(contents=''),
                    Heading(level=2, contents='8 Customization'),
                    Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                    Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                    Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                    Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how to customize the pair table implementation of the line breaking algorithm for these tailorings.'),
                    Heading(level=3, contents='8.1 Types of Tailoring'),
                    Paragraph(contents='There are three principal ways of tailoring the sample pair table implementation of the line breaking algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to permanently overriding some of the rules in Section 6, Line Breaking Algorithm.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions This is a dynamic equivalent of the preceding. Instead of changing the values for the pair intersection directly in the table, they are labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be enabled at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real-world implementation of a pair table-based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. That implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=3, contents='8.2 Examples of Customization'),
                    Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm entirely. Section 7.4, Sample Code, sketches such approach in which the interface to the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the linebreaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined above in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersections of ID/ID, AL/ID, and ID/AL are affected. For alphabetic style line breaking, breaks for these cases require space; for ideographic style line breaking, these cases do not require spaces. Therefore, one defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given text.'),
                    Paragraph(contents='Example 4. Sometimes in a Far Eastern context it is necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. In this case the intersections of NU/NU, NU/AL, AL/AL, and AL/NU are affected.'),
                    Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled via the first method by changing the classification of the Kana small characters from NS to ID as needed.'),
                    Paragraph(contents='Example 6. Some implementations may wish to tailor the line breaking algorithm to resolve grapheme clusters according to Unicode Standard Annex #29, “Text Boundaries” [Boundaries], as a first stage. Generally, the line breaking algorithm does not create line break opportunities within default grapheme clusters; therefore such a tailoring would be expected to produce results that for most practical cases are close to what are defined by the default algorithm. However, if such a tailoring is chosen, characters that are members of line break class CM but not part of the definition of default grapheme clusters must still be handled by rules LB9 and LB10, or by some additional tailoring.'),
                    Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                    Formula(contents='( PR | PO ) ? ( OP | HY ) ? NU (NU | SY | IS) * CL ? ( PR | PO ) ?'),
                    Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                    Paragraph(contents='Regex-Number: Do not break numbers.'),
                    Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                    Formula(contents='( OP | HY ) × NU'),
                    Formula(contents='NU × (NU | SY | IS)'),
                    Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL)'),
                    Formula(contents='NU (NU | SY | IS)* CL? × (PO | PR)'),
                    Paragraph(contents='This customized rule uses extended contexts that cannot be represented in a pair table. In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                    Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                    Formula(contents='[^NU] × CL'),
                    Formula(contents='× EX'),
                    Formula(contents='[^NU] × IS'),
                    Formula(contents='[^NU] × SY'),
                    Paragraph(contents='Otherwise, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                    Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                    Paragraph(contents='Example 9. Prevent breaks when part of a word appears within parentheses—for example, in “person(s)”.'),
                    Paragraph(contents='1. Reclassify U+0029, RIGHT PARENTHESIS, from line break class CL (Closing Punctuation) to line break class IS (Numeric Infix Separator).'),
                    Paragraph(contents='2. Add the following rule as LB 30:'),
                    Formula(contents='(AL | NU) × OP'),
                    Paragraph(contents='This customization is one possible way of achieving the original purpose of LB30—preventing breaks in words like "person(s)"—without the undesired side effect of preventing breaks after Asian punctuation characters having line breaking class CL (Closing Punctuation).'),
                    Heading(level=2, contents='9 Implementation Notes'),
                    Paragraph(contents='This section provides additional notes on implementation issues.'),
                    Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='For implementations that use regular expressions, it is not possible to directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                    Paragraph(contents='To replace rule LB9, terms of the form'),
                    Paragraph(contents='B # A'),
                    Paragraph(contents='B SP* # A'),
                    Paragraph(contents='B #'),
                    Paragraph(contents='B SP* #'),
                    Paragraph(contents='are replaced by terms of the form'),
                    Paragraph(contents='B CM* # A'),
                    Paragraph(contents='B CM* SP* # A'),
                    Paragraph(contents='B CM* #'),
                    Paragraph(contents='B CM* SP* #'),
                    Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                    Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                    Paragraph(contents='Replace LB10 by the following rule:'),
                    Paragraph(contents='× CM'),
                    Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                    Paragraph(contents='(AL | NU) × OP'),
                    Paragraph(contents='add another rule'),
                    Paragraph(contents='CM × OP.'),
                    Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Text Boundaries” [Boundaries].'),
                    Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='As stated in [Unicode5.0], Section 7.9, Combining Marks, combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. This use of SPACE for this purpose is now deprecated because it has been found to lead to many complications in text processing. Whether using either NBSP or SPACE as the base character, the visual appearance is the same, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                    Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                    Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID.'),
                    Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                    Heading(level=2, contents='10 Testing'),
                    Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                    Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                    Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                    Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                    Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                    Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                    Paragraph(contents='1. The rules are cast into a more regex-style.'),
                    Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                    Paragraph(contents='3. The rules are given decimal numbers without prefix, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                    Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                    Paragraph(contents='• 13.01) [^NU] × CL'),
                    Paragraph(contents='• 13.02) × EX'),
                    Paragraph(contents='• ...'),
                    Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                    Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                    Paragraph(contents='Table 4. Numbering of Rules'),
                    TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                    TableRow(contents='LB2\ue0000.2\ue000start of text'),
                    TableRow(contents='LB3\ue0000.3\ue000end of text'),
                    TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                    TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                    TableRow(contents='LB31\ue000999\ue000÷ any'),
                    Heading(level=2, contents='References'),
                    Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.”'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='Asmus Freytag is the author of the initial version and has added to and maintained the text of this annex.'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                    Heading(level=2, contents='Modifications'),
                    Heading(level=3, contents='Change History'),
                    Paragraph(contents='For details of the change history, see the online copy of this annex at http://www.unicode.org/reports/tr14/.'),
                    Heading(level=3, contents='Rule Numbering Across Versions'),
                    Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                    Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                    TableRow(contents='5.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                    TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                    TableRow(contents='LB2\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                    TableRow(contents='LB3\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                    TableRow(contents='LB4\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB5\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB6\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                    TableRow(contents='LB7\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                    TableRow(contents='LB8\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                    TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                    TableRow(contents='LB9\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB10\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                    TableRow(contents='LB11\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12a\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB13\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                    TableRow(contents='LB14\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                    TableRow(contents='LB15\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                    TableRow(contents='LB16\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                    TableRow(contents='LB17\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                    TableRow(contents='LB18\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                    TableRow(contents='LB19\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                    TableRow(contents='LB20\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                    TableRow(contents='LB21\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                    TableRow(contents='LB22\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                    TableRow(contents='LB23\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                    TableRow(contents='LB24\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='LB25\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                    TableRow(contents='LB26\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB27\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB28\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                    TableRow(contents='LB29\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB31\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                    Heading(level=3, contents='Change History'),
                    Paragraph(contents='The following documents the changes introduced by each revision.'),
                    Heading(level=4, contents='Revision 22:'),
                    Paragraph(contents='• Updated for Version 5.1.0.'),
                    Paragraph(contents='• Added 2E18, INVERTED INTERROBANG, to class OP.'),
                    Paragraph(contents='• Added 2064, INVISIBLE PLUS, to class AL.'),
                    Paragraph(contents='• Added 2E00..2E01, 2E06..2E08, 2E0B to class QU.'),
                    Paragraph(contents='• Removed LB30, to correct regression for U+3002 IDEOGRAPHIC FULL STOP'),
                    Paragraph(contents='• Add Example 9 to Section 8, Customization.'),
                    Paragraph(contents='• Substantial revisions to Section 4, Conformance.'),
                    Paragraph(contents='• Section 5.7, Word Separators, added.'),
                    Paragraph(contents='• Section 10, Testing, added.'),
                    Paragraph(contents='• Renumber rules for consistency: 12a -> 12; 12b -> 12a'),
                    Paragraph(contents='• Added 02DF, MODIFIER LETTER CROSS ACCENT, to class BB.'),
                    Paragraph(contents='• Added discussion for 202F NARROW NO-BREAK SPACE and 180E MONGOLIAN VOWEL SEPARATOR'),
                    Paragraph(contents='• Corrected typos in LB13 and LB16'),
                    Paragraph(contents='• Added characters introduced with Unicode 5.1 to the lists associated with the line break properties.'),
                    Paragraph(contents='• Added Section 5.2 on the special handling of hyphens. Edited Section 3 for clarity.'),
                    Paragraph(contents='• Improved delineation between normative and informative information.'),
                    Paragraph(contents='• Changed from EX to IS'),
                    Paragraph(contents='• 060C ( ، ) ARABIC COMMA'),
                    Paragraph(contents='• Changed from EX to PO'),
                    Paragraph(contents='• 066A ( ٪ ) ARABIC PERCENT SIGN'),
                    Paragraph(contents='• Changed from AI to OP'),
                    Paragraph(contents='• 00A1 ( ¡ ) INVERTED EXCLAMATION MARK'),
                    Paragraph(contents='• 00BF ( ¿ ) INVERTED QUESTION MARK'),
                    Paragraph(contents='• Changed from BA to EX'),
                    Paragraph(contents='• 1802 ( ᠂ ) MONGOLIAN COMMA'),
                    Paragraph(contents='• 1803 ( ᠃ ) MONGOLIAN FULL STOP'),
                    Paragraph(contents='• 1808 ( ᠈ ) MONGOLIAN MANCHU COMMA'),
                    Paragraph(contents='• 1809 ( ᠉ ) MONGOLIAN MANCHU FULL STOP'),
                    Paragraph(contents='• 2CF9 ( ⳹ ) COPTIC OLD NUBIAN FULL STOP'),
                    Paragraph(contents='• 2CFE ( ⳾ ) COPTIC FULL STOP'),
                    Paragraph(contents='• Changed from BA to AL'),
                    Paragraph(contents='• 1A1E ( ᨞ ) BUGINESE PALLAWA'),
                    Paragraph(contents='• Changed from AL to BB'),
                    Paragraph(contents='• 1FFD ( ´ ) GREEK OXIA'),
                    Paragraph(contents='• Added a note on lack of canonical equivalence for the definition of ambiguous characters.'),
                    Paragraph(contents='• Corrected typos in the sample source code.'),
                    Paragraph(contents='• Split rule LB12 to accommodate Polish and Portuguese hyphenation.'),
                    Paragraph(contents='Revisions 20 and 21 being a proposed update, only changes between revisions 19 and 22 are noted here.'),
                    Heading(level=4, contents='Revision 19:'),
                    Paragraph(contents='• Changed 000B from CM to BK, changed 035C from CM to GL.'),
                    Paragraph(contents='• Changed 17D9 from NS to AL. 203D, 2047..2049 from AL to NS.'),
                    Paragraph(contents='• Corrected listing of NS property to match the data file to remove 17D8 and 17DA.'),
                    Paragraph(contents='• The data file has been corrected to match the listing of the BA property to include 1735 and 1736, also changed 05BE and 103D0 from AL to BA.'),
                    Paragraph(contents='• Changed the brackets 23B4.23B6 to AL.'),
                    Paragraph(contents='• Updated the SA property to make it more generic, includes changing many characters from CM to SA.'),
                    Paragraph(contents='• Reflected new characters'),
                    Paragraph(contents='• Made several text changes for clarifications, including reworded the intro to Section 6.'),
                    Paragraph(contents='• Added Section 9.'),
                    Paragraph(contents='• Restated the conformance clauses and reorganized the algorithm into a tailorable and a non-tailorable part; this affects text in Sections 4, 5, and 6.'),
                    Paragraph(contents='• Removed redundant term PR x HY from rule 18 and rule into new LB24 and LB26 to provide better granularity for tailoring,'),
                    Paragraph(contents='• Moved rule 11b and 13 above rule 8 (new LB13), restating rule 13 (new LB12) to preserve its effect in the new location.'),
                    Paragraph(contents='• Added new rule LB30 to handle words like “person(s)”.'),
                    Paragraph(contents='• Renumbered the rules.'),
                    Paragraph(contents='• Extensive copy-editing as part of Unicode 5.0 publication.'),
                    Paragraph(contents='Revision 18 being a proposed update, only changes between revisions 17 and 19 are noted here.'),
                    Heading(level=4, contents='Revision 17:'),
                    Paragraph(contents='• Significantly revised the line break classes for Tibetan, as well as Mongolian and Arabic Punctuation.'),
                    Paragraph(contents='• Added section 5.6 on Tibetan and section 7.7 on handling explicit breaks.'),
                    Paragraph(contents='• Added line break class assignments for Unicode 4.1 characters.'),
                    Paragraph(contents='• Significantly revised the line break class assignments for danda characters and made it consistent across scripts.'),
                    Paragraph(contents='• LB6: Replaced by new rules 18b and 18c, using new classes JL, JV, JT, H2, and H3.'),
                    Paragraph(contents='• LB7a: Deprecated rule 7a because SPACE as base character for standalone combining marks is deprecated.'),
                    Paragraph(contents='• LB7b: Revised 7b and section 7.5 as well as Table 2 to match the deprecation of rule 7a.'),
                    Paragraph(contents='• LB7b: Clarified that this rule does not apply to SP.'),
                    Paragraph(contents='• LB11a: Added a missing SP * to make the formula match the rule.'),
                    Paragraph(contents='• LB18b: Removed the existing rule 18b because it was redundant.'),
                    Paragraph(contents='• Corrected an erratum on revision 14 by splitting GL from WJ in rule 11b and moving to a new rule 13.'),
                    Paragraph(contents='• Updated the pair table and sample code to match the changes in the rules.'),
                    Paragraph(contents='• Updated the regular expression for numbers.'),
                    Paragraph(contents='• Added several notes on implementation techniques.'),
                    Paragraph(contents='• Moved all suggested tailorings from the rules section to the examples in section 8.2.'),
                    Paragraph(contents='Revision 16 being a proposed update, only changes between revisions 17 and 15 are noted here.'),
                    Heading(level=4, contents='Revision 15:'),
                    Paragraph(contents='• LB19b: Added new rule 19b.'),
                    Paragraph(contents='• Changed line breaking class: combining double diacritics from CM to GL, 037A and 2126 to match their canonical equivalents, 2140 corrected to AL, Arabic numerical separators from AL to NU, many alphabetic characters that are EAW=Ambiguous from AI to AL to better reflect current practice, remaining circled numbers and letters from AL to AI for consistency.'),
                    Paragraph(contents='• Added a note on the behavior of U+200B and U+3000 when lines are justified.'),
                    Paragraph(contents='• Reconciled the data file and description of line breaking classes in section 5.'),
                    Paragraph(contents='• Reconciled the rules and pair table implementation of the algorithm.'),
                    Paragraph(contents='• Updated the text of the conformance statement in section 4.'),
                    Paragraph(contents='• Added section 5.5 on use of double hyphen.'),
                    Paragraph(contents='• Updated styles and table formatting.'),
                    Paragraph(contents='• Minor edits throughout.'),
                    Heading(level=4, contents='Revision 14:'),
                    Paragraph(contents='• Added new line breaking classes NL and WJ to better support NEL and Word Joiner.'),
                    Paragraph(contents='• Deprecated the use of class SG.'),
                    Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and 7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                    Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                    Paragraph(contents='• Clarified the behavior of SHY and MONGOLIAN TODO SOFT HYPHEN, as well as WJ and ZWNBSP.'),
                    Paragraph(contents='• Added a new subsection 5.4 on SOFT HYPHEN and a new subsection 7.6 on conjoining jamos.'),
                    Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                    Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                    Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                    Paragraph(contents='• Expanded the introduction in Section 3.'),
                    Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                    Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                    Paragraph(contents='Revision 11 being a proposed update, only changes between revisions 12 and 14 are noted here.'),
                    Heading(level=4, contents='Revision 12:'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added Word joiner to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the data file. Only characters whose LB class differs from those of characters with related General_Category are noted explicitly in this text.'),
                    Paragraph(contents='Revision 11, being a proposed update, only changes between revisions 10 and 12 are noted here.]'),
                    Heading(level=4, contents='Revision 10:'),
                    Paragraph(contents='• Changed header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Heading(level=4, contents='Revision 9:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX.'),
                    Paragraph(contents='• LB7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode4.0].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair table entry PR % ID'),
                    Paragraph(contents='• Reworked Section 7.5'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull)'),
                    Heading(level=4, contents='Revision 8:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to Table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX because the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                    Heading(level=4, contents='Revision 7:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Heading(level=4, contents='Revision 6:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='No change history is available for earlier revisions.'),
                    Paragraph(contents='Copyright © 1998-2008 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                    Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(5, 2, 0): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                    TableRow(contents='Version\ue000Unicode 5.2.0'),
                    TableRow(contents='Authors\ue000Asmus Freytag (asmus@unicode.org), Andy Heninger (andy.heninger@gmail.com)'),
                    TableRow(contents='Date\ue0002009-09-18'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-24.html'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-22.html'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                    TableRow(contents='Latest Proposed Update\ue000http://www.unicode.org/reports/tr14/proposed.html'),
                    TableRow(contents='Revision\ue00024'),
                    Heading(level=4, contents='Summary'),
                    Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display. A model implementation using pair tables is also provided.'),
                    Heading(level=4, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                    Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                    Heading(level=4, contents='Contents'),
                    Paragraph(contents='1 Overview and Scope'),
                    Paragraph(contents='2 Definitions'),
                    Paragraph(contents='3 Introduction'),
                    Paragraph(contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='4 Conformance'),
                    Paragraph(contents='4.1 Conformance Requirements'),
                    Paragraph(contents='5 Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Dictionary Usage'),
                    Paragraph(contents='5.3 Use of Hyphen'),
                    Paragraph(contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='5.7 Word Separator Characters'),
                    Paragraph(contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Pair Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='7.7 Explicit Breaks'),
                    Paragraph(contents='8 Customization'),
                    Paragraph(contents='8.1 Types of Tailoring'),
                    Paragraph(contents='8.2 Examples of Customization'),
                    Paragraph(contents='9 Implementation Notes'),
                    Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='10 Testing'),
                    Paragraph(contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='References'),
                    Paragraph(contents='Acknowledgments'),
                    Paragraph(contents='Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                    Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                    Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                    Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Three main sections follow:'),
                    Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                    Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='• Section 7, Pair Table-Based Implementation, describes an efficient pair table-based implementation of the algorithm.'),
                    Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                    Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                    Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                    Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                    Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard [Unicode5.2]. The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard. All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard.'),
                    Paragraph(contents='LD1 Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='LD2 Line Break: The position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='LD3 Line Break Opportunity: A place where a line is allowed to end.'),
                    Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                    Paragraph(contents='LD4 Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                    Paragraph(contents='LD5 Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                    Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                    Paragraph(contents='LD6 Line Breaking Class: A class of characters with the same line breaking property value.'),
                    Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                    Paragraph(contents='LD7 Mandatory Break: A line must break following a character that has the mandatory break property.'),
                    Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                    Paragraph(contents='LD8 Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                    Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='LD9 Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                    Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                    Paragraph(contents='• An indirect break is indicated in the pair table in Table 2 as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though space characters are not shown in the pair table, an indirect break can occur only if one or more spaces follow B. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                    Paragraph(contents='LD10 Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                    Paragraph(contents='• A prohibited break is indicated in the pair table in Table 2 as B ^ A, where B is the character class of the character before and A is the character class of the character after the break, and the optional space characters are not shown. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='LD11 Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                    Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                    Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                    Paragraph(contents='Table 1. Line Breaking Classes'),
                    TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                    TableRow(contents='Non-tailorable Line Breaking Classes'),
                    TableRow(contents='BK\ue000Mandatory Break\ue000NL, PS\ue000Cause a line break (after)'),
                    TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                    TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                    TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                    TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                    TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                    TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                    TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                    TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                    TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                    TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                    TableRow(contents='NS\ue000Nonstarter\ue000small kana\ue000Allow only indirect line breaks before'),
                    TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                    TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                    TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                    TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                    TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                    TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                    TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Introduction'),
                    Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                    Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                    Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and U+3000 IDEOGRAPHIC SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                    Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                    Paragraph(contents='In line breaking it is necessary to distinguish between two related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Break Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection.'),
                    Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                    Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                    Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                    Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                    Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                    Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                    Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                    Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                    Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                    Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [Bidi]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                    Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                    Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Break Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                    Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                    Heading(level=3, contents='4.1 Conformance Requirements'),
                    Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                    Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                    Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                    Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                    Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                    Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                    Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into two algorithms defined in Section 6, Line Breaking Algorithm, and Section 7, Pair Table-Based Implementation. These sections describe workable default line breaking methods. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences.'),
                    Heading(level=4, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a tab-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                    Heading(level=4, contents='Future Updates'),
                    Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                    Paragraph(contents='(A)—the class allows a break opportunity after in specified contexts'),
                    Paragraph(contents='(XA)—the class prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='(B)—the class allows a break opportunity before in specified contexts'),
                    Paragraph(contents='(XB)—the class prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='(P)—the class allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='(XP)—the class prevents a break opportunity for a pair of same characters'),
                    Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Some characters that ordinarily act like alphabetic or symbol characters (which have the AL line breaking class) are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                    Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [EAW].'),
                    Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                    Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                    Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                    TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                    TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                    Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                    Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                    Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='Except as listed explicitly below as part of another line breaking class, and except as assigned class AI or ID based on East Asian Width, this class contains the following characters:'),
                    Paragraph(contents='ALPHABETIC—all remaining characters of General Categories Lu, Ll, Lt, Lm, and Lo SYMBOLS—all remaining characters of General Categories Sm, Sk, and So NON-DECIMAL NUMBERS—all remaining characters of General Categories Nl, and No PUNCTUATION—all remaining characters of General Categories Pc, Pd, and Po'),
                    Paragraph(contents='Plus additional characters, including:'),
                    TableRow(contents='0600..0603\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAFHA'),
                    TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                    TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                    TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                    Paragraph(contents='These characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                    Heading(level=3, contents='BA: Break After (A)'),
                    Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                    Heading(level=4, contents='Breaking Spaces'),
                    Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN SPACE'),
                    TableRow(contents='2003\ue000EM SPACE'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                    Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                    Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                    Paragraph(contents='See the ID property for U+3000 IDEOGRAPHIC SPACE. For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode5.2].'),
                    Heading(level=4, contents='Tabs'),
                    TableRow(contents='0009\ue000TAB'),
                    Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    Heading(level=4, contents='Conditional Hyphens'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY marks the place where an optional line break may occur inside a word. It can be used with all scripts. SHY is rendered invisibly and has no width: it merely indicates an optional line break. The rendering of the optional line break depends on the script. For the Latin script, rendering the line break typically means displaying a hyphen at the end of the line; however, some languages require a change in spelling surrounding an optional line break. For examples, see Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=4, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Visible Word Dividers'),
                    Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                    TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                    TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                    Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                    Heading(level=4, contents='Historic Word Separators'),
                    Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                    Paragraph(contents='Examples of Historic Word Separators include:'),
                    TableRow(contents='16EB\ue000RUNIC SINGLE DOT PUNCTUATION'),
                    TableRow(contents='16EC\ue000RUNIC MULTIPLE DOT PUNCTUATION'),
                    TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                    TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                    TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                    TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                    TableRow(contents='205B\ue000FOUR DOT MARK'),
                    TableRow(contents='205D\ue000TRICOLON'),
                    TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                    TableRow(contents='2E19\ue000PALM BRANCH'),
                    TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                    TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                    TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                    TableRow(contents='2E2D\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='2E30\ue000RING POINT'),
                    TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                    TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                    TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                    TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                    TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                    TableRow(contents='1091F\ue000PHOENICIAN WORD DIVIDER'),
                    TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                    Heading(level=4, contents='Dandas'),
                    Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                    Paragraph(contents='Dandas include:'),
                    TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                    TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                    TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                    TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                    TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                    TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                    TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                    TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                    TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                    TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                    TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                    TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                    TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                    TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                    TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                    TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                    Heading(level=4, contents='Tibetan'),
                    TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                    TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                    TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                    TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                    TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                    TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                    Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Other Terminating Punctuation'),
                    Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                    TableRow(contents='1804\ue000MONGOLIAN COLON'),
                    TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                    TableRow(contents='1B5A\ue000BALINESE PANTI'),
                    TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                    TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                    TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                    TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                    TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                    TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                    TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                    TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                    TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                    TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                    TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                    TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                    TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                    TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                    TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                    TableRow(contents='2E17\ue000OBLIQUE DOUBLE HYPHEN'),
                    TableRow(contents='A60D\ue000VAI COMMA'),
                    TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                    TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                    TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                    TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                    TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                    TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                    TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                    TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                    TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                    Heading(level=3, contents='BB: Break Before (B)'),
                    Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                    Paragraph(contents='Examples of BB characters are described in the following sections.'),
                    Heading(level=4, contents='Dictionary Use'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    TableRow(contents='1FFD\ue000GREEK OXIA'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                    TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                    Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                    Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                    TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                    TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                    TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                    TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                    TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                    TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                    TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                    TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                    TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                    TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                    TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                    TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                    TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                    Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Mongolian'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                    Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                    Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                    TableRow(contents='000C\ue000FORM FEED (FF)'),
                    TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                    Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR (LS)'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. This is similar to HTML <BR>.'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR (PS)'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LS, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                    Heading(level=4, contents='Newline Function (NLF)'),
                    Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode5.2].'),
                    Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                    Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                    Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                    Heading(level=3, contents='CL: Close Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                    Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                    Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                    TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                    Heading(level=4, contents='Combining Characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                    Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 No-Break SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                    Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                    Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                    Heading(level=4, contents='Control and Formatting Characters'),
                    Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                    Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='CP: Closing Parenthesis'),
                    Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                    TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                    TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                    Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                    Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                    Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                    Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                    TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                    TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                    TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                    TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                    TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                    TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following lists the characters of line break class GL with additional description.'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                    TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE. NARROW NO-BREAK SPACE is used in Mongolian. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in Section 13.2, Mongolian, of [Unicode5.2].'),
                    Paragraph(contents='NARROW NO-BREAK SPACE is a narrow version of NO-BREAK SPACE, which has exactly the same line breaking behavior, but with a narrow display width. It is regularly used in Mongolian in certain grammatical contexts (before a particle), where it also influences the shaping of the glyphs for the particle. In Mongolian text, the NARROW NO-BREAK SPACE is typically displayed with one third the width of a normal space character.'),
                    Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                    Paragraph(contents='The MONGOLIAN VOWEL SEPARATOR is equivalent to a NARROW NO-BREAK SPACE in its line breaking behavior, but has different effects in controlling the shaping of its preceding and following characters. It constitutes a word-internal space and is typically displayed with half the width of a NARROW NO-BREAK SPACE.'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                    TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                    Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                    Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                    Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                    Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                    Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                    Heading(level=3, contents='HY: Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                    Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                    Heading(level=3, contents='ID: Ideographic (B/A)'),
                    Paragraph(contents='Note: This class also includes characters other than Han ideographs.'),
                    Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. The ID line break class includes the following characters:'),
                    TableRow(contents='2E80..2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                    TableRow(contents='30A0..30FF\ue000Katakana (except small characters)'),
                    TableRow(contents='3400..4DB5\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='4E00..9FBB\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='F900..FAD9\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490..A4CF\ue000YI RADICALS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF10..FF19\ue000WIDE DIGITS'),
                    TableRow(contents='20000..2A6D6\ue000CJK UNIFIED IDEOGRAPHS EXTENSION B'),
                    TableRow(contents='2F800..2FA1D\ue000CJK COMPATIBILITY IDEOGRAPHS SUPPLEMENT'),
                    Paragraph(contents='It also includes all of the FULLWIDTH LATIN letters and all of the blocks in the range 3000..33FF not covered elsewhere.'),
                    Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Paragraph(contents='U+3000 IDEOGRAPHIC SPACE may be subject to expansion or compression during line justification.'),
                    Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                    Paragraph(contents='The CJK blocks and regions in which unassigned characters default to line break class ID are:'),
                    TableRow(contents='CJK Unified Ideographs Extension A'),
                    TableRow(contents='CJK Unified Ideographs'),
                    TableRow(contents='CJK Compatibility Ideographs'),
                    TableRow(contents='CJK Unified Ideographs Extension B'),
                    TableRow(contents='CJK Unified Ideographs Extension C'),
                    TableRow(contents='CJK Compatibility Ideographs Supplement'),
                    TableRow(contents='SIP (Plane 2) outside of blocks'),
                    TableRow(contents='TIP (Plane 3) outside of blocks'),
                    Heading(level=4, contents='Korean'),
                    Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                    Heading(level=4, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    TableRow(contents='060C\ue000ARABIC COMMA'),
                    TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                    TableRow(contents='07F8\ue000NKO COMMA'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                    TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                    TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                    Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                    Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                    Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                    Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                    Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                    Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                    Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                    Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                    Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                    Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                    Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                    TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                    Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                    Heading(level=3, contents='NS: Nonstarters (XB)'),
                    Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include all Hiragana, Katakana, and Halfwidth Katakana “small” characters, plus many others, including:'),
                    TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='203D\ue000INTERROBANG'),
                    TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                    TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                    TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='303C\ue000MASU MARK'),
                    TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                    TableRow(contents='30FB..30FE\ue000KATAKANA MIDDLE DOT..KATAKANA VOICED ITERATION MARK'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='Note: Optionally, the NS restriction may be relaxed and some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles.'),
                    Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                    Heading(level=3, contents='NU: Numeric (XP)'),
                    Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                    Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                    TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                    TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                    Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                    Heading(level=3, contents='OP: Open Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                    TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                    TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                    TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                    Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                    Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                    Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                    Paragraph(contents='Postfix characters include'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='060B\ue000AFGHANI SIGN'),
                    TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='FDFC\ue000RIAL SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                    Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                    Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                    Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                    Heading(level=3, contents='QU: Quotation (XB/XA)'),
                    Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                    Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode5.2]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                    Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                    TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                    TableRow(contents='2E0B\ue000RAISED SQUARE'),
                    Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                    Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                    TableRow(contents='0E00..0E7F\ue000Thai'),
                    TableRow(contents='0E80..0EFF\ue000Lao'),
                    TableRow(contents='1000..109F\ue000Myanmar'),
                    TableRow(contents='1780..17FF\ue000Khmer'),
                    TableRow(contents='1950..197F\ue000Tai Le'),
                    TableRow(contents='1980..19DF\ue000New Tai Lue'),
                    TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                    TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                    TableRow(contents='AA80..AADF\ue000Tai Viet'),
                    Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                    Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                    Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                    Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                    Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                    Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                    Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                    Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                    Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                    Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                    Heading(level=3, contents='XX: Unknown (XP)'),
                    Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                    Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                    Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                    Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode5.2].'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                    Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                    Heading(level=3, contents='5.2 Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                    Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                    Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                    Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                    Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                    Heading(level=3, contents='5.3 Use of Hyphen'),
                    Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                    Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                    Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                    Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                    Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                    Paragraph(contents='dispara- te'),
                    Paragraph(contents='and the latter as'),
                    Paragraph(contents='dispara- -te.'),
                    Paragraph(contents='A recommended practice is to type <SHY, NBHY> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                    Paragraph(contents='• Simply inserting a hyphen glyph'),
                    Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                    Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                    Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                    Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                    Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                    Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                    Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                    Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                    Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                    Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                    Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode5.2].'),
                    Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [Bidi] and Section 8.2, Arabic, of [Unicode5.2].'),
                    Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                    Paragraph(contents='The sequence <SHY, NBHY> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                    Heading(level=3, contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                    Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                    Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                    Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                    Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                    Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                    Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                    Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                    Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                    Heading(level=3, contents='5.7 Word Separator Characters'),
                    Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                    Paragraph(contents='1. suppress the visible word separator'),
                    Paragraph(contents='The:quick:brown fox:jumped.'),
                    Paragraph(contents='2. break before the visible word separator'),
                    Paragraph(contents='The:quick:brown :fox:jumped.'),
                    Paragraph(contents='3. break after the visible word separator'),
                    Paragraph(contents='The:quick:brown: fox:jumped.'),
                    Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                    Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                    Paragraph(contents='A slightly simplified implementation of such an algorithm can be devised that uses a two-dimensional table to resolve break opportunities between pairs or characters. It is described in Section 7, Pair Table-Based Implementation.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1 Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                    Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                    Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                    Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, and ZW define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                    Heading(level=4, contents='Resolve line breaking classes:'),
                    Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                    Paragraph(contents='In the absence of such criteria, it is recommended that classes AI, SA, SG, and XX be resolved to AL, except that characters of class SA that have General_Category Mn or Mc be resolved to CM (see SA). Unresolved class CB is handled in rule LB20.'),
                    Heading(level=4, contents='Start and end of text:'),
                    Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                    Rule(contents='LB2 Never break at the start of text.'),
                    Formula(contents='sot ×'),
                    Rule(contents='LB3 Always break at the end of text.'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode5.2]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                    Rule(contents='LB4 Always break after hard line breaks.'),
                    Formula(contents='BK !'),
                    Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                    Formula(contents='CR × LF'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='NL !'),
                    Rule(contents='LB6 Do not break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF | NL )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB7 Do not break before spaces or zero width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB8 Break after zero width space.'),
                    Formula(contents='ZW ÷'),
                    Paragraph(contents='Note:The break opportunities produced by LB8 differ in certain cases from those produced by the pair table included in Section 7, Pair Table-Based Implementation. The differences occur with sequences like ZW SP CL. The inconsistencies will be addressed in the next revision of this document.'),
                    Heading(level=4, contents='Combining marks:'),
                    Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                    Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules.'),
                    Formula(contents='Treat X CM* as if it were X.'),
                    Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                    Rule(contents='LB10 Treat any remaining combining mark as AL.'),
                    Formula(contents='Treat any remaining CM as it if were AL.'),
                    Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                    Heading(level=4, contents='Word joiner:'),
                    Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                    Formula(contents='× WJ'),
                    Formula(contents='WJ ×'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12 Do not break after NBSP and related characters.'),
                    Formula(contents='GL ×'),
                    Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                    Formula(contents='[^SP BA HY] × GL'),
                    Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                    Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× CP'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                    Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                    Formula(contents='(CL | CP) SP* × NS'),
                    Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 SP* × B2'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB18 Break after spaces.'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB20 Break before and after unresolved CB.'),
                    Formula(contents='÷ CB'),
                    Formula(contents='CB ÷'),
                    Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                    Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents='LB22 Do not break between two ellipses, or between letters or numbers and ellipsis.'),
                    Formula(contents='AL × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents='Do not break alphanumerics.'),
                    Rule(contents='LB23 Do not break within ‘a9’, ‘3a’, or ‘H%’.'),
                    Formula(contents='ID × PO'),
                    Formula(contents='AL × NU'),
                    Formula(contents='NU × AL'),
                    Rule(contents='LB24 Do not break between prefix and letters or ideographs.'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × AL'),
                    Formula(contents='PO × AL'),
                    Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                    Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                    Formula(contents='CL × PO'),
                    Formula(contents='CP × PO'),
                    Formula(contents='CL × PR'),
                    Formula(contents='CP × PR'),
                    Formula(contents='NU × PO'),
                    Formula(contents='NU × PR'),
                    Formula(contents='PO × OP'),
                    Formula(contents='PO × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='PR × NU'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Korean syllable blocks'),
                    Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                    Rule(contents='LB26 Do not break a Korean syllable.'),
                    Formula(contents='JL × (JL | JV | H2 | H3)'),
                    Formula(contents='(JV | H2) × (JV | JT)'),
                    Formula(contents='(JT | H3) × JT'),
                    Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                    Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                    Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                    Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                    Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                    Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                    Formula(contents='AL × AL'),
                    Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                    Formula(contents='IS × AL'),
                    Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                    Formula(contents='(AL | NU) × OP'),
                    Formula(contents='CP × (AL | NU)'),
                    Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                    Rule(contents='LB31 Break everywhere else.'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='A two-dimensional table can be used to resolve break opportunities between pairs of characters. This section defines such a table. The rows of the table are labeled with the possible values of the line breaking property of the leading character in the pair. The columns are labeled with the line breaking class for the following character of the pair. Each intersection is labeled with the resulting line break opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of a similar table-based definition. However, it uses line breaking classes whose membership is not solely determined by the line breaking property (as in this annex), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classes defined previously.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, then the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes, of which only 14 appear to be unique. Any minimal table representation is unique, except for trivial reordering of rows and columns. Minimal tables for which the rows and columns are sorted alphabetically can be mechanically compared for differences. This is in contrast to the rules, where identical results can be achieved by sets of rules that cannot be easily compared by looking at their textual representation. However, any set of rules that is equivalent to a minimal pair table can be used to automatically generate such a table, which can then be used for comparison. The rules in Section 6, Line Breaking Algorithm, can be expressed as minimal pair tables if the extended context used as described below.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Most of the rules in Section 6, Line Breaking Algorithm, involve only pairs of characters, or they apply to a single line break class preceded or followed by any character. These rules can be represented directly in a pair table. However, rules LB14–LB17 require extended context to handle spaces.'),
                    Paragraph(contents='By broadening the definition of a pair from B A, where B is the line breaking class before a break and A the one after, to B SP* A, where SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line break opportunity (that is, direct and indirect breaks). Rules equivalent to the ones given in Section 6, Line Breaking Algorithm, can be formulated without explicit use of SP by using % to express indirect breaks instead. These rules can then be simplified to involve only pairs of classes—that is, only constructions of the form:'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B × A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can be automatically translated into a pair table, as in Table 2. Line breaking analysis then proceeds by pair table lookup as explained below. (For readability in table layout, the symbol ^ is used in the table instead of × and _ is used instead of ÷.)'),
                    Paragraph(contents='Rule LB9 requires extended context for handling combining marks. This extended context must also be built into the code that interprets the pair table. For convenience in detecting the condition where A = CM, the symbols # and @ are used in the pair table, instead of % and ^, respectively. See Section 7.5, Combining Marks.'),
                    Heading(level=3, contents='7.3 Example Pair Table'),
                    Paragraph(contents='Table 2 implements the line breaking behavior described in this annex, with the limitation that only context of the form B SP* A is considered. BK, CR, LF, NL, and SP classes are handled explicitly in the outer loop, as given in the code sample below. Pair context of the form B CM* can be processed by handling the special entries @ and # in the driving loop, as explained in Section 7.5, Combining Marks. Conjoining jamos are considered separately in Section 7.6, Conjoining Jamos. In Table 2, the rows are labeled with the B class and the columns are labeled with the A class.'),
                    Paragraph(contents='Table 2. Example Pair Table'),
                    TableRow(contents='OP\ue000CL\ue000CP\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM\ue000WJ\ue000H2\ue000H3\ue000JL\ue000JV\ue000JT'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000@\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^'),
                    TableRow(contents='CL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CP\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='QU\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='NS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='EX\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='SY\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='PR\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='PO\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='NU\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='AL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ID\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IN\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HY\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BA\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BB\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='B2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000^\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ZW\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CM\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='WJ\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='H2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='H3\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='JV\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='JT\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='Table 2 uses the following notation:'),
                    Paragraph(contents='Resolved outside the pair table: AI, BK, CB, CR, LF, NL, SA, SG, SP, XX'),
                    Paragraph(contents='^ denotes a prohibited break: B ^ A is equivalent to B SP* × A; in other words, never break before A and after B, even if one or more spaces intervene.'),
                    Paragraph(contents='% denotes an indirect break opportunity: B % A is equivalent to B × A and B SP+ ÷ A; in other words, do not break before A, unless one or more spaces follow B.'),
                    Paragraph(contents='@ denotes a prohibited break for combining marks: B @ A is equivalent to B SP* × A, where A is of class CM. For more details, see Section 7.5, Combining Marks.'),
                    Paragraph(contents='# denotes an indirect break opportunity for combining marks following a space: B # A is equivalent to (B × A and B SP+ ÷ A), where A is of class CM.'),
                    Paragraph(contents='_ denotes a direct break opportunity (equivalent to ÷ as defined above).'),
                    Paragraph(contents='Note: In the online edition, hovering over the cells in a browser with tool-tips enabled reveals the rule number that determines the breaking status for the pair in question. When a pair must be tested both with and without intervening spaces, multiple rules are given. Hovering over a line breaking class name gives a representative member of the class and additional information. Clicking on any line break class name anywhere in the document jumps to the definition.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two sections provide sample code [Code14] that demonstrates how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the line breaking classes CR, LF, and NL need to be added. They have been omitted here for brevity, but see Section 7.7, Explicit Breaks.'),
                    Paragraph(contents='The sample code assumes that the line breaking classes AI, CB, SG, and XX have been resolved according to rule LB1 as part of initializing the pcls array. The code further assumes that the complex line break analysis for characters with line break class SA is handled in function findComplexBreak, for which the following placeholder is given:'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    // cls - resolved line break class, may differ from pcls[0]'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line breaking opportunities (output)'),
                    CodeLine(contents='    // cch - remaining length of input '),
                    CodeLine(contents='    int '),
                    CodeLine(contents='   findComplexBreak(enum break_class cls, enum break_class *pcls,'),
                    CodeLine(contents='                             enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='            if (!cch)'),
                    CodeLine(contents='                return 0;'),
                    CodeLine(contents='            for (int ich = 1; ich < cch; ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='                // .. do complex break analysis here'),
                    CodeLine(contents='                // and report any break opportunities in pbrk ..'),
                    CodeLine(contents=''),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK; // by default, no break'),
                    CodeLine(contents=''),
                    CodeLine(contents='                if (pcls[ich] != SA)'),
                    CodeLine(contents='                    break;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='            return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The entries in the example pair table correspond to the following enumeration. For diagnostic purposes, the sample code returns these values to indicate not only the location but also the type of rule that triggered a given break opportunity.'),
                    CodeLine(contents='    enum break_action {'),
                    CodeLine(contents='           DIRECT_BRK = 0,             // _ in table'),
                    CodeLine(contents='           INDIRECT_BRK,               // % in table'),
                    CodeLine(contents='           COMBINING_INDIRECT_BRK,     // # in table'),
                    CodeLine(contents='           COMBINING_PROHIBITED_BRK,   // @ in table'),
                    CodeLine(contents='           PROHIBITED_BRK,             // ^ in table'),
                    CodeLine(contents='           EXPLICIT_BRK };             // ! in rules'),
                    Paragraph(contents='Because the contexts involved in indirect breaks of the form B SP* A are of indefinite length, they need to be handled explicitly in the driver code. The sample implementation of a findLineBrk function below remembers the line break class for the last characters seen, but skips any occurrence of SP without resetting this value. Once character A is encountered, a simple lookback is used to see if it is preceded by a SP. This lookback is necessary only if B % A. To handle the case of a SP following sot, it is necessary to set cls to a dummy value. Using WJ gives the correct result and, as required, is unaffected by any tailoring.'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable) (returned value)'),
                    CodeLine(contents="    // cls - current resolved line break class for 'before' character (variable)"),
                    CodeLine(contents=''),
                    CodeLine(contents='    int'),
                    CodeLine(contents='    findLineBrk(enum break_class *pcls, enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='        if (!cch) return 0;'),
                    CodeLine(contents=''),
                    CodeLine(contents="        enum break_class cls = pcls[0];   // class of 'before' character"),
                    CodeLine(contents=''),
                    CodeLine(contents='        // treat SP at start of input as if it followed a WJ'),
                    CodeLine(contents='        if (cls == SP)'),
                    CodeLine(contents='            cls = WJ;'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='        for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // to handle explicit breaks, replace code from "for" loop condition'),
                    CodeLine(contents='            // above to comment below by code given in Section 7.7'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle spaces explicitly'),
                    CodeLine(contents='            if (pcls[ich] == SP) {'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;   // apply rule LB7: × SP'),
                    CodeLine(contents='                continue;                       // do not update cls'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle complex scripts in a separate function'),
                    CodeLine(contents='            if (pcls[ich] == SA) {'),
                    CodeLine(contents='                ich += findComplexBreak(cls, &pcls[ich-1], &pbrk[ich-1],'),
                    CodeLine(contents='                           cch - (ich-1));'),
                    CodeLine(contents='                if (ich < cch)'),
                    CodeLine(contents='                    cls = pcls[ich];'),
                    CodeLine(contents='                continue;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // lookup pair table information in brkPairs[before, after];'),
                    CodeLine(contents='            enum break_action brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents=''),
                    CodeLine(contents='            pbrk[ich-1] = brk;                     // save break action in output array'),
                    CodeLine(contents=''),
                    CodeLine(contents='            if (brk == INDIRECT_BRK) {             // resolve indirect break'),
                    CodeLine(contents='                if (pcls[ich - 1] == SP)           // if context is A SP + B'),
                    CodeLine(contents='                    pbrk[ich-1] = INDIRECT_BRK;    //       break opportunity'),
                    CodeLine(contents='                else                               // else'),
                    CodeLine(contents='                    pbrk[ich-1] = PROHIBITED_BRK;  //       no break opportunity'),
                    CodeLine(contents='            } '),
                    CodeLine(contents='            '),
                    CodeLine(contents='            // handle breaks involving a combining mark (see Section 7.5)'),
                    CodeLine(contents=''),
                    CodeLine(contents="            // save cls of 'before' character (unless bypassed by 'continue')"),
                    CodeLine(contents='            cls = pcls[ich];'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        pbrk[ich-1] = EXPLICIT_BRK;                // always break at the end'),
                    CodeLine(contents=''),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The function returns all of the break opportunities in the array pointed to by pbrk, using the values in the table. On return, pbrk[ich] is the type of break after the character at index ich.'),
                    Paragraph(contents='A common optimization in implementation is to determine only the nearest line break opportunity prior to the position of the first character that would cause the line to become overfull. Such an optimization requires backward traversal of the string instead of forward traversal as shown in the sample code.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='The implementation of combining marks in the pair table presents an additional complication because rule LB9 defines a context X CM* that is of arbitrary length. There are some similarities to the way contexts of the form B SP* A that are involved in indirect breaks are evaluated. However, contexts of the form SP CM* or CM* SP also need to be handled, while rule LB10 requires some CM* to be treated like AL.'),
                    Paragraph(contents='Implementing LB10. This rule can be reflected directly in the example pair table in Table 2 by assigning the same values in the row marked CM as in the row marked AL. Incidentally, this is equivalent to rewriting the rules LB11–LB31 by duplicating any expression that contains an AL on its left hand side with another expression that contains a CM. For example, in LB22'),
                    Formula(contents='AL × IN'),
                    Paragraph(contents='would become'),
                    Formula(contents='AL × IN CM × IN'),
                    Paragraph(contents='Rewriting these rules as indicated here (and then deleting LB10) is fully equivalent to the original rules because rule LB9 already accounts for all CMs that are not supposed to be treated like AL. For a complete description see Example 9 in Section 8.2, Examples of Customization.'),
                    Paragraph(contents='Implementing LB9. Rule LB9 is implemented in the example pair table in Table 2 by assigning a special # entry in the column marked CM for all rows referring to a line break class that allows a direct or indirect break after itself. (Note that the intersection between the row for class ZW and the column for class CM must be assigned “_” because of rule LB8.) The # corresponds to a break_action value of COMBINING_INDIRECT_BREAK, which triggers the following code in the sample implementation:'),
                    CodeLine(contents='    else if (brk == COMBINING_INDIRECT_BRK) {    // resolve combining mark break'),
                    CodeLine(contents='        pbrk[ich-1] = PROHIBITED_BRK;             // do not break before CM'),
                    CodeLine(contents='        if (pcls[ich-1] == SP){'),
                    CodeLine(contents='            #ifndef LEGACY_CM                    // new: space is not a base'),
                    CodeLine(contents='                pbrk[ich-1] = COMBINING_INDIRECT_BRK;    // apply rule SP ÷ '),
                    CodeLine(contents='            #else'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;      // legacy: keep SP CM together'),
                    CodeLine(contents='                if (ich > 1)'),
                    CodeLine(contents='                    pbrk[ich-2] = ((pcls[ich - 2] == SP) ?'),
                    CodeLine(contents='                                                  INDIRECT_BRK : DIRECT_BRK);'),
                    CodeLine(contents='            #endif'),
                    CodeLine(contents='        } else                                   // apply rule LB9: X CM * -> X'),
                    CodeLine(contents='            continue;                            // do not update cls'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    Paragraph(contents='When handling a COMBINING_INDIRECT_BREAK, the last remembered line break class in variable cls is not updated, except for those cases covered by rule LB10. A tailoring of rule LB9 that keeps the last SPACE character preceding a combining mark, if any, and therefore breaks before that SPACE character can easily be implemented as shown in the sample code. (See Section 9.2, Legacy Support for Space Character as Base for Combining Marks.)'),
                    Paragraph(contents='Any rows in Table 2 for line break classes that prohibit breaks after must be handled explicitly. In the example pair table, these are assigned a special entry “@”, which corresponds to a special break action of COMBINING_PROHIBITED_BREAK that triggers the following code:'),
                    CodeLine(contents='    else if (brk == COMBINING_PROHIBITED_BRK) { // this is the case OP SP* CM'),
                    CodeLine(contents='        pbrk[ich-1] = COMBINING_PROHIBITED_BRK;  // no break allowed'),
                    CodeLine(contents='        if (pcls[ich-1] != SP)'),
                    CodeLine(contents='            continue;                          // apply rule LB9: X CM* -> X'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The only line break class that unconditionally prevents breaks across a following SP is OP. The preceding code fragment ensures that OP CM is handled according to rule LB9 and OP SP CM is handled as OP SP AL according to rule LB10.'),
                    Heading(level=3, contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='For Korean Syllable Blocks, the information in rule LB26 is represented by a simple pair table shown in Table 3.'),
                    Paragraph(contents='Table 3. Korean Syllable Block Pair Table'),
                    TableRow(contents='H2\ue000H3\ue000JL\ue000JV\ue000JT'),
                    TableRow(contents='H2\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='H3\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JL\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='JV\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='JT\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='When constructing a pair table such as Table 2, this pair table for Korean syllable blocks in Table 3 is merged with the main pair table for all other line break classes by adding the cells from Table 3 beyond the lower-right corner of the main pair table. Next, according to rule LB27, any empty cells in the new rows are filled with the same values as in the existing row for class ID, and any empty cells for the new columns are filled with the same values as in the existing column for class ID. The resulting merged table is shown in Table 2.'),
                    Heading(level=3, contents='7.7 Explicit Breaks'),
                    Paragraph(contents='Handling explicit breaks is straightforward in the driver code, although it does clutter up the loop condition and body of the loop a bit. For completeness, the following sample shows how to change the loop condition and add if statements—both before and inside the loop—that handle BK, NL, CR, and LF. Because NL and BK behave identically by default, this code can be simplified in implementations where the character classification is changed so that BK will always be substituted for NL when assigning the line break class. Because this optimization does not change the result, it is not considered a tailoring and does not affect conformance.'),
                    CodeLine(contents='    // handle case where input starts with an LF'),
                    CodeLine(contents='    if (cls == LF)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // treat initial NL like BK'),
                    CodeLine(contents='    if (cls == NL)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // loop over all pairs in the string up to a hard break or CRLF pair'),
                    CodeLine(contents='    for (int ich = 1; (ich < cch) && (cls != BK) && (cls != CR || pcls[ich] == LF); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle BK, NL and LF explicitly'),
                    CodeLine(contents='        if (pcls[ich] == BK ||pcls[ich] == NL ||  pcls[ich] == LF)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = BK;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle CR explicitly'),
                    CodeLine(contents='        if(pcls[ich] == CR)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = CR;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle spaces explicitly...'),
                    CodeLine(contents=''),
                    CodeLine(contents='    '),
                    Heading(level=2, contents='8 Customization'),
                    Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                    Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                    Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                    Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how to customize the pair table implementation of the line breaking algorithm for these tailorings.'),
                    Heading(level=3, contents='8.1 Types of Tailoring'),
                    Paragraph(contents='There are three principal ways of tailoring the sample pair table implementation of the line breaking algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to permanently overriding some of the rules in Section 6, Line Breaking Algorithm.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions This is a dynamic equivalent of the preceding. Instead of changing the values for the pair intersection directly in the table, they are labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be enabled at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real-world implementation of a pair table-based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. That implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=3, contents='8.2 Examples of Customization'),
                    Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm. Section 7.4, Sample Code, outlines such an approach in which the interface to the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the linebreaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersections of ID/ID, AL/ID, and ID/AL are affected. For alphabetic style line breaking, breaks for these cases require space; for ideographic style line breaking, these cases do not require spaces. Therefore, the implementation defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given text.'),
                    Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. In this case the intersections of NU/NU, NU/AL, AL/AL, and AL/NU are affected.'),
                    Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by changing the classification of the Kana small characters from NS to ID as needed.'),
                    Paragraph(contents='Example 6. Some implementations may wish to tailor the line breaking algorithm to resolve grapheme clusters according to Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], as a first stage. Generally, the line breaking algorithm does not create line break opportunities within default grapheme clusters; therefore such a tailoring would be expected to produce results that are close to those defined by the default algorithm. However, if such a tailoring is chosen, characters that are members of line break class CM but not part of the definition of default grapheme clusters must still be handled by rules LB9 and LB10, or by some additional tailoring.'),
                    Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                    Formula(contents='( PR | PO ) ? ( OP | HY ) ? NU (NU | SY | IS) * CL ? ( PR | PO ) ?'),
                    Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                    Paragraph(contents='Regex-Number: Do not break numbers.'),
                    Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                    Formula(contents='( OP | HY ) × NU'),
                    Formula(contents='NU × (NU | SY | IS)'),
                    Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL)'),
                    Formula(contents='NU (NU | SY | IS)* CL? × (PO | PR)'),
                    Paragraph(contents='This customized rule uses extended contexts that cannot be represented in a pair table. In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                    Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                    Formula(contents='[^NU] × CL'),
                    Formula(contents='× EX'),
                    Formula(contents='[^NU] × IS'),
                    Formula(contents='[^NU] × SY'),
                    Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                    Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                    Heading(level=2, contents='9 Implementation Notes'),
                    Paragraph(contents='This section provides additional notes on implementation issues.'),
                    Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                    Paragraph(contents='To replace rule LB9, terms of the form'),
                    Paragraph(contents='B # A'),
                    Paragraph(contents='B SP* # A'),
                    Paragraph(contents='B #'),
                    Paragraph(contents='B SP* #'),
                    Paragraph(contents='are replaced by terms of the form'),
                    Paragraph(contents='B CM* # A'),
                    Paragraph(contents='B CM* SP* # A'),
                    Paragraph(contents='B CM* #'),
                    Paragraph(contents='B CM* SP* #'),
                    Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                    Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                    Paragraph(contents='Replace LB10 by the following rule:'),
                    Paragraph(contents='× CM'),
                    Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                    Paragraph(contents='(AL | NU) × OP'),
                    Paragraph(contents='add another rule'),
                    Paragraph(contents='CM × OP.'),
                    Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                    Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='As stated in [Unicode5.2], Section 7.9, Combining Marks, combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                    Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                    Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID.'),
                    Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                    Heading(level=2, contents='10 Testing'),
                    Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2 Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                    Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                    Paragraph(contents='Note:The break opportunities produced by an implementation of the rules of Section 6, Line Breaking Algorithm differ in certain cases from those produced by the pair table included in Section 7, Pair Table-Based Implementation. The differences occur with sequences like ZW SP CL. The test data file matches the results expected of a rule based implementation. The inconsistencies between the two will be addressed in the next revision of this document.'),
                    Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                    Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                    Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                    Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                    Paragraph(contents='1. The rules are cast into a more regex-style.'),
                    Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                    Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                    Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                    Paragraph(contents='• 13.01) [^NU] × CL'),
                    Paragraph(contents='• 13.02) × EX'),
                    Paragraph(contents='• ...'),
                    Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                    Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                    Paragraph(contents='Table 4. Numbering of Test Rules'),
                    TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                    TableRow(contents='LB2\ue0000.2\ue000start of text'),
                    TableRow(contents='LB3\ue0000.3\ue000end of text'),
                    TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                    TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                    TableRow(contents='LB31\ue000999\ue000÷ any'),
                    Heading(level=2, contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                    Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                    TableRow(contents='5.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                    TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                    TableRow(contents='LB2\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                    TableRow(contents='LB3\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                    TableRow(contents='LB4\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB5\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB6\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                    TableRow(contents='LB7\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                    TableRow(contents='LB8\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                    TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                    TableRow(contents='LB9\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB10\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                    TableRow(contents='LB11\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB13\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                    TableRow(contents='LB14\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                    TableRow(contents='LB15\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                    TableRow(contents='LB16\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                    TableRow(contents='LB17\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                    TableRow(contents='LB18\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                    TableRow(contents='LB19\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                    TableRow(contents='LB20\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                    TableRow(contents='LB21\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                    TableRow(contents='LB22\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                    TableRow(contents='LB23\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                    TableRow(contents='LB24\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='LB25\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                    TableRow(contents='LB26\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB27\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB28\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                    TableRow(contents='LB29\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB31\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                    Heading(level=2, contents='References'),
                    Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='Asmus Freytag is the author of the initial version and has added to and maintained the text of this annex.'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                    Heading(level=2, contents='Modifications'),
                    Heading(level=3, contents='Change History'),
                    Paragraph(contents='For details of the change history, see the online copy of this annex at http://www.unicode.org/reports/tr14/.'),
                    Heading(level=3, contents='Change History'),
                    Paragraph(contents='The following documents the changes introduced by each revision.'),
                    Heading(level=4, contents='Revision 24:'),
                    Paragraph(contents='• Reissued for Unicode 5.2.0.'),
                    Paragraph(contents='• Added class CP, reintroduced rule LB30, adjusted other rules for class CP.'),
                    Paragraph(contents='• In section 5.1, clarified that the lists of characters for each property contain representative characters, and are not necessarily complete.'),
                    Paragraph(contents='• Unassigned code points in CJK regions default to class ID.'),
                    Paragraph(contents='• Added Tai Tham, Myanmar Extended-A and Tai Viet blocks to class SA.'),
                    Paragraph(contents='• Brought descriptive names of the character classes into closer alignment with the Unicode Line Break character property values.'),
                    Paragraph(contents='• Small edits for improved clarity, document style.'),
                    Paragraph(contents='Revision 23 being a proposed update, only changes between revisions 22 and 24 are noted here.'),
                    Heading(level=4, contents='Revision 22:'),
                    Paragraph(contents='• Updated for Version 5.1.0.'),
                    Paragraph(contents='• Added 2E18, INVERTED INTERROBANG, to class OP.'),
                    Paragraph(contents='• Added 2064, INVISIBLE PLUS, to class AL.'),
                    Paragraph(contents='• Added 2E00..2E01, 2E06..2E08, 2E0B to class QU.'),
                    Paragraph(contents='• Removed LB30, to correct regression for U+3002 IDEOGRAPHIC FULL STOP'),
                    Paragraph(contents='• Add Example 9 to Section 8, Customization.'),
                    Paragraph(contents='• Substantial revisions to Section 4, Conformance.'),
                    Paragraph(contents='• Section 5.7, Word Separators, added.'),
                    Paragraph(contents='• Section 10, Testing, added.'),
                    Paragraph(contents='• Renumber rules for consistency: 12a -> 12; 12b -> 12a'),
                    Paragraph(contents='• Added 02DF, MODIFIER LETTER CROSS ACCENT, to class BB.'),
                    Paragraph(contents='• Added discussion for 202F NARROW NO-BREAK SPACE and 180E MONGOLIAN VOWEL SEPARATOR'),
                    Paragraph(contents='• Corrected typos in LB13 and LB16'),
                    Paragraph(contents='• Added characters introduced with Unicode 5.1 to the lists associated with the line break properties.'),
                    Paragraph(contents='• Added Section 5.2 on the special handling of hyphens. Edited Section 3 for clarity.'),
                    Paragraph(contents='• Improved delineation between normative and informative information.'),
                    Paragraph(contents='• Changed from EX to IS'),
                    Paragraph(contents='• 060C ( ، ) ARABIC COMMA'),
                    Paragraph(contents='• Changed from EX to PO'),
                    Paragraph(contents='• 066A ( ٪ ) ARABIC PERCENT SIGN'),
                    Paragraph(contents='• Changed from AI to OP'),
                    Paragraph(contents='• 00A1 ( ¡ ) INVERTED EXCLAMATION MARK'),
                    Paragraph(contents='• 00BF ( ¿ ) INVERTED QUESTION MARK'),
                    Paragraph(contents='• Changed from BA to EX'),
                    Paragraph(contents='• 1802 ( ᠂ ) MONGOLIAN COMMA'),
                    Paragraph(contents='• 1803 ( ᠃ ) MONGOLIAN FULL STOP'),
                    Paragraph(contents='• 1808 ( ᠈ ) MONGOLIAN MANCHU COMMA'),
                    Paragraph(contents='• 1809 ( ᠉ ) MONGOLIAN MANCHU FULL STOP'),
                    Paragraph(contents='• 2CF9 ( ⳹ ) COPTIC OLD NUBIAN FULL STOP'),
                    Paragraph(contents='• 2CFE ( ⳾ ) COPTIC FULL STOP'),
                    Paragraph(contents='• Changed from BA to AL'),
                    Paragraph(contents='• 1A1E ( ᨞ ) BUGINESE PALLAWA'),
                    Paragraph(contents='• Changed from AL to BB'),
                    Paragraph(contents='• 1FFD ( ´ ) GREEK OXIA'),
                    Paragraph(contents='• Added a note on lack of canonical equivalence for the definition of ambiguous characters.'),
                    Paragraph(contents='• Corrected typos in the sample source code.'),
                    Paragraph(contents='• Split rule LB12 to accommodate Polish and Portuguese hyphenation.'),
                    Paragraph(contents='Revisions 20 and 21 being a proposed update, only changes between revisions 19 and 22 are noted here.'),
                    Heading(level=4, contents='Revision 19:'),
                    Paragraph(contents='• Changed 000B from CM to BK, changed 035C from CM to GL.'),
                    Paragraph(contents='• Changed 17D9 from NS to AL. 203D, 2047..2049 from AL to NS.'),
                    Paragraph(contents='• Corrected listing of NS property to match the data file to remove 17D8 and 17DA.'),
                    Paragraph(contents='• The data file has been corrected to match the listing of the BA property to include 1735 and 1736, also changed 05BE and 103D0 from AL to BA.'),
                    Paragraph(contents='• Changed the brackets 23B4.23B6 to AL.'),
                    Paragraph(contents='• Updated the SA property to make it more generic, includes changing many characters from CM to SA.'),
                    Paragraph(contents='• Reflected new characters'),
                    Paragraph(contents='• Made several text changes for clarifications, including reworded the intro to Section 6.'),
                    Paragraph(contents='• Added Section 9.'),
                    Paragraph(contents='• Restated the conformance clauses and reorganized the algorithm into a tailorable and a non-tailorable part; this affects text in Sections 4, 5, and 6.'),
                    Paragraph(contents='• Removed redundant term PR x HY from rule 18 and rule into new LB24 and LB26 to provide better granularity for tailoring,'),
                    Paragraph(contents='• Moved rule 11b and 13 above rule 8 (new LB13), restating rule 13 (new LB12) to preserve its effect in the new location.'),
                    Paragraph(contents='• Added new rule LB30 to handle words like “person(s)”.'),
                    Paragraph(contents='• Renumbered the rules.'),
                    Paragraph(contents='• Extensive copy-editing as part of Unicode 5.0 publication.'),
                    Paragraph(contents='Revision 18 being a proposed update, only changes between revisions 17 and 19 are noted here.'),
                    Heading(level=4, contents='Revision 17:'),
                    Paragraph(contents='• Significantly revised the line break classes for Tibetan, as well as Mongolian and Arabic Punctuation.'),
                    Paragraph(contents='• Added section 5.6 on Tibetan and section 7.7 on handling explicit breaks.'),
                    Paragraph(contents='• Added line break class assignments for Unicode 4.1 characters.'),
                    Paragraph(contents='• Significantly revised the line break class assignments for danda characters and made it consistent across scripts.'),
                    Paragraph(contents='• LB6: Replaced by new rules 18b and 18c, using new classes JL, JV, JT, H2, and H3.'),
                    Paragraph(contents='• LB7a: Deprecated rule 7a because SPACE as base character for standalone combining marks is deprecated.'),
                    Paragraph(contents='• LB7b: Revised 7b and section 7.5 as well as Table 2 to match the deprecation of rule 7a.'),
                    Paragraph(contents='• LB7b: Clarified that this rule does not apply to SP.'),
                    Paragraph(contents='• LB11a: Added a missing SP * to make the formula match the rule.'),
                    Paragraph(contents='• LB18b: Removed the existing rule 18b because it was redundant.'),
                    Paragraph(contents='• Corrected an erratum on revision 14 by splitting GL from WJ in rule 11b and moving to a new rule 13.'),
                    Paragraph(contents='• Updated the pair table and sample code to match the changes in the rules.'),
                    Paragraph(contents='• Updated the regular expression for numbers.'),
                    Paragraph(contents='• Added several notes on implementation techniques.'),
                    Paragraph(contents='• Moved all suggested tailorings from the rules section to the examples in section 8.2.'),
                    Paragraph(contents='Revision 16 being a proposed update, only changes between revisions 17 and 15 are noted here.'),
                    Heading(level=4, contents='Revision 15:'),
                    Paragraph(contents='• LB19b: Added new rule 19b.'),
                    Paragraph(contents='• Changed line breaking class: combining double diacritics from CM to GL, 037A and 2126 to match their canonical equivalents, 2140 corrected to AL, Arabic numerical separators from AL to NU, many alphabetic characters that are EAW=Ambiguous from AI to AL to better reflect current practice, remaining circled numbers and letters from AL to AI for consistency.'),
                    Paragraph(contents='• Added a note on the behavior of U+200B and U+3000 when lines are justified.'),
                    Paragraph(contents='• Reconciled the data file and description of line breaking classes in section 5.'),
                    Paragraph(contents='• Reconciled the rules and pair table implementation of the algorithm.'),
                    Paragraph(contents='• Updated the text of the conformance statement in section 4.'),
                    Paragraph(contents='• Added section 5.5 on use of double hyphen.'),
                    Paragraph(contents='• Updated styles and table formatting.'),
                    Paragraph(contents='• Minor edits throughout.'),
                    Heading(level=4, contents='Revision 14:'),
                    Paragraph(contents='• Added new line breaking classes NL and WJ to better support NEL and Word Joiner.'),
                    Paragraph(contents='• Deprecated the use of class SG.'),
                    Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and 7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                    Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                    Paragraph(contents='• Clarified the behavior of SHY and MONGOLIAN TODO SOFT HYPHEN, as well as WJ and ZWNBSP.'),
                    Paragraph(contents='• Added a new subsection 5.4 on SOFT HYPHEN and a new subsection 7.6 on conjoining jamos.'),
                    Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                    Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                    Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                    Paragraph(contents='• Expanded the introduction in Section 3.'),
                    Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                    Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                    Paragraph(contents='Revision 11 being a proposed update, only changes between revisions 12 and 14 are noted here.'),
                    Heading(level=4, contents='Revision 12:'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added Word joiner to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the data file. Only characters whose LB class differs from those of characters with related General_Category are noted explicitly in this text.'),
                    Paragraph(contents='Revision 11, being a proposed update, only changes between revisions 10 and 12 are noted here.]'),
                    Heading(level=4, contents='Revision 10:'),
                    Paragraph(contents='• Changed header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Heading(level=4, contents='Revision 9:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX.'),
                    Paragraph(contents='• LB7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode4.0].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair table entry PR % ID'),
                    Paragraph(contents='• Reworked Section 7.5'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull)'),
                    Heading(level=4, contents='Revision 8:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to Table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX because the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                    Heading(level=4, contents='Revision 7:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Heading(level=4, contents='Revision 6:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='No change history is available for earlier revisions.'),
                    Paragraph(contents='Copyright © 1998-2009 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                    Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(6, 0, 0): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                    TableRow(contents='Version\ue000Unicode 6.0.0'),
                    TableRow(contents='Editors\ue000Andy Heninger (andy.heninger@gmail.com)'),
                    TableRow(contents='Date\ue0002010-09-27'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-26.html'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-24.html'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                    TableRow(contents='Latest Proposed Update\ue000http://www.unicode.org/reports/tr14/proposed.html'),
                    TableRow(contents='Revision\ue00026'),
                    Heading(level=4, contents='Summary'),
                    Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display. A model implementation using pair tables is also provided.'),
                    Heading(level=4, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                    Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                    Heading(level=4, contents='Contents'),
                    Paragraph(contents='1 Overview and Scope'),
                    Paragraph(contents='2 Definitions'),
                    Paragraph(contents='3 Introduction'),
                    Paragraph(contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='4 Conformance'),
                    Paragraph(contents='4.1 Conformance Requirements'),
                    Paragraph(contents='5 Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Dictionary Usage'),
                    Paragraph(contents='5.3 Use of Hyphen'),
                    Paragraph(contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='5.7 Word Separator Characters'),
                    Paragraph(contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Pair Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='7.7 Explicit Breaks'),
                    Paragraph(contents='8 Customization'),
                    Paragraph(contents='8.1 Types of Tailoring'),
                    Paragraph(contents='8.2 Examples of Customization'),
                    Paragraph(contents='9 Implementation Notes'),
                    Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='10 Testing'),
                    Paragraph(contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='References'),
                    Paragraph(contents='Acknowledgments'),
                    Paragraph(contents='Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                    Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                    Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                    Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Three main sections follow:'),
                    Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                    Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='• Section 7, Pair Table-Based Implementation, describes an efficient pair table-based implementation of the algorithm.'),
                    Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                    Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                    Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                    Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                    Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard [Unicode]. The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard. All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard.'),
                    Paragraph(contents='LD1 Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='LD2 Line Break: The position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='LD3 Line Break Opportunity: A place where a line is allowed to end.'),
                    Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                    Paragraph(contents='LD4 Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                    Paragraph(contents='LD5 Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                    Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                    Paragraph(contents='LD6 Line Breaking Class: A class of characters with the same line breaking property value.'),
                    Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                    Paragraph(contents='LD7 Mandatory Break: A line must break following a character that has the mandatory break property.'),
                    Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                    Paragraph(contents='LD8 Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                    Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='LD9 Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                    Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                    Paragraph(contents='• An indirect break is indicated in the pair table in Table 2 as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though space characters are not shown in the pair table, an indirect break can occur only if one or more spaces follow B. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                    Paragraph(contents='LD10 Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                    Paragraph(contents='• A prohibited break is indicated in the pair table in Table 2 as B ^ A, where B is the character class of the character before and A is the character class of the character after the break, and the optional space characters are not shown. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='LD11 Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                    Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                    Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                    Paragraph(contents='Table 1. Line Breaking Classes'),
                    TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                    TableRow(contents='Non-tailorable Line Breaking Classes'),
                    TableRow(contents='BK\ue000Mandatory Break\ue000NL, PS\ue000Cause a line break (after)'),
                    TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                    TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                    TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                    TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                    TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                    TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                    TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                    TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                    TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                    TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                    TableRow(contents='NS\ue000Nonstarter\ue000small kana\ue000Allow only indirect line breaks before'),
                    TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                    TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                    TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                    TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                    TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                    TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                    TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Introduction'),
                    Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                    Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                    Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                    Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                    Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                    Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                    Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                    Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                    Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                    Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                    Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                    Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                    Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                    Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                    Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [Bidi]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                    Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                    Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                    Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                    Heading(level=3, contents='4.1 Conformance Requirements'),
                    Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                    Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                    Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                    Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                    Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                    Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                    Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into two algorithms defined in Section 6, Line Breaking Algorithm, and Section 7, Pair Table-Based Implementation. These sections describe workable default line breaking methods. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences.'),
                    Heading(level=4, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a tab-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                    Heading(level=4, contents='Future Updates'),
                    Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                    Paragraph(contents='(A)—the class allows a break opportunity after in specified contexts'),
                    Paragraph(contents='(XA)—the class prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='(B)—the class allows a break opportunity before in specified contexts'),
                    Paragraph(contents='(XB)—the class prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='(P)—the class allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='(XP)—the class prevents a break opportunity for a pair of same characters'),
                    Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Some characters that ordinarily act like alphabetic or symbol characters (which have the AL line breaking class) are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                    Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [EAW].'),
                    Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                    Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                    Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                    TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                    TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                    Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                    Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                    Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='Except as listed explicitly below as part of another line breaking class, and except as assigned class AI or ID based on East Asian Width, this class contains the following characters:'),
                    Paragraph(contents='ALPHABETIC—all remaining characters of General Categories Lu, Ll, Lt, Lm, and Lo SYMBOLS—all remaining characters of General Categories Sm, Sk, and So NON-DECIMAL NUMBERS—all remaining characters of General Categories Nl, and No PUNCTUATION—all remaining characters of General Categories Pc, Pd, and Po'),
                    Paragraph(contents='Plus additional characters, including:'),
                    TableRow(contents='0600..0603\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAFHA'),
                    TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                    TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                    TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                    Paragraph(contents='These characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                    Heading(level=3, contents='BA: Break After (A)'),
                    Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                    Heading(level=4, contents='Breaking Spaces'),
                    Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN SPACE'),
                    TableRow(contents='2003\ue000EM SPACE'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                    Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                    Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                    Paragraph(contents='See the ID property for U+3000 IDEOGRAPHIC SPACE. For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                    Heading(level=4, contents='Tabs'),
                    TableRow(contents='0009\ue000TAB'),
                    Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    Heading(level=4, contents='Conditional Hyphens'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=4, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Visible Word Dividers'),
                    Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                    TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                    TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                    Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                    Heading(level=4, contents='Historic Word Separators'),
                    Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                    Paragraph(contents='Examples of Historic Word Separators include:'),
                    TableRow(contents='16EB\ue000RUNIC SINGLE DOT PUNCTUATION'),
                    TableRow(contents='16EC\ue000RUNIC MULTIPLE DOT PUNCTUATION'),
                    TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                    TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                    TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                    TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                    TableRow(contents='205B\ue000FOUR DOT MARK'),
                    TableRow(contents='205D\ue000TRICOLON'),
                    TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                    TableRow(contents='2E19\ue000PALM BRANCH'),
                    TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                    TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                    TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                    TableRow(contents='2E2D\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='2E30\ue000RING POINT'),
                    TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                    TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                    TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                    TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                    TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                    TableRow(contents='1091F\ue000PHOENICIAN WORD DIVIDER'),
                    TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                    Heading(level=4, contents='Dandas'),
                    Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                    Paragraph(contents='Examples of dandas include:'),
                    TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                    TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                    TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                    TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                    TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                    TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                    TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                    TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                    TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                    TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                    TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                    TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                    TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                    TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                    TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                    TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                    Heading(level=4, contents='Tibetan'),
                    TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                    TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                    TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                    TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                    TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                    TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                    Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Other Terminating Punctuation'),
                    Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                    TableRow(contents='1804\ue000MONGOLIAN COLON'),
                    TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                    TableRow(contents='1B5A\ue000BALINESE PANTI'),
                    TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                    TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                    TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                    TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                    TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                    TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                    TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                    TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                    TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                    TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                    TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                    TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                    TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                    TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                    TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                    TableRow(contents='2E17\ue000OBLIQUE DOUBLE HYPHEN'),
                    TableRow(contents='A60D\ue000VAI COMMA'),
                    TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                    TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                    TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                    TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                    TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                    TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                    TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                    TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                    TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                    Heading(level=3, contents='BB: Break Before (B)'),
                    Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                    Paragraph(contents='Examples of BB characters are described in the following sections.'),
                    Heading(level=4, contents='Dictionary Use'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    TableRow(contents='1FFD\ue000GREEK OXIA'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                    TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                    Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                    Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                    TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                    TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                    TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                    TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                    TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                    TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                    TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                    TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                    TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                    TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                    TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                    TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                    TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                    Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Mongolian'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                    Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                    Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                    TableRow(contents='000C\ue000FORM FEED (FF)'),
                    TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                    Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR (LS)'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. This is similar to HTML <BR>.'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR (PS)'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LS, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                    Heading(level=4, contents='Newline Function (NLF)'),
                    Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                    Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                    Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                    Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                    Heading(level=3, contents='CL: Close Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                    Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                    Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                    TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                    Heading(level=4, contents='Combining Characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                    Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 No-Break SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                    Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                    Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                    Heading(level=4, contents='Control and Formatting Characters'),
                    Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                    Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                    Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                    TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                    TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                    Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                    Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                    Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                    Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                    TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                    TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                    TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                    TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                    TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                    TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following lists the characters of line break class GL with additional description.'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                    TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE. NARROW NO-BREAK SPACE is used in Mongolian. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in Section 13.2, Mongolian, of [Unicode].'),
                    Paragraph(contents='NARROW NO-BREAK SPACE is a narrow version of NO-BREAK SPACE, which has exactly the same line breaking behavior, but with a narrow display width. It is regularly used in Mongolian in certain grammatical contexts (before a particle), where it also influences the shaping of the glyphs for the particle. In Mongolian text, the NARROW NO-BREAK SPACE is typically displayed with one third the width of a normal space character.'),
                    Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                    Paragraph(contents='The MONGOLIAN VOWEL SEPARATOR is equivalent to a NARROW NO-BREAK SPACE in its line breaking behavior, but has different effects in controlling the shaping of its preceding and following characters. It constitutes a word-internal space and is typically displayed with half the width of a NARROW NO-BREAK SPACE.'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                    TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                    Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                    Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                    Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                    Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                    Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                    Heading(level=3, contents='HY: Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                    Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                    Heading(level=3, contents='ID: Ideographic (B/A)'),
                    Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                    TableRow(contents='2E80..2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                    TableRow(contents='30A0..30FF\ue000Katakana (except small characters)'),
                    TableRow(contents='3400..4DB5\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='4E00..9FFF\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='F900..FAD9\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490..A4CF\ue000YI RADICALS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF01..FF5A\ue000FULL WIDTH LATIN LETTERS and DIGITS'),
                    Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                    Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                    Paragraph(contents='The CJK blocks and regions in which unassigned characters default to line break class ID are:'),
                    TableRow(contents='CJK Unified Ideographs Extension A'),
                    TableRow(contents='CJK Unified Ideographs'),
                    TableRow(contents='CJK Compatibility Ideographs'),
                    TableRow(contents='CJK Unified Ideographs Extension B'),
                    TableRow(contents='CJK Unified Ideographs Extension C'),
                    TableRow(contents='CJK Unified Ideographs Extension D'),
                    TableRow(contents='CJK Compatibility Ideographs Supplement'),
                    TableRow(contents='SIP (Plane 2) outside of blocks'),
                    TableRow(contents='TIP (Plane 3) outside of blocks'),
                    Heading(level=4, contents='Korean'),
                    Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                    Heading(level=4, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    TableRow(contents='060C\ue000ARABIC COMMA'),
                    TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                    TableRow(contents='07F8\ue000NKO COMMA'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                    TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                    TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                    Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                    Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                    Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                    Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                    Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                    Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                    Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                    Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                    Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                    Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                    Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                    TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                    Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                    Heading(level=3, contents='NS: Nonstarters (XB)'),
                    Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include all Hiragana, Katakana, and Halfwidth Katakana “small” characters, plus many others, including:'),
                    TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='203D\ue000INTERROBANG'),
                    TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                    TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                    TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='303C\ue000MASU MARK'),
                    TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                    TableRow(contents='30FB..30FE\ue000KATAKANA MIDDLE DOT..KATAKANA VOICED ITERATION MARK'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='Note: Optionally, the NS restriction may be relaxed and some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles.'),
                    Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                    Heading(level=3, contents='NU: Numeric (XP)'),
                    Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                    Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                    TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                    TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                    Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                    Heading(level=3, contents='OP: Open Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                    TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                    TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                    TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                    Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                    Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                    Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                    Paragraph(contents='Examples of Postfix characters include'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='060B\ue000AFGHANI SIGN'),
                    TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='FDFC\ue000RIAL SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                    Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                    Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                    Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                    Heading(level=3, contents='QU: Quotation (XB/XA)'),
                    Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                    Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                    Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                    TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                    TableRow(contents='2E0B\ue000RAISED SQUARE'),
                    Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                    Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                    TableRow(contents='0E00..0E7F\ue000Thai'),
                    TableRow(contents='0E80..0EFF\ue000Lao'),
                    TableRow(contents='1000..109F\ue000Myanmar'),
                    TableRow(contents='1780..17FF\ue000Khmer'),
                    TableRow(contents='1950..197F\ue000Tai Le'),
                    TableRow(contents='1980..19DF\ue000New Tai Lue'),
                    TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                    TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                    TableRow(contents='AA80..AADF\ue000Tai Viet'),
                    Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                    Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                    Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                    Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                    Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                    Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                    Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                    Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                    Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                    Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                    Heading(level=3, contents='XX: Unknown (XP)'),
                    Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                    Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                    Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                    Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                    Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                    Heading(level=3, contents='5.2 Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                    Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                    Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                    Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                    Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                    Heading(level=3, contents='5.3 Use of Hyphen'),
                    Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                    Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                    Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                    Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                    Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                    Paragraph(contents='dispara- te'),
                    Paragraph(contents='and the latter as'),
                    Paragraph(contents='dispara- -te.'),
                    Paragraph(contents='A recommended practice is to type <SHY, NBHY> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                    Paragraph(contents='• Simply inserting a hyphen glyph'),
                    Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                    Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                    Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                    Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                    Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                    Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                    Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                    Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                    Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                    Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                    Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                    Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [Bidi] and Section 8.2, Arabic, of [Unicode].'),
                    Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                    Paragraph(contents='The sequence <SHY, NBHY> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                    Heading(level=3, contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                    Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                    Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                    Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                    Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                    Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                    Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                    Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                    Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                    Heading(level=3, contents='5.7 Word Separator Characters'),
                    Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                    Paragraph(contents='1. suppress the visible word separator'),
                    Paragraph(contents='The:quick:brown fox:jumped.'),
                    Paragraph(contents='2. break before the visible word separator'),
                    Paragraph(contents='The:quick:brown :fox:jumped.'),
                    Paragraph(contents='3. break after the visible word separator'),
                    Paragraph(contents='The:quick:brown: fox:jumped.'),
                    Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                    Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                    Paragraph(contents='A slightly simplified implementation of such an algorithm can be devised that uses a two-dimensional table to resolve break opportunities between pairs or characters. It is described in Section 7, Pair Table-Based Implementation.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1 Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                    Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                    Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                    Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, and ZW define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                    Heading(level=4, contents='Resolve line breaking classes:'),
                    Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                    Paragraph(contents='In the absence of such criteria, it is recommended that classes AI, SA, SG, and XX be resolved to AL, except that characters of class SA that have General_Category Mn or Mc be resolved to CM (see SA). Unresolved class CB is handled in rule LB20.'),
                    Heading(level=4, contents='Start and end of text:'),
                    Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                    Rule(contents='LB2 Never break at the start of text.'),
                    Formula(contents='sot ×'),
                    Rule(contents='LB3 Always break at the end of text.'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                    Rule(contents='LB4 Always break after hard line breaks.'),
                    Formula(contents='BK !'),
                    Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                    Formula(contents='CR × LF'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='NL !'),
                    Rule(contents='LB6 Do not break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF | NL )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB7 Do not break before spaces or zero width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                    Formula(contents='ZW SP* ÷'),
                    Heading(level=4, contents='Combining marks:'),
                    Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                    Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules.'),
                    Formula(contents='Treat X CM* as if it were X.'),
                    Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                    Rule(contents='LB10 Treat any remaining combining mark as AL.'),
                    Formula(contents='Treat any remaining CM as it if were AL.'),
                    Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                    Heading(level=4, contents='Word joiner:'),
                    Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                    Formula(contents='× WJ'),
                    Formula(contents='WJ ×'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12 Do not break after NBSP and related characters.'),
                    Formula(contents='GL ×'),
                    Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                    Formula(contents='[^SP BA HY] × GL'),
                    Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                    Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× CP'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                    Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                    Formula(contents='(CL | CP) SP* × NS'),
                    Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 SP* × B2'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB18 Break after spaces.'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB20 Break before and after unresolved CB.'),
                    Formula(contents='÷ CB'),
                    Formula(contents='CB ÷'),
                    Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                    Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents='LB22 Do not break between two ellipses, or between letters or numbers and ellipsis.'),
                    Formula(contents='AL × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents='Do not break alphanumerics.'),
                    Rule(contents='LB23 Do not break within ‘a9’, ‘3a’, or ‘H%’.'),
                    Formula(contents='ID × PO'),
                    Formula(contents='AL × NU'),
                    Formula(contents='NU × AL'),
                    Rule(contents='LB24 Do not break between prefix and letters or ideographs.'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × AL'),
                    Formula(contents='PO × AL'),
                    Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                    Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                    Formula(contents='CL × PO'),
                    Formula(contents='CP × PO'),
                    Formula(contents='CL × PR'),
                    Formula(contents='CP × PR'),
                    Formula(contents='NU × PO'),
                    Formula(contents='NU × PR'),
                    Formula(contents='PO × OP'),
                    Formula(contents='PO × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='PR × NU'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Korean syllable blocks'),
                    Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                    Rule(contents='LB26 Do not break a Korean syllable.'),
                    Formula(contents='JL × (JL | JV | H2 | H3)'),
                    Formula(contents='(JV | H2) × (JV | JT)'),
                    Formula(contents='(JT | H3) × JT'),
                    Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                    Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                    Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                    Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                    Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                    Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                    Formula(contents='AL × AL'),
                    Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                    Formula(contents='IS × AL'),
                    Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                    Formula(contents='(AL | NU) × OP'),
                    Formula(contents='CP × (AL | NU)'),
                    Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                    Rule(contents='LB31 Break everywhere else.'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='A two-dimensional table can be used to resolve break opportunities between pairs of characters. This section defines such a table. The rows of the table are labeled with the possible values of the line breaking property of the leading character in the pair. The columns are labeled with the line breaking class for the following character of the pair. Each intersection is labeled with the resulting line break opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of a similar table-based definition. However, it uses line breaking classes whose membership is not solely determined by the line breaking property (as in this annex), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classes defined previously.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, then the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes, of which only 14 appear to be unique. Any minimal table representation is unique, except for trivial reordering of rows and columns. Minimal tables for which the rows and columns are sorted alphabetically can be mechanically compared for differences. This is in contrast to the rules, where identical results can be achieved by sets of rules that cannot be easily compared by looking at their textual representation. However, any set of rules that is equivalent to a minimal pair table can be used to automatically generate such a table, which can then be used for comparison. The rules in Section 6, Line Breaking Algorithm, can be expressed as minimal pair tables if the extended context used as described below.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Most of the rules in Section 6, Line Breaking Algorithm, involve only pairs of characters, or they apply to a single line break class preceded or followed by any character. These rules can be represented directly in a pair table. However, rules LB14–LB17 require extended context to handle spaces.'),
                    Paragraph(contents='By broadening the definition of a pair from B A, where B is the line breaking class before a break and A the one after, to B SP* A, where SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line break opportunity (that is, direct and indirect breaks). Rules equivalent to the ones given in Section 6, Line Breaking Algorithm, can be formulated without explicit use of SP by using % to express indirect breaks instead. These rules can then be simplified to involve only pairs of classes—that is, only constructions of the form:'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B × A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can be automatically translated into a pair table, as in Table 2. Line breaking analysis then proceeds by pair table lookup as explained below. (For readability in table layout, the symbol ^ is used in the table instead of × and _ is used instead of ÷.)'),
                    Paragraph(contents='Rule LB9 requires extended context for handling combining marks. This extended context must also be built into the code that interprets the pair table. For convenience in detecting the condition where A = CM, the symbols # and @ are used in the pair table, instead of % and ^, respectively. See Section 7.5, Combining Marks.'),
                    Heading(level=3, contents='7.3 Example Pair Table'),
                    Paragraph(contents='Table 2 implements the line breaking behavior described in this annex, with the limitation that only context of the form B SP* A is considered. BK, CR, LF, NL, and SP classes are handled explicitly in the outer loop, as given in the code sample below. Pair context of the form B CM* can be processed by handling the special entries @ and # in the driving loop, as explained in Section 7.5, Combining Marks. Conjoining jamos are considered separately in Section 7.6, Conjoining Jamos. In Table 2, the rows are labeled with the B class and the columns are labeled with the A class.'),
                    Paragraph(contents='Table 2. Example Pair Table'),
                    TableRow(contents='OP\ue000CL\ue000CP\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM\ue000WJ\ue000H2\ue000H3\ue000JL\ue000JV\ue000JT'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000@\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^'),
                    TableRow(contents='CL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CP\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='QU\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='NS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='EX\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='SY\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='PR\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='PO\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='NU\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='AL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ID\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IN\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HY\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BA\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BB\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='B2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000^\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ZW\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CM\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='WJ\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='H2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='H3\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='JV\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='JT\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='Table 2 uses the following notation:'),
                    Paragraph(contents='Resolved outside the pair table: AI, BK, CB, CR, LF, NL, SA, SG, SP, XX'),
                    Paragraph(contents='^ denotes a prohibited break: B ^ A is equivalent to B SP* × A; in other words, never break before A and after B, even if one or more spaces intervene.'),
                    Paragraph(contents='% denotes an indirect break opportunity: B % A is equivalent to B × A and B SP+ ÷ A; in other words, do not break before A, unless one or more spaces follow B.'),
                    Paragraph(contents='@ denotes a prohibited break for combining marks: B @ A is equivalent to B SP* × A, where A is of class CM. For more details, see Section 7.5, Combining Marks.'),
                    Paragraph(contents='# denotes an indirect break opportunity for combining marks following a space: B # A is equivalent to (B × A and B SP+ ÷ A), where A is of class CM.'),
                    Paragraph(contents='_ denotes a direct break opportunity (equivalent to ÷ as defined above).'),
                    Paragraph(contents='Note: In the online edition, hovering over the cells in a browser with tool-tips enabled reveals the rule number that determines the breaking status for the pair in question. When a pair must be tested both with and without intervening spaces, multiple rules are given. Hovering over a line breaking class name gives a representative member of the class and additional information. Clicking on any line break class name anywhere in the document jumps to the definition.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two sections provide sample code [Code14] that demonstrates how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the line breaking classes CR, LF, and NL need to be added. They have been omitted here for brevity, but see Section 7.7, Explicit Breaks.'),
                    Paragraph(contents='The sample code assumes that the line breaking classes AI, CB, SG, and XX have been resolved according to rule LB1 as part of initializing the pcls array. The code further assumes that the complex line break analysis for characters with line break class SA is handled in function findComplexBreak, for which the following placeholder is given:'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    // cls - resolved line break class, may differ from pcls[0]'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line breaking opportunities (output)'),
                    CodeLine(contents='    // cch - remaining length of input '),
                    CodeLine(contents='    int '),
                    CodeLine(contents='   findComplexBreak(enum break_class cls, enum break_class *pcls,'),
                    CodeLine(contents='                             enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='            if (!cch)'),
                    CodeLine(contents='                return 0;'),
                    CodeLine(contents='            for (int ich = 1; ich < cch; ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='                // .. do complex break analysis here'),
                    CodeLine(contents='                // and report any break opportunities in pbrk ..'),
                    CodeLine(contents=''),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK; // by default, no break'),
                    CodeLine(contents=''),
                    CodeLine(contents='                if (pcls[ich] != SA)'),
                    CodeLine(contents='                    break;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='            return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The entries in the example pair table correspond to the following enumeration. For diagnostic purposes, the sample code returns these values to indicate not only the location but also the type of rule that triggered a given break opportunity.'),
                    CodeLine(contents='    enum break_action {'),
                    CodeLine(contents='           DIRECT_BRK = 0,             // _ in table'),
                    CodeLine(contents='           INDIRECT_BRK,               // % in table'),
                    CodeLine(contents='           COMBINING_INDIRECT_BRK,     // # in table'),
                    CodeLine(contents='           COMBINING_PROHIBITED_BRK,   // @ in table'),
                    CodeLine(contents='           PROHIBITED_BRK,             // ^ in table'),
                    CodeLine(contents='           EXPLICIT_BRK };             // ! in rules'),
                    Paragraph(contents='Because the contexts involved in indirect breaks of the form B SP* A are of indefinite length, they need to be handled explicitly in the driver code. The sample implementation of a findLineBrk function below remembers the line break class for the last characters seen, but skips any occurrence of SP without resetting this value. Once character A is encountered, a simple lookback is used to see if it is preceded by a SP. This lookback is necessary only if B % A. To handle the case of a SP following sot, it is necessary to set cls to a dummy value. Using WJ gives the correct result and, as required, is unaffected by any tailoring.'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable) (returned value)'),
                    CodeLine(contents="    // cls - current resolved line break class for 'before' character (variable)"),
                    CodeLine(contents=''),
                    CodeLine(contents='    int'),
                    CodeLine(contents='    findLineBrk(enum break_class *pcls, enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='        if (!cch) return 0;'),
                    CodeLine(contents=''),
                    CodeLine(contents="        enum break_class cls = pcls[0];   // class of 'before' character"),
                    CodeLine(contents=''),
                    CodeLine(contents='        // treat SP at start of input as if it followed a WJ'),
                    CodeLine(contents='        if (cls == SP)'),
                    CodeLine(contents='            cls = WJ;'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='        for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // to handle explicit breaks, replace code from "for" loop condition'),
                    CodeLine(contents='            // above to comment below by code given in Section 7.7'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle spaces explicitly'),
                    CodeLine(contents='            if (pcls[ich] == SP) {'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;   // apply rule LB7: × SP'),
                    CodeLine(contents='                continue;                       // do not update cls'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle complex scripts in a separate function'),
                    CodeLine(contents='            if (pcls[ich] == SA) {'),
                    CodeLine(contents='                ich += findComplexBreak(cls, &pcls[ich-1], &pbrk[ich-1],'),
                    CodeLine(contents='                           cch - (ich-1));'),
                    CodeLine(contents='                if (ich < cch)'),
                    CodeLine(contents='                    cls = pcls[ich];'),
                    CodeLine(contents='                continue;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // lookup pair table information in brkPairs[before, after];'),
                    CodeLine(contents='            enum break_action brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents=''),
                    CodeLine(contents='            pbrk[ich-1] = brk;                     // save break action in output array'),
                    CodeLine(contents=''),
                    CodeLine(contents='            if (brk == INDIRECT_BRK) {             // resolve indirect break'),
                    CodeLine(contents='                if (pcls[ich - 1] == SP)           // if context is A SP + B'),
                    CodeLine(contents='                    pbrk[ich-1] = INDIRECT_BRK;    //       break opportunity'),
                    CodeLine(contents='                else                               // else'),
                    CodeLine(contents='                    pbrk[ich-1] = PROHIBITED_BRK;  //       no break opportunity'),
                    CodeLine(contents='            } '),
                    CodeLine(contents='            '),
                    CodeLine(contents='            // handle breaks involving a combining mark (see Section 7.5)'),
                    CodeLine(contents=''),
                    CodeLine(contents="            // save cls of 'before' character (unless bypassed by 'continue')"),
                    CodeLine(contents='            cls = pcls[ich];'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        pbrk[ich-1] = EXPLICIT_BRK;                // always break at the end'),
                    CodeLine(contents=''),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The function returns all of the break opportunities in the array pointed to by pbrk, using the values in the table. On return, pbrk[ich] is the type of break after the character at index ich.'),
                    Paragraph(contents='A common optimization in implementation is to determine only the nearest line break opportunity prior to the position of the first character that would cause the line to become overfull. Such an optimization requires backward traversal of the string instead of forward traversal as shown in the sample code.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='The implementation of combining marks in the pair table presents an additional complication because rule LB9 defines a context X CM* that is of arbitrary length. There are some similarities to the way contexts of the form B SP* A that are involved in indirect breaks are evaluated. However, contexts of the form SP CM* or CM* SP also need to be handled, while rule LB10 requires some CM* to be treated like AL.'),
                    Paragraph(contents='Implementing LB10. This rule can be reflected directly in the example pair table in Table 2 by assigning the same values in the row marked CM as in the row marked AL. Incidentally, this is equivalent to rewriting the rules LB11–LB31 by duplicating any expression that contains an AL on its left hand side with another expression that contains a CM. For example, in LB22'),
                    Formula(contents='AL × IN'),
                    Paragraph(contents='would become'),
                    Formula(contents='AL × IN CM × IN'),
                    Paragraph(contents='Rewriting these rules as indicated here (and then deleting LB10) is fully equivalent to the original rules because rule LB9 already accounts for all CMs that are not supposed to be treated like AL. For a complete description see Example 9 in Section 8.2, Examples of Customization.'),
                    Paragraph(contents='Implementing LB9. Rule LB9 is implemented in the example pair table in Table 2 by assigning a special # entry in the column marked CM for all rows referring to a line break class that allows a direct or indirect break after itself. (Note that the intersection between the row for class ZW and the column for class CM must be assigned “_” because of rule LB8.) The # corresponds to a break_action value of COMBINING_INDIRECT_BREAK, which triggers the following code in the sample implementation:'),
                    CodeLine(contents='    else if (brk == COMBINING_INDIRECT_BRK) {    // resolve combining mark break'),
                    CodeLine(contents='        pbrk[ich-1] = PROHIBITED_BRK;             // do not break before CM'),
                    CodeLine(contents='        if (pcls[ich-1] == SP){'),
                    CodeLine(contents='            #ifndef LEGACY_CM                    // new: space is not a base'),
                    CodeLine(contents='                pbrk[ich-1] = COMBINING_INDIRECT_BRK;    // apply rule SP ÷ '),
                    CodeLine(contents='            #else'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;      // legacy: keep SP CM together'),
                    CodeLine(contents='                if (ich > 1)'),
                    CodeLine(contents='                    pbrk[ich-2] = ((pcls[ich - 2] == SP) ?'),
                    CodeLine(contents='                                                  INDIRECT_BRK : DIRECT_BRK);'),
                    CodeLine(contents='            #endif'),
                    CodeLine(contents='        } else                                   // apply rule LB9: X CM * -> X'),
                    CodeLine(contents='            continue;                            // do not update cls'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    Paragraph(contents='When handling a COMBINING_INDIRECT_BREAK, the last remembered line break class in variable cls is not updated, except for those cases covered by rule LB10. A tailoring of rule LB9 that keeps the last SPACE character preceding a combining mark, if any, and therefore breaks before that SPACE character can easily be implemented as shown in the sample code. (See Section 9.2, Legacy Support for Space Character as Base for Combining Marks.)'),
                    Paragraph(contents='Any rows in Table 2 for line break classes that prohibit breaks after must be handled explicitly. In the example pair table, these are assigned a special entry “@”, which corresponds to a special break action of COMBINING_PROHIBITED_BREAK that triggers the following code:'),
                    CodeLine(contents='    else if (brk == COMBINING_PROHIBITED_BRK) { // this is the case OP SP* CM'),
                    CodeLine(contents='        pbrk[ich-1] = COMBINING_PROHIBITED_BRK;  // no break allowed'),
                    CodeLine(contents='        if (pcls[ich-1] != SP)'),
                    CodeLine(contents='            continue;                          // apply rule LB9: X CM* -> X'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The only line break class that unconditionally prevents breaks across a following SP is OP. The preceding code fragment ensures that OP CM is handled according to rule LB9 and OP SP CM is handled as OP SP AL according to rule LB10.'),
                    Heading(level=3, contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='For Korean Syllable Blocks, the information in rule LB26 is represented by a simple pair table shown in Table 3.'),
                    Paragraph(contents='Table 3. Korean Syllable Block Pair Table'),
                    TableRow(contents='H2\ue000H3\ue000JL\ue000JV\ue000JT'),
                    TableRow(contents='H2\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='H3\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JL\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='JV\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='JT\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='When constructing a pair table such as Table 2, this pair table for Korean syllable blocks in Table 3 is merged with the main pair table for all other line break classes by adding the cells from Table 3 beyond the lower-right corner of the main pair table. Next, according to rule LB27, any empty cells in the new rows are filled with the same values as in the existing row for class ID, and any empty cells for the new columns are filled with the same values as in the existing column for class ID. The resulting merged table is shown in Table 2.'),
                    Heading(level=3, contents='7.7 Explicit Breaks'),
                    Paragraph(contents='Handling explicit breaks is straightforward in the driver code, although it does clutter up the loop condition and body of the loop a bit. For completeness, the following sample shows how to change the loop condition and add if statements—both before and inside the loop—that handle BK, NL, CR, and LF. Because NL and BK behave identically by default, this code can be simplified in implementations where the character classification is changed so that BK will always be substituted for NL when assigning the line break class. Because this optimization does not change the result, it is not considered a tailoring and does not affect conformance.'),
                    CodeLine(contents='    // handle case where input starts with an LF'),
                    CodeLine(contents='    if (cls == LF)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // treat initial NL like BK'),
                    CodeLine(contents='    if (cls == NL)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // loop over all pairs in the string up to a hard break or CRLF pair'),
                    CodeLine(contents='    for (int ich = 1; (ich < cch) && (cls != BK) && (cls != CR || pcls[ich] == LF); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle BK, NL and LF explicitly'),
                    CodeLine(contents='        if (pcls[ich] == BK ||pcls[ich] == NL ||  pcls[ich] == LF)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = BK;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle CR explicitly'),
                    CodeLine(contents='        if(pcls[ich] == CR)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = CR;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle spaces explicitly...'),
                    CodeLine(contents=''),
                    CodeLine(contents='    '),
                    Heading(level=2, contents='8 Customization'),
                    Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                    Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                    Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                    Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how to customize the pair table implementation of the line breaking algorithm for these tailorings.'),
                    Heading(level=3, contents='8.1 Types of Tailoring'),
                    Paragraph(contents='There are three principal ways of tailoring the sample pair table implementation of the line breaking algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to permanently overriding some of the rules in Section 6, Line Breaking Algorithm.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions This is a dynamic equivalent of the preceding. Instead of changing the values for the pair intersection directly in the table, they are labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be enabled at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real-world implementation of a pair table-based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. That implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=3, contents='8.2 Examples of Customization'),
                    Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm. Section 7.4, Sample Code, outlines such an approach in which the interface to the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the linebreaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersections of ID/ID, AL/ID, and ID/AL are affected. For alphabetic style line breaking, breaks for these cases require space; for ideographic style line breaking, these cases do not require spaces. Therefore, the implementation defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given text.'),
                    Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. In this case the intersections of NU/NU, NU/AL, AL/AL, and AL/NU are affected.'),
                    Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by changing the classification of the Kana small characters from NS to ID as needed.'),
                    Paragraph(contents='Example 6. Some implementations may wish to tailor the line breaking algorithm to resolve grapheme clusters according to Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], as a first stage. Generally, the line breaking algorithm does not create line break opportunities within default grapheme clusters; therefore such a tailoring would be expected to produce results that are close to those defined by the default algorithm. However, if such a tailoring is chosen, characters that are members of line break class CM but not part of the definition of default grapheme clusters must still be handled by rules LB9 and LB10, or by some additional tailoring.'),
                    Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                    Formula(contents='( PR | PO ) ? ( OP | HY ) ? NU (NU | SY | IS) * CL ? ( PR | PO ) ?'),
                    Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                    Paragraph(contents='Regex-Number: Do not break numbers.'),
                    Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                    Formula(contents='( OP | HY ) × NU'),
                    Formula(contents='NU × (NU | SY | IS)'),
                    Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL)'),
                    Formula(contents='NU (NU | SY | IS)* CL? × (PO | PR)'),
                    Paragraph(contents='This customized rule uses extended contexts that cannot be represented in a pair table. In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                    Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                    Formula(contents='[^NU] × CL'),
                    Formula(contents='× EX'),
                    Formula(contents='[^NU] × IS'),
                    Formula(contents='[^NU] × SY'),
                    Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                    Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                    Heading(level=2, contents='9 Implementation Notes'),
                    Paragraph(contents='This section provides additional notes on implementation issues.'),
                    Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                    Paragraph(contents='To replace rule LB9, terms of the form'),
                    Paragraph(contents='B # A'),
                    Paragraph(contents='B SP* # A'),
                    Paragraph(contents='B #'),
                    Paragraph(contents='B SP* #'),
                    Paragraph(contents='are replaced by terms of the form'),
                    Paragraph(contents='B CM* # A'),
                    Paragraph(contents='B CM* SP* # A'),
                    Paragraph(contents='B CM* #'),
                    Paragraph(contents='B CM* SP* #'),
                    Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                    Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                    Paragraph(contents='Replace LB10 by the following rule:'),
                    Paragraph(contents='× CM'),
                    Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                    Paragraph(contents='(AL | NU) × OP'),
                    Paragraph(contents='add another rule'),
                    Paragraph(contents='CM × OP.'),
                    Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                    Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='As stated in [Unicode], Section 7.9, Combining Marks, combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                    Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                    Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID.'),
                    Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                    Heading(level=2, contents='10 Testing'),
                    Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2 Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                    Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                    Paragraph(contents='Note:The break opportunities produced by an implementation of the rules of Section 6, Line Breaking Algorithm differ in certain cases from those produced by the pair table included in Section 7, Pair Table-Based Implementation. The differences occur with sequences like ZW SP CL. The test data file matches the results expected of a rule based implementation. The inconsistencies between the two will be addressed in the next revision of this document.'),
                    Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                    Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                    Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                    Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                    Paragraph(contents='1. The rules are cast into a more regex-style.'),
                    Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                    Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                    Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                    Paragraph(contents='• 13.01) [^NU] × CL'),
                    Paragraph(contents='• 13.02) × EX'),
                    Paragraph(contents='• ...'),
                    Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                    Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                    Paragraph(contents='Table 4. Numbering of Test Rules'),
                    TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                    TableRow(contents='LB2\ue0000.2\ue000start of text'),
                    TableRow(contents='LB3\ue0000.3\ue000end of text'),
                    TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                    TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                    TableRow(contents='LB31\ue000999\ue000÷ any'),
                    Heading(level=2, contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                    Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                    TableRow(contents='5.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                    TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                    TableRow(contents='LB2\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                    TableRow(contents='LB3\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                    TableRow(contents='LB4\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB5\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB6\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                    TableRow(contents='LB7\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                    TableRow(contents='LB8\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                    TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                    TableRow(contents='LB9\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB10\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                    TableRow(contents='LB11\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB13\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                    TableRow(contents='LB14\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                    TableRow(contents='LB15\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                    TableRow(contents='LB16\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                    TableRow(contents='LB17\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                    TableRow(contents='LB18\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                    TableRow(contents='LB19\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                    TableRow(contents='LB20\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                    TableRow(contents='LB21\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                    TableRow(contents='LB22\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                    TableRow(contents='LB23\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                    TableRow(contents='LB24\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='LB25\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                    TableRow(contents='LB26\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB27\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB28\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                    TableRow(contents='LB29\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB31\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                    Heading(level=2, contents='References'),
                    Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='Asmus Freytag is the author of the initial version and has added to and maintained the text of this annex.'),
                    Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintains the text.'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                    Heading(level=2, contents='Modifications'),
                    Heading(level=3, contents='Change History'),
                    Paragraph(contents='For details of the change history, see the online copy of this annex at http://www.unicode.org/reports/tr14/.'),
                    Heading(level=3, contents='Change History'),
                    Paragraph(contents='The following documents the changes introduced by each revision.'),
                    Heading(level=4, contents='Revision 26:'),
                    Paragraph(contents='• Reissued for Unicode 6.0.0.'),
                    Paragraph(contents='• In Section 5.1, revised the description of the SHY character.'),
                    Paragraph(contents='• Changed LB8 from "ZW ÷" to "ZW SP* ÷" in accordance with UAX 14 Corrigendum #7, http://www.unicode.org/versions/corrigendum7.html.'),
                    Paragraph(contents='• Changed references to Unicode 5.2 to generic references where appropriate.'),
                    Paragraph(contents='• In Section 3, removed Ideographic Space from the list of spaces that may be compressed or expanded and clarified that the justification of lines is out of scope.'),
                    Paragraph(contents='Revision 25 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                    Heading(level=4, contents='Revision 24:'),
                    Paragraph(contents='• Reissued for Unicode 5.2.0.'),
                    Paragraph(contents='• Added class CP, reintroduced rule LB30, adjusted other rules for class CP.'),
                    Paragraph(contents='• In Section 5.1, clarified that the lists of characters for each property contain representative characters, and are not necessarily complete.'),
                    Paragraph(contents='• Unassigned code points in CJK regions default to class ID.'),
                    Paragraph(contents='• Added Tai Tham, Myanmar Extended-A and Tai Viet blocks to class SA.'),
                    Paragraph(contents='• Brought descriptive names of the character classes into closer alignment with the Unicode Line Break character property values.'),
                    Paragraph(contents='• Small edits for improved clarity, document style.'),
                    Paragraph(contents='Revision 23 being a proposed update, only changes between revisions 22 and 24 are noted here.'),
                    Heading(level=4, contents='Revision 22:'),
                    Paragraph(contents='• Updated for Version 5.1.0.'),
                    Paragraph(contents='• Added 2E18, INVERTED INTERROBANG, to class OP.'),
                    Paragraph(contents='• Added 2064, INVISIBLE PLUS, to class AL.'),
                    Paragraph(contents='• Added 2E00..2E01, 2E06..2E08, 2E0B to class QU.'),
                    Paragraph(contents='• Removed LB30, to correct regression for U+3002 IDEOGRAPHIC FULL STOP'),
                    Paragraph(contents='• Add Example 9 to Section 8, Customization.'),
                    Paragraph(contents='• Substantial revisions to Section 4, Conformance.'),
                    Paragraph(contents='• Section 5.7, Word Separators, added.'),
                    Paragraph(contents='• Section 10, Testing, added.'),
                    Paragraph(contents='• Renumber rules for consistency: 12a -> 12; 12b -> 12a'),
                    Paragraph(contents='• Added 02DF, MODIFIER LETTER CROSS ACCENT, to class BB.'),
                    Paragraph(contents='• Added discussion for 202F NARROW NO-BREAK SPACE and 180E MONGOLIAN VOWEL SEPARATOR'),
                    Paragraph(contents='• Corrected typos in LB13 and LB16'),
                    Paragraph(contents='• Added characters introduced with Unicode 5.1 to the lists associated with the line break properties.'),
                    Paragraph(contents='• Added Section 5.2 on the special handling of hyphens. Edited Section 3 for clarity.'),
                    Paragraph(contents='• Improved delineation between normative and informative information.'),
                    Paragraph(contents='• Changed from EX to IS'),
                    Paragraph(contents='• 060C ( ، ) ARABIC COMMA'),
                    Paragraph(contents='• Changed from EX to PO'),
                    Paragraph(contents='• 066A ( ٪ ) ARABIC PERCENT SIGN'),
                    Paragraph(contents='• Changed from AI to OP'),
                    Paragraph(contents='• 00A1 ( ¡ ) INVERTED EXCLAMATION MARK'),
                    Paragraph(contents='• 00BF ( ¿ ) INVERTED QUESTION MARK'),
                    Paragraph(contents='• Changed from BA to EX'),
                    Paragraph(contents='• 1802 ( ᠂ ) MONGOLIAN COMMA'),
                    Paragraph(contents='• 1803 ( ᠃ ) MONGOLIAN FULL STOP'),
                    Paragraph(contents='• 1808 ( ᠈ ) MONGOLIAN MANCHU COMMA'),
                    Paragraph(contents='• 1809 ( ᠉ ) MONGOLIAN MANCHU FULL STOP'),
                    Paragraph(contents='• 2CF9 ( ⳹ ) COPTIC OLD NUBIAN FULL STOP'),
                    Paragraph(contents='• 2CFE ( ⳾ ) COPTIC FULL STOP'),
                    Paragraph(contents='• Changed from BA to AL'),
                    Paragraph(contents='• 1A1E ( ᨞ ) BUGINESE PALLAWA'),
                    Paragraph(contents='• Changed from AL to BB'),
                    Paragraph(contents='• 1FFD ( ´ ) GREEK OXIA'),
                    Paragraph(contents='• Added a note on lack of canonical equivalence for the definition of ambiguous characters.'),
                    Paragraph(contents='• Corrected typos in the sample source code.'),
                    Paragraph(contents='• Split rule LB12 to accommodate Polish and Portuguese hyphenation.'),
                    Paragraph(contents='Revisions 20 and 21 being a proposed update, only changes between revisions 19 and 22 are noted here.'),
                    Heading(level=4, contents='Revision 19:'),
                    Paragraph(contents='• Changed 000B from CM to BK, changed 035C from CM to GL.'),
                    Paragraph(contents='• Changed 17D9 from NS to AL. 203D, 2047..2049 from AL to NS.'),
                    Paragraph(contents='• Corrected listing of NS property to match the data file to remove 17D8 and 17DA.'),
                    Paragraph(contents='• The data file has been corrected to match the listing of the BA property to include 1735 and 1736, also changed 05BE and 103D0 from AL to BA.'),
                    Paragraph(contents='• Changed the brackets 23B4.23B6 to AL.'),
                    Paragraph(contents='• Updated the SA property to make it more generic, includes changing many characters from CM to SA.'),
                    Paragraph(contents='• Reflected new characters'),
                    Paragraph(contents='• Made several text changes for clarifications, including reworded the intro to Section 6.'),
                    Paragraph(contents='• Added Section 9.'),
                    Paragraph(contents='• Restated the conformance clauses and reorganized the algorithm into a tailorable and a non-tailorable part; this affects text in Sections 4, 5, and 6.'),
                    Paragraph(contents='• Removed redundant term PR x HY from rule 18 and rule into new LB24 and LB26 to provide better granularity for tailoring,'),
                    Paragraph(contents='• Moved rule 11b and 13 above rule 8 (new LB13), restating rule 13 (new LB12) to preserve its effect in the new location.'),
                    Paragraph(contents='• Added new rule LB30 to handle words like “person(s)”.'),
                    Paragraph(contents='• Renumbered the rules.'),
                    Paragraph(contents='• Extensive copy-editing as part of Unicode 5.0 publication.'),
                    Paragraph(contents='Revision 18 being a proposed update, only changes between revisions 17 and 19 are noted here.'),
                    Heading(level=4, contents='Revision 17:'),
                    Paragraph(contents='• Significantly revised the line break classes for Tibetan, as well as Mongolian and Arabic Punctuation.'),
                    Paragraph(contents='• Added section 5.6 on Tibetan and section 7.7 on handling explicit breaks.'),
                    Paragraph(contents='• Added line break class assignments for Unicode 4.1 characters.'),
                    Paragraph(contents='• Significantly revised the line break class assignments for danda characters and made it consistent across scripts.'),
                    Paragraph(contents='• LB6: Replaced by new rules 18b and 18c, using new classes JL, JV, JT, H2, and H3.'),
                    Paragraph(contents='• LB7a: Deprecated rule 7a because SPACE as base character for standalone combining marks is deprecated.'),
                    Paragraph(contents='• LB7b: Revised 7b and section 7.5 as well as Table 2 to match the deprecation of rule 7a.'),
                    Paragraph(contents='• LB7b: Clarified that this rule does not apply to SP.'),
                    Paragraph(contents='• LB11a: Added a missing SP * to make the formula match the rule.'),
                    Paragraph(contents='• LB18b: Removed the existing rule 18b because it was redundant.'),
                    Paragraph(contents='• Corrected an erratum on revision 14 by splitting GL from WJ in rule 11b and moving to a new rule 13.'),
                    Paragraph(contents='• Updated the pair table and sample code to match the changes in the rules.'),
                    Paragraph(contents='• Updated the regular expression for numbers.'),
                    Paragraph(contents='• Added several notes on implementation techniques.'),
                    Paragraph(contents='• Moved all suggested tailorings from the rules section to the examples in section 8.2.'),
                    Paragraph(contents='Revision 16 being a proposed update, only changes between revisions 17 and 15 are noted here.'),
                    Heading(level=4, contents='Revision 15:'),
                    Paragraph(contents='• LB19b: Added new rule 19b.'),
                    Paragraph(contents='• Changed line breaking class: combining double diacritics from CM to GL, 037A and 2126 to match their canonical equivalents, 2140 corrected to AL, Arabic numerical separators from AL to NU, many alphabetic characters that are EAW=Ambiguous from AI to AL to better reflect current practice, remaining circled numbers and letters from AL to AI for consistency.'),
                    Paragraph(contents='• Added a note on the behavior of U+200B and U+3000 when lines are justified.'),
                    Paragraph(contents='• Reconciled the data file and description of line breaking classes in section 5.'),
                    Paragraph(contents='• Reconciled the rules and pair table implementation of the algorithm.'),
                    Paragraph(contents='• Updated the text of the conformance statement in section 4.'),
                    Paragraph(contents='• Added section 5.5 on use of double hyphen.'),
                    Paragraph(contents='• Updated styles and table formatting.'),
                    Paragraph(contents='• Minor edits throughout.'),
                    Heading(level=4, contents='Revision 14:'),
                    Paragraph(contents='• Added new line breaking classes NL and WJ to better support NEL and Word Joiner.'),
                    Paragraph(contents='• Deprecated the use of class SG.'),
                    Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and 7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                    Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                    Paragraph(contents='• Clarified the behavior of SHY and MONGOLIAN TODO SOFT HYPHEN, as well as WJ and ZWNBSP.'),
                    Paragraph(contents='• Added a new subsection 5.4 on SOFT HYPHEN and a new subsection 7.6 on conjoining jamos.'),
                    Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                    Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                    Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                    Paragraph(contents='• Expanded the introduction in Section 3.'),
                    Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                    Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                    Paragraph(contents='Revision 11 being a proposed update, only changes between revisions 12 and 14 are noted here.'),
                    Heading(level=4, contents='Revision 12:'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added Word joiner to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the data file. Only characters whose LB class differs from those of characters with related General_Category are noted explicitly in this text.'),
                    Paragraph(contents='Revision 11, being a proposed update, only changes between revisions 10 and 12 are noted here.]'),
                    Heading(level=4, contents='Revision 10:'),
                    Paragraph(contents='• Changed header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Heading(level=4, contents='Revision 9:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX.'),
                    Paragraph(contents='• LB7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode4.0].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair table entry PR % ID'),
                    Paragraph(contents='• Reworked Section 7.5'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull)'),
                    Heading(level=4, contents='Revision 8:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to Table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX because the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                    Heading(level=4, contents='Revision 7:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Heading(level=4, contents='Revision 6:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='No change history is available for earlier revisions.'),
                    Paragraph(contents='Copyright © 1998-2010 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                    Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(6, 1, 0): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                    TableRow(contents='Version\ue000Unicode 6.1.0'),
                    TableRow(contents='Editors\ue000Andy Heninger (andy.heninger@gmail.com)'),
                    TableRow(contents='Date\ue0002012-01-17'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-28.html'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-26.html'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                    TableRow(contents='Latest Proposed Update\ue000http://www.unicode.org/reports/tr14/proposed.html'),
                    TableRow(contents='Revision\ue00028'),
                    Heading(level=4, contents='Summary'),
                    Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display. A model implementation using pair tables is also provided.'),
                    Heading(level=4, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                    Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                    Heading(level=4, contents='Contents'),
                    Paragraph(contents='1 Overview and Scope'),
                    Paragraph(contents='2 Definitions'),
                    Paragraph(contents='3 Introduction'),
                    Paragraph(contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='4 Conformance'),
                    Paragraph(contents='4.1 Conformance Requirements'),
                    Paragraph(contents='5 Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Dictionary Usage'),
                    Paragraph(contents='5.3 Use of Hyphen'),
                    Paragraph(contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='5.7 Word Separator Characters'),
                    Paragraph(contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Pair Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='7.7 Explicit Breaks'),
                    Paragraph(contents='8 Customization'),
                    Paragraph(contents='8.1 Types of Tailoring'),
                    Paragraph(contents='8.2 Examples of Customization'),
                    Paragraph(contents='9 Implementation Notes'),
                    Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='10 Testing'),
                    Paragraph(contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='References'),
                    Paragraph(contents='Acknowledgments'),
                    Paragraph(contents='Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                    Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                    Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                    Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Three main sections follow:'),
                    Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                    Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='• Section 7, Pair Table-Based Implementation, describes an efficient pair table-based implementation of the algorithm.'),
                    Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                    Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                    Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                    Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                    Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard [Unicode]. The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard. All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard.'),
                    Paragraph(contents='LD1 Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='LD2 Line Break: The position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='LD3 Line Break Opportunity: A place where a line is allowed to end.'),
                    Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                    Paragraph(contents='LD4 Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                    Paragraph(contents='LD5 Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                    Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                    Paragraph(contents='LD6 Line Breaking Class: A class of characters with the same line breaking property value.'),
                    Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                    Paragraph(contents='LD7 Mandatory Break: A line must break following a character that has the mandatory break property.'),
                    Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                    Paragraph(contents='LD8 Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                    Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='LD9 Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                    Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                    Paragraph(contents='• An indirect break is indicated in the pair table in Table 2 as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though space characters are not shown in the pair table, an indirect break can occur only if one or more spaces follow B. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                    Paragraph(contents='LD10 Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                    Paragraph(contents='• A prohibited break is indicated in the pair table in Table 2 as B ^ A, where B is the character class of the character before and A is the character class of the character after the break, and the optional space characters are not shown. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='LD11 Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                    Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                    Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                    Paragraph(contents='Table 1. Line Breaking Classes'),
                    TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                    TableRow(contents='Non-tailorable Line Breaking Classes'),
                    TableRow(contents='BK\ue000Mandatory Break\ue000NL, PS\ue000Cause a line break (after)'),
                    TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                    TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                    TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                    TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                    TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                    TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                    TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                    TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                    TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                    TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                    TableRow(contents='NS\ue000Nonstarter\ue000“‼”, “‽”, “⁇”, “⁉”, etc.\ue000Allow only indirect line breaks before'),
                    TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                    TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                    TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                    TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                    TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                    TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='CJ\ue000Conditional Japanese Starter\ue000Small kana\ue000Treat as NS or ID for strict or normal breaking.'),
                    TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='HL\ue000Hebrew Letter\ue000Hebrew\ue000Do not break around a following hyphen; otherwise act as Alphabetic'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                    TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Introduction'),
                    Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                    Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                    Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                    Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                    Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                    Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                    Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                    Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                    Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                    Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                    Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                    Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                    Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                    Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                    Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [Bidi]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                    Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                    Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                    Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                    Heading(level=3, contents='4.1 Conformance Requirements'),
                    Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                    Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                    Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                    Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                    Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                    Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                    Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into two algorithms defined in Section 6, Line Breaking Algorithm, and Section 7, Pair Table-Based Implementation. These sections describe workable default line breaking methods. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences.'),
                    Heading(level=4, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a tab-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                    Heading(level=4, contents='Future Updates'),
                    Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                    Paragraph(contents='(A)—the class allows a break opportunity after in specified contexts'),
                    Paragraph(contents='(XA)—the class prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='(B)—the class allows a break opportunity before in specified contexts'),
                    Paragraph(contents='(XB)—the class prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='(P)—the class allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='(XP)—the class prevents a break opportunity for a pair of same characters'),
                    Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Some characters that ordinarily act like alphabetic or symbol characters (which have the AL line breaking class) are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                    Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [EAW].'),
                    Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                    Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                    Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                    TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                    TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                    Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                    Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                    Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='Except as listed explicitly below as part of another line breaking class, and except as assigned class AI or ID based on East Asian Width, this class contains the following characters:'),
                    Paragraph(contents='ALPHABETIC—all remaining characters of General Categories Lu, Ll, Lt, Lm, and Lo, but excluding those with script=Hebrew. SYMBOLS—all remaining characters of General Categories Sm, Sk, and So NON-DECIMAL NUMBERS—all remaining characters of General Categories Nl, and No PUNCTUATION—all remaining characters of General Categories Pc, Pd, and Po'),
                    Paragraph(contents='Plus additional characters, including:'),
                    TableRow(contents='0600..0603\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAFHA'),
                    TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                    TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                    TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                    Paragraph(contents='These characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                    Heading(level=3, contents='BA: Break After (A)'),
                    Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                    Heading(level=4, contents='Breaking Spaces'),
                    Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN SPACE'),
                    TableRow(contents='2003\ue000EM SPACE'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                    Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                    Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                    Paragraph(contents='See the ID property for U+3000 IDEOGRAPHIC SPACE. For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                    Heading(level=4, contents='Tabs'),
                    TableRow(contents='0009\ue000TAB'),
                    Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    Heading(level=4, contents='Conditional Hyphens'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=4, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Visible Word Dividers'),
                    Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                    TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                    TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                    Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                    Heading(level=4, contents='Historic Word Separators'),
                    Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                    Paragraph(contents='Examples of Historic Word Separators include:'),
                    TableRow(contents='16EB\ue000RUNIC SINGLE DOT PUNCTUATION'),
                    TableRow(contents='16EC\ue000RUNIC MULTIPLE DOT PUNCTUATION'),
                    TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                    TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                    TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                    TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                    TableRow(contents='205B\ue000FOUR DOT MARK'),
                    TableRow(contents='205D\ue000TRICOLON'),
                    TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                    TableRow(contents='2E19\ue000PALM BRANCH'),
                    TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                    TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                    TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                    TableRow(contents='2E2D\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='2E30\ue000RING POINT'),
                    TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                    TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                    TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                    TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                    TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                    TableRow(contents='1091F\ue000PHOENICIAN WORD DIVIDER'),
                    TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                    Heading(level=4, contents='Dandas'),
                    Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                    Paragraph(contents='Examples of dandas include:'),
                    TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                    TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                    TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                    TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                    TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                    TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                    TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                    TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                    TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                    TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                    TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                    TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                    TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                    TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                    TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                    TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                    Heading(level=4, contents='Tibetan'),
                    TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                    TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                    TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                    TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                    TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                    TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                    Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Other Terminating Punctuation'),
                    Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                    TableRow(contents='1804\ue000MONGOLIAN COLON'),
                    TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                    TableRow(contents='1B5A\ue000BALINESE PANTI'),
                    TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                    TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                    TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                    TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                    TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                    TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                    TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                    TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                    TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                    TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                    TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                    TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                    TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                    TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                    TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                    TableRow(contents='2E17\ue000OBLIQUE DOUBLE HYPHEN'),
                    TableRow(contents='A60D\ue000VAI COMMA'),
                    TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                    TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                    TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                    TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                    TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                    TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                    TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                    TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                    TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                    Heading(level=3, contents='BB: Break Before (B)'),
                    Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                    Paragraph(contents='Examples of BB characters are described in the following sections.'),
                    Heading(level=4, contents='Dictionary Use'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    TableRow(contents='1FFD\ue000GREEK OXIA'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                    TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                    Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                    Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                    TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                    TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                    TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                    TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                    TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                    TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                    TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                    TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                    TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                    TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                    TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                    TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                    TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                    Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Mongolian'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                    Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                    Paragraph(contents='Some languages, including Spanish, use EM DASH to set off a parenthetical, and the surrounding dashes should not be broken from the contained text. In this usage there is space on the side where it can be broken. This does not conflict with symmetrical usages, either with spaces on both sides of the em-dash or with no spaces.'),
                    Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                    TableRow(contents='000C\ue000FORM FEED (FF)'),
                    TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                    Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR (LS)'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. This is similar to HTML <BR>.'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR (PS)'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LS, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                    Heading(level=4, contents='Newline Function (NLF)'),
                    Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                    Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                    Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                    Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                    Heading(level=3, contents='CJ: Conditional Japanese Starter'),
                    Paragraph(contents='This character class contains Japanese small hiragana and katakana. Characters of this class may be treated as either NS or ID.'),
                    Paragraph(contents='CSS Text Level 3 (which supports Japanese line layout) defines three distinct values for its line-break behavior:'),
                    Paragraph(contents='• strict, typically used for long lines'),
                    Paragraph(contents='• normal (CSS default), the behavior typically used for books and documents'),
                    Paragraph(contents='• loose, typically used for short lines such as in newspapers'),
                    Paragraph(contents='These have different sets of “kinsoku” characters which cannot be at the beginning or end of a line; strict has the largest set, while loose has the smallest. The motivation for the smaller number of kinsoku characters is to avoid triggering justification that puts characters off the grid position.'),
                    Paragraph(contents='Treating characters of class CJ as class NS will give CSS strict line breaking; treating them as class ID will give CSS normal breaking.'),
                    Paragraph(contents='The CJ line break class includes'),
                    TableRow(contents='3041, 3043, 3045, etc.\ue000Small hiragana'),
                    TableRow(contents='30A1, 30A3, 30A5, etc.\ue000Small katakana'),
                    TableRow(contents='30FC\ue000KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF67..FF70\ue000Halfwidth variants'),
                    Heading(level=3, contents='CL: Close Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                    Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                    Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                    TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                    Heading(level=4, contents='Combining Characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                    Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 No-Break SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                    Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                    Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                    Heading(level=4, contents='Control and Formatting Characters'),
                    Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                    Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                    Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                    TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                    TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                    Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                    Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                    Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                    Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                    TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                    TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                    TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                    TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                    TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                    TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following are examples of characters of line break class GL:'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                    TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE. NARROW NO-BREAK SPACE is used in Mongolian. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in Section 13.2, Mongolian, of [Unicode].'),
                    Paragraph(contents='NARROW NO-BREAK SPACE is a narrow version of NO-BREAK SPACE, which has exactly the same line breaking behavior, but with a narrow display width. It is regularly used in Mongolian in certain grammatical contexts (before a particle), where it also influences the shaping of the glyphs for the particle. In Mongolian text, the NARROW NO-BREAK SPACE is typically displayed with one third the width of a normal space character.'),
                    Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                    Paragraph(contents='The MONGOLIAN VOWEL SEPARATOR is equivalent to a NARROW NO-BREAK SPACE in its line breaking behavior, but has different effects in controlling the shaping of its preceding and following characters. It constitutes a word-internal space and is typically displayed with half the width of a NARROW NO-BREAK SPACE.'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                    TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                    Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                    Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                    Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                    Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                    Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                    Heading(level=3, contents='HY: Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                    Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                    Heading(level=3, contents='ID: Ideographic (B/A)'),
                    Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                    TableRow(contents='2E80..2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                    TableRow(contents='30A0..30FF\ue000Katakana (except small characters)'),
                    TableRow(contents='3400..4DB5\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='4E00..9FFF\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='F900..FAD9\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490..A4CF\ue000YI RADICALS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF01..FF5A\ue000FULL WIDTH LATIN LETTERS and DIGITS'),
                    Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                    Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                    Paragraph(contents='The CJK blocks and regions in which unassigned characters default to line break class ID are:'),
                    TableRow(contents='CJK Unified Ideographs Extension A'),
                    TableRow(contents='CJK Unified Ideographs'),
                    TableRow(contents='CJK Compatibility Ideographs'),
                    TableRow(contents='CJK Unified Ideographs Extension B'),
                    TableRow(contents='CJK Unified Ideographs Extension C'),
                    TableRow(contents='CJK Unified Ideographs Extension D'),
                    TableRow(contents='CJK Compatibility Ideographs Supplement'),
                    TableRow(contents='SIP (Plane 2) outside of blocks'),
                    TableRow(contents='TIP (Plane 3) outside of blocks'),
                    Heading(level=4, contents='Korean'),
                    Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    Heading(level=3, contents='HL: Hebrew Letter (XB)'),
                    Paragraph(contents='This class includes all Hebrew letters.'),
                    Paragraph(contents='When a Hebrew letter is followed by a hyphen, there is no break on either side of the hyphen. In this context a hyphen is any character of class HY or class BA. In other respects, Hebrew letters behave the same as characters of class AL.'),
                    Paragraph(contents='Included in this class are all characters of General Category Letter that have Script=Hebrew.'),
                    Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                    Heading(level=4, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    TableRow(contents='060C\ue000ARABIC COMMA'),
                    TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                    TableRow(contents='07F8\ue000NKO COMMA'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                    TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                    TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                    Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                    Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                    Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                    Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                    Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                    Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                    Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                    Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                    Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                    Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                    Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                    TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                    Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                    Heading(level=3, contents='NS: Nonstarters (XB)'),
                    Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include:'),
                    TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='203D\ue000INTERROBANG'),
                    TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                    TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                    TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='303C\ue000MASU MARK'),
                    TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                    TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                    TableRow(contents='30FD..30FE\ue000KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='Note: Optionally, the NS restriction may be relaxed by tailoring, with some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles. Alternatively, line breaking can be tightened by moving characters that are ID into NS.'),
                    Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                    Heading(level=3, contents='NU: Numeric (XP)'),
                    Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                    Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                    TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                    TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                    Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                    Heading(level=3, contents='OP: Open Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                    TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                    TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                    TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                    Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                    Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                    Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                    Paragraph(contents='Examples of Postfix characters include'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='060B\ue000AFGHANI SIGN'),
                    TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='FDFC\ue000RIAL SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                    Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                    Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                    Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                    Heading(level=3, contents='QU: Quotation (XB/XA)'),
                    Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                    Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                    Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                    TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                    TableRow(contents='2E0B\ue000RAISED SQUARE'),
                    Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                    Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                    TableRow(contents='0E00..0E7F\ue000Thai'),
                    TableRow(contents='0E80..0EFF\ue000Lao'),
                    TableRow(contents='1000..109F\ue000Myanmar'),
                    TableRow(contents='1780..17FF\ue000Khmer'),
                    TableRow(contents='1950..197F\ue000Tai Le'),
                    TableRow(contents='1980..19DF\ue000New Tai Lue'),
                    TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                    TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                    TableRow(contents='AA80..AADF\ue000Tai Viet'),
                    Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                    Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                    Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                    Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                    Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                    Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                    Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                    Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                    Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                    Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                    Heading(level=3, contents='XX: Unknown (XP)'),
                    Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                    Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                    Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                    Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                    Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                    Heading(level=3, contents='5.2 Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                    Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                    Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                    Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                    Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                    Heading(level=3, contents='5.3 Use of Hyphen'),
                    Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                    Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                    Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                    Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                    Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                    Paragraph(contents='dispara- te'),
                    Paragraph(contents='and the latter as'),
                    Paragraph(contents='dispara- -te.'),
                    Paragraph(contents='A recommended practice is to type <SHY, NBHY> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                    Paragraph(contents='• Simply inserting a hyphen glyph'),
                    Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                    Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                    Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                    Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                    Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                    Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                    Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                    Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                    Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                    Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                    Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                    Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [Bidi] and Section 8.2, Arabic, of [Unicode].'),
                    Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                    Paragraph(contents='The sequence <SHY, NBHY> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                    Heading(level=3, contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                    Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                    Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                    Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                    Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                    Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                    Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                    Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                    Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                    Heading(level=3, contents='5.7 Word Separator Characters'),
                    Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                    Paragraph(contents='1. suppress the visible word separator'),
                    Paragraph(contents='The:quick:brown fox:jumped.'),
                    Paragraph(contents='2. break before the visible word separator'),
                    Paragraph(contents='The:quick:brown :fox:jumped.'),
                    Paragraph(contents='3. break after the visible word separator'),
                    Paragraph(contents='The:quick:brown: fox:jumped.'),
                    Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                    Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                    Paragraph(contents='A slightly simplified implementation of such an algorithm can be devised that uses a two-dimensional table to resolve break opportunities between pairs or characters. It is described in Section 7, Pair Table-Based Implementation.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1 Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                    Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                    Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                    Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, and ZW define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                    Heading(level=4, contents='Resolve line breaking classes:'),
                    Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, CJ, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                    Paragraph(contents='In the absence of such criteria all characters with a specific combination of original class and General_Category property value are resolved as follows:'),
                    TableRow(contents='Resolved\ue000Original\ue000General_Category'),
                    TableRow(contents='AL\ue000AI, SG, XX\ue000Any'),
                    TableRow(contents='CM\ue000SA\ue000Only Mn or Mc'),
                    TableRow(contents='AL\ue000SA\ue000Any except Mn and Mc'),
                    TableRow(contents='NS\ue000CJ\ue000Any'),
                    Heading(level=4, contents='Start and end of text:'),
                    Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                    Rule(contents='LB2 Never break at the start of text.'),
                    Formula(contents='sot ×'),
                    Rule(contents='LB3 Always break at the end of text.'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                    Rule(contents='LB4 Always break after hard line breaks.'),
                    Formula(contents='BK !'),
                    Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                    Formula(contents='CR × LF'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='NL !'),
                    Rule(contents='LB6 Do not break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF | NL )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB7 Do not break before spaces or zero width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                    Formula(contents='ZW SP* ÷'),
                    Heading(level=4, contents='Combining marks:'),
                    Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                    Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules.'),
                    Formula(contents='Treat X CM* as if it were X.'),
                    Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                    Rule(contents='LB10 Treat any remaining combining mark as AL.'),
                    Formula(contents='Treat any remaining CM as it if were AL.'),
                    Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                    Heading(level=4, contents='Word joiner:'),
                    Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                    Formula(contents='× WJ'),
                    Formula(contents='WJ ×'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12 Do not break after NBSP and related characters.'),
                    Formula(contents='GL ×'),
                    Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                    Formula(contents='[^SP BA HY] × GL'),
                    Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                    Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× CP'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                    Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                    Formula(contents='(CL | CP) SP* × NS'),
                    Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 SP* × B2'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB18 Break after spaces.'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB20 Break before and after unresolved CB.'),
                    Formula(contents='÷ CB'),
                    Formula(contents='CB ÷'),
                    Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                    Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents="LB21a Don't break after Hebrew + Hyphen"),
                    Formula(contents='HL (HY | BA) ×'),
                    Rule(contents='LB22 Do not break between two ellipses, or between letters or numbers and ellipsis.'),
                    Formula(contents='(AL | HL) × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents='Do not break alphanumerics.'),
                    Rule(contents='LB23 Do not break within ‘a9’, ‘3a’, or ‘H%’.'),
                    Formula(contents='ID × PO'),
                    Formula(contents='(AL | HL) × NU'),
                    Formula(contents='NU × (AL | HL)'),
                    Rule(contents='LB24 Do not break between prefix and letters or ideographs.'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × (AL | HL)'),
                    Formula(contents='PO × (AL | HL)'),
                    Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                    Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                    Formula(contents='CL × PO'),
                    Formula(contents='CP × PO'),
                    Formula(contents='CL × PR'),
                    Formula(contents='CP × PR'),
                    Formula(contents='NU × PO'),
                    Formula(contents='NU × PR'),
                    Formula(contents='PO × OP'),
                    Formula(contents='PO × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='PR × NU'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Korean syllable blocks'),
                    Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                    Rule(contents='LB26 Do not break a Korean syllable.'),
                    Formula(contents='JL × (JL | JV | H2 | H3)'),
                    Formula(contents='(JV | H2) × (JV | JT)'),
                    Formula(contents='(JT | H3) × JT'),
                    Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                    Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                    Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                    Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                    Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                    Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                    Formula(contents='(AL | HL) × (AL | HL)'),
                    Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                    Formula(contents='IS × (AL | HL)'),
                    Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                    Formula(contents='(AL | HL | NU) × OP'),
                    Formula(contents='CP × (AL | HL | NU)'),
                    Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                    Rule(contents='LB31 Break everywhere else.'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='A two-dimensional table can be used to resolve break opportunities between pairs of characters. This section defines such a table. The rows of the table are labeled with the possible values of the line breaking property of the leading character in the pair. The columns are labeled with the line breaking class for the following character of the pair. Each intersection is labeled with the resulting line break opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of a similar table-based definition. However, it uses line breaking classes whose membership is not solely determined by the line breaking property (as in this annex), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classes defined previously.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, then the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes, of which only 14 appear to be unique. Any minimal table representation is unique, except for trivial reordering of rows and columns. Minimal tables for which the rows and columns are sorted alphabetically can be mechanically compared for differences. This is in contrast to the rules, where identical results can be achieved by sets of rules that cannot be easily compared by looking at their textual representation. However, any set of rules that is equivalent to a minimal pair table can be used to automatically generate such a table, which can then be used for comparison. The rules in Section 6, Line Breaking Algorithm, can be expressed as minimal pair tables if the extended context used as described below.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Most of the rules in Section 6, Line Breaking Algorithm, involve only pairs of characters, or they apply to a single line break class preceded or followed by any character. These rules can be represented directly in a pair table. However, rules LB14–LB17 require extended context to handle spaces.'),
                    Paragraph(contents='By broadening the definition of a pair from B A, where B is the line breaking class before a break and A the one after, to B SP* A, where SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line break opportunity (that is, direct and indirect breaks). Rules equivalent to the ones given in Section 6, Line Breaking Algorithm, can be formulated without explicit use of SP by using % to express indirect breaks instead. These rules can then be simplified to involve only pairs of classes—that is, only constructions of the form:'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B × A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can be automatically translated into a pair table, as in Table 2. Line breaking analysis then proceeds by pair table lookup as explained below. (For readability in table layout, the symbol ^ is used in the table instead of × and _ is used instead of ÷.)'),
                    Paragraph(contents='Rule LB9 requires extended context for handling combining marks. This extended context must also be built into the code that interprets the pair table. For convenience in detecting the condition where A = CM, the symbols # and @ are used in the pair table, instead of % and ^, respectively. See Section 7.5, Combining Marks.'),
                    Paragraph(contents='Rule LB21a also requires extended context to handle Hebrew letters followed by hyphens. This rule cannot be represented directly by the example pair table and is not handled by the sample implementation code included here. In the absence of special case handling, rule LB21a is effectively ignored by this example pair table and implementation code.'),
                    Heading(level=3, contents='7.3 Example Pair Table'),
                    Paragraph(contents='Table 2 implements the line breaking behavior described in this annex, with the limitation that only context of the form B SP* A is considered. BK, CR, LF, NL, and SP classes are handled explicitly in the outer loop, as given in the code sample below. Pair context of the form B CM* can be processed by handling the special entries @ and # in the driving loop, as explained in Section 7.5, Combining Marks. Conjoining jamos are considered separately in Section 7.6, Conjoining Jamos. In Table 2, the rows are labeled with the B class and the columns are labeled with the A class.'),
                    Paragraph(contents='Table 2. Example Pair Table'),
                    TableRow(contents='OP\ue000CL\ue000CP\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000HL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM\ue000WJ\ue000H2\ue000H3\ue000JL\ue000JV\ue000JT'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000@\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^'),
                    TableRow(contents='CL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CP\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='QU\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='NS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='EX\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='SY\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='PR\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='PO\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='NU\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='AL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ID\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IN\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HY\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BA\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BB\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='B2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000^\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ZW\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CM\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='WJ\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='H2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='H3\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='JV\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='JT\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='Table 2 uses the following notation:'),
                    Paragraph(contents='Resolved outside the pair table: AI, BK, CB, CJ, CR, LF, NL, SA, SG, SP, XX'),
                    Paragraph(contents='^ denotes a prohibited break: B ^ A is equivalent to B SP* × A; in other words, never break before A and after B, even if one or more spaces intervene.'),
                    Paragraph(contents='% denotes an indirect break opportunity: B % A is equivalent to B × A and B SP+ ÷ A; in other words, do not break before A, unless one or more spaces follow B.'),
                    Paragraph(contents='@ denotes a prohibited break for combining marks: B @ A is equivalent to B SP* × A, where A is of class CM. For more details, see Section 7.5, Combining Marks.'),
                    Paragraph(contents='# denotes an indirect break opportunity for combining marks following a space: B # A is equivalent to (B × A and B SP+ ÷ A), where A is of class CM.'),
                    Paragraph(contents='_ denotes a direct break opportunity (equivalent to ÷ as defined above).'),
                    Paragraph(contents='Note: In the online edition, hovering over the cells in a browser with tool-tips enabled reveals the rule number that determines the breaking status for the pair in question. When a pair must be tested both with and without intervening spaces, multiple rules are given. Hovering over a line breaking class name gives a representative member of the class and additional information. Clicking on any line break class name anywhere in the document jumps to the definition.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two sections provide sample code [Code14] that demonstrates how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the line breaking classes CR, LF, and NL need to be added. They have been omitted here for brevity, but see Section 7.7, Explicit Breaks.'),
                    Paragraph(contents='The sample code assumes that the line breaking classes AI, CB, SG, and XX have been resolved according to rule LB1 as part of initializing the pcls array. The code further assumes that the complex line break analysis for characters with line break class SA is handled in function findComplexBreak, for which the following placeholder is given:'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    // cls - resolved line break class, may differ from pcls[0]'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line breaking opportunities (output)'),
                    CodeLine(contents='    // cch - remaining length of input '),
                    CodeLine(contents='    int '),
                    CodeLine(contents='   findComplexBreak(enum break_class cls, enum break_class *pcls,'),
                    CodeLine(contents='                             enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='            if (!cch)'),
                    CodeLine(contents='                return 0;'),
                    CodeLine(contents='            for (int ich = 1; ich < cch; ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='                // .. do complex break analysis here'),
                    CodeLine(contents='                // and report any break opportunities in pbrk ..'),
                    CodeLine(contents=''),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK; // by default, no break'),
                    CodeLine(contents=''),
                    CodeLine(contents='                if (pcls[ich] != SA)'),
                    CodeLine(contents='                    break;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='            return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The entries in the example pair table correspond to the following enumeration. For diagnostic purposes, the sample code returns these values to indicate not only the location but also the type of rule that triggered a given break opportunity.'),
                    CodeLine(contents='    enum break_action {'),
                    CodeLine(contents='           DIRECT_BRK = 0,             // _ in table'),
                    CodeLine(contents='           INDIRECT_BRK,               // % in table'),
                    CodeLine(contents='           COMBINING_INDIRECT_BRK,     // # in table'),
                    CodeLine(contents='           COMBINING_PROHIBITED_BRK,   // @ in table'),
                    CodeLine(contents='           PROHIBITED_BRK,             // ^ in table'),
                    CodeLine(contents='           EXPLICIT_BRK };             // ! in rules'),
                    Paragraph(contents='Because the contexts involved in indirect breaks of the form B SP* A are of indefinite length, they need to be handled explicitly in the driver code. The sample implementation of a findLineBrk function below remembers the line break class for the last characters seen, but skips any occurrence of SP without resetting this value. Once character A is encountered, a simple lookback is used to see if it is preceded by a SP. This lookback is necessary only if B % A. To handle the case of a SP following sot, it is necessary to set cls to a dummy value. Using WJ gives the correct result and, as required, is unaffected by any tailoring.'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable) (returned value)'),
                    CodeLine(contents="    // cls - current resolved line break class for 'before' character (variable)"),
                    CodeLine(contents=''),
                    CodeLine(contents='    int'),
                    CodeLine(contents='    findLineBrk(enum break_class *pcls, enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='        if (!cch) return 0;'),
                    CodeLine(contents=''),
                    CodeLine(contents="        enum break_class cls = pcls[0];   // class of 'before' character"),
                    CodeLine(contents=''),
                    CodeLine(contents='        // treat SP at start of input as if it followed a WJ'),
                    CodeLine(contents='        if (cls == SP)'),
                    CodeLine(contents='            cls = WJ;'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='        for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // to handle explicit breaks, replace code from "for" loop condition'),
                    CodeLine(contents='            // above to comment below by code given in Section 7.7'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle spaces explicitly'),
                    CodeLine(contents='            if (pcls[ich] == SP) {'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;   // apply rule LB7: × SP'),
                    CodeLine(contents='                continue;                       // do not update cls'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle complex scripts in a separate function'),
                    CodeLine(contents='            if (pcls[ich] == SA) {'),
                    CodeLine(contents='                ich += findComplexBreak(cls, &pcls[ich-1], &pbrk[ich-1],'),
                    CodeLine(contents='                           cch - (ich-1));'),
                    CodeLine(contents='                if (ich < cch)'),
                    CodeLine(contents='                    cls = pcls[ich];'),
                    CodeLine(contents='                continue;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // lookup pair table information in brkPairs[before, after];'),
                    CodeLine(contents='            enum break_action brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents=''),
                    CodeLine(contents='            pbrk[ich-1] = brk;                     // save break action in output array'),
                    CodeLine(contents=''),
                    CodeLine(contents='            if (brk == INDIRECT_BRK) {             // resolve indirect break'),
                    CodeLine(contents='                if (pcls[ich - 1] == SP)           // if context is A SP + B'),
                    CodeLine(contents='                    pbrk[ich-1] = INDIRECT_BRK;    //       break opportunity'),
                    CodeLine(contents='                else                               // else'),
                    CodeLine(contents='                    pbrk[ich-1] = PROHIBITED_BRK;  //       no break opportunity'),
                    CodeLine(contents='            } '),
                    CodeLine(contents='            '),
                    CodeLine(contents='            // handle breaks involving a combining mark (see Section 7.5)'),
                    CodeLine(contents=''),
                    CodeLine(contents="            // save cls of 'before' character (unless bypassed by 'continue')"),
                    CodeLine(contents='            cls = pcls[ich];'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        pbrk[ich-1] = EXPLICIT_BRK;                // always break at the end'),
                    CodeLine(contents=''),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The function returns all of the break opportunities in the array pointed to by pbrk, using the values in the table. On return, pbrk[ich] is the type of break after the character at index ich.'),
                    Paragraph(contents='A common optimization in implementation is to determine only the nearest line break opportunity prior to the position of the first character that would cause the line to become overfull. Such an optimization requires backward traversal of the string instead of forward traversal as shown in the sample code.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='The implementation of combining marks in the pair table presents an additional complication because rule LB9 defines a context X CM* that is of arbitrary length. There are some similarities to the way contexts of the form B SP* A that are involved in indirect breaks are evaluated. However, contexts of the form SP CM* or CM* SP also need to be handled, while rule LB10 requires some CM* to be treated like AL.'),
                    Paragraph(contents='Implementing LB10. This rule can be reflected directly in the example pair table in Table 2 by assigning the same values in the row marked CM as in the row marked AL. Incidentally, this is equivalent to rewriting the rules LB11–LB31 by duplicating any expression that contains an AL on its left hand side with another expression that contains a CM. For example, in LB22'),
                    Formula(contents='AL × IN'),
                    Paragraph(contents='would become'),
                    Formula(contents='AL × IN CM × IN'),
                    Paragraph(contents='Rewriting these rules as indicated here (and then deleting LB10) is fully equivalent to the original rules because rule LB9 already accounts for all CMs that are not supposed to be treated like AL. For a complete description see Example 9 in Section 8.2, Examples of Customization.'),
                    Paragraph(contents='Implementing LB9. Rule LB9 is implemented in the example pair table in Table 2 by assigning a special # entry in the column marked CM for all rows referring to a line break class that allows a direct or indirect break after itself. (Note that the intersection between the row for class ZW and the column for class CM must be assigned “_” because of rule LB8.) The # corresponds to a break_action value of COMBINING_INDIRECT_BREAK, which triggers the following code in the sample implementation:'),
                    CodeLine(contents='    else if (brk == COMBINING_INDIRECT_BRK) {    // resolve combining mark break'),
                    CodeLine(contents='        pbrk[ich-1] = PROHIBITED_BRK;             // do not break before CM'),
                    CodeLine(contents='        if (pcls[ich-1] == SP){'),
                    CodeLine(contents='            #ifndef LEGACY_CM                    // new: space is not a base'),
                    CodeLine(contents='                pbrk[ich-1] = COMBINING_INDIRECT_BRK;    // apply rule SP ÷ '),
                    CodeLine(contents='            #else'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;      // legacy: keep SP CM together'),
                    CodeLine(contents='                if (ich > 1)'),
                    CodeLine(contents='                    pbrk[ich-2] = ((pcls[ich - 2] == SP) ?'),
                    CodeLine(contents='                                                  INDIRECT_BRK : DIRECT_BRK);'),
                    CodeLine(contents='            #endif'),
                    CodeLine(contents='        } else                                   // apply rule LB9: X CM * -> X'),
                    CodeLine(contents='            continue;                            // do not update cls'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    Paragraph(contents='When handling a COMBINING_INDIRECT_BREAK, the last remembered line break class in variable cls is not updated, except for those cases covered by rule LB10. A tailoring of rule LB9 that keeps the last SPACE character preceding a combining mark, if any, and therefore breaks before that SPACE character can easily be implemented as shown in the sample code. (See Section 9.2, Legacy Support for Space Character as Base for Combining Marks.)'),
                    Paragraph(contents='Any rows in Table 2 for line break classes that prohibit breaks after must be handled explicitly. In the example pair table, these are assigned a special entry “@”, which corresponds to a special break action of COMBINING_PROHIBITED_BREAK that triggers the following code:'),
                    CodeLine(contents='    else if (brk == COMBINING_PROHIBITED_BRK) { // this is the case OP SP* CM'),
                    CodeLine(contents='        pbrk[ich-1] = COMBINING_PROHIBITED_BRK;  // no break allowed'),
                    CodeLine(contents='        if (pcls[ich-1] != SP)'),
                    CodeLine(contents='            continue;                          // apply rule LB9: X CM* -> X'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The only line break class that unconditionally prevents breaks across a following SP is OP. The preceding code fragment ensures that OP CM is handled according to rule LB9 and OP SP CM is handled as OP SP AL according to rule LB10.'),
                    Heading(level=3, contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='For Korean Syllable Blocks, the information in rule LB26 is represented by a simple pair table shown in Table 3.'),
                    Paragraph(contents='Table 3. Korean Syllable Block Pair Table'),
                    TableRow(contents='H2\ue000H3\ue000JL\ue000JV\ue000JT'),
                    TableRow(contents='H2\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='H3\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JL\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='JV\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='JT\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='When constructing a pair table such as Table 2, this pair table for Korean syllable blocks in Table 3 is merged with the main pair table for all other line break classes by adding the cells from Table 3 beyond the lower-right corner of the main pair table. Next, according to rule LB27, any empty cells in the new rows are filled with the same values as in the existing row for class ID, and any empty cells for the new columns are filled with the same values as in the existing column for class ID. The resulting merged table is shown in Table 2.'),
                    Heading(level=3, contents='7.7 Explicit Breaks'),
                    Paragraph(contents='Handling explicit breaks is straightforward in the driver code, although it does clutter up the loop condition and body of the loop a bit. For completeness, the following sample shows how to change the loop condition and add if statements—both before and inside the loop—that handle BK, NL, CR, and LF. Because NL and BK behave identically by default, this code can be simplified in implementations where the character classification is changed so that BK will always be substituted for NL when assigning the line break class. Because this optimization does not change the result, it is not considered a tailoring and does not affect conformance.'),
                    CodeLine(contents='    // handle case where input starts with an LF'),
                    CodeLine(contents='    if (cls == LF)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // treat initial NL like BK'),
                    CodeLine(contents='    if (cls == NL)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // loop over all pairs in the string up to a hard break or CRLF pair'),
                    CodeLine(contents='    for (int ich = 1; (ich < cch) && (cls != BK) && (cls != CR || pcls[ich] == LF); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle BK, NL and LF explicitly'),
                    CodeLine(contents='        if (pcls[ich] == BK ||pcls[ich] == NL ||  pcls[ich] == LF)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = BK;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle CR explicitly'),
                    CodeLine(contents='        if(pcls[ich] == CR)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = CR;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle spaces explicitly...'),
                    CodeLine(contents=''),
                    CodeLine(contents='    '),
                    Heading(level=2, contents='8 Customization'),
                    Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                    Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                    Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                    Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how to customize the pair table implementation of the line breaking algorithm for these tailorings.'),
                    Heading(level=3, contents='8.1 Types of Tailoring'),
                    Paragraph(contents='There are three principal ways of tailoring the sample pair table implementation of the line breaking algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to permanently overriding some of the rules in Section 6, Line Breaking Algorithm.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions This is a dynamic equivalent of the preceding. Instead of changing the values for the pair intersection directly in the table, they are labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be enabled at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real-world implementation of a pair table-based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. That implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=3, contents='8.2 Examples of Customization'),
                    Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm. Section 7.4, Sample Code, outlines such an approach in which the interface to the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the line breaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersections of ID/ID, AL/ID, and ID/AL are affected. For alphabetic style line breaking, breaks for these cases require space; for ideographic style line breaking, these cases do not require spaces. Therefore, the implementation defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given text.'),
                    Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. In this case the intersections of NU/NU, NU/AL, AL/AL, and AL/NU are affected.'),
                    Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by mapping class CJ to be handled as class ID in rule LB1.'),
                    Paragraph(contents='Example 6. Some implementations may wish to tailor the line breaking algorithm to resolve grapheme clusters according to Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], as a first stage. Generally, the line breaking algorithm does not create line break opportunities within default grapheme clusters; therefore such a tailoring would be expected to produce results that are close to those defined by the default algorithm. However, if such a tailoring is chosen, characters that are members of line break class CM but not part of the definition of default grapheme clusters must still be handled by rules LB9 and LB10, or by some additional tailoring.'),
                    Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * ( CL | CP ) ? ( PR | PO) ?'),
                    Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                    Paragraph(contents='Regex-Number: Do not break numbers.'),
                    Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                    Formula(contents='( OP | HY ) × NU'),
                    Formula(contents='NU × (NU | SY | IS)'),
                    Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL | CP )'),
                    Formula(contents='NU (NU | SY | IS)* (CL | CP)? × (PO | PR)'),
                    Paragraph(contents='This customized rule uses extended contexts that cannot be represented in a pair table. In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                    Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                    Formula(contents='[^NU] × CL'),
                    Formula(contents='[^NU] × CP'),
                    Formula(contents='× EX'),
                    Formula(contents='[^NU] × IS'),
                    Formula(contents='[^NU] × SY'),
                    Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                    Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                    Heading(level=2, contents='9 Implementation Notes'),
                    Paragraph(contents='This section provides additional notes on implementation issues.'),
                    Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                    Paragraph(contents='To replace rule LB9, terms of the form'),
                    Paragraph(contents='B # A'),
                    Paragraph(contents='B SP* # A'),
                    Paragraph(contents='B #'),
                    Paragraph(contents='B SP* #'),
                    Paragraph(contents='are replaced by terms of the form'),
                    Paragraph(contents='B CM* # A'),
                    Paragraph(contents='B CM* SP* # A'),
                    Paragraph(contents='B CM* #'),
                    Paragraph(contents='B CM* SP* #'),
                    Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                    Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                    Paragraph(contents='Replace LB10 by the following rule:'),
                    Paragraph(contents='× CM'),
                    Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                    Paragraph(contents='(AL | NU) × OP'),
                    Paragraph(contents='add another rule'),
                    Paragraph(contents='CM × OP.'),
                    Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                    Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='As stated in [Unicode], Section 7.9, Combining Marks, combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                    Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                    Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID.'),
                    Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                    Heading(level=2, contents='10 Testing'),
                    Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2 Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                    Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                    Paragraph(contents='Note:The break opportunities produced by an implementation of the rules of Section 6, Line Breaking Algorithm differ in certain cases from those produced by the pair table included in Section 7, Pair Table-Based Implementation. The differences occur with sequences like ZW SP CL. The test data file matches the results expected of a rule based implementation. The inconsistencies between the two will be addressed in the next revision of this document.'),
                    Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                    Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                    Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                    Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                    Paragraph(contents='1. The rules are cast into a more regex-style.'),
                    Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                    Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                    Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                    Paragraph(contents='• 13.01) [^NU] × CL'),
                    Paragraph(contents='• 13.02) × EX'),
                    Paragraph(contents='• ...'),
                    Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                    Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                    Paragraph(contents='Table 4. Numbering of Test Rules'),
                    TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                    TableRow(contents='LB2\ue0000.2\ue000start of text'),
                    TableRow(contents='LB3\ue0000.3\ue000end of text'),
                    TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                    TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                    TableRow(contents='LB31\ue000999\ue000÷ any'),
                    Heading(level=2, contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                    Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                    TableRow(contents='6.1.0\ue0005.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                    TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                    TableRow(contents='LB2\ue0002\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                    TableRow(contents='LB3\ue0003\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                    TableRow(contents='LB4\ue0004\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB5\ue0005\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB6\ue0006\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                    TableRow(contents='LB7\ue0007\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                    TableRow(contents='LB8\ue0008\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                    TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                    TableRow(contents='LB9\ue0009\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB10\ue00010\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                    TableRow(contents='LB11\ue00011\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12\ue00012\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12a\ue00012a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB13\ue00013\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                    TableRow(contents='LB14\ue00014\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                    TableRow(contents='LB15\ue00015\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                    TableRow(contents='LB16\ue00016\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                    TableRow(contents='LB17\ue00017\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                    TableRow(contents='LB18\ue00018\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                    TableRow(contents='LB19\ue00019\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                    TableRow(contents='LB20\ue00020\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                    TableRow(contents='LB21\ue00021\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                    TableRow(contents='LB21a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB22\ue00022\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                    TableRow(contents='LB23\ue00023\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                    TableRow(contents='LB24\ue00024\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='LB25\ue00025\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                    TableRow(contents='LB26\ue00026\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB27\ue00027\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB28\ue00028\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                    TableRow(contents='LB29\ue00029\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30\ue00030\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB31\ue00031\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                    Heading(level=2, contents='References'),
                    Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='Asmus Freytag is the author of the initial version and has added to and maintained the text of this annex.'),
                    Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintains the text.'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                    Heading(level=2, contents='Modifications'),
                    Paragraph(contents='For details of the change history, see the online copy of this annex at http://www.unicode.org/reports/tr14/.'),
                    Paragraph(contents='The following documents the changes introduced by each revision.'),
                    Heading(level=4, contents='Revision 28:'),
                    Paragraph(contents='• Reissued for Unicode 6.1.0.'),
                    Paragraph(contents="• Add rule 21a, don't break after Hebrew + hyphen."),
                    Paragraph(contents='• Introduce character class HL (Hebrew Letter).'),
                    Paragraph(contents='• Introduce character class CJ for small kana, and amend rule LB1 to provide default resolution for class CJ.'),
                    Paragraph(contents='• Clarify that the list of GL characters is not comprehensive.'),
                    Paragraph(contents='• Update Example 7 of Section 8.2 (Customization) to reflect the introduction of character class CP.'),
                    Paragraph(contents='Revision 27 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                    Heading(level=4, contents='Revision 26:'),
                    Paragraph(contents='• Reissued for Unicode 6.0.0.'),
                    Paragraph(contents='• In Section 5.1, revised the description of the SHY character.'),
                    Paragraph(contents='• Changed LB8 from "ZW ÷" to "ZW SP* ÷" in accordance with UAX 14 Corrigendum #7, http://www.unicode.org/versions/corrigendum7.html.'),
                    Paragraph(contents='• Changed references to Unicode 5.2 to generic references where appropriate.'),
                    Paragraph(contents='• In Section 3, removed Ideographic Space from the list of spaces that may be compressed or expanded and clarified that the justification of lines is out of scope.'),
                    Paragraph(contents='Revision 25 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                    Heading(level=4, contents='Revision 24:'),
                    Paragraph(contents='• Reissued for Unicode 5.2.0.'),
                    Paragraph(contents='• Added class CP, reintroduced rule LB30, adjusted other rules for class CP.'),
                    Paragraph(contents='• In Section 5.1, clarified that the lists of characters for each property contain representative characters, and are not necessarily complete.'),
                    Paragraph(contents='• Unassigned code points in CJK regions default to class ID.'),
                    Paragraph(contents='• Added Tai Tham, Myanmar Extended-A and Tai Viet blocks to class SA.'),
                    Paragraph(contents='• Brought descriptive names of the character classes into closer alignment with the Unicode Line Break character property values.'),
                    Paragraph(contents='• Small edits for improved clarity, document style.'),
                    Paragraph(contents='Revision 23 being a proposed update, only changes between revisions 22 and 24 are noted here.'),
                    Heading(level=4, contents='Revision 22:'),
                    Paragraph(contents='• Updated for Version 5.1.0.'),
                    Paragraph(contents='• Added 2E18, INVERTED INTERROBANG, to class OP.'),
                    Paragraph(contents='• Added 2064, INVISIBLE PLUS, to class AL.'),
                    Paragraph(contents='• Added 2E00..2E01, 2E06..2E08, 2E0B to class QU.'),
                    Paragraph(contents='• Removed LB30, to correct regression for U+3002 IDEOGRAPHIC FULL STOP'),
                    Paragraph(contents='• Add Example 9 to Section 8, Customization.'),
                    Paragraph(contents='• Substantial revisions to Section 4, Conformance.'),
                    Paragraph(contents='• Section 5.7, Word Separators, added.'),
                    Paragraph(contents='• Section 10, Testing, added.'),
                    Paragraph(contents='• Renumber rules for consistency: 12a -> 12; 12b -> 12a'),
                    Paragraph(contents='• Added 02DF, MODIFIER LETTER CROSS ACCENT, to class BB.'),
                    Paragraph(contents='• Added discussion for 202F NARROW NO-BREAK SPACE and 180E MONGOLIAN VOWEL SEPARATOR'),
                    Paragraph(contents='• Corrected typos in LB13 and LB16'),
                    Paragraph(contents='• Added characters introduced with Unicode 5.1 to the lists associated with the line break properties.'),
                    Paragraph(contents='• Added Section 5.2 on the special handling of hyphens. Edited Section 3 for clarity.'),
                    Paragraph(contents='• Improved delineation between normative and informative information.'),
                    Paragraph(contents='• Changed from EX to IS'),
                    Paragraph(contents='• 060C ( ، ) ARABIC COMMA'),
                    Paragraph(contents='• Changed from EX to PO'),
                    Paragraph(contents='• 066A ( ٪ ) ARABIC PERCENT SIGN'),
                    Paragraph(contents='• Changed from AI to OP'),
                    Paragraph(contents='• 00A1 ( ¡ ) INVERTED EXCLAMATION MARK'),
                    Paragraph(contents='• 00BF ( ¿ ) INVERTED QUESTION MARK'),
                    Paragraph(contents='• Changed from BA to EX'),
                    Paragraph(contents='• 1802 ( ᠂ ) MONGOLIAN COMMA'),
                    Paragraph(contents='• 1803 ( ᠃ ) MONGOLIAN FULL STOP'),
                    Paragraph(contents='• 1808 ( ᠈ ) MONGOLIAN MANCHU COMMA'),
                    Paragraph(contents='• 1809 ( ᠉ ) MONGOLIAN MANCHU FULL STOP'),
                    Paragraph(contents='• 2CF9 ( ⳹ ) COPTIC OLD NUBIAN FULL STOP'),
                    Paragraph(contents='• 2CFE ( ⳾ ) COPTIC FULL STOP'),
                    Paragraph(contents='• Changed from BA to AL'),
                    Paragraph(contents='• 1A1E ( ᨞ ) BUGINESE PALLAWA'),
                    Paragraph(contents='• Changed from AL to BB'),
                    Paragraph(contents='• 1FFD ( ´ ) GREEK OXIA'),
                    Paragraph(contents='• Added a note on lack of canonical equivalence for the definition of ambiguous characters.'),
                    Paragraph(contents='• Corrected typos in the sample source code.'),
                    Paragraph(contents='• Split rule LB12 to accommodate Polish and Portuguese hyphenation.'),
                    Paragraph(contents='Revisions 20 and 21 being a proposed update, only changes between revisions 19 and 22 are noted here.'),
                    Heading(level=4, contents='Revision 19:'),
                    Paragraph(contents='• Changed 000B from CM to BK, changed 035C from CM to GL.'),
                    Paragraph(contents='• Changed 17D9 from NS to AL. 203D, 2047..2049 from AL to NS.'),
                    Paragraph(contents='• Corrected listing of NS property to match the data file to remove 17D8 and 17DA.'),
                    Paragraph(contents='• The data file has been corrected to match the listing of the BA property to include 1735 and 1736, also changed 05BE and 103D0 from AL to BA.'),
                    Paragraph(contents='• Changed the brackets 23B4.23B6 to AL.'),
                    Paragraph(contents='• Updated the SA property to make it more generic, includes changing many characters from CM to SA.'),
                    Paragraph(contents='• Reflected new characters'),
                    Paragraph(contents='• Made several text changes for clarifications, including reworded the intro to Section 6.'),
                    Paragraph(contents='• Added Section 9.'),
                    Paragraph(contents='• Restated the conformance clauses and reorganized the algorithm into a tailorable and a non-tailorable part; this affects text in Sections 4, 5, and 6.'),
                    Paragraph(contents='• Removed redundant term PR x HY from rule 18 and rule into new LB24 and LB26 to provide better granularity for tailoring,'),
                    Paragraph(contents='• Moved rule 11b and 13 above rule 8 (new LB13), restating rule 13 (new LB12) to preserve its effect in the new location.'),
                    Paragraph(contents='• Added new rule LB30 to handle words like “person(s)”.'),
                    Paragraph(contents='• Renumbered the rules.'),
                    Paragraph(contents='• Extensive copy-editing as part of Unicode 5.0 publication.'),
                    Paragraph(contents='Revision 18 being a proposed update, only changes between revisions 17 and 19 are noted here.'),
                    Heading(level=4, contents='Revision 17:'),
                    Paragraph(contents='• Significantly revised the line break classes for Tibetan, as well as Mongolian and Arabic Punctuation.'),
                    Paragraph(contents='• Added section 5.6 on Tibetan and section 7.7 on handling explicit breaks.'),
                    Paragraph(contents='• Added line break class assignments for Unicode 4.1 characters.'),
                    Paragraph(contents='• Significantly revised the line break class assignments for danda characters and made it consistent across scripts.'),
                    Paragraph(contents='• LB6: Replaced by new rules 18b and 18c, using new classes JL, JV, JT, H2, and H3.'),
                    Paragraph(contents='• LB7a: Deprecated rule 7a because SPACE as base character for standalone combining marks is deprecated.'),
                    Paragraph(contents='• LB7b: Revised 7b and section 7.5 as well as Table 2 to match the deprecation of rule 7a.'),
                    Paragraph(contents='• LB7b: Clarified that this rule does not apply to SP.'),
                    Paragraph(contents='• LB11a: Added a missing SP * to make the formula match the rule.'),
                    Paragraph(contents='• LB18b: Removed the existing rule 18b because it was redundant.'),
                    Paragraph(contents='• Corrected an erratum on revision 14 by splitting GL from WJ in rule 11b and moving to a new rule 13.'),
                    Paragraph(contents='• Updated the pair table and sample code to match the changes in the rules.'),
                    Paragraph(contents='• Updated the regular expression for numbers.'),
                    Paragraph(contents='• Added several notes on implementation techniques.'),
                    Paragraph(contents='• Moved all suggested tailorings from the rules section to the examples in section 8.2.'),
                    Paragraph(contents='Revision 16 being a proposed update, only changes between revisions 17 and 15 are noted here.'),
                    Heading(level=4, contents='Revision 15:'),
                    Paragraph(contents='• LB19b: Added new rule 19b.'),
                    Paragraph(contents='• Changed line breaking class: combining double diacritics from CM to GL, 037A and 2126 to match their canonical equivalents, 2140 corrected to AL, Arabic numerical separators from AL to NU, many alphabetic characters that are EAW=Ambiguous from AI to AL to better reflect current practice, remaining circled numbers and letters from AL to AI for consistency.'),
                    Paragraph(contents='• Added a note on the behavior of U+200B and U+3000 when lines are justified.'),
                    Paragraph(contents='• Reconciled the data file and description of line breaking classes in section 5.'),
                    Paragraph(contents='• Reconciled the rules and pair table implementation of the algorithm.'),
                    Paragraph(contents='• Updated the text of the conformance statement in section 4.'),
                    Paragraph(contents='• Added section 5.5 on use of double hyphen.'),
                    Paragraph(contents='• Updated styles and table formatting.'),
                    Paragraph(contents='• Minor edits throughout.'),
                    Heading(level=4, contents='Revision 14:'),
                    Paragraph(contents='• Added new line breaking classes NL and WJ to better support NEL and Word Joiner.'),
                    Paragraph(contents='• Deprecated the use of class SG.'),
                    Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and 7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                    Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                    Paragraph(contents='• Clarified the behavior of SHY and MONGOLIAN TODO SOFT HYPHEN, as well as WJ and ZWNBSP.'),
                    Paragraph(contents='• Added a new subsection 5.4 on SOFT HYPHEN and a new subsection 7.6 on conjoining jamos.'),
                    Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                    Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                    Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                    Paragraph(contents='• Expanded the introduction in Section 3.'),
                    Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                    Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                    Paragraph(contents='Revision 11 being a proposed update, only changes between revisions 12 and 14 are noted here.'),
                    Heading(level=4, contents='Revision 12:'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added Word joiner to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the data file. Only characters whose LB class differs from those of characters with related General_Category are noted explicitly in this text.'),
                    Paragraph(contents='Revision 11, being a proposed update, only changes between revisions 10 and 12 are noted here.]'),
                    Heading(level=4, contents='Revision 10:'),
                    Paragraph(contents='• Changed header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Heading(level=4, contents='Revision 9:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX.'),
                    Paragraph(contents='• LB7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode4.0].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair table entry PR % ID'),
                    Paragraph(contents='• Reworked Section 7.5'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull)'),
                    Heading(level=4, contents='Revision 8:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to Table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX because the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                    Heading(level=4, contents='Revision 7:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Heading(level=4, contents='Revision 6:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='No change history is available for earlier revisions.'),
                    Paragraph(contents='Copyright © 1998-2012 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                    Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(6, 2, 0): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                    TableRow(contents='Version\ue000Unicode 6.2.0'),
                    TableRow(contents='Editors\ue000Andy Heninger (andy.heninger@gmail.com)'),
                    TableRow(contents='Date\ue0002012-09-14'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-30.html'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-28.html'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                    TableRow(contents='Latest Proposed Update\ue000http://www.unicode.org/reports/tr14/proposed.html'),
                    TableRow(contents='Revision\ue00030'),
                    Heading(level=4, contents='Summary'),
                    Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display. A model implementation using pair tables is also provided.'),
                    Heading(level=4, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                    Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                    Heading(level=4, contents='Contents'),
                    Paragraph(contents='1 Overview and Scope'),
                    Paragraph(contents='2 Definitions'),
                    Paragraph(contents='3 Introduction'),
                    Paragraph(contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='4 Conformance'),
                    Paragraph(contents='4.1 Conformance Requirements'),
                    Paragraph(contents='5 Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Dictionary Usage'),
                    Paragraph(contents='5.3 Use of Hyphen'),
                    Paragraph(contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='5.7 Word Separator Characters'),
                    Paragraph(contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Pair Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='7.7 Explicit Breaks'),
                    Paragraph(contents='8 Customization'),
                    Paragraph(contents='8.1 Types of Tailoring'),
                    Paragraph(contents='8.2 Examples of Customization'),
                    Paragraph(contents='9 Implementation Notes'),
                    Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='10 Testing'),
                    Paragraph(contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='References'),
                    Paragraph(contents='Acknowledgments'),
                    Paragraph(contents='Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                    Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                    Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                    Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Three main sections follow:'),
                    Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                    Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='• Section 7, Pair Table-Based Implementation, describes an efficient pair table-based implementation of the algorithm.'),
                    Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                    Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                    Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                    Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                    Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard [Unicode]. The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard. All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard.'),
                    Paragraph(contents='LD1 Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='LD2 Line Break: The position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='LD3 Line Break Opportunity: A place where a line is allowed to end.'),
                    Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                    Paragraph(contents='LD4 Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                    Paragraph(contents='LD5 Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                    Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                    Paragraph(contents='LD6 Line Breaking Class: A class of characters with the same line breaking property value.'),
                    Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                    Paragraph(contents='LD7 Mandatory Break: A line must break following a character that has the mandatory break property.'),
                    Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                    Paragraph(contents='LD8 Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                    Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='LD9 Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                    Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                    Paragraph(contents='• An indirect break is indicated in the pair table in Table 2 as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though space characters are not shown in the pair table, an indirect break can occur only if one or more spaces follow B. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                    Paragraph(contents='LD10 Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                    Paragraph(contents='• A prohibited break is indicated in the pair table in Table 2 as B ^ A, where B is the character class of the character before and A is the character class of the character after the break, and the optional space characters are not shown. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='LD11 Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                    Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                    Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                    Paragraph(contents='Table 1. Line Breaking Classes'),
                    TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                    TableRow(contents='Non-tailorable Line Breaking Classes'),
                    TableRow(contents='BK\ue000Mandatory Break\ue000NL, PS\ue000Cause a line break (after)'),
                    TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                    TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                    TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                    TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                    TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                    TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                    TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                    TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                    TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                    TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                    TableRow(contents='NS\ue000Nonstarter\ue000“‼”, “‽”, “⁇”, “⁉”, etc.\ue000Allow only indirect line breaks before'),
                    TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                    TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                    TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                    TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                    TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                    TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='CJ\ue000Conditional Japanese Starter\ue000Small kana\ue000Treat as NS or ID for strict or normal breaking.'),
                    TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='HL\ue000Hebrew Letter\ue000Hebrew\ue000Do not break around a following hyphen; otherwise act as Alphabetic'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                    TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='RI\ue000Regional Indicator\ue000REGIONAL INDICATOR SYMBOL LETTER A .. Z\ue000Keep together, break before and after from others'),
                    TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Introduction'),
                    Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                    Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                    Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                    Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                    Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                    Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                    Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                    Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                    Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                    Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                    Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                    Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                    Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                    Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                    Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [Bidi]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                    Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                    Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                    Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                    Heading(level=3, contents='4.1 Conformance Requirements'),
                    Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                    Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                    Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                    Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                    Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                    Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                    Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into two algorithms defined in Section 6, Line Breaking Algorithm, and Section 7, Pair Table-Based Implementation. These sections describe workable default line breaking methods. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences.'),
                    Heading(level=4, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a tab-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                    Heading(level=4, contents='Future Updates'),
                    Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                    Paragraph(contents='(A)—the class allows a break opportunity after in specified contexts'),
                    Paragraph(contents='(XA)—the class prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='(B)—the class allows a break opportunity before in specified contexts'),
                    Paragraph(contents='(XB)—the class prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='(P)—the class allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='(XP)—the class prevents a break opportunity for a pair of same characters'),
                    Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Some characters that ordinarily act like alphabetic characters are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                    Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [EAW].'),
                    Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                    Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                    Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                    TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                    TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                    Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                    Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                    Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='This class contains alphabetic or symbolic characters not explicitly assigned to another line breaking class. These are primarily characters of the following categories:'),
                    Paragraph(contents='ALPHABETIC—characters of General Categories Lu, Ll, Lt, Lm, and Lo'),
                    Paragraph(contents='SYMBOLS—characters of General Categories Sm, Sk, and So'),
                    Paragraph(contents='NON-DECIMAL NUMBERS—characters of General Categories Nl and No'),
                    Paragraph(contents='PUNCTUATION—characters of General Categories Pc, Pd, and Po'),
                    Paragraph(contents='Line break class AL also contains several format characters, including:'),
                    TableRow(contents='0600..0604\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAMVAT'),
                    TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                    TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                    TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                    TableRow(contents='110BD\ue000KAITHI NUMBER SIGN'),
                    Paragraph(contents='These format characters occur in the middle or at the beginning or words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                    Paragraph(contents='Major exceptions to the general pattern of alphabetic and symbolic characters having line break class AL include:'),
                    Paragraph(contents='HL for Hebrew letters AI or ID, based on the East Asian Width property of the character ID for certain pictographic symbols CJ for small hiragana and katakana SA for complex context scripts JL, JV, JT, H2 or H3 for Hangul characters'),
                    Heading(level=3, contents='BA: Break After (A)'),
                    Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                    Heading(level=4, contents='Breaking Spaces'),
                    Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN SPACE'),
                    TableRow(contents='2003\ue000EM SPACE'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                    Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                    Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                    Paragraph(contents='See the ID property for U+3000 IDEOGRAPHIC SPACE. For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                    Heading(level=4, contents='Tabs'),
                    TableRow(contents='0009\ue000TAB'),
                    Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    Heading(level=4, contents='Conditional Hyphens'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=4, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Visible Word Dividers'),
                    Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                    TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                    TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                    Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                    Heading(level=4, contents='Historic Word Separators'),
                    Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                    Paragraph(contents='Examples of Historic Word Separators include:'),
                    TableRow(contents='16EB\ue000RUNIC SINGLE DOT PUNCTUATION'),
                    TableRow(contents='16EC\ue000RUNIC MULTIPLE DOT PUNCTUATION'),
                    TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                    TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                    TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                    TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                    TableRow(contents='205B\ue000FOUR DOT MARK'),
                    TableRow(contents='205D\ue000TRICOLON'),
                    TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                    TableRow(contents='2E19\ue000PALM BRANCH'),
                    TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                    TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                    TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                    TableRow(contents='2E2D\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='2E30\ue000RING POINT'),
                    TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                    TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                    TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                    TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                    TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                    TableRow(contents='1091F\ue000PHOENICIAN WORD DIVIDER'),
                    TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                    Heading(level=4, contents='Dandas'),
                    Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                    Paragraph(contents='Examples of dandas include:'),
                    TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                    TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                    TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                    TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                    TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                    TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                    TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                    TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                    TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                    TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                    TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                    TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                    TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                    TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                    TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                    TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                    Heading(level=4, contents='Tibetan'),
                    TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                    TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                    TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                    TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                    TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                    TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                    Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Other Terminating Punctuation'),
                    Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                    TableRow(contents='1804\ue000MONGOLIAN COLON'),
                    TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                    TableRow(contents='1B5A\ue000BALINESE PANTI'),
                    TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                    TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                    TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                    TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                    TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                    TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                    TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                    TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                    TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                    TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                    TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                    TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                    TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                    TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                    TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                    TableRow(contents='2E17\ue000OBLIQUE DOUBLE HYPHEN'),
                    TableRow(contents='A60D\ue000VAI COMMA'),
                    TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                    TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                    TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                    TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                    TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                    TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                    TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                    TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                    TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                    Heading(level=3, contents='BB: Break Before (B)'),
                    Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                    Paragraph(contents='Examples of BB characters are described in the following sections.'),
                    Heading(level=4, contents='Dictionary Use'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    TableRow(contents='1FFD\ue000GREEK OXIA'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                    TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                    Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                    Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                    TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                    TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                    TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                    TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                    TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                    TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                    TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                    TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                    TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                    TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                    TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                    TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                    TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                    Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Mongolian'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                    Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                    Paragraph(contents='Some languages, including Spanish, use EM DASH to set off a parenthetical, and the surrounding dashes should not be broken from the contained text. In this usage there is space on the side where it can be broken. This does not conflict with symmetrical usages, either with spaces on both sides of the em-dash or with no spaces.'),
                    Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                    TableRow(contents='000C\ue000FORM FEED (FF)'),
                    TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                    Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR (LS)'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. This is similar to HTML <BR>.'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR (PS)'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LS, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                    Heading(level=4, contents='Newline Function (NLF)'),
                    Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                    Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                    Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                    Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                    Heading(level=3, contents='CJ: Conditional Japanese Starter'),
                    Paragraph(contents='This character class contains Japanese small hiragana and katakana. Characters of this class may be treated as either NS or ID.'),
                    Paragraph(contents='CSS Text Level 3 (which supports Japanese line layout) defines three distinct values for its line-break behavior:'),
                    Paragraph(contents='• strict, typically used for long lines'),
                    Paragraph(contents='• normal (CSS default), the behavior typically used for books and documents'),
                    Paragraph(contents='• loose, typically used for short lines such as in newspapers'),
                    Paragraph(contents='These have different sets of “kinsoku” characters which cannot be at the beginning or end of a line; strict has the largest set, while loose has the smallest. The motivation for the smaller number of kinsoku characters is to avoid triggering justification that puts characters off the grid position.'),
                    Paragraph(contents='Treating characters of class CJ as class NS will give CSS strict line breaking; treating them as class ID will give CSS normal breaking.'),
                    Paragraph(contents='The CJ line break class includes'),
                    TableRow(contents='3041, 3043, 3045, etc.\ue000Small hiragana'),
                    TableRow(contents='30A1, 30A3, 30A5, etc.\ue000Small katakana'),
                    TableRow(contents='30FC\ue000KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF67..FF70\ue000Halfwidth variants'),
                    Heading(level=3, contents='CL: Close Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                    Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                    Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                    TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                    Heading(level=4, contents='Combining Characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                    Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 No-Break SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                    Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                    Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                    Heading(level=4, contents='Control and Formatting Characters'),
                    Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                    Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                    Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                    TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                    TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                    Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                    Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                    Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                    Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                    TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                    TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                    TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                    TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                    TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                    TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following are examples of characters of line break class GL:'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                    TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE. NARROW NO-BREAK SPACE is used in Mongolian. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in Section 13.2, Mongolian, of [Unicode].'),
                    Paragraph(contents='NARROW NO-BREAK SPACE is a narrow version of NO-BREAK SPACE, which has exactly the same line breaking behavior, but with a narrow display width. It is regularly used in Mongolian in certain grammatical contexts (before a particle), where it also influences the shaping of the glyphs for the particle. In Mongolian text, the NARROW NO-BREAK SPACE is typically displayed with one third the width of a normal space character.'),
                    Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                    Paragraph(contents='The MONGOLIAN VOWEL SEPARATOR is equivalent to a NARROW NO-BREAK SPACE in its line breaking behavior, but has different effects in controlling the shaping of its preceding and following characters. It constitutes a word-internal space and is typically displayed with half the width of a NARROW NO-BREAK SPACE.'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                    TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                    Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                    Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                    Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                    Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                    Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                    Heading(level=3, contents='HY: Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                    Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                    Heading(level=3, contents='ID: Ideographic (B/A)'),
                    Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                    TableRow(contents='2E80..2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                    TableRow(contents='30A0..30FF\ue000Katakana (except small characters)'),
                    TableRow(contents='3400..4DB5\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='4E00..9FFF\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='F900..FAD9\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490..A4CF\ue000YI RADICALS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF01..FF5A\ue000FULL WIDTH LATIN LETTERS and DIGITS'),
                    Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                    Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                    Paragraph(contents='The CJK blocks and regions in which unassigned characters default to line break class ID are:'),
                    TableRow(contents='CJK Unified Ideographs Extension A'),
                    TableRow(contents='CJK Unified Ideographs'),
                    TableRow(contents='CJK Compatibility Ideographs'),
                    TableRow(contents='CJK Unified Ideographs Extension B'),
                    TableRow(contents='CJK Unified Ideographs Extension C'),
                    TableRow(contents='CJK Unified Ideographs Extension D'),
                    TableRow(contents='CJK Compatibility Ideographs Supplement'),
                    TableRow(contents='SIP (Plane 2) outside of blocks'),
                    TableRow(contents='TIP (Plane 3) outside of blocks'),
                    Heading(level=4, contents='Korean'),
                    Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    Heading(level=4, contents='Symbols'),
                    Paragraph(contents='Certain pictographic symbols of General Category So are also included in this line break class.'),
                    Heading(level=3, contents='HL: Hebrew Letter (XB)'),
                    Paragraph(contents='This class includes all Hebrew letters.'),
                    Paragraph(contents='When a Hebrew letter is followed by a hyphen, there is no break on either side of the hyphen. In this context a hyphen is any character of class HY or class BA. In other respects, Hebrew letters behave the same as characters of class AL.'),
                    Paragraph(contents='Included in this class are all characters of General Category Letter that have Script=Hebrew.'),
                    Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                    Heading(level=4, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    TableRow(contents='060C\ue000ARABIC COMMA'),
                    TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                    TableRow(contents='07F8\ue000NKO COMMA'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                    TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                    TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                    Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                    Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                    Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                    Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                    Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                    Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                    Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                    Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                    Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                    Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                    Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                    TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                    Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                    Heading(level=3, contents='NS: Nonstarters (XB)'),
                    Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include:'),
                    TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='203D\ue000INTERROBANG'),
                    TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                    TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                    TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='303C\ue000MASU MARK'),
                    TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                    TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                    TableRow(contents='30FD..30FE\ue000KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='Note: Optionally, the NS restriction may be relaxed by tailoring, with some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles. Alternatively, line breaking can be tightened by moving characters that are ID into NS.'),
                    Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                    Heading(level=3, contents='NU: Numeric (XP)'),
                    Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                    Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                    TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                    TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                    Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                    Heading(level=3, contents='OP: Open Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                    TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                    TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                    TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                    Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                    Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                    Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                    Paragraph(contents='Examples of Postfix characters include'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='060B\ue000AFGHANI SIGN'),
                    TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='FDFC\ue000RIAL SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                    Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                    Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                    Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                    Heading(level=3, contents='QU: Quotation (XB/XA)'),
                    Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                    Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                    Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                    TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                    TableRow(contents='2E0B\ue000RAISED SQUARE'),
                    Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='RI: Regional Indicator (B/A/XP)'),
                    Paragraph(contents='The Regional Indicator characters are'),
                    TableRow(contents='1F1E6..1F1FF\ue000REGIONAL INDICATOR SYMBOL LETTER A .. REGIONAL INDICATOR SYMBOL LETTER Z'),
                    Paragraph(contents='Pairs of RI characters are used to represent a two-letter ISO 3166 region code. No break opportunity occurs between adjacent RI characters, otherwise breaks can occur before and after.'),
                    Paragraph(contents='To provide a break between adjacent RI characters insertion of a U+200B ZERO WIDTH SPACE is recommended.'),
                    Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                    Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                    TableRow(contents='0E00..0E7F\ue000Thai'),
                    TableRow(contents='0E80..0EFF\ue000Lao'),
                    TableRow(contents='1000..109F\ue000Myanmar'),
                    TableRow(contents='1780..17FF\ue000Khmer'),
                    TableRow(contents='1950..197F\ue000Tai Le'),
                    TableRow(contents='1980..19DF\ue000New Tai Lue'),
                    TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                    TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                    TableRow(contents='AA80..AADF\ue000Tai Viet'),
                    Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                    Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                    Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                    Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                    Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                    Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                    Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                    Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                    Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                    Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                    Heading(level=3, contents='XX: Unknown (XP)'),
                    Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                    Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                    Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                    Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                    Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                    Heading(level=3, contents='5.2 Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                    Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                    Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                    Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                    Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                    Heading(level=3, contents='5.3 Use of Hyphen'),
                    Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                    Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                    Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                    Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                    Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                    Paragraph(contents='dispara- te'),
                    Paragraph(contents='and the latter as'),
                    Paragraph(contents='dispara- -te.'),
                    Paragraph(contents='A recommended practice is to type <SHY, NBHY> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                    Paragraph(contents='• Simply inserting a hyphen glyph'),
                    Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                    Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                    Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                    Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                    Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                    Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                    Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                    Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                    Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                    Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                    Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                    Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [Bidi] and Section 8.2, Arabic, of [Unicode].'),
                    Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                    Paragraph(contents='The sequence <SHY, NBHY> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                    Heading(level=3, contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                    Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                    Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                    Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                    Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                    Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                    Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                    Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                    Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                    Heading(level=3, contents='5.7 Word Separator Characters'),
                    Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                    Paragraph(contents='1. suppress the visible word separator'),
                    Paragraph(contents='The:quick:brown fox:jumped.'),
                    Paragraph(contents='2. break before the visible word separator'),
                    Paragraph(contents='The:quick:brown :fox:jumped.'),
                    Paragraph(contents='3. break after the visible word separator'),
                    Paragraph(contents='The:quick:brown: fox:jumped.'),
                    Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                    Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                    Paragraph(contents='A slightly simplified implementation of such an algorithm can be devised that uses a two-dimensional table to resolve break opportunities between pairs or characters. It is described in Section 7, Pair Table-Based Implementation.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1 Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                    Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                    Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                    Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, and ZW define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                    Heading(level=4, contents='Resolve line breaking classes:'),
                    Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, CJ, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                    Paragraph(contents='In the absence of such criteria all characters with a specific combination of original class and General_Category property value are resolved as follows:'),
                    TableRow(contents='Resolved\ue000Original\ue000General_Category'),
                    TableRow(contents='AL\ue000AI, SG, XX\ue000Any'),
                    TableRow(contents='CM\ue000SA\ue000Only Mn or Mc'),
                    TableRow(contents='AL\ue000SA\ue000Any except Mn and Mc'),
                    TableRow(contents='NS\ue000CJ\ue000Any'),
                    Heading(level=4, contents='Start and end of text:'),
                    Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                    Rule(contents='LB2 Never break at the start of text.'),
                    Formula(contents='sot ×'),
                    Rule(contents='LB3 Always break at the end of text.'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                    Rule(contents='LB4 Always break after hard line breaks.'),
                    Formula(contents='BK !'),
                    Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                    Formula(contents='CR × LF'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='NL !'),
                    Rule(contents='LB6 Do not break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF | NL )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB7 Do not break before spaces or zero width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                    Formula(contents='ZW SP* ÷'),
                    Heading(level=4, contents='Combining marks:'),
                    Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                    Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules.'),
                    Formula(contents='Treat X CM* as if it were X.'),
                    Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                    Rule(contents='LB10 Treat any remaining combining mark as AL.'),
                    Formula(contents='Treat any remaining CM as it if were AL.'),
                    Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                    Heading(level=4, contents='Word joiner:'),
                    Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                    Formula(contents='× WJ'),
                    Formula(contents='WJ ×'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12 Do not break after NBSP and related characters.'),
                    Formula(contents='GL ×'),
                    Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                    Formula(contents='[^SP BA HY] × GL'),
                    Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                    Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× CP'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                    Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                    Formula(contents='(CL | CP) SP* × NS'),
                    Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 SP* × B2'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB18 Break after spaces.'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB20 Break before and after unresolved CB.'),
                    Formula(contents='÷ CB'),
                    Formula(contents='CB ÷'),
                    Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                    Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents="LB21a Don't break after Hebrew + Hyphen"),
                    Formula(contents='HL (HY | BA) ×'),
                    Rule(contents='LB22 Do not break between two ellipses, or between letters or numbers and ellipsis.'),
                    Formula(contents='(AL | HL) × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents='Do not break alphanumerics.'),
                    Rule(contents='LB23 Do not break within ‘a9’, ‘3a’, or ‘H%’.'),
                    Formula(contents='ID × PO'),
                    Formula(contents='(AL | HL) × NU'),
                    Formula(contents='NU × (AL | HL)'),
                    Rule(contents='LB24 Do not break between prefix and letters or ideographs.'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × (AL | HL)'),
                    Formula(contents='PO × (AL | HL)'),
                    Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                    Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                    Formula(contents='CL × PO'),
                    Formula(contents='CP × PO'),
                    Formula(contents='CL × PR'),
                    Formula(contents='CP × PR'),
                    Formula(contents='NU × PO'),
                    Formula(contents='NU × PR'),
                    Formula(contents='PO × OP'),
                    Formula(contents='PO × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='PR × NU'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Korean syllable blocks'),
                    Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                    Rule(contents='LB26 Do not break a Korean syllable.'),
                    Formula(contents='JL × (JL | JV | H2 | H3)'),
                    Formula(contents='(JV | H2) × (JV | JT)'),
                    Formula(contents='(JT | H3) × JT'),
                    Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                    Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                    Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                    Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                    Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                    Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                    Formula(contents='(AL | HL) × (AL | HL)'),
                    Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                    Formula(contents='IS × (AL | HL)'),
                    Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                    Formula(contents='(AL | HL | NU) × OP'),
                    Formula(contents='CP × (AL | HL | NU)'),
                    Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                    Rule(contents='LB30a Do not break between regional indicator symbols.'),
                    Formula(contents='RI × RI'),
                    Rule(contents='LB31 Break everywhere else.'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='A two-dimensional table can be used to resolve break opportunities between pairs of characters. This section defines such a table. The rows of the table are labeled with the possible values of the line breaking property of the leading character in the pair. The columns are labeled with the line breaking class for the following character of the pair. Each intersection is labeled with the resulting line break opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of a similar table-based definition. However, it uses line breaking classes whose membership is not solely determined by the line breaking property (as in this annex), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classes defined previously.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, then the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes, of which only 14 appear to be unique. Any minimal table representation is unique, except for trivial reordering of rows and columns. Minimal tables for which the rows and columns are sorted alphabetically can be mechanically compared for differences. This is in contrast to the rules, where identical results can be achieved by sets of rules that cannot be easily compared by looking at their textual representation. However, any set of rules that is equivalent to a minimal pair table can be used to automatically generate such a table, which can then be used for comparison. The rules in Section 6, Line Breaking Algorithm, can be expressed as minimal pair tables if the extended context used as described below.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Most of the rules in Section 6, Line Breaking Algorithm, involve only pairs of characters, or they apply to a single line break class preceded or followed by any character. These rules can be represented directly in a pair table. However, rules LB14–LB17 require extended context to handle spaces.'),
                    Paragraph(contents='By broadening the definition of a pair from B A, where B is the line breaking class before a break and A the one after, to B SP* A, where SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line break opportunity (that is, direct and indirect breaks). Rules equivalent to the ones given in Section 6, Line Breaking Algorithm, can be formulated without explicit use of SP by using % to express indirect breaks instead. These rules can then be simplified to involve only pairs of classes—that is, only constructions of the form:'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B × A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can be automatically translated into a pair table, as in Table 2. Line breaking analysis then proceeds by pair table lookup as explained below. (For readability in table layout, the symbol ^ is used in the table instead of × and _ is used instead of ÷.)'),
                    Paragraph(contents='Rule LB9 requires extended context for handling combining marks. This extended context must also be built into the code that interprets the pair table. For convenience in detecting the condition where A = CM, the symbols # and @ are used in the pair table, instead of % and ^, respectively. See Section 7.5, Combining Marks.'),
                    Paragraph(contents='Rule LB21a also requires extended context to handle Hebrew letters followed by hyphens. This rule cannot be represented directly by the example pair table and is not handled by the sample implementation code included here. In the absence of special case handling, rule LB21a is effectively ignored by this example pair table and implementation code.'),
                    Heading(level=3, contents='7.3 Example Pair Table'),
                    Paragraph(contents='Table 2 implements the line breaking behavior described in this annex, with the limitation that only context of the form B SP* A is considered. BK, CR, LF, NL, and SP classes are handled explicitly in the outer loop, as given in the code sample below. Pair context of the form B CM* can be processed by handling the special entries @ and # in the driving loop, as explained in Section 7.5, Combining Marks. Conjoining jamos are considered separately in Section 7.6, Conjoining Jamos. In Table 2, the rows are labeled with the B class and the columns are labeled with the A class.'),
                    Paragraph(contents='Table 2. Example Pair Table'),
                    TableRow(contents='OP\ue000CL\ue000CP\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000HL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM\ue000WJ\ue000H2\ue000H3\ue000JL\ue000JV\ue000JT\ue000RI'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000@\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^'),
                    TableRow(contents='CL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CP\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='QU\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='NS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='EX\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='SY\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='PR\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='PO\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='NU\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='AL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ID\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IN\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HY\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BA\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BB\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='B2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000^\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ZW\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CM\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='WJ\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='H2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_'),
                    TableRow(contents='H3\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%\ue000_'),
                    TableRow(contents='JL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_'),
                    TableRow(contents='JV\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_'),
                    TableRow(contents='JT\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%\ue000_'),
                    TableRow(contents='RI\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='Table 2 uses the following notation:'),
                    Paragraph(contents='Resolved outside the pair table: AI, BK, CB, CJ, CR, LF, NL, SA, SG, SP, XX'),
                    Paragraph(contents='^ denotes a prohibited break: B ^ A is equivalent to B SP* × A; in other words, never break before A and after B, even if one or more spaces intervene.'),
                    Paragraph(contents='% denotes an indirect break opportunity: B % A is equivalent to B × A and B SP+ ÷ A; in other words, do not break before A, unless one or more spaces follow B.'),
                    Paragraph(contents='@ denotes a prohibited break for combining marks: B @ A is equivalent to B SP* × A, where A is of class CM. For more details, see Section 7.5, Combining Marks.'),
                    Paragraph(contents='# denotes an indirect break opportunity for combining marks following a space: B # A is equivalent to (B × A and B SP+ ÷ A), where A is of class CM.'),
                    Paragraph(contents='_ denotes a direct break opportunity (equivalent to ÷ as defined above).'),
                    Paragraph(contents='Note: In the online edition, hovering over the cells in a browser with tool-tips enabled reveals the rule number that determines the breaking status for the pair in question. When a pair must be tested both with and without intervening spaces, multiple rules are given. Hovering over a line breaking class name gives a representative member of the class and additional information. Clicking on any line break class name anywhere in the document jumps to the definition.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two sections provide sample code [Code14] that demonstrates how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the line breaking classes CR, LF, and NL need to be added. They have been omitted here for brevity, but see Section 7.7, Explicit Breaks.'),
                    Paragraph(contents='The sample code assumes that the line breaking classes AI, CB, SG, and XX have been resolved according to rule LB1 as part of initializing the pcls array. The code further assumes that the complex line break analysis for characters with line break class SA is handled in function findComplexBreak, for which the following placeholder is given:'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    // cls - resolved line break class, may differ from pcls[0]'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line breaking opportunities (output)'),
                    CodeLine(contents='    // cch - remaining length of input '),
                    CodeLine(contents='    int '),
                    CodeLine(contents='   findComplexBreak(enum break_class cls, enum break_class *pcls,'),
                    CodeLine(contents='                             enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='            if (!cch)'),
                    CodeLine(contents='                return 0;'),
                    CodeLine(contents='            for (int ich = 1; ich < cch; ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='                // .. do complex break analysis here'),
                    CodeLine(contents='                // and report any break opportunities in pbrk ..'),
                    CodeLine(contents=''),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK; // by default, no break'),
                    CodeLine(contents=''),
                    CodeLine(contents='                if (pcls[ich] != SA)'),
                    CodeLine(contents='                    break;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='            return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The entries in the example pair table correspond to the following enumeration. For diagnostic purposes, the sample code returns these values to indicate not only the location but also the type of rule that triggered a given break opportunity.'),
                    CodeLine(contents='    enum break_action {'),
                    CodeLine(contents='           DIRECT_BRK = 0,             // _ in table'),
                    CodeLine(contents='           INDIRECT_BRK,               // % in table'),
                    CodeLine(contents='           COMBINING_INDIRECT_BRK,     // # in table'),
                    CodeLine(contents='           COMBINING_PROHIBITED_BRK,   // @ in table'),
                    CodeLine(contents='           PROHIBITED_BRK,             // ^ in table'),
                    CodeLine(contents='           EXPLICIT_BRK };             // ! in rules'),
                    Paragraph(contents='Because the contexts involved in indirect breaks of the form B SP* A are of indefinite length, they need to be handled explicitly in the driver code. The sample implementation of a findLineBrk function below remembers the line break class for the last characters seen, but skips any occurrence of SP without resetting this value. Once character A is encountered, a simple lookback is used to see if it is preceded by a SP. This lookback is necessary only if B % A. To handle the case of a SP following sot, it is necessary to set cls to a dummy value. Using WJ gives the correct result and, as required, is unaffected by any tailoring.'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable) (returned value)'),
                    CodeLine(contents="    // cls - current resolved line break class for 'before' character (variable)"),
                    CodeLine(contents=''),
                    CodeLine(contents='    int'),
                    CodeLine(contents='    findLineBrk(enum break_class *pcls, enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='        if (!cch) return 0;'),
                    CodeLine(contents=''),
                    CodeLine(contents="        enum break_class cls = pcls[0];   // class of 'before' character"),
                    CodeLine(contents=''),
                    CodeLine(contents='        // treat SP at start of input as if it followed a WJ'),
                    CodeLine(contents='        if (cls == SP)'),
                    CodeLine(contents='            cls = WJ;'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='        for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // to handle explicit breaks, replace code from "for" loop condition'),
                    CodeLine(contents='            // above to comment below by code given in Section 7.7'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle spaces explicitly'),
                    CodeLine(contents='            if (pcls[ich] == SP) {'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;   // apply rule LB7: × SP'),
                    CodeLine(contents='                continue;                       // do not update cls'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle complex scripts in a separate function'),
                    CodeLine(contents='            if (pcls[ich] == SA) {'),
                    CodeLine(contents='                ich += findComplexBreak(cls, &pcls[ich-1], &pbrk[ich-1],'),
                    CodeLine(contents='                           cch - (ich-1));'),
                    CodeLine(contents='                if (ich < cch)'),
                    CodeLine(contents='                    cls = pcls[ich];'),
                    CodeLine(contents='                continue;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // lookup pair table information in brkPairs[before, after];'),
                    CodeLine(contents='            enum break_action brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents=''),
                    CodeLine(contents='            pbrk[ich-1] = brk;                     // save break action in output array'),
                    CodeLine(contents=''),
                    CodeLine(contents='            if (brk == INDIRECT_BRK) {             // resolve indirect break'),
                    CodeLine(contents='                if (pcls[ich - 1] == SP)           // if context is A SP + B'),
                    CodeLine(contents='                    pbrk[ich-1] = INDIRECT_BRK;    //       break opportunity'),
                    CodeLine(contents='                else                               // else'),
                    CodeLine(contents='                    pbrk[ich-1] = PROHIBITED_BRK;  //       no break opportunity'),
                    CodeLine(contents='            } '),
                    CodeLine(contents='            '),
                    CodeLine(contents='            // handle breaks involving a combining mark (see Section 7.5)'),
                    CodeLine(contents=''),
                    CodeLine(contents="            // save cls of 'before' character (unless bypassed by 'continue')"),
                    CodeLine(contents='            cls = pcls[ich];'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        pbrk[ich-1] = EXPLICIT_BRK;                // always break at the end'),
                    CodeLine(contents=''),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The function returns all of the break opportunities in the array pointed to by pbrk, using the values in the table. On return, pbrk[ich] is the type of break after the character at index ich.'),
                    Paragraph(contents='A common optimization in implementation is to determine only the nearest line break opportunity prior to the position of the first character that would cause the line to become overfull. Such an optimization requires backward traversal of the string instead of forward traversal as shown in the sample code.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='The implementation of combining marks in the pair table presents an additional complication because rule LB9 defines a context X CM* that is of arbitrary length. There are some similarities to the way contexts of the form B SP* A that are involved in indirect breaks are evaluated. However, contexts of the form SP CM* or CM* SP also need to be handled, while rule LB10 requires some CM* to be treated like AL.'),
                    Paragraph(contents='Implementing LB10. This rule can be reflected directly in the example pair table in Table 2 by assigning the same values in the row marked CM as in the row marked AL. Incidentally, this is equivalent to rewriting the rules LB11–LB31 by duplicating any expression that contains an AL on its left hand side with another expression that contains a CM. For example, in LB22'),
                    Formula(contents='AL × IN'),
                    Paragraph(contents='would become'),
                    Formula(contents='AL × IN CM × IN'),
                    Paragraph(contents='Rewriting these rules as indicated here (and then deleting LB10) is fully equivalent to the original rules because rule LB9 already accounts for all CMs that are not supposed to be treated like AL. For a complete description see Example 9 in Section 8.2, Examples of Customization.'),
                    Paragraph(contents='Implementing LB9. Rule LB9 is implemented in the example pair table in Table 2 by assigning a special # entry in the column marked CM for all rows referring to a line break class that allows a direct or indirect break after itself. (Note that the intersection between the row for class ZW and the column for class CM must be assigned “_” because of rule LB8.) The # corresponds to a break_action value of COMBINING_INDIRECT_BREAK, which triggers the following code in the sample implementation:'),
                    CodeLine(contents='    else if (brk == COMBINING_INDIRECT_BRK) {    // resolve combining mark break'),
                    CodeLine(contents='        pbrk[ich-1] = PROHIBITED_BRK;             // do not break before CM'),
                    CodeLine(contents='        if (pcls[ich-1] == SP){'),
                    CodeLine(contents='            #ifndef LEGACY_CM                    // new: space is not a base'),
                    CodeLine(contents='                pbrk[ich-1] = COMBINING_INDIRECT_BRK;    // apply rule SP ÷ '),
                    CodeLine(contents='            #else'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;      // legacy: keep SP CM together'),
                    CodeLine(contents='                if (ich > 1)'),
                    CodeLine(contents='                    pbrk[ich-2] = ((pcls[ich - 2] == SP) ?'),
                    CodeLine(contents='                                                  INDIRECT_BRK : DIRECT_BRK);'),
                    CodeLine(contents='            #endif'),
                    CodeLine(contents='        } else                                   // apply rule LB9: X CM * -> X'),
                    CodeLine(contents='            continue;                            // do not update cls'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    Paragraph(contents='When handling a COMBINING_INDIRECT_BREAK, the last remembered line break class in variable cls is not updated, except for those cases covered by rule LB10. A tailoring of rule LB9 that keeps the last SPACE character preceding a combining mark, if any, and therefore breaks before that SPACE character can easily be implemented as shown in the sample code. (See Section 9.2, Legacy Support for Space Character as Base for Combining Marks.)'),
                    Paragraph(contents='Any rows in Table 2 for line break classes that prohibit breaks after must be handled explicitly. In the example pair table, these are assigned a special entry “@”, which corresponds to a special break action of COMBINING_PROHIBITED_BREAK that triggers the following code:'),
                    CodeLine(contents='    else if (brk == COMBINING_PROHIBITED_BRK) { // this is the case OP SP* CM'),
                    CodeLine(contents='        pbrk[ich-1] = COMBINING_PROHIBITED_BRK;  // no break allowed'),
                    CodeLine(contents='        if (pcls[ich-1] != SP)'),
                    CodeLine(contents='            continue;                          // apply rule LB9: X CM* -> X'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The only line break class that unconditionally prevents breaks across a following SP is OP. The preceding code fragment ensures that OP CM is handled according to rule LB9 and OP SP CM is handled as OP SP AL according to rule LB10.'),
                    Heading(level=3, contents='7.6 Conjoining Jamos'),
                    Paragraph(contents='For Korean Syllable Blocks, the information in rule LB26 is represented by a simple pair table shown in Table 3.'),
                    Paragraph(contents='Table 3. Korean Syllable Block Pair Table'),
                    TableRow(contents='H2\ue000H3\ue000JL\ue000JV\ue000JT'),
                    TableRow(contents='H2\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='H3\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JL\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='JV\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='JT\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='When constructing a pair table such as Table 2, this pair table for Korean syllable blocks in Table 3 is merged with the main pair table for all other line break classes by adding the cells from Table 3 beyond the lower-right corner of the main pair table. Next, according to rule LB27, any empty cells in the new rows are filled with the same values as in the existing row for class ID, and any empty cells for the new columns are filled with the same values as in the existing column for class ID. The resulting merged table is shown in Table 2.'),
                    Heading(level=3, contents='7.7 Explicit Breaks'),
                    Paragraph(contents='Handling explicit breaks is straightforward in the driver code, although it does clutter up the loop condition and body of the loop a bit. For completeness, the following sample shows how to change the loop condition and add if statements—both before and inside the loop—that handle BK, NL, CR, and LF. Because NL and BK behave identically by default, this code can be simplified in implementations where the character classification is changed so that BK will always be substituted for NL when assigning the line break class. Because this optimization does not change the result, it is not considered a tailoring and does not affect conformance.'),
                    CodeLine(contents='    // handle case where input starts with an LF'),
                    CodeLine(contents='    if (cls == LF)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // treat initial NL like BK'),
                    CodeLine(contents='    if (cls == NL)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // loop over all pairs in the string up to a hard break or CRLF pair'),
                    CodeLine(contents='    for (int ich = 1; (ich < cch) && (cls != BK) && (cls != CR || pcls[ich] == LF); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle BK, NL and LF explicitly'),
                    CodeLine(contents='        if (pcls[ich] == BK ||pcls[ich] == NL ||  pcls[ich] == LF)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = BK;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle CR explicitly'),
                    CodeLine(contents='        if(pcls[ich] == CR)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = CR;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle spaces explicitly...'),
                    CodeLine(contents=''),
                    CodeLine(contents='    '),
                    Heading(level=2, contents='8 Customization'),
                    Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                    Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                    Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                    Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how to customize the pair table implementation of the line breaking algorithm for these tailorings.'),
                    Heading(level=3, contents='8.1 Types of Tailoring'),
                    Paragraph(contents='There are three principal ways of tailoring the sample pair table implementation of the line breaking algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to permanently overriding some of the rules in Section 6, Line Breaking Algorithm.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions This is a dynamic equivalent of the preceding. Instead of changing the values for the pair intersection directly in the table, they are labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be enabled at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real-world implementation of a pair table-based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. That implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=3, contents='8.2 Examples of Customization'),
                    Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm. Section 7.4, Sample Code, outlines such an approach in which the interface to the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the line breaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersections of ID/ID, AL/ID, and ID/AL are affected. For alphabetic style line breaking, breaks for these cases require space; for ideographic style line breaking, these cases do not require spaces. Therefore, the implementation defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given text.'),
                    Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. In this case the intersections of NU/NU, NU/AL, AL/AL, and AL/NU are affected.'),
                    Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by mapping class CJ to be handled as class ID in rule LB1.'),
                    Paragraph(contents='Example 6. Some implementations may wish to tailor the line breaking algorithm to resolve grapheme clusters according to Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], as a first stage. Generally, the line breaking algorithm does not create line break opportunities within default grapheme clusters; therefore such a tailoring would be expected to produce results that are close to those defined by the default algorithm. However, if such a tailoring is chosen, characters that are members of line break class CM but not part of the definition of default grapheme clusters must still be handled by rules LB9 and LB10, or by some additional tailoring.'),
                    Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * ( CL | CP ) ? ( PR | PO) ?'),
                    Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                    Paragraph(contents='Regex-Number: Do not break numbers.'),
                    Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                    Formula(contents='( OP | HY ) × NU'),
                    Formula(contents='NU × (NU | SY | IS)'),
                    Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL | CP )'),
                    Formula(contents='NU (NU | SY | IS)* (CL | CP)? × (PO | PR)'),
                    Paragraph(contents='This customized rule uses extended contexts that cannot be represented in a pair table. In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                    Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                    Formula(contents='[^NU] × CL'),
                    Formula(contents='[^NU] × CP'),
                    Formula(contents='× EX'),
                    Formula(contents='[^NU] × IS'),
                    Formula(contents='[^NU] × SY'),
                    Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                    Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                    Heading(level=2, contents='9 Implementation Notes'),
                    Paragraph(contents='This section provides additional notes on implementation issues.'),
                    Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                    Paragraph(contents='To replace rule LB9, terms of the form'),
                    Paragraph(contents='B # A'),
                    Paragraph(contents='B SP* # A'),
                    Paragraph(contents='B #'),
                    Paragraph(contents='B SP* #'),
                    Paragraph(contents='are replaced by terms of the form'),
                    Paragraph(contents='B CM* # A'),
                    Paragraph(contents='B CM* SP* # A'),
                    Paragraph(contents='B CM* #'),
                    Paragraph(contents='B CM* SP* #'),
                    Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                    Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                    Paragraph(contents='Replace LB10 by the following rule:'),
                    Paragraph(contents='× CM'),
                    Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                    Paragraph(contents='(AL | NU) × OP'),
                    Paragraph(contents='add another rule'),
                    Paragraph(contents='CM × OP.'),
                    Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                    Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='As stated in [Unicode], Section 7.9, Combining Marks, combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                    Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                    Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID.'),
                    Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                    Heading(level=2, contents='10 Testing'),
                    Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2 Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                    Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                    Paragraph(contents='Note:The break opportunities produced by an implementation of the rules of Section 6, Line Breaking Algorithm differ in certain cases from those produced by the pair table included in Section 7, Pair Table-Based Implementation. The differences occur with sequences like ZW SP CL. The test data file matches the results expected of a rule based implementation. The inconsistencies between the two will be addressed in the next revision of this document.'),
                    Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                    Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                    Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                    Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                    Paragraph(contents='1. The rules are cast into a more regex-style.'),
                    Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                    Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                    Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                    Paragraph(contents='• 13.01) [^NU] × CL'),
                    Paragraph(contents='• 13.02) × EX'),
                    Paragraph(contents='• ...'),
                    Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                    Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                    Paragraph(contents='Table 4. Numbering of Test Rules'),
                    TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                    TableRow(contents='LB2\ue0000.2\ue000start of text'),
                    TableRow(contents='LB3\ue0000.3\ue000end of text'),
                    TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                    TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                    TableRow(contents='LB31\ue000999\ue000÷ any'),
                    Heading(level=2, contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                    Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                    TableRow(contents='6.2.0\ue0006.1.0\ue0005.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                    TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                    TableRow(contents='LB2\ue0002\ue0002\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                    TableRow(contents='LB3\ue0003\ue0003\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                    TableRow(contents='LB4\ue0004\ue0004\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB5\ue0005\ue0005\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB6\ue0006\ue0006\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                    TableRow(contents='LB7\ue0007\ue0007\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                    TableRow(contents='LB8\ue0008\ue0008\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                    TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                    TableRow(contents='LB9\ue0009\ue0009\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB10\ue00010\ue00010\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                    TableRow(contents='LB11\ue00011\ue00011\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12\ue00012\ue00012\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12a\ue00012a\ue00012a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB13\ue00013\ue00013\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                    TableRow(contents='LB14\ue00014\ue00014\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                    TableRow(contents='LB15\ue00015\ue00015\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                    TableRow(contents='LB16\ue00016\ue00016\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                    TableRow(contents='LB17\ue00017\ue00017\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                    TableRow(contents='LB18\ue00018\ue00018\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                    TableRow(contents='LB19\ue00019\ue00019\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                    TableRow(contents='LB20\ue00020\ue00020\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                    TableRow(contents='LB21\ue00021\ue00021\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                    TableRow(contents='LB21a\ue00021a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB22\ue00022\ue00022\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                    TableRow(contents='LB23\ue00023\ue00023\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                    TableRow(contents='LB24\ue00024\ue00024\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='LB25\ue00025\ue00025\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                    TableRow(contents='LB26\ue00026\ue00026\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB27\ue00027\ue00027\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB28\ue00028\ue00028\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                    TableRow(contents='LB29\ue00029\ue00029\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30\ue00030\ue00030\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB31\ue00031\ue00031\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                    Heading(level=2, contents='References'),
                    Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='Asmus Freytag is the author of the initial version and has added to and maintained the text of this annex.'),
                    Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintains the text.'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                    Heading(level=2, contents='Modifications'),
                    Paragraph(contents='For details of the change history, see the online copy of this annex at http://www.unicode.org/reports/tr14/.'),
                    Paragraph(contents='The following documents the changes introduced by each revision.'),
                    Heading(level=4, contents='Revision 30:'),
                    Paragraph(contents='• Reissued for Unicode 6.2.0.'),
                    Paragraph(contents='• Introduce character class RI (Regional Indicator).'),
                    Paragraph(contents='• Introduce rule 30a, do not break between Regional Indicators.'),
                    Paragraph(contents='Revision 29 being a proposed update, only changes between revisions 30 and 28 are noted here.'),
                    Heading(level=4, contents='Revision 28:'),
                    Paragraph(contents='• Reissued for Unicode 6.1.0.'),
                    Paragraph(contents="• Add rule 21a, don't break after Hebrew + hyphen."),
                    Paragraph(contents='• Introduce character class HL (Hebrew Letter).'),
                    Paragraph(contents='• Introduce character class CJ for small kana, and amend rule LB1 to provide default resolution for class CJ.'),
                    Paragraph(contents='• Clarify that the list of GL characters is not comprehensive.'),
                    Paragraph(contents='• Update Example 7 of Section 8.2 (Customization) to reflect the introduction of character class CP.'),
                    Paragraph(contents='Revision 27 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                    Heading(level=4, contents='Revision 26:'),
                    Paragraph(contents='• Reissued for Unicode 6.0.0.'),
                    Paragraph(contents='• In Section 5.1, revised the description of the SHY character.'),
                    Paragraph(contents='• Changed LB8 from "ZW ÷" to "ZW SP* ÷" in accordance with UAX 14 Corrigendum #7, http://www.unicode.org/versions/corrigendum7.html.'),
                    Paragraph(contents='• Changed references to Unicode 5.2 to generic references where appropriate.'),
                    Paragraph(contents='• In Section 3, removed Ideographic Space from the list of spaces that may be compressed or expanded and clarified that the justification of lines is out of scope.'),
                    Paragraph(contents='Revision 25 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                    Heading(level=4, contents='Revision 24:'),
                    Paragraph(contents='• Reissued for Unicode 5.2.0.'),
                    Paragraph(contents='• Added class CP, reintroduced rule LB30, adjusted other rules for class CP.'),
                    Paragraph(contents='• In Section 5.1, clarified that the lists of characters for each property contain representative characters, and are not necessarily complete.'),
                    Paragraph(contents='• Unassigned code points in CJK regions default to class ID.'),
                    Paragraph(contents='• Added Tai Tham, Myanmar Extended-A and Tai Viet blocks to class SA.'),
                    Paragraph(contents='• Brought descriptive names of the character classes into closer alignment with the Unicode Line Break character property values.'),
                    Paragraph(contents='• Small edits for improved clarity, document style.'),
                    Paragraph(contents='Revision 23 being a proposed update, only changes between revisions 22 and 24 are noted here.'),
                    Heading(level=4, contents='Revision 22:'),
                    Paragraph(contents='• Updated for Version 5.1.0.'),
                    Paragraph(contents='• Added 2E18, INVERTED INTERROBANG, to class OP.'),
                    Paragraph(contents='• Added 2064, INVISIBLE PLUS, to class AL.'),
                    Paragraph(contents='• Added 2E00..2E01, 2E06..2E08, 2E0B to class QU.'),
                    Paragraph(contents='• Removed LB30, to correct regression for U+3002 IDEOGRAPHIC FULL STOP'),
                    Paragraph(contents='• Add Example 9 to Section 8, Customization.'),
                    Paragraph(contents='• Substantial revisions to Section 4, Conformance.'),
                    Paragraph(contents='• Section 5.7, Word Separators, added.'),
                    Paragraph(contents='• Section 10, Testing, added.'),
                    Paragraph(contents='• Renumber rules for consistency: 12a -> 12; 12b -> 12a'),
                    Paragraph(contents='• Added 02DF, MODIFIER LETTER CROSS ACCENT, to class BB.'),
                    Paragraph(contents='• Added discussion for 202F NARROW NO-BREAK SPACE and 180E MONGOLIAN VOWEL SEPARATOR'),
                    Paragraph(contents='• Corrected typos in LB13 and LB16'),
                    Paragraph(contents='• Added characters introduced with Unicode 5.1 to the lists associated with the line break properties.'),
                    Paragraph(contents='• Added Section 5.2 on the special handling of hyphens. Edited Section 3 for clarity.'),
                    Paragraph(contents='• Improved delineation between normative and informative information.'),
                    Paragraph(contents='• Changed from EX to IS'),
                    Paragraph(contents='• 060C ( ، ) ARABIC COMMA'),
                    Paragraph(contents='• Changed from EX to PO'),
                    Paragraph(contents='• 066A ( ٪ ) ARABIC PERCENT SIGN'),
                    Paragraph(contents='• Changed from AI to OP'),
                    Paragraph(contents='• 00A1 ( ¡ ) INVERTED EXCLAMATION MARK'),
                    Paragraph(contents='• 00BF ( ¿ ) INVERTED QUESTION MARK'),
                    Paragraph(contents='• Changed from BA to EX'),
                    Paragraph(contents='• 1802 ( ᠂ ) MONGOLIAN COMMA'),
                    Paragraph(contents='• 1803 ( ᠃ ) MONGOLIAN FULL STOP'),
                    Paragraph(contents='• 1808 ( ᠈ ) MONGOLIAN MANCHU COMMA'),
                    Paragraph(contents='• 1809 ( ᠉ ) MONGOLIAN MANCHU FULL STOP'),
                    Paragraph(contents='• 2CF9 ( ⳹ ) COPTIC OLD NUBIAN FULL STOP'),
                    Paragraph(contents='• 2CFE ( ⳾ ) COPTIC FULL STOP'),
                    Paragraph(contents='• Changed from BA to AL'),
                    Paragraph(contents='• 1A1E ( ᨞ ) BUGINESE PALLAWA'),
                    Paragraph(contents='• Changed from AL to BB'),
                    Paragraph(contents='• 1FFD ( ´ ) GREEK OXIA'),
                    Paragraph(contents='• Added a note on lack of canonical equivalence for the definition of ambiguous characters.'),
                    Paragraph(contents='• Corrected typos in the sample source code.'),
                    Paragraph(contents='• Split rule LB12 to accommodate Polish and Portuguese hyphenation.'),
                    Paragraph(contents='Revisions 20 and 21 being a proposed update, only changes between revisions 19 and 22 are noted here.'),
                    Heading(level=4, contents='Revision 19:'),
                    Paragraph(contents='• Changed 000B from CM to BK, changed 035C from CM to GL.'),
                    Paragraph(contents='• Changed 17D9 from NS to AL. 203D, 2047..2049 from AL to NS.'),
                    Paragraph(contents='• Corrected listing of NS property to match the data file to remove 17D8 and 17DA.'),
                    Paragraph(contents='• The data file has been corrected to match the listing of the BA property to include 1735 and 1736, also changed 05BE and 103D0 from AL to BA.'),
                    Paragraph(contents='• Changed the brackets 23B4.23B6 to AL.'),
                    Paragraph(contents='• Updated the SA property to make it more generic, includes changing many characters from CM to SA.'),
                    Paragraph(contents='• Reflected new characters'),
                    Paragraph(contents='• Made several text changes for clarifications, including reworded the intro to Section 6.'),
                    Paragraph(contents='• Added Section 9.'),
                    Paragraph(contents='• Restated the conformance clauses and reorganized the algorithm into a tailorable and a non-tailorable part; this affects text in Sections 4, 5, and 6.'),
                    Paragraph(contents='• Removed redundant term PR x HY from rule 18 and rule into new LB24 and LB26 to provide better granularity for tailoring,'),
                    Paragraph(contents='• Moved rule 11b and 13 above rule 8 (new LB13), restating rule 13 (new LB12) to preserve its effect in the new location.'),
                    Paragraph(contents='• Added new rule LB30 to handle words like “person(s)”.'),
                    Paragraph(contents='• Renumbered the rules.'),
                    Paragraph(contents='• Extensive copy-editing as part of Unicode 5.0 publication.'),
                    Paragraph(contents='Revision 18 being a proposed update, only changes between revisions 17 and 19 are noted here.'),
                    Heading(level=4, contents='Revision 17:'),
                    Paragraph(contents='• Significantly revised the line break classes for Tibetan, as well as Mongolian and Arabic Punctuation.'),
                    Paragraph(contents='• Added section 5.6 on Tibetan and section 7.7 on handling explicit breaks.'),
                    Paragraph(contents='• Added line break class assignments for Unicode 4.1 characters.'),
                    Paragraph(contents='• Significantly revised the line break class assignments for danda characters and made it consistent across scripts.'),
                    Paragraph(contents='• LB6: Replaced by new rules 18b and 18c, using new classes JL, JV, JT, H2, and H3.'),
                    Paragraph(contents='• LB7a: Deprecated rule 7a because SPACE as base character for standalone combining marks is deprecated.'),
                    Paragraph(contents='• LB7b: Revised 7b and section 7.5 as well as Table 2 to match the deprecation of rule 7a.'),
                    Paragraph(contents='• LB7b: Clarified that this rule does not apply to SP.'),
                    Paragraph(contents='• LB11a: Added a missing SP * to make the formula match the rule.'),
                    Paragraph(contents='• LB18b: Removed the existing rule 18b because it was redundant.'),
                    Paragraph(contents='• Corrected an erratum on revision 14 by splitting GL from WJ in rule 11b and moving to a new rule 13.'),
                    Paragraph(contents='• Updated the pair table and sample code to match the changes in the rules.'),
                    Paragraph(contents='• Updated the regular expression for numbers.'),
                    Paragraph(contents='• Added several notes on implementation techniques.'),
                    Paragraph(contents='• Moved all suggested tailorings from the rules section to the examples in section 8.2.'),
                    Paragraph(contents='Revision 16 being a proposed update, only changes between revisions 17 and 15 are noted here.'),
                    Heading(level=4, contents='Revision 15:'),
                    Paragraph(contents='• LB19b: Added new rule 19b.'),
                    Paragraph(contents='• Changed line breaking class: combining double diacritics from CM to GL, 037A and 2126 to match their canonical equivalents, 2140 corrected to AL, Arabic numerical separators from AL to NU, many alphabetic characters that are EAW=Ambiguous from AI to AL to better reflect current practice, remaining circled numbers and letters from AL to AI for consistency.'),
                    Paragraph(contents='• Added a note on the behavior of U+200B and U+3000 when lines are justified.'),
                    Paragraph(contents='• Reconciled the data file and description of line breaking classes in section 5.'),
                    Paragraph(contents='• Reconciled the rules and pair table implementation of the algorithm.'),
                    Paragraph(contents='• Updated the text of the conformance statement in section 4.'),
                    Paragraph(contents='• Added section 5.5 on use of double hyphen.'),
                    Paragraph(contents='• Updated styles and table formatting.'),
                    Paragraph(contents='• Minor edits throughout.'),
                    Heading(level=4, contents='Revision 14:'),
                    Paragraph(contents='• Added new line breaking classes NL and WJ to better support NEL and Word Joiner.'),
                    Paragraph(contents='• Deprecated the use of class SG.'),
                    Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and 7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                    Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                    Paragraph(contents='• Clarified the behavior of SHY and MONGOLIAN TODO SOFT HYPHEN, as well as WJ and ZWNBSP.'),
                    Paragraph(contents='• Added a new subsection 5.4 on SOFT HYPHEN and a new subsection 7.6 on conjoining jamos.'),
                    Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                    Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                    Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                    Paragraph(contents='• Expanded the introduction in Section 3.'),
                    Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                    Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                    Paragraph(contents='Revision 11 being a proposed update, only changes between revisions 12 and 14 are noted here.'),
                    Heading(level=4, contents='Revision 12:'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added Word joiner to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the data file. Only characters whose LB class differs from those of characters with related General_Category are noted explicitly in this text.'),
                    Paragraph(contents='Revision 11, being a proposed update, only changes between revisions 10 and 12 are noted here.]'),
                    Heading(level=4, contents='Revision 10:'),
                    Paragraph(contents='• Changed header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Heading(level=4, contents='Revision 9:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX.'),
                    Paragraph(contents='• LB7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode4.0].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair table entry PR % ID'),
                    Paragraph(contents='• Reworked Section 7.5'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull)'),
                    Heading(level=4, contents='Revision 8:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to Table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX because the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                    Heading(level=4, contents='Revision 7:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Heading(level=4, contents='Revision 6:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='No change history is available for earlier revisions.'),
                    Paragraph(contents='Copyright © 1998-2012 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                    Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(6, 3, 0): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                    TableRow(contents='Version\ue000Unicode 6.3.0'),
                    TableRow(contents='Editors\ue000Andy Heninger (andy.heninger@gmail.com)'),
                    TableRow(contents='Date\ue0002013-09-20'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-32.html'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-30.html'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                    TableRow(contents='Latest Proposed Update\ue000http://www.unicode.org/reports/tr14/proposed.html'),
                    TableRow(contents='Revision\ue00032'),
                    Heading(level=4, contents='Summary'),
                    Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display. A model implementation using pair tables is also provided.'),
                    Heading(level=4, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                    Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                    Heading(level=4, contents='Contents'),
                    Paragraph(contents='1 Overview and Scope'),
                    Paragraph(contents='2 Definitions'),
                    Paragraph(contents='3 Introduction'),
                    Paragraph(contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='4 Conformance'),
                    Paragraph(contents='4.1 Conformance Requirements'),
                    Paragraph(contents='5 Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Dictionary Usage'),
                    Paragraph(contents='5.3 Use of Hyphen'),
                    Paragraph(contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='5.7 Word Separator Characters'),
                    Paragraph(contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Pair Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Explicit Breaks'),
                    Paragraph(contents='8 Customization'),
                    Paragraph(contents='8.1 Types of Tailoring'),
                    Paragraph(contents='8.2 Examples of Customization'),
                    Paragraph(contents='9 Implementation Notes'),
                    Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='10 Testing'),
                    Paragraph(contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='References'),
                    Paragraph(contents='Acknowledgments'),
                    Paragraph(contents='Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                    Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                    Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                    Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Three main sections follow:'),
                    Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                    Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='• Section 7, Pair Table-Based Implementation, describes an efficient pair table-based implementation of the algorithm.'),
                    Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                    Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                    Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                    Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                    Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard [Unicode]. The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard. All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard.'),
                    Paragraph(contents='LD1 Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='LD2 Line Break: The position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='LD3 Line Break Opportunity: A place where a line is allowed to end.'),
                    Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                    Paragraph(contents='LD4 Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                    Paragraph(contents='LD5 Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                    Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                    Paragraph(contents='LD6 Line Breaking Class: A class of characters with the same line breaking property value.'),
                    Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                    Paragraph(contents='LD7 Mandatory Break: A line must break following a character that has the mandatory break property.'),
                    Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                    Paragraph(contents='LD8 Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                    Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='LD9 Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                    Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                    Paragraph(contents='• An indirect break is indicated in the pair table in Table 2 as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though space characters are not shown in the pair table, an indirect break can occur only if one or more spaces follow B. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                    Paragraph(contents='LD10 Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                    Paragraph(contents='• A prohibited break is indicated in the pair table in Table 2 as B ^ A, where B is the character class of the character before and A is the character class of the character after the break, and the optional space characters are not shown. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='LD11 Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                    Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                    Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                    Paragraph(contents='Table 1. Line Breaking Classes'),
                    TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                    TableRow(contents='Non-tailorable Line Breaking Classes'),
                    TableRow(contents='BK\ue000Mandatory Break\ue000NL, PS\ue000Cause a line break (after)'),
                    TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                    TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                    TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                    TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                    TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                    TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                    TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                    TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                    TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                    TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                    TableRow(contents='NS\ue000Nonstarter\ue000“‼”, “‽”, “⁇”, “⁉”, etc.\ue000Allow only indirect line breaks before'),
                    TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                    TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                    TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                    TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                    TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                    TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='CJ\ue000Conditional Japanese Starter\ue000Small kana\ue000Treat as NS or ID for strict or normal breaking.'),
                    TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='HL\ue000Hebrew Letter\ue000Hebrew\ue000Do not break around a following hyphen; otherwise act as Alphabetic'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                    TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='RI\ue000Regional Indicator\ue000REGIONAL INDICATOR SYMBOL LETTER A .. Z\ue000Keep together, break before and after from others'),
                    TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Introduction'),
                    Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                    Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                    Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                    Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                    Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                    Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                    Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                    Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                    Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                    Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                    Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                    Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                    Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                    Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                    Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [Bidi]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                    Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                    Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                    Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                    Heading(level=3, contents='4.1 Conformance Requirements'),
                    Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                    Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                    Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                    Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                    Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                    Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                    Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into two algorithms defined in Section 6, Line Breaking Algorithm, and Section 7, Pair Table-Based Implementation. These sections describe workable default line breaking methods. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences.'),
                    Heading(level=4, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a tab-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                    Heading(level=4, contents='Future Updates'),
                    Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                    Paragraph(contents='(A)—the class allows a break opportunity after in specified contexts'),
                    Paragraph(contents='(XA)—the class prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='(B)—the class allows a break opportunity before in specified contexts'),
                    Paragraph(contents='(XB)—the class prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='(P)—the class allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='(XP)—the class prevents a break opportunity for a pair of same characters'),
                    Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Some characters that ordinarily act like alphabetic characters are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                    Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [EAW].'),
                    Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                    Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                    Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                    TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                    TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                    Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                    Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                    Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='This class contains alphabetic or symbolic characters not explicitly assigned to another line breaking class. These are primarily characters of the following categories:'),
                    Paragraph(contents='ALPHABETIC—characters of General Categories Lu, Ll, Lt, Lm, and Lo'),
                    Paragraph(contents='SYMBOLS—characters of General Categories Sm, Sk, and So'),
                    Paragraph(contents='NON-DECIMAL NUMBERS—characters of General Categories Nl and No'),
                    Paragraph(contents='PUNCTUATION—characters of General Categories Pc, Pd, and Po'),
                    Paragraph(contents='Line break class AL also contains several format characters, including:'),
                    TableRow(contents='0600..0604\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAMVAT'),
                    TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                    TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                    TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                    TableRow(contents='110BD\ue000KAITHI NUMBER SIGN'),
                    Paragraph(contents='These format characters occur in the middle or at the beginning or words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                    Paragraph(contents='Major exceptions to the general pattern of alphabetic and symbolic characters having line break class AL include:'),
                    Paragraph(contents='HL for Hebrew letters AI or ID, based on the East Asian Width property of the character ID for certain pictographic symbols CJ for small hiragana and katakana SA for complex context scripts JL, JV, JT, H2 or H3 for Hangul characters'),
                    Heading(level=3, contents='BA: Break After (A)'),
                    Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                    Heading(level=4, contents='Breaking Spaces'),
                    Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN SPACE'),
                    TableRow(contents='2003\ue000EM SPACE'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                    Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                    Paragraph(contents='For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                    Heading(level=4, contents='Tabs'),
                    TableRow(contents='0009\ue000TAB'),
                    Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    Heading(level=4, contents='Conditional Hyphens'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=4, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Visible Word Dividers'),
                    Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                    TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                    TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                    Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                    Heading(level=4, contents='Historic Word Separators'),
                    Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                    Paragraph(contents='Examples of Historic Word Separators include:'),
                    TableRow(contents='16EB\ue000RUNIC SINGLE DOT PUNCTUATION'),
                    TableRow(contents='16EC\ue000RUNIC MULTIPLE DOT PUNCTUATION'),
                    TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                    TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                    TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                    TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                    TableRow(contents='205B\ue000FOUR DOT MARK'),
                    TableRow(contents='205D\ue000TRICOLON'),
                    TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                    TableRow(contents='2E19\ue000PALM BRANCH'),
                    TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                    TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                    TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                    TableRow(contents='2E2D\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='2E30\ue000RING POINT'),
                    TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                    TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                    TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                    TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                    TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                    TableRow(contents='1091F\ue000PHOENICIAN WORD DIVIDER'),
                    TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                    Heading(level=4, contents='Dandas'),
                    Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                    Paragraph(contents='Examples of dandas include:'),
                    TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                    TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                    TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                    TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                    TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                    TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                    TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                    TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                    TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                    TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                    TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                    TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                    TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                    TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                    TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                    TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                    Heading(level=4, contents='Tibetan'),
                    TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                    TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                    TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                    TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                    TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                    TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                    Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Other Terminating Punctuation'),
                    Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                    TableRow(contents='1804\ue000MONGOLIAN COLON'),
                    TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                    TableRow(contents='1B5A\ue000BALINESE PANTI'),
                    TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                    TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                    TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                    TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                    TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                    TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                    TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                    TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                    TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                    TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                    TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                    TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                    TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                    TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                    TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                    TableRow(contents='2E17\ue000OBLIQUE DOUBLE HYPHEN'),
                    TableRow(contents='A60D\ue000VAI COMMA'),
                    TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                    TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                    TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                    TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                    TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                    TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                    TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                    TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                    TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                    Heading(level=3, contents='BB: Break Before (B)'),
                    Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                    Paragraph(contents='Examples of BB characters are described in the following sections.'),
                    Heading(level=4, contents='Dictionary Use'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    TableRow(contents='1FFD\ue000GREEK OXIA'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                    TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                    Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                    Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                    TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                    TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                    TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                    TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                    TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                    TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                    TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                    TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                    TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                    TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                    TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                    TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                    TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                    Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Mongolian'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                    Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                    Paragraph(contents='Some languages, including Spanish, use EM DASH to set off a parenthetical, and the surrounding dashes should not be broken from the contained text. In this usage there is space on the side where it can be broken. This does not conflict with symmetrical usages, either with spaces on both sides of the em-dash or with no spaces.'),
                    Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                    TableRow(contents='000C\ue000FORM FEED (FF)'),
                    TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                    Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR (LS)'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. This is similar to HTML <BR>.'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR (PS)'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LS, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                    Heading(level=4, contents='Newline Function (NLF)'),
                    Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                    Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                    Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                    Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                    Heading(level=3, contents='CJ: Conditional Japanese Starter'),
                    Paragraph(contents='This character class contains Japanese small hiragana and katakana. Characters of this class may be treated as either NS or ID.'),
                    Paragraph(contents='CSS Text Level 3 (which supports Japanese line layout) defines three distinct values for its line-break behavior:'),
                    Paragraph(contents='• strict, typically used for long lines'),
                    Paragraph(contents='• normal (CSS default), the behavior typically used for books and documents'),
                    Paragraph(contents='• loose, typically used for short lines such as in newspapers'),
                    Paragraph(contents='These have different sets of “kinsoku” characters which cannot be at the beginning or end of a line; strict has the largest set, while loose has the smallest. The motivation for the smaller number of kinsoku characters is to avoid triggering justification that puts characters off the grid position.'),
                    Paragraph(contents='Treating characters of class CJ as class NS will give CSS strict line breaking; treating them as class ID will give CSS normal breaking.'),
                    Paragraph(contents='The CJ line break class includes'),
                    TableRow(contents='3041, 3043, 3045, etc.\ue000Small hiragana'),
                    TableRow(contents='30A1, 30A3, 30A5, etc.\ue000Small katakana'),
                    TableRow(contents='30FC\ue000KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF67..FF70\ue000Halfwidth variants'),
                    Heading(level=3, contents='CL: Close Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                    Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                    Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                    TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                    Heading(level=4, contents='Combining Characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                    Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 No-Break SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                    Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                    Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                    Heading(level=4, contents='Control and Formatting Characters'),
                    Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                    Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Paragraph(contents='The CM class also includes U+3035 VERTICAL KANA REPEAT MARK LOWER HALF. This character is normally preceded by either U+3033 VERTICAL KANA REPEAT MARK UPPER HALF or U+3034 VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF, and should not be separated from them.'),
                    Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                    Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                    TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                    TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                    Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                    Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                    Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                    Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                    TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                    TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                    TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                    TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                    TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                    TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following are examples of characters of line break class GL:'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                    TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE. NARROW NO-BREAK SPACE is used in Mongolian. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in Section 13.2, Mongolian, of [Unicode].'),
                    Paragraph(contents='NARROW NO-BREAK SPACE is a narrow version of NO-BREAK SPACE, which has exactly the same line breaking behavior, but with a narrow display width. It is regularly used in Mongolian in certain grammatical contexts (before a particle), where it also influences the shaping of the glyphs for the particle. In Mongolian text, the NARROW NO-BREAK SPACE is typically displayed with one third the width of a normal space character.'),
                    Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                    Paragraph(contents='The MONGOLIAN VOWEL SEPARATOR is equivalent to a NARROW NO-BREAK SPACE in its line breaking behavior, but has different effects in controlling the shaping of its preceding and following characters. It constitutes a word-internal space and is typically displayed with half the width of a NARROW NO-BREAK SPACE.'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                    TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                    Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                    Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                    Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                    Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                    Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                    Heading(level=3, contents='HY: Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                    Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                    Heading(level=3, contents='ID: Ideographic (B/A)'),
                    Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                    TableRow(contents='2E80..2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                    TableRow(contents='30A0..30FF\ue000Katakana (except small characters)'),
                    TableRow(contents='3400..4DB5\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='4E00..9FFF\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='F900..FAD9\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490..A4CF\ue000YI RADICALS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF01..FF5A\ue000FULL WIDTH LATIN LETTERS and DIGITS'),
                    Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                    Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                    Paragraph(contents='The CJK blocks and regions in which unassigned characters default to line break class ID are:'),
                    TableRow(contents='CJK Unified Ideographs Extension A'),
                    TableRow(contents='CJK Unified Ideographs'),
                    TableRow(contents='CJK Compatibility Ideographs'),
                    TableRow(contents='CJK Unified Ideographs Extension B'),
                    TableRow(contents='CJK Unified Ideographs Extension C'),
                    TableRow(contents='CJK Unified Ideographs Extension D'),
                    TableRow(contents='CJK Compatibility Ideographs Supplement'),
                    TableRow(contents='SIP (Plane 2) outside of blocks'),
                    TableRow(contents='TIP (Plane 3) outside of blocks'),
                    Heading(level=4, contents='Korean'),
                    Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    Heading(level=4, contents='Symbols'),
                    Paragraph(contents='Certain pictographic symbols of General Category So are also included in this line break class.'),
                    Heading(level=3, contents='HL: Hebrew Letter (XB)'),
                    Paragraph(contents='This class includes all Hebrew letters.'),
                    Paragraph(contents='When a Hebrew letter is followed by a hyphen, there is no break on either side of the hyphen. In this context a hyphen is any character of class HY or class BA. In other respects, Hebrew letters behave the same as characters of class AL.'),
                    Paragraph(contents='Included in this class are all characters of General Category Letter that have Script=Hebrew.'),
                    Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                    Heading(level=4, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    TableRow(contents='060C\ue000ARABIC COMMA'),
                    TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                    TableRow(contents='07F8\ue000NKO COMMA'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                    TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                    TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                    Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                    Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                    Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                    Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                    Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                    Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                    Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                    Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                    Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                    Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                    Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                    TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                    Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                    Heading(level=3, contents='NS: Nonstarters (XB)'),
                    Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include:'),
                    TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='203D\ue000INTERROBANG'),
                    TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                    TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                    TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='303C\ue000MASU MARK'),
                    TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                    TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                    TableRow(contents='30FD..30FE\ue000KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='Note: Optionally, the NS restriction may be relaxed by tailoring, with some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles. Alternatively, line breaking can be tightened by moving characters that are ID into NS.'),
                    Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                    Heading(level=3, contents='NU: Numeric (XP)'),
                    Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                    Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                    TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                    TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                    Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                    Heading(level=3, contents='OP: Open Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                    TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                    TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                    TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                    Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                    Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                    Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                    Paragraph(contents='Examples of Postfix characters include'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='060B\ue000AFGHANI SIGN'),
                    TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='FDFC\ue000RIAL SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                    Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                    Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                    Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                    Heading(level=3, contents='QU: Quotation (XB/XA)'),
                    Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                    Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                    Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                    TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                    TableRow(contents='2E0B\ue000RAISED SQUARE'),
                    Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='RI: Regional Indicator (B/A/XP)'),
                    Paragraph(contents='The Regional Indicator characters are'),
                    TableRow(contents='1F1E6..1F1FF\ue000REGIONAL INDICATOR SYMBOL LETTER A .. REGIONAL INDICATOR SYMBOL LETTER Z'),
                    Paragraph(contents='Pairs of RI characters are used to represent a two-letter ISO 3166 region code. No break opportunity occurs between adjacent RI characters, otherwise breaks can occur before and after.'),
                    Paragraph(contents='To provide a break between adjacent RI characters insertion of a U+200B ZERO WIDTH SPACE is recommended.'),
                    Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                    Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                    TableRow(contents='0E00..0E7F\ue000Thai'),
                    TableRow(contents='0E80..0EFF\ue000Lao'),
                    TableRow(contents='1000..109F\ue000Myanmar'),
                    TableRow(contents='1780..17FF\ue000Khmer'),
                    TableRow(contents='1950..197F\ue000Tai Le'),
                    TableRow(contents='1980..19DF\ue000New Tai Lue'),
                    TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                    TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                    TableRow(contents='AA80..AADF\ue000Tai Viet'),
                    Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                    Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                    Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                    Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                    Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                    Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                    Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                    Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                    Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                    Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                    Heading(level=3, contents='XX: Unknown (XP)'),
                    Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                    Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                    Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                    Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                    Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                    Heading(level=3, contents='5.2 Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                    Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                    Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                    Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                    Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                    Heading(level=3, contents='5.3 Use of Hyphen'),
                    Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                    Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                    Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                    Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                    Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                    Paragraph(contents='dispara- te'),
                    Paragraph(contents='and the latter as'),
                    Paragraph(contents='dispara- -te.'),
                    Paragraph(contents='A recommended practice is to type <SHY, NBHY> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                    Paragraph(contents='• Simply inserting a hyphen glyph'),
                    Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                    Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                    Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                    Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                    Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                    Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                    Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                    Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                    Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                    Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                    Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                    Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [Bidi] and Section 8.2, Arabic, of [Unicode].'),
                    Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                    Paragraph(contents='The sequence <SHY, NBHY> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                    Heading(level=3, contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                    Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                    Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                    Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                    Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                    Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                    Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                    Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                    Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                    Heading(level=3, contents='5.7 Word Separator Characters'),
                    Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                    Paragraph(contents='1. suppress the visible word separator'),
                    Paragraph(contents='The:quick:brown fox:jumped.'),
                    Paragraph(contents='2. break before the visible word separator'),
                    Paragraph(contents='The:quick:brown :fox:jumped.'),
                    Paragraph(contents='3. break after the visible word separator'),
                    Paragraph(contents='The:quick:brown: fox:jumped.'),
                    Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                    Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                    Paragraph(contents='A slightly simplified implementation of such an algorithm can be devised that uses a two-dimensional table to resolve break opportunities between pairs or characters. It is described in Section 7, Pair Table-Based Implementation.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1 Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                    Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                    Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                    Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, and ZW define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                    Heading(level=4, contents='Resolve line breaking classes:'),
                    Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, CJ, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                    Paragraph(contents='In the absence of such criteria all characters with a specific combination of original class and General_Category property value are resolved as follows:'),
                    TableRow(contents='Resolved\ue000Original\ue000General_Category'),
                    TableRow(contents='AL\ue000AI, SG, XX\ue000Any'),
                    TableRow(contents='CM\ue000SA\ue000Only Mn or Mc'),
                    TableRow(contents='AL\ue000SA\ue000Any except Mn and Mc'),
                    TableRow(contents='NS\ue000CJ\ue000Any'),
                    Heading(level=4, contents='Start and end of text:'),
                    Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                    Rule(contents='LB2 Never break at the start of text.'),
                    Formula(contents='sot ×'),
                    Rule(contents='LB3 Always break at the end of text.'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                    Rule(contents='LB4 Always break after hard line breaks.'),
                    Formula(contents='BK !'),
                    Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                    Formula(contents='CR × LF'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='NL !'),
                    Rule(contents='LB6 Do not break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF | NL )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB7 Do not break before spaces or zero width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                    Formula(contents='ZW SP* ÷'),
                    Heading(level=4, contents='Combining marks:'),
                    Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                    Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules.'),
                    Formula(contents='Treat X CM* as if it were X.'),
                    Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                    Rule(contents='LB10 Treat any remaining combining mark as AL.'),
                    Formula(contents='Treat any remaining CM as it if were AL.'),
                    Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                    Heading(level=4, contents='Word joiner:'),
                    Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                    Formula(contents='× WJ'),
                    Formula(contents='WJ ×'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12 Do not break after NBSP and related characters.'),
                    Formula(contents='GL ×'),
                    Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                    Formula(contents='[^SP BA HY] × GL'),
                    Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                    Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× CP'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                    Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                    Formula(contents='(CL | CP) SP* × NS'),
                    Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 SP* × B2'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB18 Break after spaces.'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB20 Break before and after unresolved CB.'),
                    Formula(contents='÷ CB'),
                    Formula(contents='CB ÷'),
                    Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                    Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents="LB21a Don't break after Hebrew + Hyphen"),
                    Formula(contents='HL (HY | BA) ×'),
                    Rule(contents='LB22 Do not break between two ellipses, or between letters or numbers and ellipsis.'),
                    Formula(contents='(AL | HL) × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents='Do not break alphanumerics.'),
                    Rule(contents='LB23 Do not break within ‘a9’, ‘3a’, or ‘H%’.'),
                    Formula(contents='ID × PO'),
                    Formula(contents='(AL | HL) × NU'),
                    Formula(contents='NU × (AL | HL)'),
                    Rule(contents='LB24 Do not break between prefix and letters or ideographs.'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × (AL | HL)'),
                    Formula(contents='PO × (AL | HL)'),
                    Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                    Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                    Formula(contents='CL × PO'),
                    Formula(contents='CP × PO'),
                    Formula(contents='CL × PR'),
                    Formula(contents='CP × PR'),
                    Formula(contents='NU × PO'),
                    Formula(contents='NU × PR'),
                    Formula(contents='PO × OP'),
                    Formula(contents='PO × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='PR × NU'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Korean syllable blocks'),
                    Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                    Rule(contents='LB26 Do not break a Korean syllable.'),
                    Formula(contents='JL × (JL | JV | H2 | H3)'),
                    Formula(contents='(JV | H2) × (JV | JT)'),
                    Formula(contents='(JT | H3) × JT'),
                    Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                    Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                    Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                    Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                    Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                    Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                    Formula(contents='(AL | HL) × (AL | HL)'),
                    Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                    Formula(contents='IS × (AL | HL)'),
                    Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                    Formula(contents='(AL | HL | NU) × OP'),
                    Formula(contents='CP × (AL | HL | NU)'),
                    Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                    Rule(contents='LB30a Do not break between regional indicator symbols.'),
                    Formula(contents='RI × RI'),
                    Rule(contents='LB31 Break everywhere else.'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='A two-dimensional table can be used to resolve break opportunities between pairs of characters. This section defines such a table. The rows of the table are labeled with the possible values of the line breaking property of the leading character in the pair. The columns are labeled with the line breaking class for the following character of the pair. Each intersection is labeled with the resulting line break opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of a similar table-based definition. However, it uses line breaking classes whose membership is not solely determined by the line breaking property (as in this annex), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classes defined previously.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, then the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes, of which only 14 appear to be unique. Any minimal table representation is unique, except for trivial reordering of rows and columns. Minimal tables for which the rows and columns are sorted alphabetically can be mechanically compared for differences. This is in contrast to the rules, where identical results can be achieved by sets of rules that cannot be easily compared by looking at their textual representation. However, any set of rules that is equivalent to a minimal pair table can be used to automatically generate such a table, which can then be used for comparison. The rules in Section 6, Line Breaking Algorithm, can be expressed as minimal pair tables if the extended context used as described below.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Most of the rules in Section 6, Line Breaking Algorithm, involve only pairs of characters, or they apply to a single line break class preceded or followed by any character. These rules can be represented directly in a pair table. However, rules LB14–LB17 require extended context to handle spaces.'),
                    Paragraph(contents='By broadening the definition of a pair from B A, where B is the line breaking class before a break and A the one after, to B SP* A, where SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line break opportunity (that is, direct and indirect breaks). Rules equivalent to the ones given in Section 6, Line Breaking Algorithm, can be formulated without explicit use of SP by using % to express indirect breaks instead. These rules can then be simplified to involve only pairs of classes—that is, only constructions of the form:'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B × A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can be automatically translated into a pair table, as in Table 2. Line breaking analysis then proceeds by pair table lookup as explained below. (For readability in table layout, the symbol ^ is used in the table instead of × and _ is used instead of ÷.)'),
                    Paragraph(contents='Rule LB9 requires extended context for handling combining marks. This extended context must also be built into the code that interprets the pair table. For convenience in detecting the condition where A = CM, the symbols # and @ are used in the pair table, instead of % and ^, respectively. See Section 7.5, Combining Marks.'),
                    Paragraph(contents='Rule LB21a also requires extended context to handle Hebrew letters followed by hyphens. This rule cannot be represented directly by the example pair table and is not handled by the sample implementation code included here. In the absence of special case handling, rule LB21a is effectively ignored by this example pair table and implementation code.'),
                    Heading(level=3, contents='7.3 Example Pair Table'),
                    Paragraph(contents='Table 2 implements an approximation of the line breaking behavior described in this annex, with the limitation that only context of the form B SP* A is considered. BK, CR, LF, NL, and SP classes are handled explicitly in the outer loop, as given in the code sample below. Pair context of the form B CM* can be processed by handling the special entries @ and # in the driving loop, as explained in Section 7.5, Combining Marks. In Table 2, the rows are labeled with the B class and the columns are labeled with the A class.'),
                    Paragraph(contents='Table 2. Example Pair Table'),
                    TableRow(contents='OP\ue000CL\ue000CP\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000HL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM\ue000WJ\ue000H2\ue000H3\ue000JL\ue000JV\ue000JT\ue000RI'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000@\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^'),
                    TableRow(contents='CL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CP\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='QU\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='NS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='EX\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='SY\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='PR\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='PO\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='NU\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='AL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ID\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IN\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HY\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BA\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BB\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='B2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000^\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ZW\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CM\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='WJ\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='H2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_'),
                    TableRow(contents='H3\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%\ue000_'),
                    TableRow(contents='JL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_'),
                    TableRow(contents='JV\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_'),
                    TableRow(contents='JT\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%\ue000_'),
                    TableRow(contents='RI\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='Table 2 uses the following notation:'),
                    Paragraph(contents='Resolved outside the pair table: AI, BK, CB, CJ, CR, LF, NL, SA, SG, SP, XX'),
                    Paragraph(contents='^ denotes a prohibited break: B ^ A is equivalent to B SP* × A; in other words, never break before A and after B, even if one or more spaces intervene.'),
                    Paragraph(contents='% denotes an indirect break opportunity: B % A is equivalent to B × A and B SP+ ÷ A; in other words, do not break before A, unless one or more spaces follow B.'),
                    Paragraph(contents='@ denotes a prohibited break for combining marks: B @ A is equivalent to B SP* × A, where A is of class CM. For more details, see Section 7.5, Combining Marks.'),
                    Paragraph(contents='# denotes an indirect break opportunity for combining marks following a space: B # A is equivalent to (B × A and B SP+ ÷ A), where A is of class CM.'),
                    Paragraph(contents='_ denotes a direct break opportunity (equivalent to ÷ as defined above).'),
                    Paragraph(contents='Note: Hovering over the cells in a browser with tool-tips enabled reveals the rule number that determines the breaking status for the pair in question. When a pair must be tested both with and without intervening spaces, multiple rules are given. Hovering over a line breaking class name gives a representative member of the class and additional information. Clicking on any line break class name anywhere in the document jumps to the definition.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two sections provide sample code [Code14] that demonstrates how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the line breaking classes CR, LF, and NL need to be added. They have been omitted here for brevity, but see Section 7.6, Explicit Breaks.'),
                    Paragraph(contents='The sample code assumes that the line breaking classes AI, CB, SG, and XX have been resolved according to rule LB1 as part of initializing the pcls array. The code further assumes that the complex line break analysis for characters with line break class SA is handled in function findComplexBreak, for which the following placeholder is given:'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    // cls - resolved line break class, may differ from pcls[0]'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line breaking opportunities (output)'),
                    CodeLine(contents='    // cch - remaining length of input '),
                    CodeLine(contents='    int '),
                    CodeLine(contents='   findComplexBreak(enum break_class cls, enum break_class *pcls,'),
                    CodeLine(contents='                             enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='            if (!cch)'),
                    CodeLine(contents='                return 0;'),
                    CodeLine(contents='            for (int ich = 1; ich < cch; ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='                // .. do complex break analysis here'),
                    CodeLine(contents='                // and report any break opportunities in pbrk ..'),
                    CodeLine(contents=''),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK; // by default, no break'),
                    CodeLine(contents=''),
                    CodeLine(contents='                if (pcls[ich] != SA)'),
                    CodeLine(contents='                    break;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='            return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The entries in the example pair table correspond to the following enumeration. For diagnostic purposes, the sample code returns these values to indicate not only the location but also the type of rule that triggered a given break opportunity.'),
                    CodeLine(contents='    enum break_action {'),
                    CodeLine(contents='           DIRECT_BRK = 0,             // _ in table'),
                    CodeLine(contents='           INDIRECT_BRK,               // % in table'),
                    CodeLine(contents='           COMBINING_INDIRECT_BRK,     // # in table'),
                    CodeLine(contents='           COMBINING_PROHIBITED_BRK,   // @ in table'),
                    CodeLine(contents='           PROHIBITED_BRK,             // ^ in table'),
                    CodeLine(contents='           EXPLICIT_BRK };             // ! in rules'),
                    Paragraph(contents='Because the contexts involved in indirect breaks of the form B SP* A are of indefinite length, they need to be handled explicitly in the driver code. The sample implementation of a findLineBrk function below remembers the line break class for the last characters seen, but skips any occurrence of SP without resetting this value. Once character A is encountered, a simple lookback is used to see if it is preceded by a SP. This lookback is necessary only if B % A. To handle the case of a SP following sot, it is necessary to set cls to a dummy value. Using WJ gives the correct result and, as required, is unaffected by any tailoring.'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable) (returned value)'),
                    CodeLine(contents="    // cls - current resolved line break class for 'before' character (variable)"),
                    CodeLine(contents=''),
                    CodeLine(contents='    int'),
                    CodeLine(contents='    findLineBrk(enum break_class *pcls, enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='        if (!cch) return 0;'),
                    CodeLine(contents=''),
                    CodeLine(contents="        enum break_class cls = pcls[0];   // class of 'before' character"),
                    CodeLine(contents=''),
                    CodeLine(contents='        // treat SP at start of input as if it followed a WJ'),
                    CodeLine(contents='        if (cls == SP)'),
                    CodeLine(contents='            cls = WJ;'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='        for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // to handle explicit breaks, replace code from "for" loop condition'),
                    CodeLine(contents='            // above to comment below by code given in Section 7.6'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle spaces explicitly'),
                    CodeLine(contents='            if (pcls[ich] == SP) {'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;   // apply rule LB7: × SP'),
                    CodeLine(contents='                continue;                       // do not update cls'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle complex scripts in a separate function'),
                    CodeLine(contents='            if (pcls[ich] == SA) {'),
                    CodeLine(contents='                ich += findComplexBreak(cls, &pcls[ich-1], &pbrk[ich-1],'),
                    CodeLine(contents='                           cch - (ich-1));'),
                    CodeLine(contents='                if (ich < cch)'),
                    CodeLine(contents='                    cls = pcls[ich];'),
                    CodeLine(contents='                continue;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // lookup pair table information in brkPairs[before, after];'),
                    CodeLine(contents='            enum break_action brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents=''),
                    CodeLine(contents='            pbrk[ich-1] = brk;                     // save break action in output array'),
                    CodeLine(contents=''),
                    CodeLine(contents='            if (brk == INDIRECT_BRK) {             // resolve indirect break'),
                    CodeLine(contents='                if (pcls[ich - 1] == SP)           // if context is A SP + B'),
                    CodeLine(contents='                    pbrk[ich-1] = INDIRECT_BRK;    //       break opportunity'),
                    CodeLine(contents='                else                               // else'),
                    CodeLine(contents='                    pbrk[ich-1] = PROHIBITED_BRK;  //       no break opportunity'),
                    CodeLine(contents='            } '),
                    CodeLine(contents='            '),
                    CodeLine(contents='            // handle breaks involving a combining mark (see Section 7.5)'),
                    CodeLine(contents=''),
                    CodeLine(contents="            // save cls of 'before' character (unless bypassed by 'continue')"),
                    CodeLine(contents='            cls = pcls[ich];'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        pbrk[ich-1] = EXPLICIT_BRK;                // always break at the end'),
                    CodeLine(contents=''),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The function returns all of the break opportunities in the array pointed to by pbrk, using the values in the table. On return, pbrk[ich] is the type of break after the character at index ich.'),
                    Paragraph(contents='A common optimization in implementation is to determine only the nearest line break opportunity prior to the position of the first character that would cause the line to become overfull. Such an optimization requires backward traversal of the string instead of forward traversal as shown in the sample code.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='The implementation of combining marks in the pair table presents an additional complication because rule LB9 defines a context X CM* that is of arbitrary length. There are some similarities to the way contexts of the form B SP* A that are involved in indirect breaks are evaluated. However, contexts of the form SP CM* or CM* SP also need to be handled, while rule LB10 requires some CM* to be treated like AL.'),
                    Paragraph(contents='Implementing LB10. This rule can be reflected directly in the example pair table in Table 2 by assigning the same values in the row marked CM as in the row marked AL. Incidentally, this is equivalent to rewriting the rules LB11–LB31 by duplicating any expression that contains an AL on its left hand side with another expression that contains a CM. For example, in LB22'),
                    Formula(contents='AL × IN'),
                    Paragraph(contents='would become'),
                    Formula(contents='AL × IN CM × IN'),
                    Paragraph(contents='Rewriting these rules as indicated here (and then deleting LB10) is fully equivalent to the original rules because rule LB9 already accounts for all CMs that are not supposed to be treated like AL. For a complete description see Example 9 in Section 8.2, Examples of Customization.'),
                    Paragraph(contents='Implementing LB9. Rule LB9 is implemented in the example pair table in Table 2 by assigning a special # entry in the column marked CM for all rows referring to a line break class that allows a direct or indirect break after itself. (Note that the intersection between the row for class ZW and the column for class CM must be assigned “_” because of rule LB8.) The # corresponds to a break_action value of COMBINING_INDIRECT_BREAK, which triggers the following code in the sample implementation:'),
                    CodeLine(contents='    else if (brk == COMBINING_INDIRECT_BRK) {    // resolve combining mark break'),
                    CodeLine(contents='        pbrk[ich-1] = PROHIBITED_BRK;             // do not break before CM'),
                    CodeLine(contents='        if (pcls[ich-1] == SP){'),
                    CodeLine(contents='            #ifndef LEGACY_CM                    // new: space is not a base'),
                    CodeLine(contents='                pbrk[ich-1] = COMBINING_INDIRECT_BRK;    // apply rule SP ÷ '),
                    CodeLine(contents='            #else'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;      // legacy: keep SP CM together'),
                    CodeLine(contents='                if (ich > 1)'),
                    CodeLine(contents='                    pbrk[ich-2] = ((pcls[ich - 2] == SP) ?'),
                    CodeLine(contents='                                                  INDIRECT_BRK : DIRECT_BRK);'),
                    CodeLine(contents='            #endif'),
                    CodeLine(contents='        } else                                   // apply rule LB9: X CM * -> X'),
                    CodeLine(contents='            continue;                            // do not update cls'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    Paragraph(contents='When handling a COMBINING_INDIRECT_BREAK, the last remembered line break class in variable cls is not updated, except for those cases covered by rule LB10. A tailoring of rule LB9 that keeps the last SPACE character preceding a combining mark, if any, and therefore breaks before that SPACE character can easily be implemented as shown in the sample code. (See Section 9.2, Legacy Support for Space Character as Base for Combining Marks.)'),
                    Paragraph(contents='Any rows in Table 2 for line break classes that prohibit breaks after must be handled explicitly. In the example pair table, these are assigned a special entry “@”, which corresponds to a special break action of COMBINING_PROHIBITED_BREAK that triggers the following code:'),
                    CodeLine(contents='    else if (brk == COMBINING_PROHIBITED_BRK) { // this is the case OP SP* CM'),
                    CodeLine(contents='        pbrk[ich-1] = COMBINING_PROHIBITED_BRK;  // no break allowed'),
                    CodeLine(contents='        if (pcls[ich-1] != SP)'),
                    CodeLine(contents='            continue;                          // apply rule LB9: X CM* -> X'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The only line break class that unconditionally prevents breaks across a following SP is OP. The preceding code fragment ensures that OP CM is handled according to rule LB9 and OP SP CM is handled as OP SP AL according to rule LB10.'),
                    Heading(level=3, contents='7.6 Explicit Breaks'),
                    Paragraph(contents='Handling explicit breaks is straightforward in the driver code, although it does clutter up the loop condition and body of the loop a bit. For completeness, the following sample shows how to change the loop condition and add if statements—both before and inside the loop—that handle BK, NL, CR, and LF. Because NL and BK behave identically by default, this code can be simplified in implementations where the character classification is changed so that BK will always be substituted for NL when assigning the line break class. Because this optimization does not change the result, it is not considered a tailoring and does not affect conformance.'),
                    CodeLine(contents='    // handle case where input starts with an LF'),
                    CodeLine(contents='    if (cls == LF)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // treat initial NL like BK'),
                    CodeLine(contents='    if (cls == NL)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // loop over all pairs in the string up to a hard break or CRLF pair'),
                    CodeLine(contents='    for (int ich = 1; (ich < cch) && (cls != BK) && (cls != CR || pcls[ich] == LF); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle BK, NL and LF explicitly'),
                    CodeLine(contents='        if (pcls[ich] == BK ||pcls[ich] == NL ||  pcls[ich] == LF)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = BK;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle CR explicitly'),
                    CodeLine(contents='        if(pcls[ich] == CR)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = CR;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle spaces explicitly...'),
                    CodeLine(contents=''),
                    CodeLine(contents='    '),
                    Heading(level=2, contents='8 Customization'),
                    Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                    Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                    Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                    Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how to customize the pair table implementation of the line breaking algorithm for these tailorings.'),
                    Heading(level=3, contents='8.1 Types of Tailoring'),
                    Paragraph(contents='There are three principal ways of tailoring the sample pair table implementation of the line breaking algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to permanently overriding some of the rules in Section 6, Line Breaking Algorithm.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions This is a dynamic equivalent of the preceding. Instead of changing the values for the pair intersection directly in the table, they are labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be enabled at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real-world implementation of a pair table-based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. That implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=3, contents='8.2 Examples of Customization'),
                    Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm. Section 7.4, Sample Code, outlines such an approach in which the interface to the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the line breaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersections of ID/ID, AL/ID, and ID/AL are affected. For alphabetic style line breaking, breaks for these cases require space; for ideographic style line breaking, these cases do not require spaces. Therefore, the implementation defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given text.'),
                    Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. In this case the intersections of NU/NU, NU/AL, AL/AL, and AL/NU are affected.'),
                    Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by mapping class CJ to be handled as class ID in rule LB1.'),
                    Paragraph(contents='Example 6. Tailor to prevent line breaks from falling within default grapheme clusters, as defined by by Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. The tailoring can be accomplished by first segmenting the text into grapheme clusters according to the rules defined in UAX #29, and then finding line breaks according to the default line break rules, giving each grapheme cluster the line breaking class of its first code point.'),
                    Paragraph(contents='An example of a grapheme cluster that would be split by the default line break rules is a Zero Width Space followed by a combining mark.'),
                    Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * ( CL | CP ) ? ( PR | PO) ?'),
                    Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                    Paragraph(contents='Regex-Number: Do not break numbers.'),
                    Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                    Formula(contents='( OP | HY ) × NU'),
                    Formula(contents='NU × (NU | SY | IS)'),
                    Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL | CP )'),
                    Formula(contents='NU (NU | SY | IS)* (CL | CP)? × (PO | PR)'),
                    Paragraph(contents='This customized rule uses extended contexts that cannot be represented in a pair table. In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                    Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                    Formula(contents='[^NU] × CL'),
                    Formula(contents='[^NU] × CP'),
                    Formula(contents='× EX'),
                    Formula(contents='[^NU] × IS'),
                    Formula(contents='[^NU] × SY'),
                    Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                    Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                    Heading(level=2, contents='9 Implementation Notes'),
                    Paragraph(contents='This section provides additional notes on implementation issues.'),
                    Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                    Paragraph(contents='To replace rule LB9, terms of the form'),
                    Paragraph(contents='B # A'),
                    Paragraph(contents='B SP* # A'),
                    Paragraph(contents='B #'),
                    Paragraph(contents='B SP* #'),
                    Paragraph(contents='are replaced by terms of the form'),
                    Paragraph(contents='B CM* # A'),
                    Paragraph(contents='B CM* SP* # A'),
                    Paragraph(contents='B CM* #'),
                    Paragraph(contents='B CM* SP* #'),
                    Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                    Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                    Paragraph(contents='Replace LB10 by the following rule:'),
                    Paragraph(contents='× CM'),
                    Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                    Paragraph(contents='(AL | NU) × OP'),
                    Paragraph(contents='add another rule'),
                    Paragraph(contents='CM × OP.'),
                    Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                    Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='As stated in [Unicode], Section 7.9, Combining Marks, combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                    Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                    Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID.'),
                    Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                    Heading(level=2, contents='10 Testing'),
                    Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2 Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                    Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                    Paragraph(contents='Note:The break opportunities produced by an implementation of the rules of Section 6, Line Breaking Algorithm differ in certain cases from those produced by the pair table included in Section 7, Pair Table-Based Implementation. The differences occur with sequences like ZW SP CL. The test data file matches the results expected of a rule based implementation. The inconsistencies between the two will be addressed in the next revision of this document.'),
                    Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                    Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                    Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                    Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                    Paragraph(contents='1. The rules are cast into a more regex-style.'),
                    Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                    Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                    Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                    Paragraph(contents='• 13.01) [^NU] × CL'),
                    Paragraph(contents='• 13.02) × EX'),
                    Paragraph(contents='• ...'),
                    Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                    Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                    Paragraph(contents='Table 4. Numbering of Test Rules'),
                    TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                    TableRow(contents='LB2\ue0000.2\ue000start of text'),
                    TableRow(contents='LB3\ue0000.3\ue000end of text'),
                    TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                    TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                    TableRow(contents='LB31\ue000999\ue000÷ any'),
                    Heading(level=2, contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                    Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                    TableRow(contents='6.2.0\ue0006.1.0\ue0005.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                    TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                    TableRow(contents='LB2\ue0002\ue0002\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                    TableRow(contents='LB3\ue0003\ue0003\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                    TableRow(contents='LB4\ue0004\ue0004\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB5\ue0005\ue0005\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB6\ue0006\ue0006\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                    TableRow(contents='LB7\ue0007\ue0007\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                    TableRow(contents='LB8\ue0008\ue0008\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                    TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                    TableRow(contents='LB9\ue0009\ue0009\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB10\ue00010\ue00010\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                    TableRow(contents='LB11\ue00011\ue00011\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12\ue00012\ue00012\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12a\ue00012a\ue00012a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB13\ue00013\ue00013\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                    TableRow(contents='LB14\ue00014\ue00014\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                    TableRow(contents='LB15\ue00015\ue00015\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                    TableRow(contents='LB16\ue00016\ue00016\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                    TableRow(contents='LB17\ue00017\ue00017\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                    TableRow(contents='LB18\ue00018\ue00018\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                    TableRow(contents='LB19\ue00019\ue00019\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                    TableRow(contents='LB20\ue00020\ue00020\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                    TableRow(contents='LB21\ue00021\ue00021\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                    TableRow(contents='LB21a\ue00021a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB22\ue00022\ue00022\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                    TableRow(contents='LB23\ue00023\ue00023\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                    TableRow(contents='LB24\ue00024\ue00024\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='LB25\ue00025\ue00025\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                    TableRow(contents='LB26\ue00026\ue00026\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB27\ue00027\ue00027\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB28\ue00028\ue00028\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                    TableRow(contents='LB29\ue00029\ue00029\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30\ue00030\ue00030\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB31\ue00031\ue00031\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                    Heading(level=2, contents='References'),
                    Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintains the text.'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                    Heading(level=2, contents='Modifications'),
                    Paragraph(contents='The following documents the changes introduced by each revision.'),
                    Heading(level=4, contents='Revision 32:'),
                    Paragraph(contents='• Reissued for Unicode 6.3.0.'),
                    Paragraph(contents='• Update the description of class CM to mention U+3035 VERTICAL KANA REPEAT MARK LOWER HALF.'),
                    Paragraph(contents='• Update the description of class BA to reflect the change of U+3000 IDEOGRAPHIC SPACE to class BA.'),
                    Paragraph(contents='• Clarify descriptions in section 7.3, Example Pair Table.'),
                    Paragraph(contents='• Remove section 7.6, Conjoining Jamos pair table implementation, reflecting that Jamos are included directly in the main pair table.'),
                    Paragraph(contents='• Revised Example 6 of section 8.2, Examples of Customization.'),
                    Paragraph(contents='Revision 31 being a proposed update, only changes between revisions 32 and 30 are noted here.'),
                    Heading(level=4, contents='Revision 30:'),
                    Paragraph(contents='• Reissued for Unicode 6.2.0.'),
                    Paragraph(contents='• Introduce character class RI (Regional Indicator).'),
                    Paragraph(contents='• Introduce rule 30a, do not break between Regional Indicators.'),
                    Paragraph(contents='Revision 29 being a proposed update, only changes between revisions 30 and 28 are noted here.'),
                    Heading(level=4, contents='Revision 28:'),
                    Paragraph(contents='• Reissued for Unicode 6.1.0.'),
                    Paragraph(contents="• Add rule 21a, don't break after Hebrew + hyphen."),
                    Paragraph(contents='• Introduce character class HL (Hebrew Letter).'),
                    Paragraph(contents='• Introduce character class CJ for small kana, and amend rule LB1 to provide default resolution for class CJ.'),
                    Paragraph(contents='• Clarify that the list of GL characters is not comprehensive.'),
                    Paragraph(contents='• Update Example 7 of Section 8.2 (Customization) to reflect the introduction of character class CP.'),
                    Paragraph(contents='Revision 27 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                    Heading(level=4, contents='Revision 26:'),
                    Paragraph(contents='• Reissued for Unicode 6.0.0.'),
                    Paragraph(contents='• In Section 5.1, revised the description of the SHY character.'),
                    Paragraph(contents='• Changed LB8 from "ZW ÷" to "ZW SP* ÷" in accordance with UAX 14 Corrigendum #7, http://www.unicode.org/versions/corrigendum7.html.'),
                    Paragraph(contents='• Changed references to Unicode 5.2 to generic references where appropriate.'),
                    Paragraph(contents='• In Section 3, removed Ideographic Space from the list of spaces that may be compressed or expanded and clarified that the justification of lines is out of scope.'),
                    Paragraph(contents='Revision 25 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                    Heading(level=4, contents='Revision 24:'),
                    Paragraph(contents='• Reissued for Unicode 5.2.0.'),
                    Paragraph(contents='• Added class CP, reintroduced rule LB30, adjusted other rules for class CP.'),
                    Paragraph(contents='• In Section 5.1, clarified that the lists of characters for each property contain representative characters, and are not necessarily complete.'),
                    Paragraph(contents='• Unassigned code points in CJK regions default to class ID.'),
                    Paragraph(contents='• Added Tai Tham, Myanmar Extended-A and Tai Viet blocks to class SA.'),
                    Paragraph(contents='• Brought descriptive names of the character classes into closer alignment with the Unicode Line Break character property values.'),
                    Paragraph(contents='• Small edits for improved clarity, document style.'),
                    Paragraph(contents='Revision 23 being a proposed update, only changes between revisions 22 and 24 are noted here.'),
                    Heading(level=4, contents='Revision 22:'),
                    Paragraph(contents='• Updated for Version 5.1.0.'),
                    Paragraph(contents='• Added 2E18, INVERTED INTERROBANG, to class OP.'),
                    Paragraph(contents='• Added 2064, INVISIBLE PLUS, to class AL.'),
                    Paragraph(contents='• Added 2E00..2E01, 2E06..2E08, 2E0B to class QU.'),
                    Paragraph(contents='• Removed LB30, to correct regression for U+3002 IDEOGRAPHIC FULL STOP'),
                    Paragraph(contents='• Add Example 9 to Section 8, Customization.'),
                    Paragraph(contents='• Substantial revisions to Section 4, Conformance.'),
                    Paragraph(contents='• Section 5.7, Word Separators, added.'),
                    Paragraph(contents='• Section 10, Testing, added.'),
                    Paragraph(contents='• Renumber rules for consistency: 12a -> 12; 12b -> 12a'),
                    Paragraph(contents='• Added 02DF, MODIFIER LETTER CROSS ACCENT, to class BB.'),
                    Paragraph(contents='• Added discussion for 202F NARROW NO-BREAK SPACE and 180E MONGOLIAN VOWEL SEPARATOR'),
                    Paragraph(contents='• Corrected typos in LB13 and LB16'),
                    Paragraph(contents='• Added characters introduced with Unicode 5.1 to the lists associated with the line break properties.'),
                    Paragraph(contents='• Added Section 5.2 on the special handling of hyphens. Edited Section 3 for clarity.'),
                    Paragraph(contents='• Improved delineation between normative and informative information.'),
                    Paragraph(contents='• Changed from EX to IS'),
                    Paragraph(contents='• 060C ( ، ) ARABIC COMMA'),
                    Paragraph(contents='• Changed from EX to PO'),
                    Paragraph(contents='• 066A ( ٪ ) ARABIC PERCENT SIGN'),
                    Paragraph(contents='• Changed from AI to OP'),
                    Paragraph(contents='• 00A1 ( ¡ ) INVERTED EXCLAMATION MARK'),
                    Paragraph(contents='• 00BF ( ¿ ) INVERTED QUESTION MARK'),
                    Paragraph(contents='• Changed from BA to EX'),
                    Paragraph(contents='• 1802 ( ᠂ ) MONGOLIAN COMMA'),
                    Paragraph(contents='• 1803 ( ᠃ ) MONGOLIAN FULL STOP'),
                    Paragraph(contents='• 1808 ( ᠈ ) MONGOLIAN MANCHU COMMA'),
                    Paragraph(contents='• 1809 ( ᠉ ) MONGOLIAN MANCHU FULL STOP'),
                    Paragraph(contents='• 2CF9 ( ⳹ ) COPTIC OLD NUBIAN FULL STOP'),
                    Paragraph(contents='• 2CFE ( ⳾ ) COPTIC FULL STOP'),
                    Paragraph(contents='• Changed from BA to AL'),
                    Paragraph(contents='• 1A1E ( ᨞ ) BUGINESE PALLAWA'),
                    Paragraph(contents='• Changed from AL to BB'),
                    Paragraph(contents='• 1FFD ( ´ ) GREEK OXIA'),
                    Paragraph(contents='• Added a note on lack of canonical equivalence for the definition of ambiguous characters.'),
                    Paragraph(contents='• Corrected typos in the sample source code.'),
                    Paragraph(contents='• Split rule LB12 to accommodate Polish and Portuguese hyphenation.'),
                    Paragraph(contents='Revisions 20 and 21 being a proposed update, only changes between revisions 19 and 22 are noted here.'),
                    Heading(level=4, contents='Revision 19:'),
                    Paragraph(contents='• Changed 000B from CM to BK, changed 035C from CM to GL.'),
                    Paragraph(contents='• Changed 17D9 from NS to AL. 203D, 2047..2049 from AL to NS.'),
                    Paragraph(contents='• Corrected listing of NS property to match the data file to remove 17D8 and 17DA.'),
                    Paragraph(contents='• The data file has been corrected to match the listing of the BA property to include 1735 and 1736, also changed 05BE and 103D0 from AL to BA.'),
                    Paragraph(contents='• Changed the brackets 23B4.23B6 to AL.'),
                    Paragraph(contents='• Updated the SA property to make it more generic, includes changing many characters from CM to SA.'),
                    Paragraph(contents='• Reflected new characters'),
                    Paragraph(contents='• Made several text changes for clarifications, including reworded the intro to Section 6.'),
                    Paragraph(contents='• Added Section 9.'),
                    Paragraph(contents='• Restated the conformance clauses and reorganized the algorithm into a tailorable and a non-tailorable part; this affects text in Sections 4, 5, and 6.'),
                    Paragraph(contents='• Removed redundant term PR x HY from rule 18 and rule into new LB24 and LB26 to provide better granularity for tailoring,'),
                    Paragraph(contents='• Moved rule 11b and 13 above rule 8 (new LB13), restating rule 13 (new LB12) to preserve its effect in the new location.'),
                    Paragraph(contents='• Added new rule LB30 to handle words like “person(s)”.'),
                    Paragraph(contents='• Renumbered the rules.'),
                    Paragraph(contents='• Extensive copy-editing as part of Unicode 5.0 publication.'),
                    Paragraph(contents='Revision 18 being a proposed update, only changes between revisions 17 and 19 are noted here.'),
                    Heading(level=4, contents='Revision 17:'),
                    Paragraph(contents='• Significantly revised the line break classes for Tibetan, as well as Mongolian and Arabic Punctuation.'),
                    Paragraph(contents='• Added section 5.6 on Tibetan and section 7.7 on handling explicit breaks.'),
                    Paragraph(contents='• Added line break class assignments for Unicode 4.1 characters.'),
                    Paragraph(contents='• Significantly revised the line break class assignments for danda characters and made it consistent across scripts.'),
                    Paragraph(contents='• LB6: Replaced by new rules 18b and 18c, using new classes JL, JV, JT, H2, and H3.'),
                    Paragraph(contents='• LB7a: Deprecated rule 7a because SPACE as base character for standalone combining marks is deprecated.'),
                    Paragraph(contents='• LB7b: Revised 7b and section 7.5 as well as Table 2 to match the deprecation of rule 7a.'),
                    Paragraph(contents='• LB7b: Clarified that this rule does not apply to SP.'),
                    Paragraph(contents='• LB11a: Added a missing SP * to make the formula match the rule.'),
                    Paragraph(contents='• LB18b: Removed the existing rule 18b because it was redundant.'),
                    Paragraph(contents='• Corrected an erratum on revision 14 by splitting GL from WJ in rule 11b and moving to a new rule 13.'),
                    Paragraph(contents='• Updated the pair table and sample code to match the changes in the rules.'),
                    Paragraph(contents='• Updated the regular expression for numbers.'),
                    Paragraph(contents='• Added several notes on implementation techniques.'),
                    Paragraph(contents='• Moved all suggested tailorings from the rules section to the examples in section 8.2.'),
                    Paragraph(contents='Revision 16 being a proposed update, only changes between revisions 17 and 15 are noted here.'),
                    Heading(level=4, contents='Revision 15:'),
                    Paragraph(contents='• LB19b: Added new rule 19b.'),
                    Paragraph(contents='• Changed line breaking class: combining double diacritics from CM to GL, 037A and 2126 to match their canonical equivalents, 2140 corrected to AL, Arabic numerical separators from AL to NU, many alphabetic characters that are EAW=Ambiguous from AI to AL to better reflect current practice, remaining circled numbers and letters from AL to AI for consistency.'),
                    Paragraph(contents='• Added a note on the behavior of U+200B and U+3000 when lines are justified.'),
                    Paragraph(contents='• Reconciled the data file and description of line breaking classes in section 5.'),
                    Paragraph(contents='• Reconciled the rules and pair table implementation of the algorithm.'),
                    Paragraph(contents='• Updated the text of the conformance statement in section 4.'),
                    Paragraph(contents='• Added section 5.5 on use of double hyphen.'),
                    Paragraph(contents='• Updated styles and table formatting.'),
                    Paragraph(contents='• Minor edits throughout.'),
                    Heading(level=4, contents='Revision 14:'),
                    Paragraph(contents='• Added new line breaking classes NL and WJ to better support NEL and Word Joiner.'),
                    Paragraph(contents='• Deprecated the use of class SG.'),
                    Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and 7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                    Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                    Paragraph(contents='• Clarified the behavior of SHY and MONGOLIAN TODO SOFT HYPHEN, as well as WJ and ZWNBSP.'),
                    Paragraph(contents='• Added a new subsection 5.4 on SOFT HYPHEN and a new subsection 7.6 on conjoining jamos.'),
                    Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                    Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                    Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                    Paragraph(contents='• Expanded the introduction in Section 3.'),
                    Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                    Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                    Paragraph(contents='Revision 11 being a proposed update, only changes between revisions 12 and 14 are noted here.'),
                    Heading(level=4, contents='Revision 12:'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added Word joiner to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the data file. Only characters whose LB class differs from those of characters with related General_Category are noted explicitly in this text.'),
                    Paragraph(contents='Revision 11, being a proposed update, only changes between revisions 10 and 12 are noted here.]'),
                    Heading(level=4, contents='Revision 10:'),
                    Paragraph(contents='• Changed header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Heading(level=4, contents='Revision 9:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX.'),
                    Paragraph(contents='• LB7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode4.0].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair table entry PR % ID'),
                    Paragraph(contents='• Reworked Section 7.5'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull)'),
                    Heading(level=4, contents='Revision 8:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to Table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX because the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                    Heading(level=4, contents='Revision 7:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Heading(level=4, contents='Revision 6:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='No change history is available for earlier revisions.'),
                    Paragraph(contents='Copyright © 1998-2013 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                    Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(7, 0, 0): [Heading(level=2, contents='Unicode Standard Annex #14'),
                    Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                    TableRow(contents='Version\ue000Unicode 7.0.0'),
                    TableRow(contents='Editors\ue000Andy Heninger (andy.heninger@gmail.com)'),
                    TableRow(contents='Date\ue0002014-06-05'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-33.html'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-32.html'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                    TableRow(contents='Latest Proposed Update\ue000http://www.unicode.org/reports/tr14/proposed.html'),
                    TableRow(contents='Revision\ue00033'),
                    Heading(level=4, contents='Summary'),
                    Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display. A model implementation using pair tables is also provided.'),
                    Heading(level=4, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                    Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                    Heading(level=4, contents='Contents'),
                    Paragraph(contents='1 Overview and Scope'),
                    Paragraph(contents='2 Definitions'),
                    Paragraph(contents='3 Introduction'),
                    Paragraph(contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='4 Conformance'),
                    Paragraph(contents='4.1 Conformance Requirements'),
                    Paragraph(contents='5 Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Dictionary Usage'),
                    Paragraph(contents='5.3 Use of Hyphen'),
                    Paragraph(contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='5.7 Word Separator Characters'),
                    Paragraph(contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Pair Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Explicit Breaks'),
                    Paragraph(contents='8 Customization'),
                    Paragraph(contents='8.1 Types of Tailoring'),
                    Paragraph(contents='8.2 Examples of Customization'),
                    Paragraph(contents='9 Implementation Notes'),
                    Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='10 Testing'),
                    Paragraph(contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='References'),
                    Paragraph(contents='Acknowledgments'),
                    Paragraph(contents='Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                    Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                    Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                    Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Three main sections follow:'),
                    Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                    Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='• Section 7, Pair Table-Based Implementation, describes an efficient pair table-based implementation of the algorithm.'),
                    Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                    Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                    Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                    Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                    Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='All terms not defined here shall be as defined in the Unicode Standard [Unicode]. The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard. All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard.'),
                    Paragraph(contents='LD1 Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='LD2 Line Break: The position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='LD3 Line Break Opportunity: A place where a line is allowed to end.'),
                    Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                    Paragraph(contents='LD4 Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                    Paragraph(contents='LD5 Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                    Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                    Paragraph(contents='LD6 Line Breaking Class: A class of characters with the same line breaking property value.'),
                    Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                    Paragraph(contents='LD7 Mandatory Break: A line must break following a character that has the mandatory break property.'),
                    Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                    Paragraph(contents='LD8 Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                    Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='LD9 Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                    Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                    Paragraph(contents='• An indirect break is indicated in the pair table in Table 2 as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though space characters are not shown in the pair table, an indirect break can occur only if one or more spaces follow B. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                    Paragraph(contents='LD10 Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                    Paragraph(contents='• A prohibited break is indicated in the pair table in Table 2 as B ^ A, where B is the character class of the character before and A is the character class of the character after the break, and the optional space characters are not shown. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='LD11 Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                    Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                    Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                    Paragraph(contents='Table 1. Line Breaking Classes'),
                    TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                    TableRow(contents='Non-tailorable Line Breaking Classes'),
                    TableRow(contents='BK\ue000Mandatory Break\ue000NL, PS\ue000Cause a line break (after)'),
                    TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                    TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                    TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                    TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                    TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                    TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                    TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                    TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                    TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                    TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                    TableRow(contents='NS\ue000Nonstarter\ue000“‼”, “‽”, “⁇”, “⁉”, etc.\ue000Allow only indirect line breaks before'),
                    TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                    TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                    TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                    TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                    TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                    TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='CJ\ue000Conditional Japanese Starter\ue000Small kana\ue000Treat as NS or ID for strict or normal breaking.'),
                    TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='HL\ue000Hebrew Letter\ue000Hebrew\ue000Do not break around a following hyphen; otherwise act as Alphabetic'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                    TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='RI\ue000Regional Indicator\ue000REGIONAL INDICATOR SYMBOL LETTER A .. Z\ue000Keep together, break before and after from others'),
                    TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Introduction'),
                    Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                    Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                    Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                    Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                    Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                    Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                    Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                    Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                    Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                    Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                    Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                    Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                    Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                    Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                    Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [Bidi]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                    Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                    Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                    Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                    Heading(level=3, contents='4.1 Conformance Requirements'),
                    Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                    Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                    Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                    Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                    Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                    Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                    Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into two algorithms defined in Section 6, Line Breaking Algorithm, and Section 7, Pair Table-Based Implementation. These sections describe workable default line breaking methods. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences.'),
                    Heading(level=4, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a tab-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                    Heading(level=4, contents='Future Updates'),
                    Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                    Paragraph(contents='(A)—the class allows a break opportunity after in specified contexts'),
                    Paragraph(contents='(XA)—the class prevents a break opportunity after in specified contexts'),
                    Paragraph(contents='(B)—the class allows a break opportunity before in specified contexts'),
                    Paragraph(contents='(XB)—the class prevents a break opportunity before in specified contexts'),
                    Paragraph(contents='(P)—the class allows a break opportunity for a pair of same characters'),
                    Paragraph(contents='(XP)—the class prevents a break opportunity for a pair of same characters'),
                    Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Some characters that ordinarily act like alphabetic characters are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                    Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [UAX11].'),
                    Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                    Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                    Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                    TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                    TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                    Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                    Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                    Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='This class contains alphabetic or symbolic characters not explicitly assigned to another line breaking class. These are primarily characters of the following categories:'),
                    Paragraph(contents='ALPHABETIC—characters of General Categories Lu, Ll, Lt, Lm, and Lo'),
                    Paragraph(contents='SYMBOLS—characters of General Categories Sm, Sk, and So'),
                    Paragraph(contents='NON-DECIMAL NUMBERS—characters of General Categories Nl and No'),
                    Paragraph(contents='PUNCTUATION—characters of General Categories Pc, Pd, and Po'),
                    Paragraph(contents='Line break class AL also contains several format characters, including:'),
                    TableRow(contents='0600..0604\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAMVAT'),
                    TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                    TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                    TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                    TableRow(contents='110BD\ue000KAITHI NUMBER SIGN'),
                    Paragraph(contents='These format characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                    Paragraph(contents='Major exceptions to the general pattern of alphabetic and symbolic characters having line break class AL include:'),
                    Paragraph(contents='HL for Hebrew letters AI or ID, based on the East Asian Width property of the character ID for certain pictographic symbols CJ for small hiragana and katakana SA for complex context scripts JL, JV, JT, H2 or H3 for Hangul characters'),
                    Heading(level=3, contents='BA: Break After (A)'),
                    Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                    Heading(level=4, contents='Breaking Spaces'),
                    Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN SPACE'),
                    TableRow(contents='2003\ue000EM SPACE'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                    Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                    Paragraph(contents='For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                    Heading(level=4, contents='Tabs'),
                    TableRow(contents='0009\ue000TAB'),
                    Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    Heading(level=4, contents='Conditional Hyphens'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=4, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Visible Word Dividers'),
                    Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                    TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                    TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                    Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                    Heading(level=4, contents='Historic Word Separators'),
                    Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                    Paragraph(contents='Examples of Historic Word Separators include:'),
                    TableRow(contents='16EB\ue000RUNIC SINGLE DOT PUNCTUATION'),
                    TableRow(contents='16EC\ue000RUNIC MULTIPLE DOT PUNCTUATION'),
                    TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                    TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                    TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                    TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                    TableRow(contents='205B\ue000FOUR DOT MARK'),
                    TableRow(contents='205D\ue000TRICOLON'),
                    TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                    TableRow(contents='2E19\ue000PALM BRANCH'),
                    TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                    TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                    TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                    TableRow(contents='2E2D\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='2E30\ue000RING POINT'),
                    TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                    TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                    TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                    TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                    TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                    TableRow(contents='1091F\ue000PHOENICIAN WORD DIVIDER'),
                    TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                    Heading(level=4, contents='Dandas'),
                    Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                    Paragraph(contents='Examples of dandas include:'),
                    TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                    TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                    TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                    TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                    TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                    TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                    TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                    TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                    TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                    TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                    TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                    TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                    TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                    TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                    TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                    TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                    Heading(level=4, contents='Tibetan'),
                    TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                    TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                    TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                    TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                    TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                    TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                    Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Other Terminating Punctuation'),
                    Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                    TableRow(contents='1804\ue000MONGOLIAN COLON'),
                    TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                    TableRow(contents='1B5A\ue000BALINESE PANTI'),
                    TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                    TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                    TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                    TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                    TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                    TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                    TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                    TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                    TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                    TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                    TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                    TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                    TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                    TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                    TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                    TableRow(contents='2E17\ue000OBLIQUE DOUBLE HYPHEN'),
                    TableRow(contents='A60D\ue000VAI COMMA'),
                    TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                    TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                    TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                    TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                    TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                    TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                    TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                    TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                    TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                    Heading(level=3, contents='BB: Break Before (B)'),
                    Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                    Paragraph(contents='Examples of BB characters are described in the following sections.'),
                    Heading(level=4, contents='Dictionary Use'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    TableRow(contents='1FFD\ue000GREEK OXIA'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                    TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                    Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                    Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                    TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                    TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                    TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                    TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                    TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                    TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                    TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                    TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                    TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                    TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                    TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                    TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                    TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                    Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Mongolian'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                    Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                    Paragraph(contents='Some languages, including Spanish, use EM DASH to set off a parenthetical, and the surrounding dashes should not be broken from the contained text. In this usage there is space on the side where it can be broken. This does not conflict with symmetrical usages, either with spaces on both sides of the em-dash or with no spaces.'),
                    Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                    TableRow(contents='000C\ue000FORM FEED (FF)'),
                    TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                    Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR (LS)'),
                    Paragraph(contents='The text after the Line Separator starts at the beginning of the line. This is similar to HTML <BR>.'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR (PS)'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LS, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                    Heading(level=4, contents='Newline Function (NLF)'),
                    Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                    Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                    Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                    Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                    Heading(level=3, contents='CJ: Conditional Japanese Starter'),
                    Paragraph(contents='This character class contains Japanese small hiragana and katakana. Characters of this class may be treated as either NS or ID.'),
                    Paragraph(contents='CSS Text Level 3 (which supports Japanese line layout) defines three distinct values for its line-break behavior:'),
                    Paragraph(contents='• strict, typically used for long lines'),
                    Paragraph(contents='• normal (CSS default), the behavior typically used for books and documents'),
                    Paragraph(contents='• loose, typically used for short lines such as in newspapers'),
                    Paragraph(contents='These have different sets of “kinsoku” characters which cannot be at the beginning or end of a line; strict has the largest set, while loose has the smallest. The motivation for the smaller number of kinsoku characters is to avoid triggering justification that puts characters off the grid position.'),
                    Paragraph(contents='Treating characters of class CJ as class NS will give CSS strict line breaking; treating them as class ID will give CSS normal breaking.'),
                    Paragraph(contents='The CJ line break class includes'),
                    TableRow(contents='3041, 3043, 3045, etc.\ue000Small hiragana'),
                    TableRow(contents='30A1, 30A3, 30A5, etc.\ue000Small katakana'),
                    TableRow(contents='30FC\ue000KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF67..FF70\ue000Halfwidth variants'),
                    Heading(level=3, contents='CL: Close Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                    Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                    Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                    TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                    Heading(level=4, contents='Combining Characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                    Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 No-Break SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                    Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                    Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                    Heading(level=4, contents='Control and Formatting Characters'),
                    Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                    Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Paragraph(contents='The CM class also includes U+3035 VERTICAL KANA REPEAT MARK LOWER HALF. This character is normally preceded by either U+3033 VERTICAL KANA REPEAT MARK UPPER HALF or U+3034 VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF, and should not be separated from them.'),
                    Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                    Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                    TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                    TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                    Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                    Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                    Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                    Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                    TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                    TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                    TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                    TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                    TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                    TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following are examples of characters of line break class GL:'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                    TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE. NARROW NO-BREAK SPACE is used in Mongolian. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in Section 13.4, Mongolian, of [Unicode].'),
                    Paragraph(contents='NARROW NO-BREAK SPACE is a narrow version of NO-BREAK SPACE, which has exactly the same line breaking behavior, but with a narrow display width. It is regularly used in Mongolian in certain grammatical contexts (before a particle), where it also influences the shaping of the glyphs for the particle. In Mongolian text, the NARROW NO-BREAK SPACE is typically displayed with one third the width of a normal space character.'),
                    Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                    Paragraph(contents='The MONGOLIAN VOWEL SEPARATOR is equivalent to a NARROW NO-BREAK SPACE in its line breaking behavior, but has different effects in controlling the shaping of its preceding and following characters. It constitutes a word-internal space and is typically displayed with half the width of a NARROW NO-BREAK SPACE.'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                    TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                    Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                    Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                    Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                    Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                    Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                    Heading(level=3, contents='HY: Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                    Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                    Heading(level=3, contents='ID: Ideographic (B/A)'),
                    Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                    TableRow(contents='2E80..2FFF\ue000CJK, KANGXI RADICALS, DESCRIPTION SYMBOLS'),
                    TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                    TableRow(contents='30A0..30FF\ue000Katakana (except small characters)'),
                    TableRow(contents='3400..4DB5\ue000CJK UNIFIED IDEOGRAPHS EXTENSION A'),
                    TableRow(contents='4E00..9FFF\ue000CJK UNIFIED IDEOGRAPHS'),
                    TableRow(contents='F900..FAD9\ue000CJK COMPATIBILITY IDEOGRAPHS'),
                    TableRow(contents='A000..A48F\ue000YI SYLLABLES'),
                    TableRow(contents='A490..A4CF\ue000YI RADICALS'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN to SMALL EQUALS SIGN'),
                    TableRow(contents='FF01..FF5A\ue000FULL WIDTH LATIN LETTERS and DIGITS'),
                    Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                    Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                    Paragraph(contents='The CJK blocks and regions in which unassigned characters default to line break class ID are:'),
                    TableRow(contents='CJK Unified Ideographs Extension A'),
                    TableRow(contents='CJK Unified Ideographs'),
                    TableRow(contents='CJK Compatibility Ideographs'),
                    TableRow(contents='CJK Unified Ideographs Extension B'),
                    TableRow(contents='CJK Unified Ideographs Extension C'),
                    TableRow(contents='CJK Unified Ideographs Extension D'),
                    TableRow(contents='CJK Compatibility Ideographs Supplement'),
                    TableRow(contents='SIP (Plane 2) outside of blocks'),
                    TableRow(contents='TIP (Plane 3) outside of blocks'),
                    Heading(level=4, contents='Korean'),
                    Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    Heading(level=4, contents='Symbols'),
                    Paragraph(contents='Certain pictographic symbols of General Category So are also included in this line break class.'),
                    Heading(level=3, contents='HL: Hebrew Letter (XB)'),
                    Paragraph(contents='This class includes all Hebrew letters.'),
                    Paragraph(contents='When a Hebrew letter is followed by a hyphen, there is no break on either side of the hyphen. In this context a hyphen is any character of class HY or class BA. In other respects, Hebrew letters behave the same as characters of class AL.'),
                    Paragraph(contents='Included in this class are all characters of General Category Letter that have Script=Hebrew.'),
                    Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                    Heading(level=4, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='Horizontal ellipsis can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    TableRow(contents='060C\ue000ARABIC COMMA'),
                    TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                    TableRow(contents='07F8\ue000NKO COMMA'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                    TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                    TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                    Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                    Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                    Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                    Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                    Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                    Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                    Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                    Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                    Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                    Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                    Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                    TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                    Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                    Heading(level=3, contents='NS: Nonstarters (XB)'),
                    Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include:'),
                    TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='203D\ue000INTERROBANG'),
                    TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                    TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                    TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='303C\ue000MASU MARK'),
                    TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                    TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                    TableRow(contents='30FD..30FE\ue000KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='Note: Optionally, the NS restriction may be relaxed by tailoring, with some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles. Alternatively, line breaking can be tightened by moving characters that are ID into NS.'),
                    Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                    Heading(level=3, contents='NU: Numeric (XP)'),
                    Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                    Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                    TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                    TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                    Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                    Heading(level=3, contents='OP: Open Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                    TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                    TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                    TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                    Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                    Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                    Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                    Paragraph(contents='Examples of Postfix characters include'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='060B\ue000AFGHANI SIGN'),
                    TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='FDFC\ue000RIAL SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                    Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                    Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                    Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                    Heading(level=3, contents='QU: Quotation (XB/XA)'),
                    Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                    Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                    Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                    TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                    TableRow(contents='2E0B\ue000RAISED SQUARE'),
                    Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='RI: Regional Indicator (B/A/XP)'),
                    Paragraph(contents='The Regional Indicator characters are'),
                    TableRow(contents='1F1E6..1F1FF\ue000REGIONAL INDICATOR SYMBOL LETTER A .. REGIONAL INDICATOR SYMBOL LETTER Z'),
                    Paragraph(contents='Pairs of RI characters are used to represent a two-letter ISO 3166 region code. No break opportunity occurs between adjacent RI characters, otherwise breaks can occur before and after.'),
                    Paragraph(contents='To provide a break between adjacent RI characters insertion of a U+200B ZERO WIDTH SPACE is recommended.'),
                    Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                    Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                    TableRow(contents='0E00..0E7F\ue000Thai'),
                    TableRow(contents='0E80..0EFF\ue000Lao'),
                    TableRow(contents='1000..109F\ue000Myanmar'),
                    TableRow(contents='1780..17FF\ue000Khmer'),
                    TableRow(contents='1950..197F\ue000Tai Le'),
                    TableRow(contents='1980..19DF\ue000New Tai Lue'),
                    TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                    TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                    TableRow(contents='AA80..AADF\ue000Tai Viet'),
                    Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                    Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                    Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                    Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                    Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                    Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                    Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                    Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                    Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                    Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                    Heading(level=3, contents='XX: Unknown (XP)'),
                    Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                    Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                    Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                    Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                    Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                    Heading(level=3, contents='5.2 Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                    Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                    Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                    Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                    Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                    Heading(level=3, contents='5.3 Use of Hyphen'),
                    Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                    Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                    Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                    Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                    Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                    Paragraph(contents='dispara- te'),
                    Paragraph(contents='and the latter as'),
                    Paragraph(contents='dispara- -te.'),
                    Paragraph(contents='A recommended practice is to type <SHY, NBHY> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                    Paragraph(contents='• Simply inserting a hyphen glyph'),
                    Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                    Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                    Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                    Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                    Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                    Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                    Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                    Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                    Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                    Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                    Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                    Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [Bidi] and Section 9.2, Arabic, of [Unicode].'),
                    Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                    Paragraph(contents='The sequence <SHY, NBHY> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                    Heading(level=3, contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                    Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                    Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                    Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                    Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                    Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                    Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                    Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                    Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                    Heading(level=3, contents='5.7 Word Separator Characters'),
                    Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                    Paragraph(contents='1. suppress the visible word separator'),
                    Paragraph(contents='The:quick:brown fox:jumped.'),
                    Paragraph(contents='2. break before the visible word separator'),
                    Paragraph(contents='The:quick:brown :fox:jumped.'),
                    Paragraph(contents='3. break after the visible word separator'),
                    Paragraph(contents='The:quick:brown: fox:jumped.'),
                    Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                    Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                    Paragraph(contents='A slightly simplified implementation of such an algorithm can be devised that uses a two-dimensional table to resolve break opportunities between pairs or characters. It is described in Section 7, Pair Table-Based Implementation.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1 Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                    Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                    Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                    Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, and ZW define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                    Heading(level=4, contents='Resolve line breaking classes:'),
                    Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, CJ, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                    Paragraph(contents='In the absence of such criteria all characters with a specific combination of original class and General_Category property value are resolved as follows:'),
                    TableRow(contents='Resolved\ue000Original\ue000General_Category'),
                    TableRow(contents='AL\ue000AI, SG, XX\ue000Any'),
                    TableRow(contents='CM\ue000SA\ue000Only Mn or Mc'),
                    TableRow(contents='AL\ue000SA\ue000Any except Mn and Mc'),
                    TableRow(contents='NS\ue000CJ\ue000Any'),
                    Heading(level=4, contents='Start and end of text:'),
                    Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                    Rule(contents='LB2 Never break at the start of text.'),
                    Formula(contents='sot ×'),
                    Rule(contents='LB3 Always break at the end of text.'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                    Rule(contents='LB4 Always break after hard line breaks.'),
                    Formula(contents='BK !'),
                    Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                    Formula(contents='CR × LF'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='NL !'),
                    Rule(contents='LB6 Do not break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF | NL )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB7 Do not break before spaces or zero width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                    Formula(contents='ZW SP* ÷'),
                    Heading(level=4, contents='Combining marks:'),
                    Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                    Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules.'),
                    Formula(contents='Treat X CM* as if it were X.'),
                    Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                    Rule(contents='LB10 Treat any remaining combining mark as AL.'),
                    Formula(contents='Treat any remaining CM as it if were AL.'),
                    Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                    Heading(level=4, contents='Word joiner:'),
                    Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                    Formula(contents='× WJ'),
                    Formula(contents='WJ ×'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12 Do not break after NBSP and related characters.'),
                    Formula(contents='GL ×'),
                    Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                    Formula(contents='[^SP BA HY] × GL'),
                    Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                    Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× CP'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                    Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                    Formula(contents='(CL | CP) SP* × NS'),
                    Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 SP* × B2'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB18 Break after spaces.'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB20 Break before and after unresolved CB.'),
                    Formula(contents='÷ CB'),
                    Formula(contents='CB ÷'),
                    Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                    Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents="LB21a Don't break after Hebrew + Hyphen"),
                    Formula(contents='HL (HY | BA) ×'),
                    Rule(contents='LB22 Do not break between two ellipses, or between letters or numbers and ellipsis.'),
                    Formula(contents='(AL | HL) × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents='Do not break alphanumerics.'),
                    Rule(contents='LB23 Do not break within ‘a9’, ‘3a’, or ‘H%’.'),
                    Formula(contents='ID × PO'),
                    Formula(contents='(AL | HL) × NU'),
                    Formula(contents='NU × (AL | HL)'),
                    Rule(contents='LB24 Do not break between prefix and letters or ideographs.'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × (AL | HL)'),
                    Formula(contents='PO × (AL | HL)'),
                    Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                    Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                    Formula(contents='CL × PO'),
                    Formula(contents='CP × PO'),
                    Formula(contents='CL × PR'),
                    Formula(contents='CP × PR'),
                    Formula(contents='NU × PO'),
                    Formula(contents='NU × PR'),
                    Formula(contents='PO × OP'),
                    Formula(contents='PO × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='PR × NU'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Korean syllable blocks'),
                    Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                    Rule(contents='LB26 Do not break a Korean syllable.'),
                    Formula(contents='JL × (JL | JV | H2 | H3)'),
                    Formula(contents='(JV | H2) × (JV | JT)'),
                    Formula(contents='(JT | H3) × JT'),
                    Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                    Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                    Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                    Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                    Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                    Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                    Formula(contents='(AL | HL) × (AL | HL)'),
                    Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                    Formula(contents='IS × (AL | HL)'),
                    Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                    Formula(contents='(AL | HL | NU) × OP'),
                    Formula(contents='CP × (AL | HL | NU)'),
                    Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                    Rule(contents='LB30a Do not break between regional indicator symbols.'),
                    Formula(contents='RI × RI'),
                    Rule(contents='LB31 Break everywhere else.'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='A two-dimensional table can be used to resolve break opportunities between pairs of characters. This section defines such a table. The rows of the table are labeled with the possible values of the line breaking property of the leading character in the pair. The columns are labeled with the line breaking class for the following character of the pair. Each intersection is labeled with the resulting line break opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of a similar table-based definition. However, it uses line breaking classes whose membership is not solely determined by the line breaking property (as in this annex), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classes defined previously.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, then the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes, of which only 14 appear to be unique. Any minimal table representation is unique, except for trivial reordering of rows and columns. Minimal tables for which the rows and columns are sorted alphabetically can be mechanically compared for differences. This is in contrast to the rules, where identical results can be achieved by sets of rules that cannot be easily compared by looking at their textual representation. However, any set of rules that is equivalent to a minimal pair table can be used to automatically generate such a table, which can then be used for comparison. The rules in Section 6, Line Breaking Algorithm, can be expressed as minimal pair tables if the extended context used as described below.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Most of the rules in Section 6, Line Breaking Algorithm, involve only pairs of characters, or they apply to a single line break class preceded or followed by any character. These rules can be represented directly in a pair table. However, rules LB14–LB17 require extended context to handle spaces.'),
                    Paragraph(contents='By broadening the definition of a pair from B A, where B is the line breaking class before a break and A the one after, to B SP* A, where SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line break opportunity (that is, direct and indirect breaks). Rules equivalent to the ones given in Section 6, Line Breaking Algorithm, can be formulated without explicit use of SP by using % to express indirect breaks instead. These rules can then be simplified to involve only pairs of classes—that is, only constructions of the form:'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B × A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can be automatically translated into a pair table, as in Table 2. Line breaking analysis then proceeds by pair table lookup as explained below. (For readability in table layout, the symbol ^ is used in the table instead of × and _ is used instead of ÷.)'),
                    Paragraph(contents='Rule LB9 requires extended context for handling combining marks. This extended context must also be built into the code that interprets the pair table. For convenience in detecting the condition where A = CM, the symbols # and @ are used in the pair table, instead of % and ^, respectively. See Section 7.5, Combining Marks.'),
                    Paragraph(contents='Rule LB21a also requires extended context to handle Hebrew letters followed by hyphens. This rule cannot be represented directly by the example pair table and is not handled by the sample implementation code included here. In the absence of special case handling, rule LB21a is effectively ignored by this example pair table and implementation code.'),
                    Heading(level=3, contents='7.3 Example Pair Table'),
                    Paragraph(contents='Table 2 implements an approximation of the line breaking behavior described in this annex, with the limitation that only context of the form B SP* A is considered. BK, CR, LF, NL, and SP classes are handled explicitly in the outer loop, as given in the code sample below. Pair context of the form B CM* can be processed by handling the special entries @ and # in the driving loop, as explained in Section 7.5, Combining Marks. In Table 2, the rows are labeled with the B class and the columns are labeled with the A class.'),
                    Paragraph(contents='Table 2. Example Pair Table'),
                    TableRow(contents='OP\ue000CL\ue000CP\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000HL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM\ue000WJ\ue000H2\ue000H3\ue000JL\ue000JV\ue000JT\ue000RI'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000@\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^'),
                    TableRow(contents='CL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CP\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='QU\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='NS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='EX\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='SY\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='PR\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='PO\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='NU\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='AL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ID\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IN\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HY\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BA\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BB\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='B2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000^\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ZW\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CM\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='WJ\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='H2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_'),
                    TableRow(contents='H3\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%\ue000_'),
                    TableRow(contents='JL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_'),
                    TableRow(contents='JV\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_'),
                    TableRow(contents='JT\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%\ue000_'),
                    TableRow(contents='RI\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='Table 2 uses the following notation:'),
                    Paragraph(contents='Resolved outside the pair table: AI, BK, CB, CJ, CR, LF, NL, SA, SG, SP, XX'),
                    Paragraph(contents='^ denotes a prohibited break: B ^ A is equivalent to B SP* × A; in other words, never break before A and after B, even if one or more spaces intervene.'),
                    Paragraph(contents='% denotes an indirect break opportunity: B % A is equivalent to B × A and B SP+ ÷ A; in other words, do not break before A, unless one or more spaces follow B.'),
                    Paragraph(contents='@ denotes a prohibited break for combining marks: B @ A is equivalent to B SP* × A, where A is of class CM. For more details, see Section 7.5, Combining Marks.'),
                    Paragraph(contents='# denotes an indirect break opportunity for combining marks following a space: B # A is equivalent to (B × A and B SP+ ÷ A), where A is of class CM.'),
                    Paragraph(contents='_ denotes a direct break opportunity (equivalent to ÷ as defined above).'),
                    Paragraph(contents='Note: Hovering over the cells in a browser with tool-tips enabled reveals the rule number that determines the breaking status for the pair in question. When a pair must be tested both with and without intervening spaces, multiple rules are given. Hovering over a line breaking class name gives a representative member of the class and additional information. Clicking on any line break class name anywhere in the document jumps to the definition.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two sections provide sample code [Code14] that demonstrates how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the line breaking classes CR, LF, and NL need to be added. They have been omitted here for brevity, but see Section 7.6, Explicit Breaks.'),
                    Paragraph(contents='The sample code assumes that the line breaking classes AI, CB, SG, and XX have been resolved according to rule LB1 as part of initializing the pcls array. The code further assumes that the complex line break analysis for characters with line break class SA is handled in function findComplexBreak, for which the following placeholder is given:'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    // cls - resolved line break class, may differ from pcls[0]'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line breaking opportunities (output)'),
                    CodeLine(contents='    // cch - remaining length of input '),
                    CodeLine(contents='    int '),
                    CodeLine(contents='   findComplexBreak(enum break_class cls, enum break_class *pcls,'),
                    CodeLine(contents='                             enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='            if (!cch)'),
                    CodeLine(contents='                return 0;'),
                    CodeLine(contents='            for (int ich = 1; ich < cch; ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='                // .. do complex break analysis here'),
                    CodeLine(contents='                // and report any break opportunities in pbrk ..'),
                    CodeLine(contents=''),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK; // by default, no break'),
                    CodeLine(contents=''),
                    CodeLine(contents='                if (pcls[ich] != SA)'),
                    CodeLine(contents='                    break;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='            return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The entries in the example pair table correspond to the following enumeration. For diagnostic purposes, the sample code returns these values to indicate not only the location but also the type of rule that triggered a given break opportunity.'),
                    CodeLine(contents='    enum break_action {'),
                    CodeLine(contents='           DIRECT_BRK = 0,             // _ in table'),
                    CodeLine(contents='           INDIRECT_BRK,               // % in table'),
                    CodeLine(contents='           COMBINING_INDIRECT_BRK,     // # in table'),
                    CodeLine(contents='           COMBINING_PROHIBITED_BRK,   // @ in table'),
                    CodeLine(contents='           PROHIBITED_BRK,             // ^ in table'),
                    CodeLine(contents='           EXPLICIT_BRK };             // ! in rules'),
                    Paragraph(contents='Because the contexts involved in indirect breaks of the form B SP* A are of indefinite length, they need to be handled explicitly in the driver code. The sample implementation of a findLineBrk function below remembers the line break class for the last characters seen, but skips any occurrence of SP without resetting this value. Once character A is encountered, a simple lookback is used to see if it is preceded by a SP. This lookback is necessary only if B % A. To handle the case of a SP following sot, it is necessary to set cls to a dummy value. Using WJ gives the correct result and, as required, is unaffected by any tailoring.'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable) (returned value)'),
                    CodeLine(contents="    // cls - current resolved line break class for 'before' character (variable)"),
                    CodeLine(contents=''),
                    CodeLine(contents='    int'),
                    CodeLine(contents='    findLineBrk(enum break_class *pcls, enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='        if (!cch) return 0;'),
                    CodeLine(contents=''),
                    CodeLine(contents="        enum break_class cls = pcls[0];   // class of 'before' character"),
                    CodeLine(contents=''),
                    CodeLine(contents='        // treat SP at start of input as if it followed a WJ'),
                    CodeLine(contents='        if (cls == SP)'),
                    CodeLine(contents='            cls = WJ;'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='        for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // to handle explicit breaks, replace code from "for" loop condition'),
                    CodeLine(contents='            // above to comment below by code given in Section 7.6'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle spaces explicitly'),
                    CodeLine(contents='            if (pcls[ich] == SP) {'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;   // apply rule LB7: × SP'),
                    CodeLine(contents='                continue;                       // do not update cls'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle complex scripts in a separate function'),
                    CodeLine(contents='            if (pcls[ich] == SA) {'),
                    CodeLine(contents='                ich += findComplexBreak(cls, &pcls[ich-1], &pbrk[ich-1],'),
                    CodeLine(contents='                           cch - (ich-1));'),
                    CodeLine(contents='                if (ich < cch)'),
                    CodeLine(contents='                    cls = pcls[ich];'),
                    CodeLine(contents='                continue;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // lookup pair table information in brkPairs[before, after];'),
                    CodeLine(contents='            enum break_action brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents=''),
                    CodeLine(contents='            pbrk[ich-1] = brk;                     // save break action in output array'),
                    CodeLine(contents=''),
                    CodeLine(contents='            if (brk == INDIRECT_BRK) {             // resolve indirect break'),
                    CodeLine(contents='                if (pcls[ich - 1] == SP)           // if context is A SP + B'),
                    CodeLine(contents='                    pbrk[ich-1] = INDIRECT_BRK;    //       break opportunity'),
                    CodeLine(contents='                else                               // else'),
                    CodeLine(contents='                    pbrk[ich-1] = PROHIBITED_BRK;  //       no break opportunity'),
                    CodeLine(contents='            } '),
                    CodeLine(contents='            '),
                    CodeLine(contents='            // handle breaks involving a combining mark (see Section 7.5)'),
                    CodeLine(contents=''),
                    CodeLine(contents="            // save cls of 'before' character (unless bypassed by 'continue')"),
                    CodeLine(contents='            cls = pcls[ich];'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        pbrk[ich-1] = EXPLICIT_BRK;                // always break at the end'),
                    CodeLine(contents=''),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The function returns all of the break opportunities in the array pointed to by pbrk, using the values in the table. On return, pbrk[ich] is the type of break after the character at index ich.'),
                    Paragraph(contents='A common optimization in implementation is to determine only the nearest line break opportunity prior to the position of the first character that would cause the line to become overfull. Such an optimization requires backward traversal of the string instead of forward traversal as shown in the sample code.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='The implementation of combining marks in the pair table presents an additional complication because rule LB9 defines a context X CM* that is of arbitrary length. There are some similarities to the way contexts of the form B SP* A that are involved in indirect breaks are evaluated. However, contexts of the form SP CM* or CM* SP also need to be handled, while rule LB10 requires some CM* to be treated like AL.'),
                    Paragraph(contents='Implementing LB10. This rule can be reflected directly in the example pair table in Table 2 by assigning the same values in the row marked CM as in the row marked AL. Incidentally, this is equivalent to rewriting the rules LB11–LB31 by duplicating any expression that contains an AL on its left hand side with another expression that contains a CM. For example, in LB22'),
                    Formula(contents='AL × IN'),
                    Paragraph(contents='would become'),
                    Formula(contents='AL × IN CM × IN'),
                    Paragraph(contents='Rewriting these rules as indicated here (and then deleting LB10) is fully equivalent to the original rules because rule LB9 already accounts for all CMs that are not supposed to be treated like AL. For a complete description see Example 9 in Section 8.2, Examples of Customization.'),
                    Paragraph(contents='Implementing LB9. Rule LB9 is implemented in the example pair table in Table 2 by assigning a special # entry in the column marked CM for all rows referring to a line break class that allows a direct or indirect break after itself. (Note that the intersection between the row for class ZW and the column for class CM must be assigned “_” because of rule LB8.) The # corresponds to a break_action value of COMBINING_INDIRECT_BREAK, which triggers the following code in the sample implementation:'),
                    CodeLine(contents='    else if (brk == COMBINING_INDIRECT_BRK) {    // resolve combining mark break'),
                    CodeLine(contents='        pbrk[ich-1] = PROHIBITED_BRK;             // do not break before CM'),
                    CodeLine(contents='        if (pcls[ich-1] == SP){'),
                    CodeLine(contents='            #ifndef LEGACY_CM                    // new: space is not a base'),
                    CodeLine(contents='                pbrk[ich-1] = COMBINING_INDIRECT_BRK;    // apply rule SP ÷ '),
                    CodeLine(contents='            #else'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;      // legacy: keep SP CM together'),
                    CodeLine(contents='                if (ich > 1)'),
                    CodeLine(contents='                    pbrk[ich-2] = ((pcls[ich - 2] == SP) ?'),
                    CodeLine(contents='                                                  INDIRECT_BRK : DIRECT_BRK);'),
                    CodeLine(contents='            #endif'),
                    CodeLine(contents='        } else                                   // apply rule LB9: X CM * -> X'),
                    CodeLine(contents='            continue;                            // do not update cls'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    Paragraph(contents='When handling a COMBINING_INDIRECT_BREAK, the last remembered line break class in variable cls is not updated, except for those cases covered by rule LB10. A tailoring of rule LB9 that keeps the last SPACE character preceding a combining mark, if any, and therefore breaks before that SPACE character can easily be implemented as shown in the sample code. (See Section 9.2, Legacy Support for Space Character as Base for Combining Marks.)'),
                    Paragraph(contents='Any rows in Table 2 for line break classes that prohibit breaks after must be handled explicitly. In the example pair table, these are assigned a special entry “@”, which corresponds to a special break action of COMBINING_PROHIBITED_BREAK that triggers the following code:'),
                    CodeLine(contents='    else if (brk == COMBINING_PROHIBITED_BRK) { // this is the case OP SP* CM'),
                    CodeLine(contents='        pbrk[ich-1] = COMBINING_PROHIBITED_BRK;  // no break allowed'),
                    CodeLine(contents='        if (pcls[ich-1] != SP)'),
                    CodeLine(contents='            continue;                          // apply rule LB9: X CM* -> X'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The only line break class that unconditionally prevents breaks across a following SP is OP. The preceding code fragment ensures that OP CM is handled according to rule LB9 and OP SP CM is handled as OP SP AL according to rule LB10.'),
                    Heading(level=3, contents='7.6 Explicit Breaks'),
                    Paragraph(contents='Handling explicit breaks is straightforward in the driver code, although it does clutter up the loop condition and body of the loop a bit. For completeness, the following sample shows how to change the loop condition and add if statements—both before and inside the loop—that handle BK, NL, CR, and LF. Because NL and BK behave identically by default, this code can be simplified in implementations where the character classification is changed so that BK will always be substituted for NL when assigning the line break class. Because this optimization does not change the result, it is not considered a tailoring and does not affect conformance.'),
                    CodeLine(contents='    // handle case where input starts with an LF'),
                    CodeLine(contents='    if (cls == LF)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // treat initial NL like BK'),
                    CodeLine(contents='    if (cls == NL)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // loop over all pairs in the string up to a hard break or CRLF pair'),
                    CodeLine(contents='    for (int ich = 1; (ich < cch) && (cls != BK) && (cls != CR || pcls[ich] == LF); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle BK, NL and LF explicitly'),
                    CodeLine(contents='        if (pcls[ich] == BK ||pcls[ich] == NL ||  pcls[ich] == LF)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = BK;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle CR explicitly'),
                    CodeLine(contents='        if(pcls[ich] == CR)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = CR;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle spaces explicitly...'),
                    CodeLine(contents=''),
                    CodeLine(contents='    '),
                    Heading(level=2, contents='8 Customization'),
                    Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                    Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                    Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                    Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how to customize the pair table implementation of the line breaking algorithm for these tailorings.'),
                    Heading(level=3, contents='8.1 Types of Tailoring'),
                    Paragraph(contents='There are three principal ways of tailoring the sample pair table implementation of the line breaking algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to permanently overriding some of the rules in Section 6, Line Breaking Algorithm.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions This is a dynamic equivalent of the preceding. Instead of changing the values for the pair intersection directly in the table, they are labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be enabled at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real-world implementation of a pair table-based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. That implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=3, contents='8.2 Examples of Customization'),
                    Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm. Section 7.4, Sample Code, outlines such an approach in which the interface to the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the line breaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersections of ID/ID, AL/ID, and ID/AL are affected. For alphabetic style line breaking, breaks for these cases require space; for ideographic style line breaking, these cases do not require spaces. Therefore, the implementation defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given text.'),
                    Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. In this case the intersections of NU/NU, NU/AL, AL/AL, and AL/NU are affected.'),
                    Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by mapping class CJ to be handled as class ID in rule LB1.'),
                    Paragraph(contents='Example 6. Tailor to prevent line breaks from falling within default grapheme clusters, as defined by by Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. The tailoring can be accomplished by first segmenting the text into grapheme clusters according to the rules defined in UAX #29, and then finding line breaks according to the default line break rules, giving each grapheme cluster the line breaking class of its first code point.'),
                    Paragraph(contents='An example of a grapheme cluster that would be split by the default line break rules is a Zero Width Space followed by a combining mark.'),
                    Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * ( CL | CP ) ? ( PR | PO) ?'),
                    Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                    Paragraph(contents='Regex-Number: Do not break numbers.'),
                    Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                    Formula(contents='( OP | HY ) × NU'),
                    Formula(contents='NU × (NU | SY | IS)'),
                    Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL | CP )'),
                    Formula(contents='NU (NU | SY | IS)* (CL | CP)? × (PO | PR)'),
                    Paragraph(contents='This customized rule uses extended contexts that cannot be represented in a pair table. In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                    Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                    Formula(contents='[^NU] × CL'),
                    Formula(contents='[^NU] × CP'),
                    Formula(contents='× EX'),
                    Formula(contents='[^NU] × IS'),
                    Formula(contents='[^NU] × SY'),
                    Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                    Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                    Heading(level=2, contents='9 Implementation Notes'),
                    Paragraph(contents='This section provides additional notes on implementation issues.'),
                    Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                    Paragraph(contents='To replace rule LB9, terms of the form'),
                    Paragraph(contents='B # A'),
                    Paragraph(contents='B SP* # A'),
                    Paragraph(contents='B #'),
                    Paragraph(contents='B SP* #'),
                    Paragraph(contents='are replaced by terms of the form'),
                    Paragraph(contents='B CM* # A'),
                    Paragraph(contents='B CM* SP* # A'),
                    Paragraph(contents='B CM* #'),
                    Paragraph(contents='B CM* SP* #'),
                    Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                    Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                    Paragraph(contents='Replace LB10 by the following rule:'),
                    Paragraph(contents='× CM'),
                    Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                    Paragraph(contents='(AL | NU) × OP'),
                    Paragraph(contents='add another rule'),
                    Paragraph(contents='CM × OP.'),
                    Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                    Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='As stated in [Unicode], Section 7.9, Combining Marks, combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                    Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                    Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID.'),
                    Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                    Heading(level=2, contents='10 Testing'),
                    Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2 Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                    Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                    Paragraph(contents='Note:The break opportunities produced by an implementation of the rules of Section 6, Line Breaking Algorithm differ in certain cases from those produced by the pair table included in Section 7, Pair Table-Based Implementation. The differences occur with sequences like ZW SP CL. The test data file matches the results expected of a rule based implementation. The inconsistencies between the two will be addressed in the next revision of this document.'),
                    Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                    Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                    Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                    Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                    Paragraph(contents='1. The rules are cast into a more regex-style.'),
                    Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                    Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                    Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                    Paragraph(contents='• 13.01) [^NU] × CL'),
                    Paragraph(contents='• 13.02) × EX'),
                    Paragraph(contents='• ...'),
                    Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                    Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                    Paragraph(contents='Table 4. Numbering of Test Rules'),
                    TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                    TableRow(contents='LB2\ue0000.2\ue000start of text'),
                    TableRow(contents='LB3\ue0000.3\ue000end of text'),
                    TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                    TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                    TableRow(contents='LB31\ue000999\ue000÷ any'),
                    Heading(level=2, contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                    Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                    TableRow(contents='6.2.0\ue0006.1.0\ue0005.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                    TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                    TableRow(contents='LB2\ue0002\ue0002\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                    TableRow(contents='LB3\ue0003\ue0003\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                    TableRow(contents='LB4\ue0004\ue0004\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB5\ue0005\ue0005\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB6\ue0006\ue0006\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                    TableRow(contents='LB7\ue0007\ue0007\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                    TableRow(contents='LB8\ue0008\ue0008\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                    TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                    TableRow(contents='LB9\ue0009\ue0009\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB10\ue00010\ue00010\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                    TableRow(contents='LB11\ue00011\ue00011\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12\ue00012\ue00012\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12a\ue00012a\ue00012a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB13\ue00013\ue00013\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                    TableRow(contents='LB14\ue00014\ue00014\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                    TableRow(contents='LB15\ue00015\ue00015\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                    TableRow(contents='LB16\ue00016\ue00016\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                    TableRow(contents='LB17\ue00017\ue00017\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                    TableRow(contents='LB18\ue00018\ue00018\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                    TableRow(contents='LB19\ue00019\ue00019\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                    TableRow(contents='LB20\ue00020\ue00020\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                    TableRow(contents='LB21\ue00021\ue00021\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                    TableRow(contents='LB21a\ue00021a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB22\ue00022\ue00022\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                    TableRow(contents='LB23\ue00023\ue00023\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                    TableRow(contents='LB24\ue00024\ue00024\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='LB25\ue00025\ue00025\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                    TableRow(contents='LB26\ue00026\ue00026\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB27\ue00027\ue00027\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB28\ue00028\ue00028\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                    TableRow(contents='LB29\ue00029\ue00029\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30\ue00030\ue00030\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB31\ue00031\ue00031\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                    Heading(level=2, contents='References'),
                    Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintains the text.'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                    Heading(level=2, contents='Modifications'),
                    Paragraph(contents='The following documents the changes introduced by each revision.'),
                    Heading(level=4, contents='Revision 33:'),
                    Paragraph(contents='• Reissued for Unicode 7.0.0.'),
                    Heading(level=4, contents='Revision 32:'),
                    Paragraph(contents='• Reissued for Unicode 6.3.0.'),
                    Paragraph(contents='• Update the description of class CM to mention U+3035 VERTICAL KANA REPEAT MARK LOWER HALF.'),
                    Paragraph(contents='• Update the description of class BA to reflect the change of U+3000 IDEOGRAPHIC SPACE to class BA.'),
                    Paragraph(contents='• Clarify descriptions in section 7.3, Example Pair Table.'),
                    Paragraph(contents='• Remove section 7.6, Conjoining Jamos pair table implementation, reflecting that Jamos are included directly in the main pair table.'),
                    Paragraph(contents='• Revised Example 6 of section 8.2, Examples of Customization.'),
                    Paragraph(contents='Revision 31 being a proposed update, only changes between revisions 32 and 30 are noted here.'),
                    Heading(level=4, contents='Revision 30:'),
                    Paragraph(contents='• Reissued for Unicode 6.2.0.'),
                    Paragraph(contents='• Introduce character class RI (Regional Indicator).'),
                    Paragraph(contents='• Introduce rule 30a, do not break between Regional Indicators.'),
                    Paragraph(contents='Revision 29 being a proposed update, only changes between revisions 30 and 28 are noted here.'),
                    Heading(level=4, contents='Revision 28:'),
                    Paragraph(contents='• Reissued for Unicode 6.1.0.'),
                    Paragraph(contents="• Add rule 21a, don't break after Hebrew + hyphen."),
                    Paragraph(contents='• Introduce character class HL (Hebrew Letter).'),
                    Paragraph(contents='• Introduce character class CJ for small kana, and amend rule LB1 to provide default resolution for class CJ.'),
                    Paragraph(contents='• Clarify that the list of GL characters is not comprehensive.'),
                    Paragraph(contents='• Update Example 7 of Section 8.2 (Customization) to reflect the introduction of character class CP.'),
                    Paragraph(contents='Revision 27 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                    Heading(level=4, contents='Revision 26:'),
                    Paragraph(contents='• Reissued for Unicode 6.0.0.'),
                    Paragraph(contents='• In Section 5.1, revised the description of the SHY character.'),
                    Paragraph(contents='• Changed LB8 from "ZW ÷" to "ZW SP* ÷" in accordance with UAX 14 Corrigendum #7, http://www.unicode.org/versions/corrigendum7.html.'),
                    Paragraph(contents='• Changed references to Unicode 5.2 to generic references where appropriate.'),
                    Paragraph(contents='• In Section 3, removed Ideographic Space from the list of spaces that may be compressed or expanded and clarified that the justification of lines is out of scope.'),
                    Paragraph(contents='Revision 25 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                    Heading(level=4, contents='Revision 24:'),
                    Paragraph(contents='• Reissued for Unicode 5.2.0.'),
                    Paragraph(contents='• Added class CP, reintroduced rule LB30, adjusted other rules for class CP.'),
                    Paragraph(contents='• In Section 5.1, clarified that the lists of characters for each property contain representative characters, and are not necessarily complete.'),
                    Paragraph(contents='• Unassigned code points in CJK regions default to class ID.'),
                    Paragraph(contents='• Added Tai Tham, Myanmar Extended-A and Tai Viet blocks to class SA.'),
                    Paragraph(contents='• Brought descriptive names of the character classes into closer alignment with the Unicode Line Break character property values.'),
                    Paragraph(contents='• Small edits for improved clarity, document style.'),
                    Paragraph(contents='Revision 23 being a proposed update, only changes between revisions 22 and 24 are noted here.'),
                    Heading(level=4, contents='Revision 22:'),
                    Paragraph(contents='• Updated for Version 5.1.0.'),
                    Paragraph(contents='• Added 2E18, INVERTED INTERROBANG, to class OP.'),
                    Paragraph(contents='• Added 2064, INVISIBLE PLUS, to class AL.'),
                    Paragraph(contents='• Added 2E00..2E01, 2E06..2E08, 2E0B to class QU.'),
                    Paragraph(contents='• Removed LB30, to correct regression for U+3002 IDEOGRAPHIC FULL STOP'),
                    Paragraph(contents='• Add Example 9 to Section 8, Customization.'),
                    Paragraph(contents='• Substantial revisions to Section 4, Conformance.'),
                    Paragraph(contents='• Section 5.7, Word Separators, added.'),
                    Paragraph(contents='• Section 10, Testing, added.'),
                    Paragraph(contents='• Renumber rules for consistency: 12a -> 12; 12b -> 12a'),
                    Paragraph(contents='• Added 02DF, MODIFIER LETTER CROSS ACCENT, to class BB.'),
                    Paragraph(contents='• Added discussion for 202F NARROW NO-BREAK SPACE and 180E MONGOLIAN VOWEL SEPARATOR'),
                    Paragraph(contents='• Corrected typos in LB13 and LB16'),
                    Paragraph(contents='• Added characters introduced with Unicode 5.1 to the lists associated with the line break properties.'),
                    Paragraph(contents='• Added Section 5.2 on the special handling of hyphens. Edited Section 3 for clarity.'),
                    Paragraph(contents='• Improved delineation between normative and informative information.'),
                    Paragraph(contents='• Changed from EX to IS'),
                    Paragraph(contents='• 060C ( ، ) ARABIC COMMA'),
                    Paragraph(contents='• Changed from EX to PO'),
                    Paragraph(contents='• 066A ( ٪ ) ARABIC PERCENT SIGN'),
                    Paragraph(contents='• Changed from AI to OP'),
                    Paragraph(contents='• 00A1 ( ¡ ) INVERTED EXCLAMATION MARK'),
                    Paragraph(contents='• 00BF ( ¿ ) INVERTED QUESTION MARK'),
                    Paragraph(contents='• Changed from BA to EX'),
                    Paragraph(contents='• 1802 ( ᠂ ) MONGOLIAN COMMA'),
                    Paragraph(contents='• 1803 ( ᠃ ) MONGOLIAN FULL STOP'),
                    Paragraph(contents='• 1808 ( ᠈ ) MONGOLIAN MANCHU COMMA'),
                    Paragraph(contents='• 1809 ( ᠉ ) MONGOLIAN MANCHU FULL STOP'),
                    Paragraph(contents='• 2CF9 ( ⳹ ) COPTIC OLD NUBIAN FULL STOP'),
                    Paragraph(contents='• 2CFE ( ⳾ ) COPTIC FULL STOP'),
                    Paragraph(contents='• Changed from BA to AL'),
                    Paragraph(contents='• 1A1E ( ᨞ ) BUGINESE PALLAWA'),
                    Paragraph(contents='• Changed from AL to BB'),
                    Paragraph(contents='• 1FFD ( ´ ) GREEK OXIA'),
                    Paragraph(contents='• Added a note on lack of canonical equivalence for the definition of ambiguous characters.'),
                    Paragraph(contents='• Corrected typos in the sample source code.'),
                    Paragraph(contents='• Split rule LB12 to accommodate Polish and Portuguese hyphenation.'),
                    Paragraph(contents='Revisions 20 and 21 being a proposed update, only changes between revisions 19 and 22 are noted here.'),
                    Heading(level=4, contents='Revision 19:'),
                    Paragraph(contents='• Changed 000B from CM to BK, changed 035C from CM to GL.'),
                    Paragraph(contents='• Changed 17D9 from NS to AL. 203D, 2047..2049 from AL to NS.'),
                    Paragraph(contents='• Corrected listing of NS property to match the data file to remove 17D8 and 17DA.'),
                    Paragraph(contents='• The data file has been corrected to match the listing of the BA property to include 1735 and 1736, also changed 05BE and 103D0 from AL to BA.'),
                    Paragraph(contents='• Changed the brackets 23B4.23B6 to AL.'),
                    Paragraph(contents='• Updated the SA property to make it more generic, includes changing many characters from CM to SA.'),
                    Paragraph(contents='• Reflected new characters'),
                    Paragraph(contents='• Made several text changes for clarifications, including reworded the intro to Section 6.'),
                    Paragraph(contents='• Added Section 9.'),
                    Paragraph(contents='• Restated the conformance clauses and reorganized the algorithm into a tailorable and a non-tailorable part; this affects text in Sections 4, 5, and 6.'),
                    Paragraph(contents='• Removed redundant term PR x HY from rule 18 and rule into new LB24 and LB26 to provide better granularity for tailoring,'),
                    Paragraph(contents='• Moved rule 11b and 13 above rule 8 (new LB13), restating rule 13 (new LB12) to preserve its effect in the new location.'),
                    Paragraph(contents='• Added new rule LB30 to handle words like “person(s)”.'),
                    Paragraph(contents='• Renumbered the rules.'),
                    Paragraph(contents='• Extensive copy-editing as part of Unicode 5.0 publication.'),
                    Paragraph(contents='Revision 18 being a proposed update, only changes between revisions 17 and 19 are noted here.'),
                    Heading(level=4, contents='Revision 17:'),
                    Paragraph(contents='• Significantly revised the line break classes for Tibetan, as well as Mongolian and Arabic Punctuation.'),
                    Paragraph(contents='• Added section 5.6 on Tibetan and section 7.7 on handling explicit breaks.'),
                    Paragraph(contents='• Added line break class assignments for Unicode 4.1 characters.'),
                    Paragraph(contents='• Significantly revised the line break class assignments for danda characters and made it consistent across scripts.'),
                    Paragraph(contents='• LB6: Replaced by new rules 18b and 18c, using new classes JL, JV, JT, H2, and H3.'),
                    Paragraph(contents='• LB7a: Deprecated rule 7a because SPACE as base character for standalone combining marks is deprecated.'),
                    Paragraph(contents='• LB7b: Revised 7b and section 7.5 as well as Table 2 to match the deprecation of rule 7a.'),
                    Paragraph(contents='• LB7b: Clarified that this rule does not apply to SP.'),
                    Paragraph(contents='• LB11a: Added a missing SP * to make the formula match the rule.'),
                    Paragraph(contents='• LB18b: Removed the existing rule 18b because it was redundant.'),
                    Paragraph(contents='• Corrected an erratum on revision 14 by splitting GL from WJ in rule 11b and moving to a new rule 13.'),
                    Paragraph(contents='• Updated the pair table and sample code to match the changes in the rules.'),
                    Paragraph(contents='• Updated the regular expression for numbers.'),
                    Paragraph(contents='• Added several notes on implementation techniques.'),
                    Paragraph(contents='• Moved all suggested tailorings from the rules section to the examples in section 8.2.'),
                    Paragraph(contents='Revision 16 being a proposed update, only changes between revisions 17 and 15 are noted here.'),
                    Heading(level=4, contents='Revision 15:'),
                    Paragraph(contents='• LB19b: Added new rule 19b.'),
                    Paragraph(contents='• Changed line breaking class: combining double diacritics from CM to GL, 037A and 2126 to match their canonical equivalents, 2140 corrected to AL, Arabic numerical separators from AL to NU, many alphabetic characters that are EAW=Ambiguous from AI to AL to better reflect current practice, remaining circled numbers and letters from AL to AI for consistency.'),
                    Paragraph(contents='• Added a note on the behavior of U+200B and U+3000 when lines are justified.'),
                    Paragraph(contents='• Reconciled the data file and description of line breaking classes in section 5.'),
                    Paragraph(contents='• Reconciled the rules and pair table implementation of the algorithm.'),
                    Paragraph(contents='• Updated the text of the conformance statement in section 4.'),
                    Paragraph(contents='• Added section 5.5 on use of double hyphen.'),
                    Paragraph(contents='• Updated styles and table formatting.'),
                    Paragraph(contents='• Minor edits throughout.'),
                    Heading(level=4, contents='Revision 14:'),
                    Paragraph(contents='• Added new line breaking classes NL and WJ to better support NEL and Word Joiner.'),
                    Paragraph(contents='• Deprecated the use of class SG.'),
                    Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and 7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                    Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                    Paragraph(contents='• Clarified the behavior of SHY and MONGOLIAN TODO SOFT HYPHEN, as well as WJ and ZWNBSP.'),
                    Paragraph(contents='• Added a new subsection 5.4 on SOFT HYPHEN and a new subsection 7.6 on conjoining jamos.'),
                    Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                    Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                    Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                    Paragraph(contents='• Expanded the introduction in Section 3.'),
                    Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                    Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                    Paragraph(contents='Revision 11 being a proposed update, only changes between revisions 12 and 14 are noted here.'),
                    Heading(level=4, contents='Revision 12:'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added Word joiner to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the data file. Only characters whose LB class differs from those of characters with related General_Category are noted explicitly in this text.'),
                    Paragraph(contents='Revision 11, being a proposed update, only changes between revisions 10 and 12 are noted here.]'),
                    Heading(level=4, contents='Revision 10:'),
                    Paragraph(contents='• Changed header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Heading(level=4, contents='Revision 9:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX.'),
                    Paragraph(contents='• LB7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode4.0].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair table entry PR % ID'),
                    Paragraph(contents='• Reworked Section 7.5'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull)'),
                    Heading(level=4, contents='Revision 8:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to Table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX because the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                    Heading(level=4, contents='Revision 7:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Heading(level=4, contents='Revision 6:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='No change history is available for earlier revisions.'),
                    Paragraph(contents='Copyright © 1998–2014 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                    Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(8, 0, 0): [Heading(level=2, contents='Unicode® Standard Annex #14'),
                    Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                    TableRow(contents='Version\ue000Unicode 8.0.0'),
                    TableRow(contents='Editors\ue000Andy Heninger (andy.heninger@gmail.com)'),
                    TableRow(contents='Date\ue0002015-06-01'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-35.html'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-33.html'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                    TableRow(contents='Latest Proposed Update\ue000http://www.unicode.org/reports/tr14/proposed.html'),
                    TableRow(contents='Revision\ue00035'),
                    Heading(level=4, contents='Summary'),
                    Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display. A model implementation using pair tables is also provided.'),
                    Heading(level=4, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                    Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                    Heading(level=4, contents='Contents'),
                    Paragraph(contents='1 Overview and Scope'),
                    Paragraph(contents='2 Definitions'),
                    Paragraph(contents='3 Introduction'),
                    Paragraph(contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='4 Conformance'),
                    Paragraph(contents='4.1 Conformance Requirements'),
                    Paragraph(contents='5 Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Dictionary Usage'),
                    Paragraph(contents='5.3 Use of Hyphen'),
                    Paragraph(contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='5.7 Word Separator Characters'),
                    Paragraph(contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Pair Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Explicit Breaks'),
                    Paragraph(contents='8 Customization'),
                    Paragraph(contents='8.1 Types of Tailoring'),
                    Paragraph(contents='8.2 Examples of Customization'),
                    Paragraph(contents='9 Implementation Notes'),
                    Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='10 Testing'),
                    Paragraph(contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='References'),
                    Paragraph(contents='Acknowledgments'),
                    Paragraph(contents='Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                    Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                    Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                    Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Three main sections follow:'),
                    Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                    Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='• Section 7, Pair Table-Based Implementation, describes an efficient pair table-based implementation of the algorithm.'),
                    Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                    Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                    Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                    Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                    Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard.'),
                    Paragraph(contents='All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard [Unicode].'),
                    Paragraph(contents='LD1. Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='LD2. Line Break: The position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='LD3. Line Break Opportunity: A place where a line is allowed to end.'),
                    Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                    Paragraph(contents='LD4. Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                    Paragraph(contents='LD5. Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                    Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                    Paragraph(contents='LD6. Line Breaking Class: A class of characters with the same line breaking property value.'),
                    Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                    Paragraph(contents='LD7. Mandatory Break: A line must break following a character that has the mandatory break property.'),
                    Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                    Paragraph(contents='LD8. Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                    Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='LD9. Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                    Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                    Paragraph(contents='• An indirect break is indicated in the pair table in Table 2 as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though space characters are not shown in the pair table, an indirect break can occur only if one or more spaces follow B. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                    Paragraph(contents='LD10. Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                    Paragraph(contents='• A prohibited break is indicated in the pair table in Table 2 as B ^ A, where B is the character class of the character before and A is the character class of the character after the break, and the optional space characters are not shown. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='LD11. Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                    Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                    Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                    Paragraph(contents='Table 1. Line Breaking Classes'),
                    TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                    TableRow(contents='Non-tailorable Line Breaking Classes'),
                    TableRow(contents='BK\ue000Mandatory Break\ue000NL, PS\ue000Cause a line break (after)'),
                    TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                    TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                    TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                    TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                    TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                    TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                    TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                    TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                    TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                    TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                    TableRow(contents='NS\ue000Nonstarter\ue000“‼”, “‽”, “⁇”, “⁉”, etc.\ue000Allow only indirect line breaks before'),
                    TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                    TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                    TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                    TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                    TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                    TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='CJ\ue000Conditional Japanese Starter\ue000Small kana\ue000Treat as NS or ID for strict or normal breaking.'),
                    TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='HL\ue000Hebrew Letter\ue000Hebrew\ue000Do not break around a following hyphen; otherwise act as Alphabetic'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                    TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='RI\ue000Regional Indicator\ue000REGIONAL INDICATOR SYMBOL LETTER A .. Z\ue000Keep together, break before and after from others'),
                    TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Introduction'),
                    Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                    Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                    Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                    Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                    Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                    Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                    Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                    Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                    Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                    Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                    Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                    Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                    Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                    Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                    Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [Bidi]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                    Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                    Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                    Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                    Heading(level=3, contents='4.1 Conformance Requirements'),
                    Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                    Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                    Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                    Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                    Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                    Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                    Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into two algorithms defined in Section 6, Line Breaking Algorithm, and Section 7, Pair Table-Based Implementation. These sections describe workable default line breaking methods. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences.'),
                    Heading(level=4, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a tab-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                    Heading(level=4, contents='Future Updates'),
                    Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                    TableRow(contents='Label\ue000Meaning for the Class'),
                    TableRow(contents='(A)\ue000It allows a break opportunity after in specified contexts.'),
                    TableRow(contents='(XA)\ue000It prevents a break opportunity after in specified contexts.'),
                    TableRow(contents='(B)\ue000It allows a break opportunity before in specified contexts.'),
                    TableRow(contents='(XB)\ue000It prevents a break opportunity before in specified contexts.'),
                    TableRow(contents='(P)\ue000It allows a break opportunity for a pair of same characters.'),
                    TableRow(contents='(XP)\ue000It prevents a break opportunity for a pair of same characters.'),
                    Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Some characters that ordinarily act like alphabetic characters are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                    Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [UAX11].'),
                    Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                    Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                    Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                    TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                    TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                    Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                    Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                    Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='This class contains alphabetic or symbolic characters not explicitly assigned to another line breaking class. These are primarily characters of the following categories:'),
                    TableRow(contents='Category\ue000General_Category Values'),
                    TableRow(contents='Alphabetic\ue000Lu, Ll, Lt, Lm, and Lo'),
                    TableRow(contents='Symbols\ue000Sm, Sk, and So'),
                    TableRow(contents='Non-decimal Numbers\ue000Nl and No'),
                    TableRow(contents='Punctuation\ue000Pc, Pd, and Po'),
                    Paragraph(contents='Line break class AL also contains several format characters, including:'),
                    TableRow(contents='0600..0604\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAMVAT'),
                    TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                    TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                    TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                    TableRow(contents='110BD\ue000KAITHI NUMBER SIGN'),
                    Paragraph(contents='These format characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                    Paragraph(contents='Major exceptions to the general pattern of alphabetic and symbolic characters having line break class AL include:'),
                    Paragraph(contents='HL for Hebrew letters AI or ID, based on the East Asian Width property of the character ID for certain pictographic symbols CJ for small hiragana and katakana SA for complex context scripts JL, JV, JT, H2 or H3 for Hangul characters'),
                    Heading(level=3, contents='BA: Break After (A)'),
                    Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                    Heading(level=4, contents='Breaking Spaces'),
                    Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN SPACE'),
                    TableRow(contents='2003\ue000EM SPACE'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                    Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                    Paragraph(contents='For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                    Heading(level=4, contents='Tabs'),
                    TableRow(contents='0009\ue000TAB'),
                    Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    Heading(level=4, contents='Conditional Hyphens'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=4, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Visible Word Dividers'),
                    Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                    TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                    TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                    Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                    Heading(level=4, contents='Historic Word Separators'),
                    Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                    Paragraph(contents='Examples of Historic Word Separators include:'),
                    TableRow(contents='16EB\ue000RUNIC SINGLE DOT PUNCTUATION'),
                    TableRow(contents='16EC\ue000RUNIC MULTIPLE DOT PUNCTUATION'),
                    TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                    TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                    TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                    TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                    TableRow(contents='205B\ue000FOUR DOT MARK'),
                    TableRow(contents='205D\ue000TRICOLON'),
                    TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                    TableRow(contents='2E19\ue000PALM BRANCH'),
                    TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                    TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                    TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                    TableRow(contents='2E2D\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='2E30\ue000RING POINT'),
                    TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                    TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                    TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                    TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                    TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                    TableRow(contents='1091F\ue000PHOENICIAN WORD DIVIDER'),
                    TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                    Heading(level=4, contents='Dandas'),
                    Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                    Paragraph(contents='Examples of dandas include:'),
                    TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                    TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                    TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                    TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                    TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                    TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                    TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                    TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                    TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                    TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                    TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                    TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                    TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                    TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                    TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                    TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                    Heading(level=4, contents='Tibetan'),
                    TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                    TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                    TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                    TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                    TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                    TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                    Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Other Terminating Punctuation'),
                    Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                    TableRow(contents='1804\ue000MONGOLIAN COLON'),
                    TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                    TableRow(contents='1B5A\ue000BALINESE PANTI'),
                    TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                    TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                    TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                    TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                    TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                    TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                    TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                    TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                    TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                    TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                    TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                    TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                    TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                    TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                    TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                    TableRow(contents='2E17\ue000OBLIQUE DOUBLE HYPHEN'),
                    TableRow(contents='A60D\ue000VAI COMMA'),
                    TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                    TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                    TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                    TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                    TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                    TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                    TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                    TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                    TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                    Heading(level=3, contents='BB: Break Before (B)'),
                    Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                    Paragraph(contents='Examples of BB characters are described in the following sections.'),
                    Heading(level=4, contents='Dictionary Use'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    TableRow(contents='1FFD\ue000GREEK OXIA'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                    TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                    Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                    Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                    TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                    TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                    TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                    TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                    TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                    TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                    TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                    TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                    TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                    TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                    TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                    TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                    TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                    Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Mongolian'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                    Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                    Paragraph(contents='Some languages, including Spanish, use EM DASH to set off a parenthetical, and the surrounding dashes should not be broken from the contained text. In this usage there is space on the side where it can be broken. This does not conflict with symmetrical usages, either with spaces on both sides of the em-dash or with no spaces.'),
                    Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                    TableRow(contents='000C\ue000FORM FEED (FF)'),
                    TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                    Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR (LS)'),
                    Paragraph(contents='The text after the LINE SEPARATOR starts at the beginning of the line. This is similar to HTML <BR>.'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR (PS)'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LS, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                    Heading(level=4, contents='Newline Function (NLF)'),
                    Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                    Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                    Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                    Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                    Heading(level=3, contents='CJ: Conditional Japanese Starter'),
                    Paragraph(contents='This character class contains Japanese small hiragana and katakana. Characters of this class may be treated as either NS or ID.'),
                    Paragraph(contents='CSS Text Level 3 (which supports Japanese line layout) defines three distinct values for its line-break behavior:'),
                    Paragraph(contents='• strict, typically used for long lines'),
                    Paragraph(contents='• normal (CSS default), the behavior typically used for books and documents'),
                    Paragraph(contents='• loose, typically used for short lines such as in newspapers'),
                    Paragraph(contents='These have different sets of “kinsoku” characters which cannot be at the beginning or end of a line; strict has the largest set, while loose has the smallest. The motivation for the smaller number of kinsoku characters is to avoid triggering justification that puts characters off the grid position.'),
                    Paragraph(contents='Treating characters of class CJ as class NS will give CSS strict line breaking; treating them as class ID will give CSS normal breaking.'),
                    Paragraph(contents='The CJ line break class includes'),
                    TableRow(contents='3041, 3043, 3045, etc.\ue000Small hiragana'),
                    TableRow(contents='30A1, 30A3, 30A5, etc.\ue000Small katakana'),
                    TableRow(contents='30FC\ue000KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF67..FF70\ue000Halfwidth variants'),
                    Heading(level=3, contents='CL: Close Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                    Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                    Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                    TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                    Heading(level=4, contents='Combining Characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                    Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 NO-BREAK SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                    Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                    Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                    Heading(level=4, contents='Control and Formatting Characters'),
                    Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                    Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Paragraph(contents='The CM class also includes U+3035 VERTICAL KANA REPEAT MARK LOWER HALF. This character is normally preceded by either U+3033 VERTICAL KANA REPEAT MARK UPPER HALF or U+3034 VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF, and should not be separated from them.'),
                    Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                    Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                    TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                    TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                    Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                    Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                    Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                    Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                    TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                    TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                    TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                    TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                    TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                    TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following are examples of characters of line break class GL:'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                    TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE. NARROW NO-BREAK SPACE is used in Mongolian. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in Section 13.4, Mongolian, of [Unicode].'),
                    Paragraph(contents='NARROW NO-BREAK SPACE is a narrow version of NO-BREAK SPACE, which has exactly the same line breaking behavior, but with a narrow display width. It is regularly used in Mongolian in certain grammatical contexts (before a particle), where it also influences the shaping of the glyphs for the particle. In Mongolian text, the NARROW NO-BREAK SPACE is typically displayed with one third the width of a normal space character.'),
                    Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                    Paragraph(contents='The MONGOLIAN VOWEL SEPARATOR is equivalent to a NARROW NO-BREAK SPACE in its line breaking behavior, but has different effects in controlling the shaping of its preceding and following characters. It constitutes a word-internal space and is typically displayed with half the width of a NARROW NO-BREAK SPACE.'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                    TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                    Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                    Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                    Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                    Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                    Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                    Heading(level=3, contents='HY: Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                    Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                    Heading(level=3, contents='ID: Ideographic (B/A)'),
                    Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                    TableRow(contents='2E80..2FFF\ue000CJK, Kangxi Radicals, Ideographic Description Symbols'),
                    TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                    TableRow(contents='30A0..30FF\ue000Katakana (except small characters)'),
                    TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                    TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                    TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                    TableRow(contents='A000..A48F\ue000Yi Syllables'),
                    TableRow(contents='A490..A4CF\ue000Yi Radicals'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN..SMALL EQUALS SIGN'),
                    TableRow(contents='FF01..FF5A\ue000Fullwidth Latin letters and digits'),
                    Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                    Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                    Paragraph(contents='The CJK blocks and regions in which unassigned characters default to line break class ID are:'),
                    TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                    TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                    TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                    TableRow(contents='20000..2A6DF\ue000CJK Unified Ideographs Extension B'),
                    TableRow(contents='2A700..2B73F\ue000CJK Unified Ideographs Extension C'),
                    TableRow(contents='2B740..2B81F\ue000CJK Unified Ideographs Extension D'),
                    TableRow(contents='2B820..2CEAF\ue000CJK Unified Ideographs Extension E'),
                    TableRow(contents='2F800..2FA1F\ue000CJK Compatibility Ideographs Supplement'),
                    TableRow(contents='20000..2FFFD\ue000SIP (Plane 2) outside of blocks'),
                    TableRow(contents='30000..3FFFD\ue000TIP (Plane 3) outside of blocks'),
                    Heading(level=4, contents='Korean'),
                    Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    Heading(level=4, contents='Symbols'),
                    Paragraph(contents='Certain pictographic symbols of General Category So are also included in this line break class.'),
                    Heading(level=3, contents='HL: Hebrew Letter (XB)'),
                    Paragraph(contents='This class includes all Hebrew letters.'),
                    Paragraph(contents='When a Hebrew letter is followed by a hyphen, there is no break on either side of the hyphen. In this context a hyphen is any character of class HY or class BA. In other respects, Hebrew letters behave the same as characters of class AL.'),
                    Paragraph(contents='Included in this class are all characters of General Category Letter that have Script=Hebrew.'),
                    Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                    Heading(level=4, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='HORIZONTAL ELLIPSIS can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    TableRow(contents='060C\ue000ARABIC COMMA'),
                    TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                    TableRow(contents='07F8\ue000NKO COMMA'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                    TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                    TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                    Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                    Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                    Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                    Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                    Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                    Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                    Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                    Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                    Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                    Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                    Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                    TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                    Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                    Heading(level=3, contents='NS: Nonstarters (XB)'),
                    Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include:'),
                    TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='203D\ue000INTERROBANG'),
                    TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                    TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                    TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='303C\ue000MASU MARK'),
                    TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                    TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                    TableRow(contents='30FD..30FE\ue000KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='Note: Optionally, the NS restriction may be relaxed by tailoring, with some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles. Alternatively, line breaking can be tightened by moving characters that are ID into NS.'),
                    Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                    Heading(level=3, contents='NU: Numeric (XP)'),
                    Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                    Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                    TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                    TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                    Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                    Heading(level=3, contents='OP: Open Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                    TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                    TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                    TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                    Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                    Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                    Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                    Paragraph(contents='Examples of Postfix characters include'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='060B\ue000AFGHANI SIGN'),
                    TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='FDFC\ue000RIAL SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                    Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                    Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                    Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                    Heading(level=3, contents='QU: Quotation (XB/XA)'),
                    Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                    Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                    Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                    TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                    TableRow(contents='2E0B\ue000RAISED SQUARE'),
                    Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='RI: Regional Indicator (B/A/XP)'),
                    Paragraph(contents='The Regional Indicator characters are'),
                    TableRow(contents='1F1E6..1F1FF\ue000REGIONAL INDICATOR SYMBOL LETTER A .. REGIONAL INDICATOR SYMBOL LETTER Z'),
                    Paragraph(contents='Pairs of RI characters are used to represent a two-letter ISO 3166 region code. No break opportunity occurs between adjacent RI characters, otherwise breaks can occur before and after.'),
                    Paragraph(contents='To provide a break between adjacent RI characters insertion of a U+200B ZERO WIDTH SPACE is recommended.'),
                    Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                    Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                    TableRow(contents='0E00..0E7F\ue000Thai'),
                    TableRow(contents='0E80..0EFF\ue000Lao'),
                    TableRow(contents='1000..109F\ue000Myanmar'),
                    TableRow(contents='1780..17FF\ue000Khmer'),
                    TableRow(contents='1950..197F\ue000Tai Le'),
                    TableRow(contents='1980..19DF\ue000New Tai Lue'),
                    TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                    TableRow(contents='A9E0..A9FF\ue000Myanmar Extended-B'),
                    TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                    TableRow(contents='AA80..AADF\ue000Tai Viet'),
                    TableRow(contents='11700..1173F\ue000Ahom'),
                    Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                    Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                    Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                    Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                    Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                    Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                    Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                    Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                    Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                    Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                    Heading(level=3, contents='XX: Unknown (XP)'),
                    Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                    Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                    Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                    Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                    Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                    Heading(level=3, contents='5.2 Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                    Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                    Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                    Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                    Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                    Heading(level=3, contents='5.3 Use of Hyphen'),
                    Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                    Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                    Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                    Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                    Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                    Paragraph(contents='dispara- te'),
                    Paragraph(contents='and the latter as'),
                    Paragraph(contents='dispara- -te.'),
                    Paragraph(contents='A recommended practice is to type <SHY, NBHY> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                    Paragraph(contents='• Simply inserting a hyphen glyph'),
                    Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                    Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                    Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                    Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                    Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                    Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                    Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                    Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                    Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                    Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                    Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                    Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [Bidi] and Section 9.2, Arabic, of [Unicode].'),
                    Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                    Paragraph(contents='The sequence <SHY, NBHY> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                    Heading(level=3, contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                    Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                    Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                    Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                    Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                    Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                    Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                    Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                    Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                    Heading(level=3, contents='5.7 Word Separator Characters'),
                    Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                    Paragraph(contents='1. suppress the visible word separator'),
                    Paragraph(contents='The:quick:brown fox:jumped.'),
                    Paragraph(contents='2. break before the visible word separator'),
                    Paragraph(contents='The:quick:brown :fox:jumped.'),
                    Paragraph(contents='3. break after the visible word separator'),
                    Paragraph(contents='The:quick:brown: fox:jumped.'),
                    Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                    Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                    Paragraph(contents='A slightly simplified implementation of such an algorithm can be devised that uses a two-dimensional table to resolve break opportunities between pairs or characters. It is described in Section 7, Pair Table-Based Implementation.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1, Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                    Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                    Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                    Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, and ZW define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                    Heading(level=4, contents='Resolve line breaking classes:'),
                    Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, CJ, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                    Paragraph(contents='In the absence of such criteria all characters with a specific combination of original class and General_Category property value are resolved as follows:'),
                    TableRow(contents='Resolved\ue000Original\ue000General_Category'),
                    TableRow(contents='AL\ue000AI, SG, XX\ue000Any'),
                    TableRow(contents='CM\ue000SA\ue000Only Mn or Mc'),
                    TableRow(contents='AL\ue000SA\ue000Any except Mn and Mc'),
                    TableRow(contents='NS\ue000CJ\ue000Any'),
                    Heading(level=4, contents='Start and end of text:'),
                    Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                    Rule(contents='LB2 Never break at the start of text.'),
                    Formula(contents='sot ×'),
                    Rule(contents='LB3 Always break at the end of text.'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                    Rule(contents='LB4 Always break after hard line breaks.'),
                    Formula(contents='BK !'),
                    Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                    Formula(contents='CR × LF'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='NL !'),
                    Rule(contents='LB6 Do not break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF | NL )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB7 Do not break before spaces or zero width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                    Formula(contents='ZW SP* ÷'),
                    Heading(level=4, contents='Combining marks:'),
                    Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                    Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules.'),
                    Formula(contents='Treat X CM* as if it were X.'),
                    Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                    Rule(contents='LB10 Treat any remaining combining mark as AL.'),
                    Formula(contents='Treat any remaining CM as it if were AL.'),
                    Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                    Heading(level=4, contents='Word joiner:'),
                    Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                    Formula(contents='× WJ'),
                    Formula(contents='WJ ×'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12 Do not break after NBSP and related characters.'),
                    Formula(contents='GL ×'),
                    Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                    Formula(contents='[^SP BA HY] × GL'),
                    Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                    Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× CP'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                    Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                    Formula(contents='(CL | CP) SP* × NS'),
                    Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 SP* × B2'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB18 Break after spaces.'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB20 Break before and after unresolved CB.'),
                    Formula(contents='÷ CB'),
                    Formula(contents='CB ÷'),
                    Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                    Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents="LB21a Don't break after Hebrew + Hyphen."),
                    Formula(contents='HL (HY | BA) ×'),
                    Rule(contents='LB21b Don’t break between Solidus and Hebrew letters.'),
                    Formula(contents='SY × HL'),
                    Rule(contents='LB22 Do not break between two ellipses, or between letters, numbers or exclamations and ellipsis.'),
                    Formula(contents='(AL | HL) × IN'),
                    Formula(contents='EX × IN'),
                    Formula(contents='ID × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents='Do not break alphanumerics.'),
                    Rule(contents='LB23 Do not break within ‘a9’, ‘3a’, or ‘H%’.'),
                    Formula(contents='ID × PO'),
                    Formula(contents='(AL | HL) × NU'),
                    Formula(contents='NU × (AL | HL)'),
                    Rule(contents='LB24 Do not break between prefix and letters or ideographs.'),
                    Formula(contents='PR × ID'),
                    Formula(contents='PR × (AL | HL)'),
                    Formula(contents='PO × (AL | HL)'),
                    Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                    Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                    Formula(contents='CL × PO'),
                    Formula(contents='CP × PO'),
                    Formula(contents='CL × PR'),
                    Formula(contents='CP × PR'),
                    Formula(contents='NU × PO'),
                    Formula(contents='NU × PR'),
                    Formula(contents='PO × OP'),
                    Formula(contents='PO × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='PR × NU'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Korean syllable blocks'),
                    Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                    Rule(contents='LB26 Do not break a Korean syllable.'),
                    Formula(contents='JL × (JL | JV | H2 | H3)'),
                    Formula(contents='(JV | H2) × (JV | JT)'),
                    Formula(contents='(JT | H3) × JT'),
                    Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                    Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                    Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                    Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                    Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                    Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                    Formula(contents='(AL | HL) × (AL | HL)'),
                    Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                    Formula(contents='IS × (AL | HL)'),
                    Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                    Formula(contents='(AL | HL | NU) × OP'),
                    Formula(contents='CP × (AL | HL | NU)'),
                    Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                    Rule(contents='LB30a Do not break between regional indicator symbols.'),
                    Formula(contents='RI × RI'),
                    Rule(contents='LB31 Break everywhere else.'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='A two-dimensional table can be used to resolve break opportunities between pairs of characters. This section defines such a table. The rows of the table are labeled with the possible values of the line breaking property of the leading character in the pair. The columns are labeled with the line breaking class for the following character of the pair. Each intersection is labeled with the resulting line break opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of a similar table-based definition. However, it uses line breaking classes whose membership is not solely determined by the line breaking property (as in this annex), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classes defined previously.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, then the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes, of which only 14 appear to be unique. Any minimal table representation is unique, except for trivial reordering of rows and columns. Minimal tables for which the rows and columns are sorted alphabetically can be mechanically compared for differences. This is in contrast to the rules, where identical results can be achieved by sets of rules that cannot be easily compared by looking at their textual representation. However, any set of rules that is equivalent to a minimal pair table can be used to automatically generate such a table, which can then be used for comparison. The rules in Section 6, Line Breaking Algorithm, can be expressed as minimal pair tables if the extended context used as described below.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Most of the rules in Section 6, Line Breaking Algorithm, involve only pairs of characters, or they apply to a single line break class preceded or followed by any character. These rules can be represented directly in a pair table. However, rules LB14–LB17 require extended context to handle spaces.'),
                    Paragraph(contents='By broadening the definition of a pair from B A, where B is the line breaking class before a break and A the one after, to B SP* A, where SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line break opportunity (that is, direct and indirect breaks). Rules equivalent to the ones given in Section 6, Line Breaking Algorithm, can be formulated without explicit use of SP by using % to express indirect breaks instead. These rules can then be simplified to involve only pairs of classes—that is, only constructions of the form:'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B × A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can be automatically translated into a pair table, as in Table 2. Line breaking analysis then proceeds by pair table lookup as explained below. (For readability in table layout, the symbol ^ is used in the table instead of × and _ is used instead of ÷.)'),
                    Paragraph(contents='Rule LB9 requires extended context for handling combining marks. This extended context must also be built into the code that interprets the pair table. For convenience in detecting the condition where A = CM, the symbols # and @ are used in the pair table, instead of % and ^, respectively. See Section 7.5, Combining Marks.'),
                    Paragraph(contents='Rule LB21a also requires extended context to handle Hebrew letters followed by hyphens. This rule cannot be represented directly by the example pair table and is not handled by the sample implementation code included here. In the absence of special case handling, rule LB21a is effectively ignored by this example pair table and implementation code.'),
                    Heading(level=3, contents='7.3 Example Pair Table'),
                    Paragraph(contents='Table 2 implements an approximation of the line breaking behavior described in this annex, with the limitation that only context of the form B SP* A is considered. BK, CR, LF, NL, and SP classes are handled explicitly in the outer loop, as given in the code sample below. Pair context of the form B CM* can be processed by handling the special entries @ and # in the driving loop, as explained in Section 7.5, Combining Marks. In Table 2 the rows are labeled with the B class and the columns are labeled with the A class.'),
                    Paragraph(contents='Table 2. Example Pair Table'),
                    TableRow(contents='OP\ue000CL\ue000CP\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000HL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM\ue000WJ\ue000H2\ue000H3\ue000JL\ue000JV\ue000JT\ue000RI'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000@\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^'),
                    TableRow(contents='CL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CP\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='QU\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='NS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='EX\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='SY\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='PR\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_'),
                    TableRow(contents='PO\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='NU\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='AL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ID\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='IN\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='HY\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BA\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='BB\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='B2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000^\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='ZW\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CM\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='WJ\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='H2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_'),
                    TableRow(contents='H3\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%\ue000_'),
                    TableRow(contents='JL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_'),
                    TableRow(contents='JV\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_'),
                    TableRow(contents='JT\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%\ue000_'),
                    TableRow(contents='RI\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    Paragraph(contents='Table 2 uses the following notation:'),
                    Paragraph(contents='Resolved outside the pair table: AI, BK, CB, CJ, CR, LF, NL, SA, SG, SP, XX'),
                    TableRow(contents='Symbol\ue000Denotes\ue000Explanation'),
                    TableRow(contents='^\ue000prohibited break\ue000B ^ A is equivalent to B SP* × A; in other words, never break before A and after B, even if one or more spaces intervene.'),
                    TableRow(contents='%\ue000indirect break opportunity\ue000B % A is equivalent to B × A and B SP+ ÷ A; in other words, do not break before A, unless one or more spaces follow B.'),
                    TableRow(contents='@\ue000prohibited break for combining marks\ue000B @ A is equivalent to B SP* × A, where A is of class CM. For more details, see Section 7.5, Combining Marks.'),
                    TableRow(contents='#\ue000indirect break opportunity for combining marks following a space\ue000B # A is equivalent to (B × A and B SP+ ÷ A), where A is of class CM.'),
                    TableRow(contents='_\ue000direct break opportunity\ue000equivalent to ÷ as defined above'),
                    Paragraph(contents='Note: Hovering over the cells in a browser with tool-tips enabled reveals the rule number that determines the breaking status for the pair in question. When a pair must be tested both with and without intervening spaces, multiple rules are given. Hovering over a line breaking class name gives a representative member of the class and additional information. Clicking on any line break class name anywhere in the document jumps to the definition.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two sections provide sample code [Code14] that demonstrates how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the line breaking classes CR, LF, and NL need to be added. They have been omitted here for brevity, but see Section 7.6, Explicit Breaks.'),
                    Paragraph(contents='The sample code assumes that the line breaking classes AI, CB, SG, and XX have been resolved according to rule LB1 as part of initializing the pcls array. The code further assumes that the complex line break analysis for characters with line break class SA is handled in function findComplexBreak, for which the following placeholder is given:'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    // cls - resolved line break class, may differ from pcls[0]'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line breaking opportunities (output)'),
                    CodeLine(contents='    // cch - remaining length of input '),
                    CodeLine(contents='    int '),
                    CodeLine(contents='   findComplexBreak(enum break_class cls, enum break_class *pcls,'),
                    CodeLine(contents='                             enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='            if (!cch)'),
                    CodeLine(contents='                return 0;'),
                    CodeLine(contents='            for (int ich = 1; ich < cch; ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='                // .. do complex break analysis here'),
                    CodeLine(contents='                // and report any break opportunities in pbrk ..'),
                    CodeLine(contents=''),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK; // by default, no break'),
                    CodeLine(contents=''),
                    CodeLine(contents='                if (pcls[ich] != SA)'),
                    CodeLine(contents='                    break;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='            return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The entries in the example pair table correspond to the following enumeration. For diagnostic purposes, the sample code returns these values to indicate not only the location but also the type of rule that triggered a given break opportunity.'),
                    CodeLine(contents='    enum break_action {'),
                    CodeLine(contents='           DIRECT_BRK = 0,             // _ in table'),
                    CodeLine(contents='           INDIRECT_BRK,               // % in table'),
                    CodeLine(contents='           COMBINING_INDIRECT_BRK,     // # in table'),
                    CodeLine(contents='           COMBINING_PROHIBITED_BRK,   // @ in table'),
                    CodeLine(contents='           PROHIBITED_BRK,             // ^ in table'),
                    CodeLine(contents='           EXPLICIT_BRK };             // ! in rules'),
                    Paragraph(contents='Because the contexts involved in indirect breaks of the form B SP* A are of indefinite length, they need to be handled explicitly in the driver code. The sample implementation of a findLineBrk function below remembers the line break class for the last characters seen, but skips any occurrence of SP without resetting this value. Once character A is encountered, a simple lookback is used to see if it is preceded by a SP. This lookback is necessary only if B % A. To handle the case of a SP following sot, it is necessary to set cls to a dummy value. Using WJ gives the correct result and, as required, is unaffected by any tailoring.'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable) (returned value)'),
                    CodeLine(contents="    // cls - current resolved line break class for 'before' character (variable)"),
                    CodeLine(contents=''),
                    CodeLine(contents='    int'),
                    CodeLine(contents='    findLineBrk(enum break_class *pcls, enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='        if (!cch) return 0;'),
                    CodeLine(contents=''),
                    CodeLine(contents="        enum break_class cls = pcls[0];   // class of 'before' character"),
                    CodeLine(contents=''),
                    CodeLine(contents='        // treat SP at start of input as if it followed a WJ'),
                    CodeLine(contents='        if (cls == SP)'),
                    CodeLine(contents='            cls = WJ;'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='        for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // to handle explicit breaks, replace code from "for" loop condition'),
                    CodeLine(contents='            // above to comment below by code given in Section 7.6'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle spaces explicitly'),
                    CodeLine(contents='            if (pcls[ich] == SP) {'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;   // apply rule LB7: × SP'),
                    CodeLine(contents='                continue;                       // do not update cls'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle complex scripts in a separate function'),
                    CodeLine(contents='            if (pcls[ich] == SA) {'),
                    CodeLine(contents='                ich += findComplexBreak(cls, &pcls[ich-1], &pbrk[ich-1],'),
                    CodeLine(contents='                           cch - (ich-1));'),
                    CodeLine(contents='                if (ich < cch)'),
                    CodeLine(contents='                    cls = pcls[ich];'),
                    CodeLine(contents='                continue;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // lookup pair table information in brkPairs[before, after];'),
                    CodeLine(contents='            enum break_action brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents=''),
                    CodeLine(contents='            pbrk[ich-1] = brk;                     // save break action in output array'),
                    CodeLine(contents=''),
                    CodeLine(contents='            if (brk == INDIRECT_BRK) {             // resolve indirect break'),
                    CodeLine(contents='                if (pcls[ich - 1] == SP)           // if context is A SP + B'),
                    CodeLine(contents='                    pbrk[ich-1] = INDIRECT_BRK;    //       break opportunity'),
                    CodeLine(contents='                else                               // else'),
                    CodeLine(contents='                    pbrk[ich-1] = PROHIBITED_BRK;  //       no break opportunity'),
                    CodeLine(contents='            } '),
                    CodeLine(contents='            '),
                    CodeLine(contents='            // handle breaks involving a combining mark (see Section 7.5)'),
                    CodeLine(contents=''),
                    CodeLine(contents="            // save cls of 'before' character (unless bypassed by 'continue')"),
                    CodeLine(contents='            cls = pcls[ich];'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        pbrk[ich-1] = EXPLICIT_BRK;                // always break at the end'),
                    CodeLine(contents=''),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The function returns all of the break opportunities in the array pointed to by pbrk, using the values in the table. On return, pbrk[ich] is the type of break after the character at index ich.'),
                    Paragraph(contents='A common optimization in implementation is to determine only the nearest line break opportunity prior to the position of the first character that would cause the line to become overfull. Such an optimization requires backward traversal of the string instead of forward traversal as shown in the sample code.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='The implementation of combining marks in the pair table presents an additional complication because rule LB9 defines a context X CM* that is of arbitrary length. There are some similarities to the way contexts of the form B SP* A that are involved in indirect breaks are evaluated. However, contexts of the form SP CM* or CM* SP also need to be handled, while rule LB10 requires some CM* to be treated like AL.'),
                    Paragraph(contents='Implementing LB10. This rule can be reflected directly in the example pair table in Table 2 by assigning the same values in the row marked CM as in the row marked AL. Incidentally, this is equivalent to rewriting the rules LB11–LB31 by duplicating any expression that contains an AL on its left hand side with another expression that contains a CM. For example, in LB22'),
                    Formula(contents='AL × IN'),
                    Paragraph(contents='would become'),
                    Formula(contents='AL × IN CM × IN'),
                    Paragraph(contents='Rewriting these rules as indicated here (and then deleting LB10) is fully equivalent to the original rules because rule LB9 already accounts for all CMs that are not supposed to be treated like AL. For a complete description see Example 9 in Section 8.2, Examples of Customization.'),
                    Paragraph(contents='Implementing LB9. Rule LB9 is implemented in the example pair table in Table 2 by assigning a special # entry in the column marked CM for all rows referring to a line break class that allows a direct or indirect break after itself. (Note that the intersection between the row for class ZW and the column for class CM must be assigned “_” because of rule LB8.) The # corresponds to a break_action value of COMBINING_INDIRECT_BREAK, which triggers the following code in the sample implementation:'),
                    CodeLine(contents='    else if (brk == COMBINING_INDIRECT_BRK) {    // resolve combining mark break'),
                    CodeLine(contents='        pbrk[ich-1] = PROHIBITED_BRK;             // do not break before CM'),
                    CodeLine(contents='        if (pcls[ich-1] == SP){'),
                    CodeLine(contents='            #ifndef LEGACY_CM                    // new: space is not a base'),
                    CodeLine(contents='                pbrk[ich-1] = COMBINING_INDIRECT_BRK;    // apply rule SP ÷ '),
                    CodeLine(contents='            #else'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;      // legacy: keep SP CM together'),
                    CodeLine(contents='                if (ich > 1)'),
                    CodeLine(contents='                    pbrk[ich-2] = ((pcls[ich - 2] == SP) ?'),
                    CodeLine(contents='                                                  INDIRECT_BRK : DIRECT_BRK);'),
                    CodeLine(contents='            #endif'),
                    CodeLine(contents='        } else                                   // apply rule LB9: X CM * -> X'),
                    CodeLine(contents='            continue;                            // do not update cls'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    Paragraph(contents='When handling a COMBINING_INDIRECT_BREAK, the last remembered line break class in variable cls is not updated, except for those cases covered by rule LB10. A tailoring of rule LB9 that keeps the last SPACE character preceding a combining mark, if any, and therefore breaks before that SPACE character can easily be implemented as shown in the sample code. (See Section 9.2, Legacy Support for Space Character as Base for Combining Marks.)'),
                    Paragraph(contents='Any rows in Table 2 for line break classes that prohibit breaks after must be handled explicitly. In the example pair table, these are assigned a special entry “@”, which corresponds to a special break action of COMBINING_PROHIBITED_BREAK that triggers the following code:'),
                    CodeLine(contents='    else if (brk == COMBINING_PROHIBITED_BRK) { // this is the case OP SP* CM'),
                    CodeLine(contents='        pbrk[ich-1] = COMBINING_PROHIBITED_BRK;  // no break allowed'),
                    CodeLine(contents='        if (pcls[ich-1] != SP)'),
                    CodeLine(contents='            continue;                          // apply rule LB9: X CM* -> X'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The only line break class that unconditionally prevents breaks across a following SP is OP. The preceding code fragment ensures that OP CM is handled according to rule LB9 and OP SP CM is handled as OP SP AL according to rule LB10.'),
                    Heading(level=3, contents='7.6 Explicit Breaks'),
                    Paragraph(contents='Handling explicit breaks is straightforward in the driver code, although it does clutter up the loop condition and body of the loop a bit. For completeness, the following sample shows how to change the loop condition and add if statements—both before and inside the loop—that handle BK, NL, CR, and LF. Because NL and BK behave identically by default, this code can be simplified in implementations where the character classification is changed so that BK will always be substituted for NL when assigning the line break class. Because this optimization does not change the result, it is not considered a tailoring and does not affect conformance.'),
                    CodeLine(contents='    // handle case where input starts with an LF'),
                    CodeLine(contents='    if (cls == LF)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // treat initial NL like BK'),
                    CodeLine(contents='    if (cls == NL)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // loop over all pairs in the string up to a hard break or CRLF pair'),
                    CodeLine(contents='    for (int ich = 1; (ich < cch) && (cls != BK) && (cls != CR || pcls[ich] == LF); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle BK, NL and LF explicitly'),
                    CodeLine(contents='        if (pcls[ich] == BK ||pcls[ich] == NL ||  pcls[ich] == LF)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = BK;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle CR explicitly'),
                    CodeLine(contents='        if(pcls[ich] == CR)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = CR;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle spaces explicitly...'),
                    CodeLine(contents=''),
                    CodeLine(contents='    '),
                    Heading(level=2, contents='8 Customization'),
                    Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                    Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                    Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                    Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how to customize the pair table implementation of the line breaking algorithm for these tailorings.'),
                    Heading(level=3, contents='8.1 Types of Tailoring'),
                    Paragraph(contents='There are three principal ways of tailoring the sample pair table implementation of the line breaking algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to permanently overriding some of the rules in Section 6, Line Breaking Algorithm.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions This is a dynamic equivalent of the preceding. Instead of changing the values for the pair intersection directly in the table, they are labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be enabled at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real-world implementation of a pair table-based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. That implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=3, contents='8.2 Examples of Customization'),
                    Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm. Section 7.4, Sample Code, outlines such an approach in which the interface to the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the line breaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersections of ID/ID, AL/ID, and ID/AL are affected. For alphabetic style line breaking, breaks for these cases require space; for ideographic style line breaking, these cases do not require spaces. Therefore, the implementation defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given text.'),
                    Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. In this case the intersections of NU/NU, NU/AL, AL/AL, and AL/NU are affected.'),
                    Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by mapping class CJ to be handled as class ID in rule LB1.'),
                    Paragraph(contents='Example 6. Tailor to prevent line breaks from falling within default grapheme clusters, as defined by by Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. The tailoring can be accomplished by first segmenting the text into grapheme clusters according to the rules defined in UAX #29, and then finding line breaks according to the default line break rules, giving each grapheme cluster the line breaking class of its first code point.'),
                    Paragraph(contents='An example of a grapheme cluster that would be split by the default line break rules is a Zero Width Space followed by a combining mark.'),
                    Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * ( CL | CP ) ? ( PR | PO) ?'),
                    Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                    Paragraph(contents='Regex-Number: Do not break numbers.'),
                    Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                    Formula(contents='( OP | HY ) × NU'),
                    Formula(contents='NU × (NU | SY | IS)'),
                    Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL | CP )'),
                    Formula(contents='NU (NU | SY | IS)* (CL | CP)? × (PO | PR)'),
                    Paragraph(contents='This customized rule uses extended contexts that cannot be represented in a pair table. In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                    Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                    Formula(contents='[^NU] × CL'),
                    Formula(contents='[^NU] × CP'),
                    Formula(contents='× EX'),
                    Formula(contents='[^NU] × IS'),
                    Formula(contents='[^NU] × SY'),
                    Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                    Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                    Heading(level=2, contents='9 Implementation Notes'),
                    Paragraph(contents='This section provides additional notes on implementation issues.'),
                    Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                    Paragraph(contents='To replace rule LB9, terms of the form'),
                    Paragraph(contents='B # A'),
                    Paragraph(contents='B SP* # A'),
                    Paragraph(contents='B #'),
                    Paragraph(contents='B SP* #'),
                    Paragraph(contents='are replaced by terms of the form'),
                    Paragraph(contents='B CM* # A'),
                    Paragraph(contents='B CM* SP* # A'),
                    Paragraph(contents='B CM* #'),
                    Paragraph(contents='B CM* SP* #'),
                    Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                    Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                    Paragraph(contents='Replace LB10 by the following rule:'),
                    Paragraph(contents='× CM'),
                    Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                    Paragraph(contents='(AL | NU) × OP'),
                    Paragraph(contents='add another rule'),
                    Paragraph(contents='CM × OP.'),
                    Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                    Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='As stated in Section 7.9, Combining Marks of [Unicode], combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                    Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                    Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID.'),
                    Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                    Heading(level=2, contents='10 Testing'),
                    Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2, Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                    Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                    Paragraph(contents='Note:The break opportunities produced by an implementation of the rules of Section 6, Line Breaking Algorithm differ in certain cases from those produced by the pair table included in Section 7, Pair Table-Based Implementation. The differences occur with sequences like ZW SP CL. The test data file matches the results expected of a rule based implementation. The inconsistencies between the two will be addressed in the next revision of this document.'),
                    Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                    Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                    Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                    Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                    Paragraph(contents='1. The rules are cast into a more regex-style.'),
                    Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                    Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                    Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                    Paragraph(contents='• 13.01) [^NU] × CL'),
                    Paragraph(contents='• 13.02) × EX'),
                    Paragraph(contents='• ...'),
                    Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                    Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                    Paragraph(contents='Table 4. Numbering of Test Rules'),
                    TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                    TableRow(contents='LB2\ue0000.2\ue000start of text'),
                    TableRow(contents='LB3\ue0000.3\ue000end of text'),
                    TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                    TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                    TableRow(contents='LB31\ue000999\ue000÷ any'),
                    Heading(level=2, contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                    Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                    TableRow(contents='8.0.0\ue0006.2.0\ue0006.1.0\ue0005.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                    TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                    TableRow(contents='LB2\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                    TableRow(contents='LB3\ue0003\ue0003\ue0003\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                    TableRow(contents='LB4\ue0004\ue0004\ue0004\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB5\ue0005\ue0005\ue0005\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB6\ue0006\ue0006\ue0006\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                    TableRow(contents='LB7\ue0007\ue0007\ue0007\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                    TableRow(contents='LB8\ue0008\ue0008\ue0008\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                    TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                    TableRow(contents='LB9\ue0009\ue0009\ue0009\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB10\ue00010\ue00010\ue00010\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                    TableRow(contents='LB11\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12\ue00012\ue00012\ue00012\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12a\ue00012a\ue00012a\ue00012a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB13\ue00013\ue00013\ue00013\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                    TableRow(contents='LB14\ue00014\ue00014\ue00014\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                    TableRow(contents='LB15\ue00015\ue00015\ue00015\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                    TableRow(contents='LB16\ue00016\ue00016\ue00016\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                    TableRow(contents='LB17\ue00017\ue00017\ue00017\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                    TableRow(contents='LB18\ue00018\ue00018\ue00018\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                    TableRow(contents='LB19\ue00019\ue00019\ue00019\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                    TableRow(contents='LB20\ue00020\ue00020\ue00020\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                    TableRow(contents='LB21\ue00021\ue00021\ue00021\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                    TableRow(contents='LB21a\ue00021a\ue00021a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB21b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB22\ue00022\ue00022\ue00022\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                    TableRow(contents='LB23\ue00023\ue00023\ue00023\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                    TableRow(contents='LB24\ue00024\ue00024\ue00024\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='LB25\ue00025\ue00025\ue00025\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                    TableRow(contents='LB26\ue00026\ue00026\ue00026\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB27\ue00027\ue00027\ue00027\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB28\ue00028\ue00028\ue00028\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                    TableRow(contents='LB29\ue00029\ue00029\ue00029\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30\ue00030\ue00030\ue00030\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB31\ue00031\ue00031\ue00031\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                    Heading(level=2, contents='References'),
                    Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintains the text.'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                    Heading(level=2, contents='Modifications'),
                    Paragraph(contents='The following documents the changes introduced by each revision.'),
                    Heading(level=4, contents='Revision 35:'),
                    Paragraph(contents='• Reissued for Unicode 8.0.0.'),
                    Paragraph(contents='• Updated table styles. Minor editing and HTML cleanup throughout. [KW]'),
                    Paragraph(contents='• Added EX × IN to rule 22.'),
                    Paragraph(contents='• Added rule 21b, don’t break between Solidus and Hebrew.'),
                    Paragraph(contents='Revision 34 being a proposed update, only changes between revisions 33 and 35 are noted here.'),
                    Heading(level=4, contents='Revision 33:'),
                    Paragraph(contents='• Reissued for Unicode 7.0.0.'),
                    Heading(level=4, contents='Revision 32:'),
                    Paragraph(contents='• Reissued for Unicode 6.3.0.'),
                    Paragraph(contents='• Update the description of class CM to mention U+3035 VERTICAL KANA REPEAT MARK LOWER HALF.'),
                    Paragraph(contents='• Update the description of class BA to reflect the change of U+3000 IDEOGRAPHIC SPACE to class BA.'),
                    Paragraph(contents='• Clarify descriptions in Section 7.3, Example Pair Table.'),
                    Paragraph(contents='• Remove Section 7.6, Conjoining Jamos pair table implementation, reflecting that Jamos are included directly in the main pair table.'),
                    Paragraph(contents='• Revised Example 6 of Section 8.2, Examples of Customization.'),
                    Paragraph(contents='Revision 31 being a proposed update, only changes between revisions 32 and 30 are noted here.'),
                    Heading(level=4, contents='Revision 30:'),
                    Paragraph(contents='• Reissued for Unicode 6.2.0.'),
                    Paragraph(contents='• Introduce character class RI (Regional Indicator).'),
                    Paragraph(contents='• Introduce rule 30a, do not break between Regional Indicators.'),
                    Paragraph(contents='Revision 29 being a proposed update, only changes between revisions 30 and 28 are noted here.'),
                    Heading(level=4, contents='Revision 28:'),
                    Paragraph(contents='• Reissued for Unicode 6.1.0.'),
                    Paragraph(contents="• Add rule 21a, don't break after Hebrew + hyphen."),
                    Paragraph(contents='• Introduce character class HL (Hebrew Letter).'),
                    Paragraph(contents='• Introduce character class CJ for small kana, and amend rule LB1 to provide default resolution for class CJ.'),
                    Paragraph(contents='• Clarify that the list of GL characters is not comprehensive.'),
                    Paragraph(contents='• Update Example 7 of Section 8.2, Examples of Customization, to reflect the introduction of character class CP.'),
                    Paragraph(contents='Revision 27 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                    Heading(level=4, contents='Revision 26:'),
                    Paragraph(contents='• Reissued for Unicode 6.0.0.'),
                    Paragraph(contents='• In Section 5.1, revised the description of the SHY character.'),
                    Paragraph(contents='• Changed LB8 from "ZW ÷" to "ZW SP* ÷" in accordance with UAX 14 Corrigendum #7, http://www.unicode.org/versions/corrigendum7.html.'),
                    Paragraph(contents='• Changed references to Unicode 5.2 to generic references where appropriate.'),
                    Paragraph(contents='• In Section 3, removed Ideographic Space from the list of spaces that may be compressed or expanded and clarified that the justification of lines is out of scope.'),
                    Paragraph(contents='Revision 25 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                    Heading(level=4, contents='Revision 24:'),
                    Paragraph(contents='• Reissued for Unicode 5.2.0.'),
                    Paragraph(contents='• Added class CP, reintroduced rule LB30, adjusted other rules for class CP.'),
                    Paragraph(contents='• In Section 5.1, clarified that the lists of characters for each property contain representative characters, and are not necessarily complete.'),
                    Paragraph(contents='• Unassigned code points in CJK regions default to class ID.'),
                    Paragraph(contents='• Added Tai Tham, Myanmar Extended-A and Tai Viet blocks to class SA.'),
                    Paragraph(contents='• Brought descriptive names of the character classes into closer alignment with the Unicode Line Break character property values.'),
                    Paragraph(contents='• Small edits for improved clarity, document style.'),
                    Paragraph(contents='Revision 23 being a proposed update, only changes between revisions 22 and 24 are noted here.'),
                    Heading(level=4, contents='Revision 22:'),
                    Paragraph(contents='• Reissued for Version 5.1.0.'),
                    Paragraph(contents='• Added 2E18, INVERTED INTERROBANG, to class OP.'),
                    Paragraph(contents='• Added 2064, INVISIBLE PLUS, to class AL.'),
                    Paragraph(contents='• Added 2E00..2E01, 2E06..2E08, 2E0B to class QU.'),
                    Paragraph(contents='• Removed LB30, to correct regression for U+3002 IDEOGRAPHIC FULL STOP'),
                    Paragraph(contents='• Add Example 9 to Section 8, Customization.'),
                    Paragraph(contents='• Substantial revisions to Section 4, Conformance.'),
                    Paragraph(contents='• Section 5.7, Word Separators, added.'),
                    Paragraph(contents='• Section 10, Testing, added.'),
                    Paragraph(contents='• Renumber rules for consistency: 12a → 12; 12b → 12a'),
                    Paragraph(contents='• Added 02DF, MODIFIER LETTER CROSS ACCENT, to class BB.'),
                    Paragraph(contents='• Added discussion for 202F NARROW NO-BREAK SPACE and 180E MONGOLIAN VOWEL SEPARATOR'),
                    Paragraph(contents='• Corrected typos in LB13 and LB16'),
                    Paragraph(contents='• Added characters introduced with Unicode 5.1 to the lists associated with the line break properties.'),
                    Paragraph(contents='• Added Section 5.2 on the special handling of hyphens. Edited Section 3 for clarity.'),
                    Paragraph(contents='• Improved delineation between normative and informative information.'),
                    Paragraph(contents='• Changed from EX to IS'),
                    Paragraph(contents='• 060C ( ، ) ARABIC COMMA'),
                    Paragraph(contents='• Changed from EX to PO'),
                    Paragraph(contents='• 066A ( ٪ ) ARABIC PERCENT SIGN'),
                    Paragraph(contents='• Changed from AI to OP'),
                    Paragraph(contents='• 00A1 ( ¡ ) INVERTED EXCLAMATION MARK'),
                    Paragraph(contents='• 00BF ( ¿ ) INVERTED QUESTION MARK'),
                    Paragraph(contents='• Changed from BA to EX'),
                    Paragraph(contents='• 1802 ( ᠂ ) MONGOLIAN COMMA'),
                    Paragraph(contents='• 1803 ( ᠃ ) MONGOLIAN FULL STOP'),
                    Paragraph(contents='• 1808 ( ᠈ ) MONGOLIAN MANCHU COMMA'),
                    Paragraph(contents='• 1809 ( ᠉ ) MONGOLIAN MANCHU FULL STOP'),
                    Paragraph(contents='• 2CF9 ( ⳹ ) COPTIC OLD NUBIAN FULL STOP'),
                    Paragraph(contents='• 2CFE ( ⳾ ) COPTIC FULL STOP'),
                    Paragraph(contents='• Changed from BA to AL'),
                    Paragraph(contents='• 1A1E ( ᨞ ) BUGINESE PALLAWA'),
                    Paragraph(contents='• Changed from AL to BB'),
                    Paragraph(contents='• 1FFD ( ´ ) GREEK OXIA'),
                    Paragraph(contents='• Added a note on lack of canonical equivalence for the definition of ambiguous characters.'),
                    Paragraph(contents='• Corrected typos in the sample source code.'),
                    Paragraph(contents='• Split rule LB12 to accommodate Polish and Portuguese hyphenation.'),
                    Paragraph(contents='Revisions 20 and 21 being a proposed update, only changes between revisions 19 and 22 are noted here.'),
                    Heading(level=4, contents='Revision 19:'),
                    Paragraph(contents='• Changed 000B from CM to BK, changed 035C from CM to GL.'),
                    Paragraph(contents='• Changed 17D9 from NS to AL. 203D, 2047..2049 from AL to NS.'),
                    Paragraph(contents='• Corrected listing of NS property to match the data file to remove 17D8 and 17DA.'),
                    Paragraph(contents='• The data file has been corrected to match the listing of the BA property to include 1735 and 1736, also changed 05BE and 103D0 from AL to BA.'),
                    Paragraph(contents='• Changed the brackets 23B4.23B6 to AL.'),
                    Paragraph(contents='• Updated the SA property to make it more generic, includes changing many characters from CM to SA.'),
                    Paragraph(contents='• Reflected new characters'),
                    Paragraph(contents='• Made several text changes for clarifications, including reworded the intro to Section 6.'),
                    Paragraph(contents='• Added Section 9.'),
                    Paragraph(contents='• Restated the conformance clauses and reorganized the algorithm into a tailorable and a non-tailorable part; this affects text in Sections 4, 5, and 6.'),
                    Paragraph(contents='• Removed redundant term PR x HY from rule 18 and rule into new LB24 and LB26 to provide better granularity for tailoring,'),
                    Paragraph(contents='• Moved rule 11b and 13 above rule 8 (new LB13), restating rule 13 (new LB12) to preserve its effect in the new location.'),
                    Paragraph(contents='• Added new rule LB30 to handle words like “person(s)”.'),
                    Paragraph(contents='• Renumbered the rules.'),
                    Paragraph(contents='• Extensive copy-editing as part of Unicode 5.0 publication.'),
                    Paragraph(contents='Revision 18 being a proposed update, only changes between revisions 17 and 19 are noted here.'),
                    Heading(level=4, contents='Revision 17:'),
                    Paragraph(contents='• Significantly revised the line break classes for Tibetan, as well as Mongolian and Arabic Punctuation.'),
                    Paragraph(contents='• Added Section 5.6 on Tibetan and Section 7.7 on handling explicit breaks.'),
                    Paragraph(contents='• Added line break class assignments for Unicode 4.1 characters.'),
                    Paragraph(contents='• Significantly revised the line break class assignments for danda characters and made it consistent across scripts.'),
                    Paragraph(contents='• LB6: Replaced by new rules 18b and 18c, using new classes JL, JV, JT, H2, and H3.'),
                    Paragraph(contents='• LB7a: Deprecated rule 7a because SPACE as base character for standalone combining marks is deprecated.'),
                    Paragraph(contents='• LB7b: Revised 7b and Section 7.5 as well as Table 2 to match the deprecation of rule 7a.'),
                    Paragraph(contents='• LB7b: Clarified that this rule does not apply to SP.'),
                    Paragraph(contents='• LB11a: Added a missing SP * to make the formula match the rule.'),
                    Paragraph(contents='• LB18b: Removed the existing rule 18b because it was redundant.'),
                    Paragraph(contents='• Corrected an erratum on revision 14 by splitting GL from WJ in rule 11b and moving to a new rule 13.'),
                    Paragraph(contents='• Updated the pair table and sample code to match the changes in the rules.'),
                    Paragraph(contents='• Updated the regular expression for numbers.'),
                    Paragraph(contents='• Added several notes on implementation techniques.'),
                    Paragraph(contents='• Moved all suggested tailorings from the rules section to the examples in Section 8.2.'),
                    Paragraph(contents='Revision 16 being a proposed update, only changes between revisions 17 and 15 are noted here.'),
                    Heading(level=4, contents='Revision 15:'),
                    Paragraph(contents='• LB19b: Added new rule 19b.'),
                    Paragraph(contents='• Changed line breaking class: combining double diacritics from CM to GL, 037A and 2126 to match their canonical equivalents, 2140 corrected to AL, Arabic numerical separators from AL to NU, many alphabetic characters that are EAW=Ambiguous from AI to AL to better reflect current practice, remaining circled numbers and letters from AL to AI for consistency.'),
                    Paragraph(contents='• Added a note on the behavior of U+200B and U+3000 when lines are justified.'),
                    Paragraph(contents='• Reconciled the data file and description of line breaking classes in Section 5.'),
                    Paragraph(contents='• Reconciled the rules and pair table implementation of the algorithm.'),
                    Paragraph(contents='• Updated the text of the conformance statement in Section 4.'),
                    Paragraph(contents='• Added Section 5.5 on use of double hyphen.'),
                    Paragraph(contents='• Updated styles and table formatting.'),
                    Paragraph(contents='• Minor edits throughout.'),
                    Heading(level=4, contents='Revision 14:'),
                    Paragraph(contents='• Added new line breaking classes NL and WJ to better support NEL and Word Joiner.'),
                    Paragraph(contents='• Deprecated the use of class SG.'),
                    Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and 7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                    Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                    Paragraph(contents='• Clarified the behavior of SHY and MONGOLIAN TODO SOFT HYPHEN, as well as WJ and ZWNBSP.'),
                    Paragraph(contents='• Added a new Section 5.4 on SOFT HYPHEN and a new Section 7.6 on conjoining jamos.'),
                    Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                    Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                    Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                    Paragraph(contents='• Expanded the introduction in Section 3.'),
                    Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                    Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                    Paragraph(contents='Revision 11 being a proposed update, only changes between revisions 12 and 14 are noted here.'),
                    Heading(level=4, contents='Revision 12:'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added Word joiner to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the data file. Only characters whose LB class differs from those of characters with related General_Category are noted explicitly in this text.'),
                    Paragraph(contents='Revision 11, being a proposed update, only changes between revisions 10 and 12 are noted here.]'),
                    Heading(level=4, contents='Revision 10:'),
                    Paragraph(contents='• Changed header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Heading(level=4, contents='Revision 9:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX.'),
                    Paragraph(contents='• LB7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode4.0].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair table entry PR % ID'),
                    Paragraph(contents='• Reworked Section 7.5.'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull).'),
                    Heading(level=4, contents='Revision 8:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to Table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX because the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                    Heading(level=4, contents='Revision 7:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Heading(level=4, contents='Revision 6:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='No change history is available for earlier revisions.'),
                    Paragraph(contents='Copyright © 1998–2015 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                    Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(9, 0, 0): [Heading(level=2, contents='Unicode® Standard Annex #14'),
                    Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                    TableRow(contents='Version\ue000Unicode 9.0.0'),
                    TableRow(contents='Editors\ue000Andy Heninger (andy.heninger@gmail.com)'),
                    TableRow(contents='Date\ue0002016-06-01'),
                    TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-37.html'),
                    TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-35.html'),
                    TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                    TableRow(contents='Latest Proposed Update\ue000http://www.unicode.org/reports/tr14/proposed.html'),
                    TableRow(contents='Revision\ue00037'),
                    Heading(level=4, contents='Summary'),
                    Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display. A model implementation using pair tables is also provided.'),
                    Heading(level=4, contents='Status'),
                    Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                    Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                    Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                    Heading(level=4, contents='Contents'),
                    Paragraph(contents='1 Overview and Scope'),
                    Paragraph(contents='2 Definitions'),
                    Paragraph(contents='3 Introduction'),
                    Paragraph(contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='4 Conformance'),
                    Paragraph(contents='4.1 Conformance Requirements'),
                    Paragraph(contents='5 Line Breaking Properties'),
                    Paragraph(contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='5.2 Dictionary Usage'),
                    Paragraph(contents='5.3 Use of Hyphen'),
                    Paragraph(contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='5.7 Word Separator Characters'),
                    Paragraph(contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='7.1 Minimal Table'),
                    Paragraph(contents='7.2 Extended Context'),
                    Paragraph(contents='7.3 Example Pair Table'),
                    Paragraph(contents='7.4 Sample Code'),
                    Paragraph(contents='7.5 Combining Marks'),
                    Paragraph(contents='7.6 Explicit Breaks'),
                    Paragraph(contents='8 Customization'),
                    Paragraph(contents='8.1 Types of Tailoring'),
                    Paragraph(contents='8.2 Examples of Customization'),
                    Paragraph(contents='9 Implementation Notes'),
                    Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='10 Testing'),
                    Paragraph(contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='References'),
                    Paragraph(contents='Acknowledgments'),
                    Paragraph(contents='Modifications'),
                    Heading(level=2, contents='1 Overview and Scope'),
                    Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                    Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                    Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                    Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Three main sections follow:'),
                    Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                    Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                    Paragraph(contents='• Section 7, Pair Table-Based Implementation, describes an efficient pair table-based implementation of the algorithm.'),
                    Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                    Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                    Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                    Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                    Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                    Heading(level=2, contents='2 Definitions'),
                    Paragraph(contents='The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard.'),
                    Paragraph(contents='All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard [Unicode].'),
                    Paragraph(contents='LD1. Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                    Paragraph(contents='LD2. Line Break: The position in the text where one line ends and the next one starts.'),
                    Paragraph(contents='LD3. Line Break Opportunity: A place where a line is allowed to end.'),
                    Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                    Paragraph(contents='LD4. Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                    Paragraph(contents='LD5. Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                    Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                    Paragraph(contents='LD6. Line Breaking Class: A class of characters with the same line breaking property value.'),
                    Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                    Paragraph(contents='LD7. Mandatory Break: A line must break following a character that has the mandatory break property.'),
                    Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                    Paragraph(contents='LD8. Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                    Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space. In the pair table, the optional space characters are not shown.'),
                    Paragraph(contents='LD9. Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                    Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                    Paragraph(contents='• An indirect break is indicated in the pair table in Table 2 as B % A, where B is the character class of the character before and A is the character class of the character after the break. Even though space characters are not shown in the pair table, an indirect break can occur only if one or more spaces follow B. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                    Paragraph(contents='LD10. Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                    Paragraph(contents='• A prohibited break is indicated in the pair table in Table 2 as B ^ A, where B is the character class of the character before and A is the character class of the character after the break, and the optional space characters are not shown. In the notation of the rules in Section 6, Line Breaking Algorithm, this would be expressed as a rule of the form: B SP* × A.'),
                    Paragraph(contents='LD11. Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                    Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                    Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                    Paragraph(contents='Table 1. Line Breaking Classes'),
                    TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                    TableRow(contents='Non-tailorable Line Breaking Classes'),
                    TableRow(contents='BK\ue000Mandatory Break\ue000NL, PS\ue000Cause a line break (after)'),
                    TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                    TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                    TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                    TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                    TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                    TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                    TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                    TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                    TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                    TableRow(contents='ZWJ\ue000Zero Width Joiner\ue000Zero Width Joiner\ue000Prohibit line breaks within joiner sequences'),
                    TableRow(contents='Break Opportunities'),
                    TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                    TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                    TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                    TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                    TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                    TableRow(contents='Characters Prohibiting Certain Breaks'),
                    TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                    TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                    TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                    TableRow(contents='NS\ue000Nonstarter\ue000“‼”, “‽”, “⁇”, “⁉”, etc.\ue000Allow only indirect line breaks before'),
                    TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                    TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                    TableRow(contents='Numeric Context'),
                    TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                    TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                    TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                    TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                    TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                    TableRow(contents='Other Characters'),
                    TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                    TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                    TableRow(contents='CJ\ue000Conditional Japanese Starter\ue000Small kana\ue000Treat as NS or ID for strict or normal breaking.'),
                    TableRow(contents='EB\ue000Emoji Base\ue000All emoji allowing modifiers\ue000Do not break from following Emoji Modifier'),
                    TableRow(contents='EM\ue000Emoji Modifier\ue000Skin tone modifiers\ue000Do not break from preceding Emoji Base'),
                    TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                    TableRow(contents='HL\ue000Hebrew Letter\ue000Hebrew\ue000Do not break around a following hyphen; otherwise act as Alphabetic'),
                    TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                    TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                    TableRow(contents='RI\ue000Regional Indicator\ue000REGIONAL INDICATOR SYMBOL LETTER A .. Z\ue000Keep pairs together. For pairs, break before and after other classes'),
                    TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                    TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                    Heading(level=2, contents='3 Introduction'),
                    Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                    Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                    Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                    Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                    Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                    Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                    Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                    Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                    Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                    Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                    Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                    Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                    Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                    Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                    Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                    Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                    Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [UAX9]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                    Heading(level=2, contents='4 Conformance'),
                    Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                    Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                    Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                    Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                    Heading(level=3, contents='4.1 Conformance Requirements'),
                    Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                    Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                    Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                    Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                    Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                    Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                    Heading(level=2, contents='5 Line Breaking Properties'),
                    Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                    Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                    Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into two algorithms defined in Section 6, Line Breaking Algorithm, and Section 7, Pair Table-Based Implementation. These sections describe workable default line breaking methods. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences.'),
                    Heading(level=4, contents='Data File'),
                    Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a tab-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                    Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                    Heading(level=4, contents='Future Updates'),
                    Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                    Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                    Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                    TableRow(contents='Label\ue000Meaning for the Class'),
                    TableRow(contents='(A)\ue000It allows a break opportunity after in specified contexts.'),
                    TableRow(contents='(XA)\ue000It prevents a break opportunity after in specified contexts.'),
                    TableRow(contents='(B)\ue000It allows a break opportunity before in specified contexts.'),
                    TableRow(contents='(XB)\ue000It prevents a break opportunity before in specified contexts.'),
                    TableRow(contents='(P)\ue000It allows a break opportunity for a pair of same characters.'),
                    TableRow(contents='(XP)\ue000It prevents a break opportunity for a pair of same characters.'),
                    Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                    Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                    Paragraph(contents='Some characters that ordinarily act like alphabetic characters are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                    Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [UAX11].'),
                    Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                    Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                    Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                    TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                    TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                    Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                    Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                    Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                    Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                    Paragraph(contents='This class contains alphabetic or symbolic characters not explicitly assigned to another line breaking class. These are primarily characters of the following categories:'),
                    TableRow(contents='Category\ue000General_Category Values'),
                    TableRow(contents='Alphabetic\ue000Lu, Ll, Lt, Lm, and Lo'),
                    TableRow(contents='Symbols\ue000Sm, Sk, and So'),
                    TableRow(contents='Non-decimal Numbers\ue000Nl and No'),
                    TableRow(contents='Punctuation\ue000Pc, Pd, and Po'),
                    Paragraph(contents='Line break class AL also contains several format characters, including:'),
                    TableRow(contents='0600..0604\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAMVAT'),
                    TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                    TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                    TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                    TableRow(contents='110BD\ue000KAITHI NUMBER SIGN'),
                    Paragraph(contents='These format characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                    Paragraph(contents='Major exceptions to the general pattern of alphabetic and symbolic characters having line break class AL include:'),
                    Paragraph(contents='HL for Hebrew letters AI or ID, based on the East Asian Width property of the character ID for certain pictographic symbols CJ for small hiragana and katakana SA for complex context scripts JL, JV, JT, H2 or H3 for Hangul characters'),
                    Heading(level=3, contents='BA: Break After (A)'),
                    Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                    Heading(level=4, contents='Breaking Spaces'),
                    Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                    TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                    TableRow(contents='2000\ue000EN QUAD'),
                    TableRow(contents='2001\ue000EM QUAD'),
                    TableRow(contents='2002\ue000EN SPACE'),
                    TableRow(contents='2003\ue000EM SPACE'),
                    TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                    TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                    TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                    TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                    TableRow(contents='2009\ue000THIN SPACE'),
                    TableRow(contents='200A\ue000HAIR SPACE'),
                    TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                    TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                    Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                    Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                    Paragraph(contents='For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                    Heading(level=4, contents='Tabs'),
                    TableRow(contents='0009\ue000TAB'),
                    Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                    Heading(level=4, contents='Conditional Hyphens'),
                    TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                    Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=4, contents='Breaking Hyphens'),
                    Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                    TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                    TableRow(contents='2010\ue000HYPHEN'),
                    TableRow(contents='2012\ue000FIGURE DASH'),
                    TableRow(contents='2013\ue000EN DASH'),
                    Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Visible Word Dividers'),
                    Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                    TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                    TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                    TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                    TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                    TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                    Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                    TableRow(contents='2027\ue000HYPHENATION POINT'),
                    Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                    TableRow(contents='007C\ue000VERTICAL LINE'),
                    Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                    Heading(level=4, contents='Historic Word Separators'),
                    Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                    Paragraph(contents='Examples of Historic Word Separators include:'),
                    TableRow(contents='16EB\ue000RUNIC SINGLE DOT PUNCTUATION'),
                    TableRow(contents='16EC\ue000RUNIC MULTIPLE DOT PUNCTUATION'),
                    TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                    TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                    TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                    TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                    TableRow(contents='205B\ue000FOUR DOT MARK'),
                    TableRow(contents='205D\ue000TRICOLON'),
                    TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                    TableRow(contents='2E19\ue000PALM BRANCH'),
                    TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                    TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                    TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                    TableRow(contents='2E2D\ue000FIVE DOT PUNCTUATION'),
                    TableRow(contents='2E30\ue000RING POINT'),
                    TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                    TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                    TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                    TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                    TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                    TableRow(contents='1091F\ue000PHOENICIAN WORD DIVIDER'),
                    TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                    Heading(level=4, contents='Dandas'),
                    Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                    Paragraph(contents='Examples of dandas include:'),
                    TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                    TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                    TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                    TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                    TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                    TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                    TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                    TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                    TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                    TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                    TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                    TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                    TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                    TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                    TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                    TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                    TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                    TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                    TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                    Heading(level=4, contents='Tibetan'),
                    TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                    TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                    TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                    TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                    TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                    TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                    Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Other Terminating Punctuation'),
                    Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                    TableRow(contents='1804\ue000MONGOLIAN COLON'),
                    TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                    TableRow(contents='1B5A\ue000BALINESE PANTI'),
                    TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                    TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                    TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                    TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                    TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                    TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                    TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                    TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                    TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                    TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                    TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                    TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                    TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                    TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                    TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                    TableRow(contents='2E17\ue000OBLIQUE DOUBLE HYPHEN'),
                    TableRow(contents='A60D\ue000VAI COMMA'),
                    TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                    TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                    TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                    TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                    TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                    TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                    TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                    TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                    TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                    Heading(level=3, contents='BB: Break Before (B)'),
                    Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                    Paragraph(contents='Examples of BB characters are described in the following sections.'),
                    Heading(level=4, contents='Dictionary Use'),
                    TableRow(contents='00B4\ue000ACUTE ACCENT'),
                    TableRow(contents='1FFD\ue000GREEK OXIA'),
                    Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                    TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                    Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                    TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                    TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                    Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                    Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                    Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                    TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                    TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                    TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                    TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                    TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                    TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                    TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                    TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                    TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                    TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                    TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                    TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                    TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                    Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    Heading(level=4, contents='Mongolian'),
                    TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                    Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                    Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                    TableRow(contents='2014\ue000EM DASH'),
                    Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                    Paragraph(contents='Some languages, including Spanish, use EM DASH to set off a parenthetical, and the surrounding dashes should not be broken from the contained text. In this usage there is space on the side where it can be broken. This does not conflict with symmetrical usages, either with spaces on both sides of the em-dash or with no spaces.'),
                    Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                    Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                    TableRow(contents='000C\ue000FORM FEED (FF)'),
                    TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                    Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                    TableRow(contents='2028\ue000LINE SEPARATOR (LS)'),
                    Paragraph(contents='The text after the LINE SEPARATOR starts at the beginning of the line. This is similar to HTML <BR>.'),
                    TableRow(contents='2029\ue000PARAGRAPH SEPARATOR (PS)'),
                    Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LS, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                    Heading(level=4, contents='Newline Function (NLF)'),
                    Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                    Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                    Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                    Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                    TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                    Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                    Heading(level=3, contents='CJ: Conditional Japanese Starter'),
                    Paragraph(contents='This character class contains Japanese small hiragana and katakana. Characters of this class may be treated as either NS or ID.'),
                    Paragraph(contents='CSS Text Level 3 (which supports Japanese line layout) defines three distinct values for its line-break behavior:'),
                    Paragraph(contents='• strict, typically used for long lines'),
                    Paragraph(contents='• normal (CSS default), the behavior typically used for books and documents'),
                    Paragraph(contents='• loose, typically used for short lines such as in newspapers'),
                    Paragraph(contents='These have different sets of “kinsoku” characters which cannot be at the beginning or end of a line; strict has the largest set, while loose has the smallest. The motivation for the smaller number of kinsoku characters is to avoid triggering justification that puts characters off the grid position.'),
                    Paragraph(contents='Treating characters of class CJ as class NS will give CSS strict line breaking; treating them as class ID will give CSS normal breaking.'),
                    Paragraph(contents='The CJ line break class includes'),
                    TableRow(contents='3041, 3043, 3045, etc.\ue000Small hiragana'),
                    TableRow(contents='30A1, 30A3, 30A5, etc.\ue000Small katakana'),
                    TableRow(contents='30FC\ue000KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF67..FF70\ue000Halfwidth variants'),
                    Heading(level=3, contents='CL: Close Punctuation (XB)'),
                    Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                    Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                    Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                    TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                    TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FE50\ue000SMALL COMMA'),
                    TableRow(contents='FE52\ue000SMALL FULL STOP'),
                    TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                    TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                    TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                    TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                    Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                    Heading(level=4, contents='Combining Characters'),
                    Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                    Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 NO-BREAK SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                    Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                    Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                    Heading(level=4, contents='Control and Formatting Characters'),
                    Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                    Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                    Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                    Paragraph(contents='The CM class also includes U+3035 VERTICAL KANA REPEAT MARK LOWER HALF. This character is normally preceded by either U+3033 VERTICAL KANA REPEAT MARK UPPER HALF or U+3034 VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF, and should not be separated from them.'),
                    Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                    Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                    TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                    TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                    Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                    TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                    Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                    Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                    Heading(level=3, contents='EB: Emoji Base (B/A)'),
                    Paragraph(contents='This class includes characters whose appearance can be modified by a subsequent emoji modifier in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier_Base property as defined in Section 1.4.4 Emoji Modifiers of [UTR51].'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='1F466\ue000BOY'),
                    TableRow(contents='1F478\ue000PRINCESS'),
                    TableRow(contents='1F6B4\ue000BICYCLIST'),
                    Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b. In other contexts, characters of class EB behave similarly to ideographs of class ID, with break opportunities before and after.'),
                    Heading(level=3, contents='EM: Emoji Modifier (A)'),
                    Paragraph(contents='This class includes characters that can be used to modify the appearance of a preceding emoji in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier property as defined in Section 1.4.4 Emoji Modifiers of [UTR51].'),
                    Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b.'),
                    Paragraph(contents='Emoji modifiers include:'),
                    TableRow(contents='1F3FB..1F3FF\ue000EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6'),
                    Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                    Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                    TableRow(contents='0021\ue000EXCLAMATION MARK'),
                    TableRow(contents='003F\ue000QUESTION MARK'),
                    TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                    TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                    TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                    TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                    TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                    TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                    TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                    TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                    TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                    Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following are examples of characters of line break class GL:'),
                    TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                    TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                    TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                    Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE. NARROW NO-BREAK SPACE is used in Mongolian. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in Section 13.4, Mongolian, of [Unicode].'),
                    Paragraph(contents='NARROW NO-BREAK SPACE is a narrow version of NO-BREAK SPACE, which has exactly the same line breaking behavior, but with a narrow display width. It is regularly used in Mongolian in certain grammatical contexts (before a particle), where it also influences the shaping of the glyphs for the particle. In Mongolian text, the NARROW NO-BREAK SPACE is typically displayed with one third the width of a normal space character.'),
                    Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                    Paragraph(contents='The MONGOLIAN VOWEL SEPARATOR is equivalent to a NARROW NO-BREAK SPACE in its line breaking behavior, but has different effects in controlling the shaping of its preceding and following characters. It constitutes a word-internal space and is typically displayed with half the width of a NARROW NO-BREAK SPACE.'),
                    TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                    Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                    TableRow(contents='2007\ue000FIGURE SPACE'),
                    Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                    TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                    Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                    TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                    TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                    TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                    Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                    TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                    Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                    Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                    Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                    Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                    Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                    Heading(level=3, contents='HY: Hyphen (XA)'),
                    TableRow(contents='002D\ue000HYPHEN-MINUS'),
                    Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                    Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                    Heading(level=3, contents='ID: Ideographic (B/A)'),
                    Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                    TableRow(contents='2E80..2FFF\ue000CJK, Kangxi Radicals, Ideographic Description Symbols'),
                    TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                    TableRow(contents='30A0..30FF\ue000Katakana (except small characters)'),
                    TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                    TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                    TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                    TableRow(contents='A000..A48F\ue000Yi Syllables'),
                    TableRow(contents='A490..A4CF\ue000Yi Radicals'),
                    TableRow(contents='FE62..FE66\ue000SMALL PLUS SIGN..SMALL EQUALS SIGN'),
                    TableRow(contents='FF01..FF5A\ue000Fullwidth Latin letters and digits'),
                    Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                    Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                    Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                    Paragraph(contents='The CJK blocks and regions in which unassigned characters default to line break class ID are:'),
                    TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                    TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                    TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                    TableRow(contents='20000..2A6DF\ue000CJK Unified Ideographs Extension B'),
                    TableRow(contents='2A700..2B73F\ue000CJK Unified Ideographs Extension C'),
                    TableRow(contents='2B740..2B81F\ue000CJK Unified Ideographs Extension D'),
                    TableRow(contents='2B820..2CEAF\ue000CJK Unified Ideographs Extension E'),
                    TableRow(contents='2F800..2FA1F\ue000CJK Compatibility Ideographs Supplement'),
                    TableRow(contents='20000..2FFFD\ue000SIP (Plane 2) outside of blocks'),
                    TableRow(contents='30000..3FFFD\ue000TIP (Plane 3) outside of blocks'),
                    Heading(level=4, contents='Korean'),
                    Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                    TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                    Heading(level=4, contents='Symbols'),
                    Paragraph(contents='Certain pictographic symbols of General Category So are also included in this line break class.'),
                    Heading(level=3, contents='HL: Hebrew Letter (XB)'),
                    Paragraph(contents='This class includes all Hebrew letters.'),
                    Paragraph(contents='When a Hebrew letter is followed by a hyphen, there is no break on either side of the hyphen. In this context a hyphen is any character of class HY or class BA. In other respects, Hebrew letters behave the same as characters of class AL.'),
                    Paragraph(contents='Included in this class are all characters of General Category Letter that have Script=Hebrew.'),
                    Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                    Heading(level=4, contents='Leaders'),
                    Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='2024\ue000ONE DOT LEADER'),
                    TableRow(contents='2025\ue000TWO DOT LEADER'),
                    TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                    TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                    Paragraph(contents='HORIZONTAL ELLIPSIS can be used as a three-dot leader.'),
                    Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                    Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                    Paragraph(contents='Examples include:'),
                    TableRow(contents='002C\ue000COMMA'),
                    TableRow(contents='002E\ue000FULL STOP'),
                    TableRow(contents='003A\ue000COLON'),
                    TableRow(contents='003B\ue000SEMICOLON'),
                    TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                    TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                    TableRow(contents='060C\ue000ARABIC COMMA'),
                    TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                    TableRow(contents='07F8\ue000NKO COMMA'),
                    TableRow(contents='2044\ue000FRACTION SLASH'),
                    TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                    TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                    TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                    Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                    Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                    Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                    Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                    Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                    Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                    Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                    Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                    Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                    Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                    TableRow(contents='000A\ue000LINE FEED (LF)'),
                    Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                    Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                    TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                    Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                    Heading(level=3, contents='NS: Nonstarters (XB)'),
                    Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include:'),
                    TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                    TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                    TableRow(contents='203D\ue000INTERROBANG'),
                    TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                    TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                    TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                    TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='301C\ue000WAVE DASH'),
                    TableRow(contents='303C\ue000MASU MARK'),
                    TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                    TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                    TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                    TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                    TableRow(contents='30FD..30FE\ue000KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK'),
                    TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                    TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                    TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                    TableRow(contents='FF70\ue000HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                    TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                    Paragraph(contents='Note: Optionally, the NS restriction may be relaxed by tailoring, with some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles. Alternatively, line breaking can be tightened by moving characters that are ID into NS.'),
                    Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                    Heading(level=3, contents='NU: Numeric (XP)'),
                    Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                    Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                    TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                    TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                    Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                    Heading(level=3, contents='OP: Open Punctuation (XA)'),
                    Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                    TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                    TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                    TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                    Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                    Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                    Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                    Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                    Paragraph(contents='Examples of Postfix characters include'),
                    TableRow(contents='0025\ue000PERCENT SIGN'),
                    TableRow(contents='00A2\ue000CENT SIGN'),
                    TableRow(contents='00B0\ue000DEGREE SIGN'),
                    TableRow(contents='060B\ue000AFGHANI SIGN'),
                    TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                    TableRow(contents='2030\ue000PER MILLE SIGN'),
                    TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                    TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                    TableRow(contents='20A7\ue000PESETA SIGN'),
                    TableRow(contents='2103\ue000DEGREE CELSIUS'),
                    TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                    TableRow(contents='FDFC\ue000RIAL SIGN'),
                    TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                    TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                    TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                    Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                    Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                    Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                    Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                    Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                    TableRow(contents='002B\ue000PLUS SIGN'),
                    TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                    TableRow(contents='00B1\ue000PLUS-MINUS'),
                    TableRow(contents='2116\ue000NUMERO SIGN'),
                    TableRow(contents='2212\ue000MINUS SIGN'),
                    TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                    Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                    Heading(level=3, contents='QU: Quotation (XB/XA)'),
                    Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                    Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                    Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                    TableRow(contents='0022\ue000QUOTATION MARK'),
                    TableRow(contents='0027\ue000APOSTROPHE'),
                    TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                    TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                    TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                    TableRow(contents='2E0B\ue000RAISED SQUARE'),
                    Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                    Heading(level=3, contents='RI: Regional Indicator (B/A/XP)'),
                    Paragraph(contents='The Regional Indicator characters are'),
                    TableRow(contents='1F1E6..1F1FF\ue000REGIONAL INDICATOR SYMBOL LETTER A .. REGIONAL INDICATOR SYMBOL LETTER Z'),
                    Paragraph(contents='Pairs of RI characters are used to represent a two-letter ISO 3166 region code.'),
                    Paragraph(contents='Runs of adjacent RI characters are grouped into pairs, beginnning at the start of the run. No break opportunity occurs within a pair; breaks can occur between adjacent pairs. When RI characters are adjacent to characters of other classes, breaks can occur before and after, except where forbidden by other rules.'),
                    Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                    Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                    Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                    Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                    TableRow(contents='0E00..0E7F\ue000Thai'),
                    TableRow(contents='0E80..0EFF\ue000Lao'),
                    TableRow(contents='1000..109F\ue000Myanmar'),
                    TableRow(contents='1780..17FF\ue000Khmer'),
                    TableRow(contents='1950..197F\ue000Tai Le'),
                    TableRow(contents='1980..19DF\ue000New Tai Lue'),
                    TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                    TableRow(contents='A9E0..A9FF\ue000Myanmar Extended-B'),
                    TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                    TableRow(contents='AA80..AADF\ue000Tai Viet'),
                    TableRow(contents='11700..1173F\ue000Ahom'),
                    Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                    Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                    Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                    Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                    Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                    TableRow(contents='0020\ue000SPACE (SP)'),
                    Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                    Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                    Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                    TableRow(contents='002F\ue000SOLIDUS'),
                    Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                    Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                    Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                    Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                    TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                    TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                    Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                    Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                    Heading(level=3, contents='XX: Unknown (XP)'),
                    Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                    Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                    Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                    Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                    Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                    Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm, and the pair table in Section 7, Pair Table-Based Implementation, assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                    Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                    Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                    TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                    Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                    Heading(level=3, contents='ZWJ: Zero Width Joiner (XA/XB) (Non-tailorable)'),
                    TableRow(contents='200D\ue000ZERO WIDTH JOINER (ZWJ)'),
                    Paragraph(contents='This character has various uses, including as a connector in emoji zwj sequences and as a joiner in complex scripts.'),
                    Paragraph(contents='Emoji zwj sequences are defined by ED-16, emoji zwj sequence, in [UTR51] and implemented for line breaking by rule LB8a. In other respects, the line breaking behavior of ZWJ is that of a combining character of class CM.'),
                    Heading(level=3, contents='5.2 Dictionary Usage'),
                    Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                    Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                    Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                    Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                    Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                    Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                    Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                    Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                    Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                    Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                    Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                    Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                    Heading(level=3, contents='5.3 Use of Hyphen'),
                    Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                    Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                    Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                    Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                    Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                    Paragraph(contents='dispara- te'),
                    Paragraph(contents='and the latter as'),
                    Paragraph(contents='dispara- -te.'),
                    Paragraph(contents='A recommended practice is to type <SHY, NBHY> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                    Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                    Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                    Paragraph(contents='• Simply inserting a hyphen glyph'),
                    Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                    Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                    Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                    Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                    Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                    Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                    Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                    Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                    Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                    Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                    Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                    Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [UAX9] and Section 9.2, Arabic, of [Unicode].'),
                    Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                    Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                    Paragraph(contents='The sequence <SHY, NBHY> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                    Heading(level=3, contents='5.5 Use of Double Hyphen'),
                    Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                    Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                    Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                    Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                    Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                    Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                    Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                    Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                    Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                    Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                    Heading(level=3, contents='5.7 Word Separator Characters'),
                    Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                    Paragraph(contents='1. suppress the visible word separator'),
                    Paragraph(contents='The:quick:brown fox:jumped.'),
                    Paragraph(contents='2. break before the visible word separator'),
                    Paragraph(contents='The:quick:brown :fox:jumped.'),
                    Paragraph(contents='3. break after the visible word separator'),
                    Paragraph(contents='The:quick:brown: fox:jumped.'),
                    Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                    Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                    Heading(level=2, contents='6 Line Breaking Algorithm'),
                    Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                    Paragraph(contents='A slightly simplified implementation of such an algorithm can be devised that uses a two-dimensional table to resolve break opportunities between pairs or characters. It is described in Section 7, Pair Table-Based Implementation.'),
                    Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1, Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                    Paragraph(contents='! Mandatory break at the indicated position'),
                    Paragraph(contents='× No break allowed at the indicated position'),
                    Paragraph(contents='÷ Break allowed at the indicated position'),
                    Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                    Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                    Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                    Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                    Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                    Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, ZW and ZWJ define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                    Heading(level=4, contents='Resolve line breaking classes:'),
                    Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, CJ, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                    Paragraph(contents='In the absence of such criteria all characters with a specific combination of original class and General_Category property value are resolved as follows:'),
                    TableRow(contents='Resolved\ue000Original\ue000General_Category'),
                    TableRow(contents='AL\ue000AI, SG, XX\ue000Any'),
                    TableRow(contents='CM\ue000SA\ue000Only Mn or Mc'),
                    TableRow(contents='AL\ue000SA\ue000Any except Mn and Mc'),
                    TableRow(contents='NS\ue000CJ\ue000Any'),
                    Heading(level=4, contents='Start and end of text:'),
                    Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                    Rule(contents='LB2 Never break at the start of text.'),
                    Formula(contents='sot ×'),
                    Rule(contents='LB3 Always break at the end of text.'),
                    Formula(contents='! eot'),
                    Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                    Heading(level=4, contents='Mandatory breaks:'),
                    Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                    Rule(contents='LB4 Always break after hard line breaks.'),
                    Formula(contents='BK !'),
                    Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                    Formula(contents='CR × LF'),
                    Formula(contents='CR !'),
                    Formula(contents='LF !'),
                    Formula(contents='NL !'),
                    Rule(contents='LB6 Do not break before hard line breaks.'),
                    Formula(contents='× ( BK | CR | LF | NL )'),
                    Heading(level=4, contents='Explicit breaks and non-breaks:'),
                    Rule(contents='LB7 Do not break before spaces or zero width space.'),
                    Formula(contents='× SP'),
                    Formula(contents='× ZW'),
                    Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                    Formula(contents='ZW SP* ÷'),
                    Rule(contents='LB8a Do not break between a zero width joiner and an ideograph, emoji base or emoji modifier.'),
                    Formula(contents='ZWJ × (ID | EB | EM)'),
                    Paragraph(contents='This rule prevents breaks within most emoji zwj sequences, as defined by ED-16. emoji zwj sequence in [UTR51].'),
                    Paragraph(contents='Further customization of this rule may be necessary for best behavior of emoji zwj sequences, using data planned for inclusion in CLDR Version 30.'),
                    Heading(level=4, contents='Combining marks:'),
                    Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                    Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules. Treat ZWJ as if it were CM.'),
                    Formula(contents='Treat X (CM | ZWJ)* as if it were X.'),
                    Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                    Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                    Rule(contents='LB10 Treat any remaining combining mark or ZWJ as AL.'),
                    Formula(contents='Treat any remaining CM or ZWJ as it if were AL.'),
                    Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                    Heading(level=4, contents='Word joiner:'),
                    Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                    Formula(contents='× WJ'),
                    Formula(contents='WJ ×'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12 Do not break after NBSP and related characters.'),
                    Formula(contents='GL ×'),
                    Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                    Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                    Heading(level=4, contents='Non-breaking characters:'),
                    Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                    Formula(contents='[^SP BA HY] × GL'),
                    Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                    Heading(level=4, contents='Opening and closing:'),
                    Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                    Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                    Formula(contents='× CL'),
                    Formula(contents='× CP'),
                    Formula(contents='× EX'),
                    Formula(contents='× IS'),
                    Formula(contents='× SY'),
                    Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                    Formula(contents='OP SP* ×'),
                    Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                    Formula(contents='QU SP* × OP'),
                    Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                    Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                    Formula(contents='(CL | CP) SP* × NS'),
                    Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                    Formula(contents='B2 SP* × B2'),
                    Heading(level=4, contents='Spaces:'),
                    Rule(contents='LB18 Break after spaces.'),
                    Formula(contents='SP ÷'),
                    Heading(level=4, contents='Special case rules:'),
                    Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                    Formula(contents='× QU'),
                    Formula(contents='QU ×'),
                    Rule(contents='LB20 Break before and after unresolved CB.'),
                    Formula(contents='÷ CB'),
                    Formula(contents='CB ÷'),
                    Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                    Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                    Formula(contents='× BA'),
                    Formula(contents='× HY'),
                    Formula(contents='× NS'),
                    Formula(contents='BB ×'),
                    Rule(contents="LB21a Don't break after Hebrew + Hyphen."),
                    Formula(contents='HL (HY | BA) ×'),
                    Rule(contents='LB21b Don’t break between Solidus and Hebrew letters.'),
                    Formula(contents='SY × HL'),
                    Rule(contents='LB22 Do not break between two ellipses, or between letters, numbers or exclamations and ellipsis.'),
                    Formula(contents='(AL | HL) × IN'),
                    Formula(contents='EX × IN'),
                    Formula(contents='(ID | EB | EM) × IN'),
                    Formula(contents='IN × IN'),
                    Formula(contents='NU × IN'),
                    Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                    Heading(level=4, contents='Numbers:'),
                    Paragraph(contents='Do not break alphanumerics.'),
                    Rule(contents='LB23 Do not break between digits and letters.'),
                    Formula(contents='(AL | HL) × NU'),
                    Formula(contents='NU × (AL | HL)'),
                    Rule(contents='LB23a Do not break between numeric prefixes and ideographs, or between ideographs and numeric postfixes.'),
                    Formula(contents='PR × (ID | EB | EM)'),
                    Formula(contents='(ID | EB | EM) × PO'),
                    Rule(contents='LB24 Do not break between numeric prefix/postfix and letters, or between letters and prefix/postfix.'),
                    Formula(contents='(PR | PO) × (AL | HL)'),
                    Formula(contents='(AL | HL) × (PR | PO)'),
                    Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                    Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                    Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                    Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                    Formula(contents='CL × PO'),
                    Formula(contents='CP × PO'),
                    Formula(contents='CL × PR'),
                    Formula(contents='CP × PR'),
                    Formula(contents='NU × PO'),
                    Formula(contents='NU × PR'),
                    Formula(contents='PO × OP'),
                    Formula(contents='PO × NU'),
                    Formula(contents='PR × OP'),
                    Formula(contents='PR × NU'),
                    Formula(contents='HY × NU'),
                    Formula(contents='IS × NU'),
                    Formula(contents='NU × NU'),
                    Formula(contents='SY × NU'),
                    Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                    Heading(level=4, contents='Korean syllable blocks'),
                    Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                    Rule(contents='LB26 Do not break a Korean syllable.'),
                    Formula(contents='JL × (JL | JV | H2 | H3)'),
                    Formula(contents='(JV | H2) × (JV | JT)'),
                    Formula(contents='(JT | H3) × JT'),
                    Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                    Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                    Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                    Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                    Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                    Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                    Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                    Formula(contents='(AL | HL) × (AL | HL)'),
                    Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                    Formula(contents='IS × (AL | HL)'),
                    Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                    Formula(contents='(AL | HL | NU) × OP'),
                    Formula(contents='CP × (AL | HL | NU)'),
                    Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                    Rule(contents='LB30a Break between two regional indicator symbols if and only if there are an even number of regional indicators preceding the position of the break.'),
                    Formula(contents='sot (RI RI)* RI × RI'),
                    Formula(contents='[^RI] (RI RI)* RI × RI'),
                    Rule(contents='LB30b Do not break between an emoji base and an emoji modifier.'),
                    Formula(contents='EB × EM'),
                    Rule(contents='LB31 Break everywhere else.'),
                    Formula(contents='ALL ÷'),
                    Formula(contents='÷ ALL'),
                    Heading(level=2, contents='7 Pair Table-Based Implementation'),
                    Paragraph(contents='A two-dimensional table can be used to resolve break opportunities between pairs of characters. This section defines such a table. The rows of the table are labeled with the possible values of the line breaking property of the leading character in the pair. The columns are labeled with the line breaking class for the following character of the pair. Each intersection is labeled with the resulting line break opportunity.'),
                    Paragraph(contents='The Japanese standard JIS X 4051-1995 [JIS] provides an example of a similar table-based definition. However, it uses line breaking classes whose membership is not solely determined by the line breaking property (as in this annex), but in some cases by heuristic analysis or markup of the text.'),
                    Paragraph(contents='The implementation provided here directly uses the line breaking classes defined previously.'),
                    Heading(level=3, contents='7.1 Minimal Table'),
                    Paragraph(contents='If two rows of the table have identical values and the corresponding columns also have identical values, then the two line breaking classes can be coalesced. For example, the JIS standard uses 20 classes, of which only 14 appear to be unique. Any minimal table representation is unique, except for trivial reordering of rows and columns. Minimal tables for which the rows and columns are sorted alphabetically can be mechanically compared for differences. This is in contrast to the rules, where identical results can be achieved by sets of rules that cannot be easily compared by looking at their textual representation. However, any set of rules that is equivalent to a minimal pair table can be used to automatically generate such a table, which can then be used for comparison. The rules in Section 6, Line Breaking Algorithm, can be expressed as minimal pair tables if the extended context used as described below.'),
                    Heading(level=3, contents='7.2 Extended Context'),
                    Paragraph(contents='Most of the rules in Section 6, Line Breaking Algorithm, involve only pairs of characters, or they apply to a single line break class preceded or followed by any character. These rules can be represented directly in a pair table. However, rules LB14–LB17 require extended context to handle spaces.'),
                    Paragraph(contents='By broadening the definition of a pair from B A, where B is the line breaking class before a break and A the one after, to B SP* A, where SP* is an optional run of space characters, the same table can be used to distinguish between cases where SP can or cannot provide a line break opportunity (that is, direct and indirect breaks). Rules equivalent to the ones given in Section 6, Line Breaking Algorithm, can be formulated without explicit use of SP by using % to express indirect breaks instead. These rules can then be simplified to involve only pairs of classes—that is, only constructions of the form:'),
                    Formula(contents='B ÷ A'),
                    Formula(contents='B % A'),
                    Formula(contents='B × A'),
                    Paragraph(contents='where either A or B may be empty. These simplified rules can be automatically translated into a pair table, as in Table 2. Line breaking analysis then proceeds by pair table lookup as explained below. (For readability in table layout, the symbol ^ is used in the table instead of × and _ is used instead of ÷.)'),
                    Paragraph(contents='Rule LB9 requires extended context for handling combining marks. This extended context must also be built into the code that interprets the pair table. For convenience in detecting the condition where A = CM, the symbols # and @ are used in the pair table, instead of % and ^, respectively. See Section 7.5, Combining Marks.'),
                    Paragraph(contents='Rule LB21a requires extended context to handle Hebrew letters followed by hyphens. This rule cannot be represented directly by the example pair table and is not handled by the sample implementation code included here. In the absence of special case handling, rule LB21a is effectively ignored by this example pair table and implementation code.'),
                    Paragraph(contents='Rule LB30 requires extended context to handle the grouping of pairs of Regional Indicators. This rule is not represented by the example pair table and is not handled by the sample implementation code included here. In the absence of special case handling, rule LB30 is treated as if it were RI × RI by the example pair table and implementation code.'),
                    Heading(level=3, contents='7.3 Example Pair Table'),
                    Paragraph(contents='Table 2 implements an approximation of the line breaking behavior described in this annex, with the limitation that only context of the form B SP* A is considered. BK, CR, LF, NL, and SP classes are handled explicitly in the outer loop, as given in the code sample below. Pair context of the form B CM* can be processed by handling the special entries @ and # in the driving loop, as explained in Section 7.5, Combining Marks. In Table 2 the rows are labeled with the B class and the columns are labeled with the A class.'),
                    Paragraph(contents='Table 2. Example Pair Table'),
                    TableRow(contents='OP\ue000CL\ue000CP\ue000QU\ue000GL\ue000NS\ue000EX\ue000SY\ue000IS\ue000PR\ue000PO\ue000NU\ue000AL\ue000HL\ue000ID\ue000IN\ue000HY\ue000BA\ue000BB\ue000B2\ue000ZW\ue000CM\ue000WJ\ue000H2\ue000H3\ue000JL\ue000JV\ue000JT\ue000RI\ue000EB\ue000EM\ue000ZWJ'),
                    TableRow(contents='OP\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000@\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^\ue000^'),
                    TableRow(contents='CL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='CP\ue000_\ue000^\ue000^\ue000%\ue000%\ue000^\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='QU\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='GL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='NS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='EX\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='SY\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='IS\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='PR\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%'),
                    TableRow(contents='PO\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='NU\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='AL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='HL\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='ID\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='IN\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='HY\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='BA\ue000_\ue000^\ue000^\ue000%\ue000_\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='BB\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='B2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000^\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='ZW\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_'),
                    TableRow(contents='CM\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='WJ\ue000%\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%\ue000%'),
                    TableRow(contents='H2\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='H3\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JL\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000%\ue000%\ue000%\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JV\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='JT\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000%\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='RI\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000_\ue000_\ue000%'),
                    TableRow(contents='EB\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%'),
                    TableRow(contents='EM\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000%\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%'),
                    TableRow(contents='ZWJ\ue000_\ue000^\ue000^\ue000%\ue000%\ue000%\ue000^\ue000^\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000_\ue000%\ue000%\ue000_\ue000_\ue000^\ue000#\ue000^\ue000_\ue000_\ue000_\ue000_\ue000_\ue000_\ue000%\ue000%\ue000%'),
                    Paragraph(contents='Table 2 uses the following notation:'),
                    Paragraph(contents='Resolved outside the pair table: AI, BK, CB, CJ, CR, LF, NL, SA, SG, SP, XX'),
                    TableRow(contents='Symbol\ue000Denotes\ue000Explanation'),
                    TableRow(contents='^\ue000prohibited break\ue000B ^ A is equivalent to B SP* × A; in other words, never break before A and after B, even if one or more spaces intervene.'),
                    TableRow(contents='%\ue000indirect break opportunity\ue000B % A is equivalent to B × A and B SP+ ÷ A; in other words, do not break before A, unless one or more spaces follow B.'),
                    TableRow(contents='@\ue000prohibited break for combining marks\ue000B @ A is equivalent to B SP* × A, where A is of class CM. For more details, see Section 7.5, Combining Marks.'),
                    TableRow(contents='#\ue000indirect break opportunity for combining marks following a space\ue000B # A is equivalent to (B × A and B SP+ ÷ A), where A is of class CM.'),
                    TableRow(contents='_\ue000direct break opportunity\ue000equivalent to ÷ as defined above'),
                    Paragraph(contents='Note: Hovering over the cells in a browser with tool-tips enabled reveals the rule number that determines the breaking status for the pair in question. When a pair must be tested both with and without intervening spaces, multiple rules are given. Hovering over a line breaking class name gives a representative member of the class and additional information. Clicking on any line break class name anywhere in the document jumps to the definition.'),
                    Heading(level=3, contents='7.4 Sample Code'),
                    Paragraph(contents='The following two sections provide sample code [Code14] that demonstrates how the pair table is used. For a complete implementation of the line breaking algorithm, if statements to handle the line breaking classes CR, LF, and NL need to be added. They have been omitted here for brevity, but see Section 7.6, Explicit Breaks.'),
                    Paragraph(contents='The sample code assumes that the line breaking classes AI, CB, SG, and XX have been resolved according to rule LB1 as part of initializing the pcls array. The code further assumes that the complex line break analysis for characters with line break class SA is handled in function findComplexBreak, for which the following placeholder is given:'),
                    CodeLine(contents='    // placeholder function for complex break analysis'),
                    CodeLine(contents='    // cls - resolved line break class, may differ from pcls[0]'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line breaking opportunities (output)'),
                    CodeLine(contents='    // cch - remaining length of input '),
                    CodeLine(contents='    int '),
                    CodeLine(contents='   findComplexBreak(enum break_class cls, enum break_class *pcls,'),
                    CodeLine(contents='                             enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='            if (!cch)'),
                    CodeLine(contents='                return 0;'),
                    CodeLine(contents='            for (int ich = 1; ich < cch; ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='                // .. do complex break analysis here'),
                    CodeLine(contents='                // and report any break opportunities in pbrk ..'),
                    CodeLine(contents=''),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK; // by default, no break'),
                    CodeLine(contents=''),
                    CodeLine(contents='                if (pcls[ich] != SA)'),
                    CodeLine(contents='                    break;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents='            return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The entries in the example pair table correspond to the following enumeration. For diagnostic purposes, the sample code returns these values to indicate not only the location but also the type of rule that triggered a given break opportunity.'),
                    CodeLine(contents='    enum break_action {'),
                    CodeLine(contents='           DIRECT_BRK = 0,             // _ in table'),
                    CodeLine(contents='           INDIRECT_BRK,               // % in table'),
                    CodeLine(contents='           COMBINING_INDIRECT_BRK,     // # in table'),
                    CodeLine(contents='           COMBINING_PROHIBITED_BRK,   // @ in table'),
                    CodeLine(contents='           PROHIBITED_BRK,             // ^ in table'),
                    CodeLine(contents='           EXPLICIT_BRK };             // ! in rules'),
                    Paragraph(contents='Because the contexts involved in indirect breaks of the form B SP* A are of indefinite length, they need to be handled explicitly in the driver code. The sample implementation of a findLineBrk function below remembers the line break class for the last characters seen, but skips any occurrence of SP without resetting this value. Once character A is encountered, a simple lookback is used to see if it is preceded by a SP. This lookback is necessary only if B % A. To handle the case of a SP following sot, it is necessary to set cls to a dummy value. Using WJ gives the correct result and, as required, is unaffected by any tailoring.'),
                    CodeLine(contents='    // handle spaces separately, all others by table'),
                    CodeLine(contents='    // pcls - pointer to array of line breaking classes (input)'),
                    CodeLine(contents='    // pbrk - pointer to array of line break opportunities (output)'),
                    CodeLine(contents='    // cch - number of elements in the arrays (“count of characters”) (input)'),
                    CodeLine(contents='    // ich - current index into the arrays (variable) (returned value)'),
                    CodeLine(contents="    // cls - current resolved line break class for 'before' character (variable)"),
                    CodeLine(contents=''),
                    CodeLine(contents='    int'),
                    CodeLine(contents='    findLineBrk(enum break_class *pcls, enum break_action *pbrk, int cch)'),
                    CodeLine(contents='    {'),
                    CodeLine(contents='        if (!cch) return 0;'),
                    CodeLine(contents=''),
                    CodeLine(contents="        enum break_class cls = pcls[0];   // class of 'before' character"),
                    CodeLine(contents=''),
                    CodeLine(contents='        // treat SP at start of input as if it followed a WJ'),
                    CodeLine(contents='        if (cls == SP)'),
                    CodeLine(contents='            cls = WJ;'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // loop over all pairs in the string up to a hard break'),
                    CodeLine(contents='        for (int ich = 1; (ich < cch) && (cls != BK); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // to handle explicit breaks, replace code from "for" loop condition'),
                    CodeLine(contents='            // above to comment below by code given in Section 7.6'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle spaces explicitly'),
                    CodeLine(contents='            if (pcls[ich] == SP) {'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;   // apply rule LB7: × SP'),
                    CodeLine(contents='                continue;                       // do not update cls'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // handle complex scripts in a separate function'),
                    CodeLine(contents='            if (pcls[ich] == SA) {'),
                    CodeLine(contents='                ich += findComplexBreak(cls, &pcls[ich-1], &pbrk[ich-1],'),
                    CodeLine(contents='                           cch - (ich-1));'),
                    CodeLine(contents='                if (ich < cch)'),
                    CodeLine(contents='                    cls = pcls[ich];'),
                    CodeLine(contents='                continue;'),
                    CodeLine(contents='            }'),
                    CodeLine(contents=''),
                    CodeLine(contents='            // lookup pair table information in brkPairs[before, after];'),
                    CodeLine(contents='            enum break_action brk = brkPairs[cls][pcls[ich]];'),
                    CodeLine(contents=''),
                    CodeLine(contents='            pbrk[ich-1] = brk;                     // save break action in output array'),
                    CodeLine(contents=''),
                    CodeLine(contents='            if (brk == INDIRECT_BRK) {             // resolve indirect break'),
                    CodeLine(contents='                if (pcls[ich - 1] == SP)           // if context is A SP + B'),
                    CodeLine(contents='                    pbrk[ich-1] = INDIRECT_BRK;    //       break opportunity'),
                    CodeLine(contents='                else                               // else'),
                    CodeLine(contents='                    pbrk[ich-1] = PROHIBITED_BRK;  //       no break opportunity'),
                    CodeLine(contents='            } '),
                    CodeLine(contents='            '),
                    CodeLine(contents='            // handle breaks involving a combining mark (see Section 7.5)'),
                    CodeLine(contents=''),
                    CodeLine(contents="            // save cls of 'before' character (unless bypassed by 'continue')"),
                    CodeLine(contents='            cls = pcls[ich];'),
                    CodeLine(contents='        }'),
                    CodeLine(contents='        pbrk[ich-1] = EXPLICIT_BRK;                // always break at the end'),
                    CodeLine(contents=''),
                    CodeLine(contents='        return ich;'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The function returns all of the break opportunities in the array pointed to by pbrk, using the values in the table. On return, pbrk[ich] is the type of break after the character at index ich.'),
                    Paragraph(contents='A common optimization in implementation is to determine only the nearest line break opportunity prior to the position of the first character that would cause the line to become overfull. Such an optimization requires backward traversal of the string instead of forward traversal as shown in the sample code.'),
                    Heading(level=3, contents='7.5 Combining Marks'),
                    Paragraph(contents='The implementation of combining marks in the pair table presents an additional complication because rule LB9 defines a context X CM* that is of arbitrary length. There are some similarities to the way contexts of the form B SP* A that are involved in indirect breaks are evaluated. However, contexts of the form SP CM* or CM* SP also need to be handled, while rule LB10 requires some CM* to be treated like AL.'),
                    Paragraph(contents='Implementing LB10. This rule can be reflected directly in the example pair table in Table 2 by assigning the same values in the row marked CM as in the row marked AL. Incidentally, this is equivalent to rewriting the rules LB11–LB31 by duplicating any expression that contains an AL on its left hand side with another expression that contains a CM. For example, in LB22'),
                    Formula(contents='AL × IN'),
                    Paragraph(contents='would become'),
                    Formula(contents='AL × IN CM × IN'),
                    Paragraph(contents='Rewriting these rules as indicated here (and then deleting LB10) is fully equivalent to the original rules because rule LB9 already accounts for all CMs that are not supposed to be treated like AL. For a complete description see Example 9 in Section 8.2, Examples of Customization.'),
                    Paragraph(contents='Implementing LB9. Rule LB9 is implemented in the example pair table in Table 2 by assigning a special # entry in the column marked CM for all rows referring to a line break class that allows a direct or indirect break after itself. (Note that the intersection between the row for class ZW and the column for class CM must be assigned “_” because of rule LB8.) The # corresponds to a break_action value of COMBINING_INDIRECT_BREAK, which triggers the following code in the sample implementation:'),
                    CodeLine(contents='    else if (brk == COMBINING_INDIRECT_BRK) {    // resolve combining mark break'),
                    CodeLine(contents='        pbrk[ich-1] = PROHIBITED_BRK;             // do not break before CM'),
                    CodeLine(contents='        if (pcls[ich-1] == SP){'),
                    CodeLine(contents='            #ifndef LEGACY_CM                    // new: space is not a base'),
                    CodeLine(contents='                pbrk[ich-1] = COMBINING_INDIRECT_BRK;    // apply rule SP ÷ '),
                    CodeLine(contents='            #else'),
                    CodeLine(contents='                pbrk[ich-1] = PROHIBITED_BRK;      // legacy: keep SP CM together'),
                    CodeLine(contents='                if (ich > 1)'),
                    CodeLine(contents='                    pbrk[ich-2] = ((pcls[ich - 2] == SP) ?'),
                    CodeLine(contents='                                                  INDIRECT_BRK : DIRECT_BRK);'),
                    CodeLine(contents='            #endif'),
                    CodeLine(contents='        } else                                   // apply rule LB9: X CM * -> X'),
                    CodeLine(contents='            continue;                            // do not update cls'),
                    CodeLine(contents='    }'),
                    CodeLine(contents=''),
                    Paragraph(contents='When handling a COMBINING_INDIRECT_BREAK, the last remembered line break class in variable cls is not updated, except for those cases covered by rule LB10. A tailoring of rule LB9 that keeps the last SPACE character preceding a combining mark, if any, and therefore breaks before that SPACE character can easily be implemented as shown in the sample code. (See Section 9.2, Legacy Support for Space Character as Base for Combining Marks.)'),
                    Paragraph(contents='Any rows in Table 2 for line break classes that prohibit breaks after must be handled explicitly. In the example pair table, these are assigned a special entry “@”, which corresponds to a special break action of COMBINING_PROHIBITED_BREAK that triggers the following code:'),
                    CodeLine(contents='    else if (brk == COMBINING_PROHIBITED_BRK) { // this is the case OP SP* CM'),
                    CodeLine(contents='        pbrk[ich-1] = COMBINING_PROHIBITED_BRK;  // no break allowed'),
                    CodeLine(contents='        if (pcls[ich-1] != SP)'),
                    CodeLine(contents='            continue;                          // apply rule LB9: X CM* -> X'),
                    CodeLine(contents='    }'),
                    Paragraph(contents='The only line break class that unconditionally prevents breaks across a following SP is OP. The preceding code fragment ensures that OP CM is handled according to rule LB9 and OP SP CM is handled as OP SP AL according to rule LB10.'),
                    Heading(level=3, contents='7.6 Explicit Breaks'),
                    Paragraph(contents='Handling explicit breaks is straightforward in the driver code, although it does clutter up the loop condition and body of the loop a bit. For completeness, the following sample shows how to change the loop condition and add if statements—both before and inside the loop—that handle BK, NL, CR, and LF. Because NL and BK behave identically by default, this code can be simplified in implementations where the character classification is changed so that BK will always be substituted for NL when assigning the line break class. Because this optimization does not change the result, it is not considered a tailoring and does not affect conformance.'),
                    CodeLine(contents='    // handle case where input starts with an LF'),
                    CodeLine(contents='    if (cls == LF)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // treat initial NL like BK'),
                    CodeLine(contents='    if (cls == NL)'),
                    CodeLine(contents='         cls = BK;'),
                    CodeLine(contents=''),
                    CodeLine(contents='    // loop over all pairs in the string up to a hard break or CRLF pair'),
                    CodeLine(contents='    for (int ich = 1; (ich < cch) && (cls != BK) && (cls != CR || pcls[ich] == LF); ich++) {'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle BK, NL and LF explicitly'),
                    CodeLine(contents='        if (pcls[ich] == BK ||pcls[ich] == NL ||  pcls[ich] == LF)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = BK;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle CR explicitly'),
                    CodeLine(contents='        if(pcls[ich] == CR)'),
                    CodeLine(contents='        {'),
                    CodeLine(contents='            pbrk[ich-1] = PROHIBITED_BRK;'),
                    CodeLine(contents='            cls = CR;'),
                    CodeLine(contents='            continue;'),
                    CodeLine(contents='        }'),
                    CodeLine(contents=''),
                    CodeLine(contents='        // handle spaces explicitly...'),
                    CodeLine(contents=''),
                    CodeLine(contents='    '),
                    Heading(level=2, contents='8 Customization'),
                    Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                    Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                    Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                    Paragraph(contents='Note: Implementers should allow for customizations to line breaking that are implemented in CLDR releases. Importantly, some changes to rules and data are needed for best line breaking behavior of additional emoji zwj sequences, prior to the eventual publication of Unicode 10.0. Such changes are planned for inclusion in CLDR Version 30'),
                    Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how to customize the pair table implementation of the line breaking algorithm for these tailorings.'),
                    Heading(level=3, contents='8.1 Types of Tailoring'),
                    Paragraph(contents='There are three principal ways of tailoring the sample pair table implementation of the line breaking algorithm:'),
                    Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                    Paragraph(contents='2. Changing the table value assigned to a pair of character classes This is particularly useful if the behavior can be expressed by a change at a limited number of pair intersections. This form of customization is equivalent to permanently overriding some of the rules in Section 6, Line Breaking Algorithm.'),
                    Paragraph(contents='3. Changing the interpretation of the line breaking actions This is a dynamic equivalent of the preceding. Instead of changing the values for the pair intersection directly in the table, they are labeled with special values that cause different actions for different customizations. This is most suitable when customizations need to be enabled at run time.'),
                    Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                    Paragraph(contents='Reference [Cedar97] reports on a real-world implementation of a pair table-based implementation of a line breaking algorithm substantially similar to the one presented here, and including the types of customizations presented in this section. That implementation was able to simultaneously meet the requirements of customers in many European and East Asian countries with a single implementation of the algorithm.'),
                    Heading(level=3, contents='8.2 Examples of Customization'),
                    Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm. Section 7.4, Sample Code, outlines such an approach in which the interface to the dictionary-based algorithm directly reports break opportunities.'),
                    Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the line breaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                    Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification. Reference [Suign98] shows how the necessary customizations can be elegantly handled by selectively altering the interpretation of the pair entries. Only the intersections of ID/ID, AL/ID, and ID/AL are affected. For alphabetic style line breaking, breaks for these cases require space; for ideographic style line breaking, these cases do not require spaces. Therefore, the implementation defines a pseudo-action, which is then resolved into either direct or indirect break action based on user selection of the preferred behavior for a given text.'),
                    Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. In this case the intersections of NU/NU, NU/AL, AL/AL, and AL/NU are affected.'),
                    Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by mapping class CJ to be handled as class ID in rule LB1.'),
                    Paragraph(contents='Example 6. Tailor to prevent line breaks from falling within default grapheme clusters, as defined by by Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. The tailoring can be accomplished by first segmenting the text into grapheme clusters according to the rules defined in UAX #29, and then finding line breaks according to the default line break rules, giving each grapheme cluster the line breaking class of its first code point.'),
                    Paragraph(contents='An example of a grapheme cluster that would be split by the default line break rules is a Zero Width Space followed by a combining mark.'),
                    Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                    Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * ( CL | CP ) ? ( PR | PO) ?'),
                    Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                    Paragraph(contents='Regex-Number: Do not break numbers.'),
                    Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                    Formula(contents='( OP | HY ) × NU'),
                    Formula(contents='NU × (NU | SY | IS)'),
                    Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL | CP )'),
                    Formula(contents='NU (NU | SY | IS)* (CL | CP)? × (PO | PR)'),
                    Paragraph(contents='This customized rule uses extended contexts that cannot be represented in a pair table. In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                    Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                    Formula(contents='[^NU] × CL'),
                    Formula(contents='[^NU] × CP'),
                    Formula(contents='× EX'),
                    Formula(contents='[^NU] × IS'),
                    Formula(contents='[^NU] × SY'),
                    Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                    Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                    Heading(level=2, contents='9 Implementation Notes'),
                    Paragraph(contents='This section provides additional notes on implementation issues.'),
                    Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                    Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                    Paragraph(contents='To replace rule LB9, terms of the form'),
                    Paragraph(contents='B # A'),
                    Paragraph(contents='B SP* # A'),
                    Paragraph(contents='B #'),
                    Paragraph(contents='B SP* #'),
                    Paragraph(contents='are replaced by terms of the form'),
                    Paragraph(contents='B CM* # A'),
                    Paragraph(contents='B CM* SP* # A'),
                    Paragraph(contents='B CM* #'),
                    Paragraph(contents='B CM* SP* #'),
                    Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                    Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                    Paragraph(contents='Replace LB10 by the following rule:'),
                    Paragraph(contents='× CM'),
                    Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                    Paragraph(contents='(AL | NU) × OP'),
                    Paragraph(contents='add another rule'),
                    Paragraph(contents='CM × OP.'),
                    Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                    Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                    Paragraph(contents='As stated in Section 7.9, Combining Marks of [Unicode], combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                    Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                    Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                    Formula(contents='Treat SP CM* as if it were ID.'),
                    Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                    Heading(level=2, contents='10 Testing'),
                    Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2, Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                    Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                    Paragraph(contents='Note:The break opportunities produced by an implementation of the rules of Section 6, Line Breaking Algorithm differ in certain cases from those produced by the pair table included in Section 7, Pair Table-Based Implementation. The differences occur with sequences like ZW SP CL. The test data file matches the results expected of a rule based implementation. The inconsistencies between the two will be addressed in the next revision of this document.'),
                    Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                    Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                    Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                    Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                    Paragraph(contents='1. The rules are cast into a more regex-style.'),
                    Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                    Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                    Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                    Paragraph(contents='• 13.01) [^NU] × CL'),
                    Paragraph(contents='• 13.02) × EX'),
                    Paragraph(contents='• ...'),
                    Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                    Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                    Paragraph(contents='Table 4. Numbering of Test Rules'),
                    TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                    TableRow(contents='LB2\ue0000.2\ue000start of text'),
                    TableRow(contents='LB3\ue0000.3\ue000end of text'),
                    TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                    TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                    TableRow(contents='LB31\ue000999\ue000÷ any'),
                    Heading(level=2, contents='11 Rule Numbering Across Versions'),
                    Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                    Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                    TableRow(contents='9.0.0\ue0008.0.0\ue0006.2.0\ue0006.1.0\ue0005.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                    TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                    TableRow(contents='LB2\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                    TableRow(contents='LB3\ue0003\ue0003\ue0003\ue0003\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                    TableRow(contents='LB4\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB5\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                    TableRow(contents='LB6\ue0006\ue0006\ue0006\ue0006\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                    TableRow(contents='LB7\ue0007\ue0007\ue0007\ue0007\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                    TableRow(contents='LB8\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                    TableRow(contents='LB8a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                    TableRow(contents='LB9\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB10\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                    TableRow(contents='LB11\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB12a\ue00012a\ue00012a\ue00012a\ue00012a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                    TableRow(contents='LB13\ue00013\ue00013\ue00013\ue00013\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                    TableRow(contents='LB14\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                    TableRow(contents='LB15\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                    TableRow(contents='LB16\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                    TableRow(contents='LB17\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                    TableRow(contents='LB18\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                    TableRow(contents='LB19\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                    TableRow(contents='LB20\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                    TableRow(contents='LB21\ue00021\ue00021\ue00021\ue00021\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                    TableRow(contents='LB21a\ue00021a\ue00021a\ue00021a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB21b\ue00021b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB22\ue00022\ue00022\ue00022\ue00022\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                    TableRow(contents='LB23\ue00023\ue00023\ue00023\ue00023\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                    TableRow(contents='LB23a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB24\ue00024\ue00024\ue00024\ue00024\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='LB25\ue00025\ue00025\ue00025\ue00025\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                    TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                    TableRow(contents='LB26\ue00026\ue00026\ue00026\ue00026\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB27\ue00027\ue00027\ue00027\ue00027\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                    TableRow(contents='LB28\ue00028\ue00028\ue00028\ue00028\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                    TableRow(contents='LB29\ue00029\ue00029\ue00029\ue00029\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30\ue00030\ue00030\ue00030\ue00030\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30a\ue00030a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB30b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                    TableRow(contents='LB31\ue00031\ue00031\ue00031\ue00031\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                    Heading(level=2, contents='References'),
                    Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                    Heading(level=2, contents='Acknowledgments'),
                    Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintains the text.'),
                    Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                    Heading(level=2, contents='Modifications'),
                    Paragraph(contents='The following documents the changes introduced by each revision.'),
                    Heading(level=4, contents='Revision 37:'),
                    Paragraph(contents='• Reissued for Unicode 9.0.0.'),
                    Paragraph(contents='• Revised rules 23 & 24, and added 23a, to prevent breaks between (letters or numbers) and (numeric prefixes or postfixes), on either side.'),
                    Paragraph(contents='• Added Emoji Base (EB) and Emoji Modifier (EM) character classes, and rule 30b to prevent breaks within emoji modifier sequences.'),
                    Paragraph(contents='• Revised rules 8a, 22 and 23a to treat EB and EM similarly to ID in most contexts.'),
                    Paragraph(contents='• Regional Indicators: revised class description and rule LB30a to group into pairs, with break opportunities between pairs.'),
                    Paragraph(contents='• Added ZWJ class and rule 8a to prevent breaks within emoji ZWJ sequences.'),
                    Paragraph(contents='• Revised rules 9 and 10 to treat any ZWJ as a combining mark when not in the context of an emoji zwj sequence.'),
                    Paragraph(contents='Revision 36 being a proposed update, only changes between revisions 35 and 37 are noted here.'),
                    Heading(level=4, contents='Revision 35:'),
                    Paragraph(contents='• Reissued for Unicode 8.0.0.'),
                    Paragraph(contents='• Updated table styles. Minor editing and HTML cleanup throughout. [KW]'),
                    Paragraph(contents='• Added EX × IN to rule 22.'),
                    Paragraph(contents='• Added rule 21b, don’t break between Solidus and Hebrew.'),
                    Paragraph(contents='Revision 34 being a proposed update, only changes between revisions 33 and 35 are noted here.'),
                    Heading(level=4, contents='Revision 33:'),
                    Paragraph(contents='• Reissued for Unicode 7.0.0.'),
                    Heading(level=4, contents='Revision 32:'),
                    Paragraph(contents='• Reissued for Unicode 6.3.0.'),
                    Paragraph(contents='• Update the description of class CM to mention U+3035 VERTICAL KANA REPEAT MARK LOWER HALF.'),
                    Paragraph(contents='• Update the description of class BA to reflect the change of U+3000 IDEOGRAPHIC SPACE to class BA.'),
                    Paragraph(contents='• Clarify descriptions in Section 7.3, Example Pair Table.'),
                    Paragraph(contents='• Remove Section 7.6, Conjoining Jamos pair table implementation, reflecting that Jamos are included directly in the main pair table.'),
                    Paragraph(contents='• Revised Example 6 of Section 8.2, Examples of Customization.'),
                    Paragraph(contents='Revision 31 being a proposed update, only changes between revisions 32 and 30 are noted here.'),
                    Heading(level=4, contents='Revision 30:'),
                    Paragraph(contents='• Reissued for Unicode 6.2.0.'),
                    Paragraph(contents='• Introduce character class RI (Regional Indicator).'),
                    Paragraph(contents='• Introduce rule 30a, do not break between Regional Indicators.'),
                    Paragraph(contents='Revision 29 being a proposed update, only changes between revisions 30 and 28 are noted here.'),
                    Heading(level=4, contents='Revision 28:'),
                    Paragraph(contents='• Reissued for Unicode 6.1.0.'),
                    Paragraph(contents="• Add rule 21a, don't break after Hebrew + hyphen."),
                    Paragraph(contents='• Introduce character class HL (Hebrew Letter).'),
                    Paragraph(contents='• Introduce character class CJ for small kana, and amend rule LB1 to provide default resolution for class CJ.'),
                    Paragraph(contents='• Clarify that the list of GL characters is not comprehensive.'),
                    Paragraph(contents='• Update Example 7 of Section 8.2, Examples of Customization, to reflect the introduction of character class CP.'),
                    Paragraph(contents='Revision 27 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                    Heading(level=4, contents='Revision 26:'),
                    Paragraph(contents='• Reissued for Unicode 6.0.0.'),
                    Paragraph(contents='• In Section 5.1, revised the description of the SHY character.'),
                    Paragraph(contents='• Changed LB8 from "ZW ÷" to "ZW SP* ÷" in accordance with UAX 14 Corrigendum #7, http://www.unicode.org/versions/corrigendum7.html.'),
                    Paragraph(contents='• Changed references to Unicode 5.2 to generic references where appropriate.'),
                    Paragraph(contents='• In Section 3, removed Ideographic Space from the list of spaces that may be compressed or expanded and clarified that the justification of lines is out of scope.'),
                    Paragraph(contents='Revision 25 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                    Heading(level=4, contents='Revision 24:'),
                    Paragraph(contents='• Reissued for Unicode 5.2.0.'),
                    Paragraph(contents='• Added class CP, reintroduced rule LB30, adjusted other rules for class CP.'),
                    Paragraph(contents='• In Section 5.1, clarified that the lists of characters for each property contain representative characters, and are not necessarily complete.'),
                    Paragraph(contents='• Unassigned code points in CJK regions default to class ID.'),
                    Paragraph(contents='• Added Tai Tham, Myanmar Extended-A and Tai Viet blocks to class SA.'),
                    Paragraph(contents='• Brought descriptive names of the character classes into closer alignment with the Unicode Line Break character property values.'),
                    Paragraph(contents='• Small edits for improved clarity, document style.'),
                    Paragraph(contents='Revision 23 being a proposed update, only changes between revisions 22 and 24 are noted here.'),
                    Heading(level=4, contents='Revision 22:'),
                    Paragraph(contents='• Reissued for Version 5.1.0.'),
                    Paragraph(contents='• Added 2E18, INVERTED INTERROBANG, to class OP.'),
                    Paragraph(contents='• Added 2064, INVISIBLE PLUS, to class AL.'),
                    Paragraph(contents='• Added 2E00..2E01, 2E06..2E08, 2E0B to class QU.'),
                    Paragraph(contents='• Removed LB30, to correct regression for U+3002 IDEOGRAPHIC FULL STOP'),
                    Paragraph(contents='• Add Example 9 to Section 8, Customization.'),
                    Paragraph(contents='• Substantial revisions to Section 4, Conformance.'),
                    Paragraph(contents='• Section 5.7, Word Separators, added.'),
                    Paragraph(contents='• Section 10, Testing, added.'),
                    Paragraph(contents='• Renumber rules for consistency: 12a → 12; 12b → 12a'),
                    Paragraph(contents='• Added 02DF, MODIFIER LETTER CROSS ACCENT, to class BB.'),
                    Paragraph(contents='• Added discussion for 202F NARROW NO-BREAK SPACE and 180E MONGOLIAN VOWEL SEPARATOR'),
                    Paragraph(contents='• Corrected typos in LB13 and LB16'),
                    Paragraph(contents='• Added characters introduced with Unicode 5.1 to the lists associated with the line break properties.'),
                    Paragraph(contents='• Added Section 5.2 on the special handling of hyphens. Edited Section 3 for clarity.'),
                    Paragraph(contents='• Improved delineation between normative and informative information.'),
                    Paragraph(contents='• Changed from EX to IS'),
                    Paragraph(contents='• 060C ( ، ) ARABIC COMMA'),
                    Paragraph(contents='• Changed from EX to PO'),
                    Paragraph(contents='• 066A ( ٪ ) ARABIC PERCENT SIGN'),
                    Paragraph(contents='• Changed from AI to OP'),
                    Paragraph(contents='• 00A1 ( ¡ ) INVERTED EXCLAMATION MARK'),
                    Paragraph(contents='• 00BF ( ¿ ) INVERTED QUESTION MARK'),
                    Paragraph(contents='• Changed from BA to EX'),
                    Paragraph(contents='• 1802 ( ᠂ ) MONGOLIAN COMMA'),
                    Paragraph(contents='• 1803 ( ᠃ ) MONGOLIAN FULL STOP'),
                    Paragraph(contents='• 1808 ( ᠈ ) MONGOLIAN MANCHU COMMA'),
                    Paragraph(contents='• 1809 ( ᠉ ) MONGOLIAN MANCHU FULL STOP'),
                    Paragraph(contents='• 2CF9 ( ⳹ ) COPTIC OLD NUBIAN FULL STOP'),
                    Paragraph(contents='• 2CFE ( ⳾ ) COPTIC FULL STOP'),
                    Paragraph(contents='• Changed from BA to AL'),
                    Paragraph(contents='• 1A1E ( ᨞ ) BUGINESE PALLAWA'),
                    Paragraph(contents='• Changed from AL to BB'),
                    Paragraph(contents='• 1FFD ( ´ ) GREEK OXIA'),
                    Paragraph(contents='• Added a note on lack of canonical equivalence for the definition of ambiguous characters.'),
                    Paragraph(contents='• Corrected typos in the sample source code.'),
                    Paragraph(contents='• Split rule LB12 to accommodate Polish and Portuguese hyphenation.'),
                    Paragraph(contents='Revisions 20 and 21 being a proposed update, only changes between revisions 19 and 22 are noted here.'),
                    Heading(level=4, contents='Revision 19:'),
                    Paragraph(contents='• Changed 000B from CM to BK, changed 035C from CM to GL.'),
                    Paragraph(contents='• Changed 17D9 from NS to AL. 203D, 2047..2049 from AL to NS.'),
                    Paragraph(contents='• Corrected listing of NS property to match the data file to remove 17D8 and 17DA.'),
                    Paragraph(contents='• The data file has been corrected to match the listing of the BA property to include 1735 and 1736, also changed 05BE and 103D0 from AL to BA.'),
                    Paragraph(contents='• Changed the brackets 23B4.23B6 to AL.'),
                    Paragraph(contents='• Updated the SA property to make it more generic, includes changing many characters from CM to SA.'),
                    Paragraph(contents='• Reflected new characters'),
                    Paragraph(contents='• Made several text changes for clarifications, including reworded the intro to Section 6.'),
                    Paragraph(contents='• Added Section 9.'),
                    Paragraph(contents='• Restated the conformance clauses and reorganized the algorithm into a tailorable and a non-tailorable part; this affects text in Sections 4, 5, and 6.'),
                    Paragraph(contents='• Removed redundant term PR x HY from rule 18 and rule into new LB24 and LB26 to provide better granularity for tailoring,'),
                    Paragraph(contents='• Moved rule 11b and 13 above rule 8 (new LB13), restating rule 13 (new LB12) to preserve its effect in the new location.'),
                    Paragraph(contents='• Added new rule LB30 to handle words like “person(s)”.'),
                    Paragraph(contents='• Renumbered the rules.'),
                    Paragraph(contents='• Extensive copy-editing as part of Unicode 5.0 publication.'),
                    Paragraph(contents='Revision 18 being a proposed update, only changes between revisions 17 and 19 are noted here.'),
                    Heading(level=4, contents='Revision 17:'),
                    Paragraph(contents='• Significantly revised the line break classes for Tibetan, as well as Mongolian and Arabic Punctuation.'),
                    Paragraph(contents='• Added Section 5.6 on Tibetan and Section 7.7 on handling explicit breaks.'),
                    Paragraph(contents='• Added line break class assignments for Unicode 4.1 characters.'),
                    Paragraph(contents='• Significantly revised the line break class assignments for danda characters and made it consistent across scripts.'),
                    Paragraph(contents='• LB6: Replaced by new rules 18b and 18c, using new classes JL, JV, JT, H2, and H3.'),
                    Paragraph(contents='• LB7a: Deprecated rule 7a because SPACE as base character for standalone combining marks is deprecated.'),
                    Paragraph(contents='• LB7b: Revised 7b and Section 7.5 as well as Table 2 to match the deprecation of rule 7a.'),
                    Paragraph(contents='• LB7b: Clarified that this rule does not apply to SP.'),
                    Paragraph(contents='• LB11a: Added a missing SP * to make the formula match the rule.'),
                    Paragraph(contents='• LB18b: Removed the existing rule 18b because it was redundant.'),
                    Paragraph(contents='• Corrected an erratum on revision 14 by splitting GL from WJ in rule 11b and moving to a new rule 13.'),
                    Paragraph(contents='• Updated the pair table and sample code to match the changes in the rules.'),
                    Paragraph(contents='• Updated the regular expression for numbers.'),
                    Paragraph(contents='• Added several notes on implementation techniques.'),
                    Paragraph(contents='• Moved all suggested tailorings from the rules section to the examples in Section 8.2.'),
                    Paragraph(contents='Revision 16 being a proposed update, only changes between revisions 17 and 15 are noted here.'),
                    Heading(level=4, contents='Revision 15:'),
                    Paragraph(contents='• LB19b: Added new rule 19b.'),
                    Paragraph(contents='• Changed line breaking class: combining double diacritics from CM to GL, 037A and 2126 to match their canonical equivalents, 2140 corrected to AL, Arabic numerical separators from AL to NU, many alphabetic characters that are EAW=Ambiguous from AI to AL to better reflect current practice, remaining circled numbers and letters from AL to AI for consistency.'),
                    Paragraph(contents='• Added a note on the behavior of U+200B and U+3000 when lines are justified.'),
                    Paragraph(contents='• Reconciled the data file and description of line breaking classes in Section 5.'),
                    Paragraph(contents='• Reconciled the rules and pair table implementation of the algorithm.'),
                    Paragraph(contents='• Updated the text of the conformance statement in Section 4.'),
                    Paragraph(contents='• Added Section 5.5 on use of double hyphen.'),
                    Paragraph(contents='• Updated styles and table formatting.'),
                    Paragraph(contents='• Minor edits throughout.'),
                    Heading(level=4, contents='Revision 14:'),
                    Paragraph(contents='• Added new line breaking classes NL and WJ to better support NEL and Word Joiner.'),
                    Paragraph(contents='• Deprecated the use of class SG.'),
                    Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and 7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                    Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                    Paragraph(contents='• Clarified the behavior of SHY and MONGOLIAN TODO SOFT HYPHEN, as well as WJ and ZWNBSP.'),
                    Paragraph(contents='• Added a new Section 5.4 on SOFT HYPHEN and a new Section 7.6 on conjoining jamos.'),
                    Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                    Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                    Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                    Paragraph(contents='• Expanded the introduction in Section 3.'),
                    Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                    Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                    Paragraph(contents='Revision 11 being a proposed update, only changes between revisions 12 and 14 are noted here.'),
                    Heading(level=4, contents='Revision 12:'),
                    Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                    Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                    Paragraph(contents='• Added Word joiner to GL and noted that it now is the preferred character instead of FEFF'),
                    Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the data file. Only characters whose LB class differs from those of characters with related General_Category are noted explicitly in this text.'),
                    Paragraph(contents='Revision 11, being a proposed update, only changes between revisions 10 and 12 are noted here.]'),
                    Heading(level=4, contents='Revision 10:'),
                    Paragraph(contents='• Changed header for publication of Unicode 3.1. Fixed a few additional typos.'),
                    Heading(level=4, contents='Revision 9:'),
                    Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                    Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                    Paragraph(contents='• Restored PUA to XX.'),
                    Paragraph(contents='• LB7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode4.0].'),
                    Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair table entry B2 ^ B2'),
                    Paragraph(contents='• LB19: added an entry to reconcile the rules against pair table entry PR % ID'),
                    Paragraph(contents='• Reworked Section 7.5.'),
                    Paragraph(contents='• Removed two unused definitions (overfull and underfull).'),
                    Heading(level=4, contents='Revision 8:'),
                    Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                    Paragraph(contents='• Added headers to Table 1'),
                    Paragraph(contents='• Added a note on use of B and A'),
                    Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX because the data file assigns AI to them.'),
                    Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                    Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                    Paragraph(contents='• LB6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                    Paragraph(contents='• LB7: Fixed the note so it matches the rule.'),
                    Paragraph(contents='• LB17: Fixed the regular expression for numbers in the explanation for this rule.'),
                    Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                    Heading(level=4, contents='Revision 7:'),
                    Paragraph(contents='• Fixed several typos.'),
                    Paragraph(contents='• New header.'),
                    Heading(level=4, contents='Revision 6:'),
                    Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                    Paragraph(contents='No change history is available for earlier revisions.'),
                    Paragraph(contents='© 2016 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                    Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(10, 0, 0): [Heading(level=2, contents='Unicode® Standard Annex #14'),
                     Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                     TableRow(contents='Version\ue000Unicode 10.0.0'),
                     TableRow(contents='Editors\ue000Andy Heninger (andy.heninger@gmail.com)'),
                     TableRow(contents='Date\ue0002017-06-12'),
                     TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-39.html'),
                     TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-37.html'),
                     TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                     TableRow(contents='Latest Proposed Update\ue000http://www.unicode.org/reports/tr14/proposed.html'),
                     TableRow(contents='Revision\ue00039'),
                     Heading(level=4, contents='Summary'),
                     Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display.'),
                     Heading(level=4, contents='Status'),
                     Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                     Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                     Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                     Heading(level=4, contents='Contents'),
                     Paragraph(contents='1 Overview and Scope'),
                     Paragraph(contents='2 Definitions'),
                     Paragraph(contents='3 Introduction'),
                     Paragraph(contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='4 Conformance'),
                     Paragraph(contents='4.1 Conformance Requirements'),
                     Paragraph(contents='5 Line Breaking Properties'),
                     Paragraph(contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='5.2 Dictionary Usage'),
                     Paragraph(contents='5.3 Use of Hyphen'),
                     Paragraph(contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='5.7 Word Separator Characters'),
                     Paragraph(contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='7 Deleted. (Formerly was: Pair Table-Based Implementation)'),
                     Paragraph(contents='8 Customization'),
                     Paragraph(contents='8.1 Types of Tailoring'),
                     Paragraph(contents='8.2 Examples of Customization'),
                     Paragraph(contents='9 Implementation Notes'),
                     Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='10 Testing'),
                     Paragraph(contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='References'),
                     Paragraph(contents='Acknowledgments'),
                     Paragraph(contents='Modifications'),
                     Heading(level=2, contents='1 Overview and Scope'),
                     Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                     Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                     Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                     Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Two main sections follow:'),
                     Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                     Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                     Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                     Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                     Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                     Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                     Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                     Heading(level=2, contents='2 Definitions'),
                     Paragraph(contents='The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard.'),
                     Paragraph(contents='All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard [Unicode].'),
                     Paragraph(contents='LD1. Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                     Paragraph(contents='LD2. Line Break: The position in the text where one line ends and the next one starts.'),
                     Paragraph(contents='LD3. Line Break Opportunity: A place where a line is allowed to end.'),
                     Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                     Paragraph(contents='LD4. Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                     Paragraph(contents='LD5. Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                     Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                     Paragraph(contents='LD6. Line Breaking Class: A class of characters with the same line breaking property value.'),
                     Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                     Paragraph(contents='LD7. Mandatory Break: A line must break following a character that has the mandatory break property.'),
                     Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                     Paragraph(contents='LD8. Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                     Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space.'),
                     Paragraph(contents='LD9. Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                     Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, an indirect break is represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                     Paragraph(contents='LD10. Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, a prohibited break is expressed as a rule of the form: B SP* × A.'),
                     Paragraph(contents='LD11. Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                     Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                     Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                     Paragraph(contents='Table 1. Line Breaking Classes'),
                     TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                     TableRow(contents='Non-tailorable Line Breaking Classes'),
                     TableRow(contents='BK\ue000Mandatory Break\ue000NL, PS\ue000Cause a line break (after)'),
                     TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                     TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                     TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                     TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                     TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                     TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                     TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                     TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                     TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                     TableRow(contents='ZWJ\ue000Zero Width Joiner\ue000Zero Width Joiner\ue000Prohibit line breaks within joiner sequences'),
                     TableRow(contents='Break Opportunities'),
                     TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                     TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                     TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                     TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                     TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                     TableRow(contents='Characters Prohibiting Certain Breaks'),
                     TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                     TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                     TableRow(contents='NS\ue000Nonstarter\ue000“‼”, “‽”, “⁇”, “⁉”, etc.\ue000Allow only indirect line breaks before'),
                     TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                     TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                     TableRow(contents='Numeric Context'),
                     TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                     TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                     TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                     TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                     TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                     TableRow(contents='Other Characters'),
                     TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                     TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                     TableRow(contents='CJ\ue000Conditional Japanese Starter\ue000Small kana\ue000Treat as NS or ID for strict or normal breaking.'),
                     TableRow(contents='EB\ue000Emoji Base\ue000All emoji allowing modifiers\ue000Do not break from following Emoji Modifier'),
                     TableRow(contents='EM\ue000Emoji Modifier\ue000Skin tone modifiers\ue000Do not break from preceding Emoji Base'),
                     TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='HL\ue000Hebrew Letter\ue000Hebrew\ue000Do not break around a following hyphen; otherwise act as Alphabetic'),
                     TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                     TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='RI\ue000Regional Indicator\ue000REGIONAL INDICATOR SYMBOL LETTER A .. Z\ue000Keep pairs together. For pairs, break before and after other classes'),
                     TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                     TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                     Heading(level=2, contents='3 Introduction'),
                     Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                     Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                     Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                     Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                     Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                     Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                     Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                     Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                     Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                     Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                     Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                     Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                     Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                     Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                     Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                     Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [UAX9]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                     Heading(level=2, contents='4 Conformance'),
                     Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                     Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                     Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                     Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                     Heading(level=3, contents='4.1 Conformance Requirements'),
                     Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                     Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                     Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                     Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                     Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                     Heading(level=2, contents='5 Line Breaking Properties'),
                     Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                     Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                     Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into the algorithm defined in Section 6, Line Breaking Algorithm. This section describes a workable default line breaking method. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences.'),
                     Heading(level=4, contents='Data File'),
                     Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a tab-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name. Ideographic, Hangul, Surrogate, and Private Use ranges are collapsed by giving a range in the first column.'),
                     Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                     Heading(level=4, contents='Future Updates'),
                     Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                     Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                     TableRow(contents='Label\ue000Meaning for the Class'),
                     TableRow(contents='(A)\ue000It allows a break opportunity after in specified contexts.'),
                     TableRow(contents='(XA)\ue000It prevents a break opportunity after in specified contexts.'),
                     TableRow(contents='(B)\ue000It allows a break opportunity before in specified contexts.'),
                     TableRow(contents='(XB)\ue000It prevents a break opportunity before in specified contexts.'),
                     TableRow(contents='(P)\ue000It allows a break opportunity for a pair of same characters.'),
                     TableRow(contents='(XP)\ue000It prevents a break opportunity for a pair of same characters.'),
                     Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                     Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                     Paragraph(contents='Some characters that ordinarily act like alphabetic characters are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                     Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [UAX11].'),
                     Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                     Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                     Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                     TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                     TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                     Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                     Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                     Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                     Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                     Paragraph(contents='This class contains alphabetic or symbolic characters not explicitly assigned to another line breaking class. These are primarily characters of the following categories:'),
                     TableRow(contents='Category\ue000General_Category Values'),
                     TableRow(contents='Alphabetic\ue000Lu, Ll, Lt, Lm, and Lo'),
                     TableRow(contents='Symbols\ue000Sm, Sk, and So'),
                     TableRow(contents='Non-decimal Numbers\ue000Nl and No'),
                     TableRow(contents='Punctuation\ue000Pc, Pd, and Po'),
                     Paragraph(contents='Line break class AL also contains several format characters, including:'),
                     TableRow(contents='0600..0604\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAMVAT'),
                     TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                     TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                     TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                     TableRow(contents='110BD\ue000KAITHI NUMBER SIGN'),
                     Paragraph(contents='These format characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                     Paragraph(contents='Major exceptions to the general pattern of alphabetic and symbolic characters having line break class AL include:'),
                     Paragraph(contents='HL for Hebrew letters AI or ID, based on the East Asian Width property of the character ID for certain pictographic symbols CJ for small hiragana and katakana SA for complex context scripts JL, JV, JT, H2 or H3 for Hangul characters'),
                     Heading(level=3, contents='BA: Break After (A)'),
                     Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                     Heading(level=4, contents='Breaking Spaces'),
                     Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                     TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                     TableRow(contents='2000\ue000EN QUAD'),
                     TableRow(contents='2001\ue000EM QUAD'),
                     TableRow(contents='2002\ue000EN SPACE'),
                     TableRow(contents='2003\ue000EM SPACE'),
                     TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                     TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                     TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                     TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                     TableRow(contents='2009\ue000THIN SPACE'),
                     TableRow(contents='200A\ue000HAIR SPACE'),
                     TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                     TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                     Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                     Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                     Paragraph(contents='For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                     Heading(level=4, contents='Tabs'),
                     TableRow(contents='0009\ue000TAB'),
                     Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                     Heading(level=4, contents='Conditional Hyphens'),
                     TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                     Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=4, contents='Breaking Hyphens'),
                     Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                     TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                     TableRow(contents='2010\ue000HYPHEN'),
                     TableRow(contents='2012\ue000FIGURE DASH'),
                     TableRow(contents='2013\ue000EN DASH'),
                     Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Visible Word Dividers'),
                     Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                     TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                     TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                     TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                     TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                     TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                     Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                     TableRow(contents='2027\ue000HYPHENATION POINT'),
                     Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                     TableRow(contents='007C\ue000VERTICAL LINE'),
                     Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                     Heading(level=4, contents='Historic Word Separators'),
                     Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                     Paragraph(contents='Examples of Historic Word Separators include:'),
                     TableRow(contents='16EB\ue000RUNIC SINGLE DOT PUNCTUATION'),
                     TableRow(contents='16EC\ue000RUNIC MULTIPLE DOT PUNCTUATION'),
                     TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                     TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                     TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                     TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                     TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                     TableRow(contents='205B\ue000FOUR DOT MARK'),
                     TableRow(contents='205D\ue000TRICOLON'),
                     TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                     TableRow(contents='2E19\ue000PALM BRANCH'),
                     TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                     TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                     TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                     TableRow(contents='2E2D\ue000FIVE DOT PUNCTUATION'),
                     TableRow(contents='2E30\ue000RING POINT'),
                     TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                     TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                     TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                     TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                     TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                     TableRow(contents='1091F\ue000PHOENICIAN WORD DIVIDER'),
                     TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                     Heading(level=4, contents='Dandas'),
                     Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                     Paragraph(contents='Examples of dandas include:'),
                     TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                     TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                     TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                     TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                     TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                     TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                     TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                     TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                     TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                     TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                     TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                     TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                     TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                     TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                     TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                     TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                     TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                     TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                     TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                     Heading(level=4, contents='Tibetan'),
                     TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                     TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                     TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                     TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                     TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                     TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                     Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Other Terminating Punctuation'),
                     Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                     TableRow(contents='1804\ue000MONGOLIAN COLON'),
                     TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                     TableRow(contents='1B5A\ue000BALINESE PANTI'),
                     TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                     TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                     TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                     TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                     TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                     TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                     TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                     TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                     TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                     TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                     TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                     TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                     TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                     TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                     TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                     TableRow(contents='2E17\ue000OBLIQUE DOUBLE HYPHEN'),
                     TableRow(contents='A60D\ue000VAI COMMA'),
                     TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                     TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                     TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                     TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                     TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                     TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                     TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                     TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                     TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                     Heading(level=3, contents='BB: Break Before (B)'),
                     Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                     Paragraph(contents='Examples of BB characters are described in the following sections.'),
                     Heading(level=4, contents='Dictionary Use'),
                     TableRow(contents='00B4\ue000ACUTE ACCENT'),
                     TableRow(contents='1FFD\ue000GREEK OXIA'),
                     Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                     TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                     Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                     TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                     TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                     Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                     Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                     Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                     TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                     TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                     TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                     TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                     TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                     TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                     TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                     TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                     TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                     TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                     TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                     TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                     TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                     Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Mongolian'),
                     TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                     Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                     Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                     TableRow(contents='2014\ue000EM DASH'),
                     Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                     Paragraph(contents='Some languages, including Spanish, use EM DASH to set off a parenthetical, and the surrounding dashes should not be broken from the contained text. In this usage there is space on the side where it can be broken. This does not conflict with symmetrical usages, either with spaces on both sides of the em-dash or with no spaces.'),
                     Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                     Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                     TableRow(contents='000C\ue000FORM FEED (FF)'),
                     TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                     Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                     TableRow(contents='2028\ue000LINE SEPARATOR (LS)'),
                     Paragraph(contents='The text after the LINE SEPARATOR starts at the beginning of the line. This is similar to HTML <BR>.'),
                     TableRow(contents='2029\ue000PARAGRAPH SEPARATOR (PS)'),
                     Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LS, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                     Heading(level=4, contents='Newline Function (NLF)'),
                     Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                     Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                     Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                     Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                     TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                     Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                     Heading(level=3, contents='CJ: Conditional Japanese Starter'),
                     Paragraph(contents='This character class contains Japanese small hiragana and katakana. Characters of this class may be treated as either NS or ID.'),
                     Paragraph(contents='CSS Text Level 3 (which supports Japanese line layout) defines three distinct values for its line-break behavior:'),
                     Paragraph(contents='• strict, typically used for long lines'),
                     Paragraph(contents='• normal (CSS default), the behavior typically used for books and documents'),
                     Paragraph(contents='• loose, typically used for short lines such as in newspapers'),
                     Paragraph(contents='These have different sets of “kinsoku” characters which cannot be at the beginning or end of a line; strict has the largest set, while loose has the smallest. The motivation for the smaller number of kinsoku characters is to avoid triggering justification that puts characters off the grid position.'),
                     Paragraph(contents='Treating characters of class CJ as class NS will give CSS strict line breaking; treating them as class ID will give CSS normal breaking.'),
                     Paragraph(contents='The CJ line break class includes'),
                     TableRow(contents='3041, 3043, 3045, etc.\ue000Small hiragana'),
                     TableRow(contents='30A1, 30A3, 30A5, etc.\ue000Small katakana'),
                     TableRow(contents='30FC\ue000KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                     TableRow(contents='FF67..FF70\ue000Halfwidth variants'),
                     Heading(level=3, contents='CL: Close Punctuation (XB)'),
                     Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                     Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                     Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                     TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                     TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE50\ue000SMALL COMMA'),
                     TableRow(contents='FE52\ue000SMALL FULL STOP'),
                     TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                     TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                     TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                     Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                     Heading(level=4, contents='Combining Characters'),
                     Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                     Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 NO-BREAK SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                     Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                     Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                     Heading(level=4, contents='Control and Formatting Characters'),
                     Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                     Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                     Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                     Paragraph(contents='The CM class also includes U+3035 VERTICAL KANA REPEAT MARK LOWER HALF. This character is normally preceded by either U+3033 VERTICAL KANA REPEAT MARK UPPER HALF or U+3034 VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF, and should not be separated from them.'),
                     Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                     Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                     TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                     TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                     Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                     TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                     Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                     Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                     Heading(level=3, contents='EB: Emoji Base (B/A)'),
                     Paragraph(contents='This class includes characters whose appearance can be modified by a subsequent emoji modifier in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier_Base property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='1F466\ue000BOY'),
                     TableRow(contents='1F478\ue000PRINCESS'),
                     TableRow(contents='1F6B4\ue000BICYCLIST'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b. In other contexts, characters of class EB behave similarly to ideographs of class ID, with break opportunities before and after.'),
                     Heading(level=3, contents='EM: Emoji Modifier (A)'),
                     Paragraph(contents='This class includes characters that can be used to modify the appearance of a preceding emoji in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b.'),
                     Paragraph(contents='Emoji modifiers include:'),
                     TableRow(contents='1F3FB..1F3FF\ue000EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6'),
                     Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                     Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                     TableRow(contents='0021\ue000EXCLAMATION MARK'),
                     TableRow(contents='003F\ue000QUESTION MARK'),
                     TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                     TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                     TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                     TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                     TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                     TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                     TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                     TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                     TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                     Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following are examples of characters of line break class GL:'),
                     TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                     TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                     TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                     Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE. NARROW NO-BREAK SPACE is used in Mongolian. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in Section 13.4, Mongolian, of [Unicode].'),
                     Paragraph(contents='NARROW NO-BREAK SPACE is a narrow version of NO-BREAK SPACE, which has exactly the same line breaking behavior, but with a narrow display width. It is regularly used in Mongolian in certain grammatical contexts (before a particle), where it also influences the shaping of the glyphs for the particle. In Mongolian text, the NARROW NO-BREAK SPACE is typically displayed with one third the width of a normal space character.'),
                     Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                     Paragraph(contents='The MONGOLIAN VOWEL SEPARATOR is equivalent to a NARROW NO-BREAK SPACE in its line breaking behavior, but has different effects in controlling the shaping of its preceding and following characters. It constitutes a word-internal space and is typically displayed with half the width of a NARROW NO-BREAK SPACE.'),
                     TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                     Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                     TableRow(contents='2007\ue000FIGURE SPACE'),
                     Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                     TableRow(contents='2011\ue000NON-BREAKING HYPHEN (NBHY)'),
                     Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                     TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                     TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                     TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                     Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                     Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                     Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                     Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                     Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                     Heading(level=3, contents='HY: Hyphen (XA)'),
                     TableRow(contents='002D\ue000HYPHEN-MINUS'),
                     Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                     Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                     Heading(level=3, contents='ID: Ideographic (B/A)'),
                     Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                     TableRow(contents='2E80..2FFF\ue000CJK, Kangxi Radicals, Ideographic Description Symbols'),
                     TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                     TableRow(contents='30A2..30FA\ue000Katakana (except small characters)'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                     Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                     Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                     Paragraph(contents='The unassigned code points in the following blocks default to ID:'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='All undesignated code points in Planes 2 and 3, whether inside or outside of allocated blocks, default to ID:'),
                     TableRow(contents='20000..2FFFD\ue000Plane 2'),
                     TableRow(contents='30000..3FFFD\ue000Plane 3'),
                     Paragraph(contents='All unassigned code points in the following Plane 1 range, whether inside or outside of allocated blocks, also default to ID:'),
                     TableRow(contents='1F000..1FFFD\ue000Plane 1 range'),
                     Heading(level=4, contents='Korean'),
                     Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                     TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                     Heading(level=4, contents='Symbols'),
                     Paragraph(contents='Certain pictographic symbols of General Category So are also included in this line break class.'),
                     Heading(level=3, contents='HL: Hebrew Letter (XB)'),
                     Paragraph(contents='This class includes all Hebrew letters.'),
                     Paragraph(contents='When a Hebrew letter is followed by a hyphen, there is no break on either side of the hyphen. In this context a hyphen is any character of class HY or class BA. In other respects, Hebrew letters behave the same as characters of class AL.'),
                     Paragraph(contents='Included in this class are all characters of General Category Letter that have Script=Hebrew.'),
                     Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                     Heading(level=4, contents='Leaders'),
                     Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='2024\ue000ONE DOT LEADER'),
                     TableRow(contents='2025\ue000TWO DOT LEADER'),
                     TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                     TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                     Paragraph(contents='HORIZONTAL ELLIPSIS can be used as a three-dot leader.'),
                     Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                     Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='002C\ue000COMMA'),
                     TableRow(contents='002E\ue000FULL STOP'),
                     TableRow(contents='003A\ue000COLON'),
                     TableRow(contents='003B\ue000SEMICOLON'),
                     TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                     TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                     TableRow(contents='060C\ue000ARABIC COMMA'),
                     TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                     TableRow(contents='07F8\ue000NKO COMMA'),
                     TableRow(contents='2044\ue000FRACTION SLASH'),
                     TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                     TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                     TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                     Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                     Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                     Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                     Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                     Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                     Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                     Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                     Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                     Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                     Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                     TableRow(contents='000A\ue000LINE FEED (LF)'),
                     Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                     Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                     TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                     Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                     Heading(level=3, contents='NS: Nonstarters (XB)'),
                     Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include:'),
                     TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                     TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                     TableRow(contents='203D\ue000INTERROBANG'),
                     TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                     TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                     TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                     TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='301C\ue000WAVE DASH'),
                     TableRow(contents='303C\ue000MASU MARK'),
                     TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                     TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                     TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                     TableRow(contents='30FD..30FE\ue000KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK'),
                     TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                     TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                     TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                     TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                     Paragraph(contents='Note: Optionally, the NS restriction may be relaxed by tailoring, with some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles. Alternatively, line breaking can be tightened by moving characters that are ID into NS.'),
                     Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                     Heading(level=3, contents='NU: Numeric (XP)'),
                     Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                     Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                     TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                     TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                     Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                     Heading(level=3, contents='OP: Open Punctuation (XA)'),
                     Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                     TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                     TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                     TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                     Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                     Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                     Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                     Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                     Paragraph(contents='Examples of Postfix characters include'),
                     TableRow(contents='0025\ue000PERCENT SIGN'),
                     TableRow(contents='00A2\ue000CENT SIGN'),
                     TableRow(contents='00B0\ue000DEGREE SIGN'),
                     TableRow(contents='060B\ue000AFGHANI SIGN'),
                     TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                     TableRow(contents='2030\ue000PER MILLE SIGN'),
                     TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                     TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                     TableRow(contents='20A7\ue000PESETA SIGN'),
                     TableRow(contents='2103\ue000DEGREE CELSIUS'),
                     TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                     TableRow(contents='FDFC\ue000RIAL SIGN'),
                     TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                     TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                     TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                     Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                     Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                     Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                     Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                     Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                     TableRow(contents='002B\ue000PLUS SIGN'),
                     TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                     TableRow(contents='00B1\ue000PLUS-MINUS'),
                     TableRow(contents='2116\ue000NUMERO SIGN'),
                     TableRow(contents='2212\ue000MINUS SIGN'),
                     TableRow(contents='2213\ue000MINUS-OR-PLUS-SIGN'),
                     Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                     Heading(level=3, contents='QU: Quotation (XB/XA)'),
                     Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                     Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                     Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                     TableRow(contents='0022\ue000QUOTATION MARK'),
                     TableRow(contents='0027\ue000APOSTROPHE'),
                     TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                     TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                     TableRow(contents='2E0B\ue000RAISED SQUARE'),
                     Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                     Heading(level=3, contents='RI: Regional Indicator (B/A/XP)'),
                     Paragraph(contents='For line Breaking, the Regional Indicator characters are all those with the Unicode character property of Regional_Indicator. This includes:'),
                     TableRow(contents='1F1E6..1F1FF\ue000REGIONAL INDICATOR SYMBOL LETTER A .. REGIONAL INDICATOR SYMBOL LETTER Z'),
                     Paragraph(contents='Pairs of RI characters are used to represent a two-letter ISO 3166 region code.'),
                     Paragraph(contents='Runs of adjacent RI characters are grouped into pairs, beginnning at the start of the run. No break opportunity occurs within a pair; breaks can occur between adjacent pairs. When RI characters are adjacent to characters of other classes, breaks can occur before and after, except where forbidden by other rules.'),
                     Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                     Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                     Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                     Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                     TableRow(contents='0E00..0E7F\ue000Thai'),
                     TableRow(contents='0E80..0EFF\ue000Lao'),
                     TableRow(contents='1000..109F\ue000Myanmar'),
                     TableRow(contents='1780..17FF\ue000Khmer'),
                     TableRow(contents='1950..197F\ue000Tai Le'),
                     TableRow(contents='1980..19DF\ue000New Tai Lue'),
                     TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                     TableRow(contents='A9E0..A9FF\ue000Myanmar Extended-B'),
                     TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                     TableRow(contents='AA80..AADF\ue000Tai Viet'),
                     TableRow(contents='11700..1173F\ue000Ahom'),
                     Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                     Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                     Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                     Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                     Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                     TableRow(contents='0020\ue000SPACE (SP)'),
                     Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                     Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                     Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                     TableRow(contents='002F\ue000SOLIDUS'),
                     Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                     Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                     Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                     TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                     TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                     Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                     Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                     Heading(level=3, contents='XX: Unknown (XP)'),
                     Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                     Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                     Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                     Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                     Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                     Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                     Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                     TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                     Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                     Heading(level=3, contents='ZWJ: Zero Width Joiner (XA/XB) (Non-tailorable)'),
                     TableRow(contents='200D\ue000ZERO WIDTH JOINER (ZWJ)'),
                     Paragraph(contents='This character has various uses, including as a connector in emoji zwj sequences and as a joiner in complex scripts.'),
                     Paragraph(contents='Emoji zwj sequences are defined by ED-16, emoji zwj sequence, in [UTS51] and implemented for line breaking by rule LB8a. In other respects, the line breaking behavior of ZWJ is that of a combining character of class CM.'),
                     Heading(level=3, contents='5.2 Dictionary Usage'),
                     Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                     Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                     Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                     Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                     Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                     Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                     Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                     Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                     Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                     Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                     Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                     Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                     Heading(level=3, contents='5.3 Use of Hyphen'),
                     Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                     Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                     Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                     Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                     Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                     Paragraph(contents='dispara- te'),
                     Paragraph(contents='and the latter as'),
                     Paragraph(contents='dispara- -te.'),
                     Paragraph(contents='A recommended practice is to type <SHY, NBHY> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                     Paragraph(contents='• Simply inserting a hyphen glyph'),
                     Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                     Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                     Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                     Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                     Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                     Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                     Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                     Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                     Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                     Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                     Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                     Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [UAX9] and Section 9.2, Arabic, of [Unicode].'),
                     Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                     Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                     Paragraph(contents='The sequence <SHY, NBHY> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                     Heading(level=3, contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                     Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                     Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                     Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                     Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                     Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                     Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                     Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                     Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                     Heading(level=3, contents='5.7 Word Separator Characters'),
                     Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                     Paragraph(contents='1. suppress the visible word separator'),
                     Paragraph(contents='The:quick:brown fox:jumped.'),
                     Paragraph(contents='2. break before the visible word separator'),
                     Paragraph(contents='The:quick:brown :fox:jumped.'),
                     Paragraph(contents='3. break after the visible word separator'),
                     Paragraph(contents='The:quick:brown: fox:jumped.'),
                     Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                     Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                     Heading(level=2, contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                     Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1, Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                     Paragraph(contents='! Mandatory break at the indicated position'),
                     Paragraph(contents='× No break allowed at the indicated position'),
                     Paragraph(contents='÷ Break allowed at the indicated position'),
                     Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                     Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                     Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                     Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                     Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, ZW and ZWJ define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                     Heading(level=4, contents='Resolve line breaking classes:'),
                     Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, CJ, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                     Paragraph(contents='In the absence of such criteria all characters with a specific combination of original class and General_Category property value are resolved as follows:'),
                     TableRow(contents='Resolved\ue000Original\ue000General_Category'),
                     TableRow(contents='AL\ue000AI, SG, XX\ue000Any'),
                     TableRow(contents='CM\ue000SA\ue000Only Mn or Mc'),
                     TableRow(contents='AL\ue000SA\ue000Any except Mn and Mc'),
                     TableRow(contents='NS\ue000CJ\ue000Any'),
                     Heading(level=4, contents='Start and end of text:'),
                     Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                     Rule(contents='LB2 Never break at the start of text.'),
                     Formula(contents='sot ×'),
                     Rule(contents='LB3 Always break at the end of text.'),
                     Formula(contents='! eot'),
                     Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                     Heading(level=4, contents='Mandatory breaks:'),
                     Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                     Rule(contents='LB4 Always break after hard line breaks.'),
                     Formula(contents='BK !'),
                     Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                     Formula(contents='CR × LF'),
                     Formula(contents='CR !'),
                     Formula(contents='LF !'),
                     Formula(contents='NL !'),
                     Rule(contents='LB6 Do not break before hard line breaks.'),
                     Formula(contents='× ( BK | CR | LF | NL )'),
                     Heading(level=4, contents='Explicit breaks and non-breaks:'),
                     Rule(contents='LB7 Do not break before spaces or zero width space.'),
                     Formula(contents='× SP'),
                     Formula(contents='× ZW'),
                     Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                     Formula(contents='ZW SP* ÷'),
                     Rule(contents='LB8a Do not break between a zero width joiner and an ideograph, emoji base or emoji modifier.'),
                     Formula(contents='ZWJ × (ID | EB | EM)'),
                     Paragraph(contents='This rule prevents breaks within most emoji zwj sequences, as defined by ED-16. emoji zwj sequence in [UTS51].'),
                     Paragraph(contents='Further customization of this rule may be necessary for best behavior of emoji zwj sequences, using [CLDR].'),
                     Heading(level=4, contents='Combining marks:'),
                     Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                     Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules. Treat ZWJ as if it were CM.'),
                     Formula(contents='Treat X (CM | ZWJ)* as if it were X.'),
                     Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                     Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                     Rule(contents='LB10 Treat any remaining combining mark or ZWJ as AL.'),
                     Formula(contents='Treat any remaining CM or ZWJ as it if were AL.'),
                     Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                     Heading(level=4, contents='Word joiner:'),
                     Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                     Formula(contents='× WJ'),
                     Formula(contents='WJ ×'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12 Do not break after NBSP and related characters.'),
                     Formula(contents='GL ×'),
                     Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                     Formula(contents='[^SP BA HY] × GL'),
                     Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Opening and closing:'),
                     Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                     Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                     Formula(contents='× CL'),
                     Formula(contents='× CP'),
                     Formula(contents='× EX'),
                     Formula(contents='× IS'),
                     Formula(contents='× SY'),
                     Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                     Formula(contents='OP SP* ×'),
                     Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                     Formula(contents='QU SP* × OP'),
                     Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                     Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                     Formula(contents='(CL | CP) SP* × NS'),
                     Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                     Formula(contents='B2 SP* × B2'),
                     Heading(level=4, contents='Spaces:'),
                     Rule(contents='LB18 Break after spaces.'),
                     Formula(contents='SP ÷'),
                     Heading(level=4, contents='Special case rules:'),
                     Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                     Formula(contents='× QU'),
                     Formula(contents='QU ×'),
                     Rule(contents='LB20 Break before and after unresolved CB.'),
                     Formula(contents='÷ CB'),
                     Formula(contents='CB ÷'),
                     Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                     Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                     Formula(contents='× BA'),
                     Formula(contents='× HY'),
                     Formula(contents='× NS'),
                     Formula(contents='BB ×'),
                     Rule(contents="LB21a Don't break after Hebrew + Hyphen."),
                     Formula(contents='HL (HY | BA) ×'),
                     Rule(contents='LB21b Don’t break between Solidus and Hebrew letters.'),
                     Formula(contents='SY × HL'),
                     Rule(contents='LB22 Do not break between two ellipses, or between letters, numbers or exclamations and ellipsis.'),
                     Formula(contents='(AL | HL) × IN'),
                     Formula(contents='EX × IN'),
                     Formula(contents='(ID | EB | EM) × IN'),
                     Formula(contents='IN × IN'),
                     Formula(contents='NU × IN'),
                     Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                     Heading(level=4, contents='Numbers:'),
                     Paragraph(contents='Do not break alphanumerics.'),
                     Rule(contents='LB23 Do not break between digits and letters.'),
                     Formula(contents='(AL | HL) × NU'),
                     Formula(contents='NU × (AL | HL)'),
                     Rule(contents='LB23a Do not break between numeric prefixes and ideographs, or between ideographs and numeric postfixes.'),
                     Formula(contents='PR × (ID | EB | EM)'),
                     Formula(contents='(ID | EB | EM) × PO'),
                     Rule(contents='LB24 Do not break between numeric prefix/postfix and letters, or between letters and prefix/postfix.'),
                     Formula(contents='(PR | PO) × (AL | HL)'),
                     Formula(contents='(AL | HL) × (PR | PO)'),
                     Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                     Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                     Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                     Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                     Formula(contents='CL × PO'),
                     Formula(contents='CP × PO'),
                     Formula(contents='CL × PR'),
                     Formula(contents='CP × PR'),
                     Formula(contents='NU × PO'),
                     Formula(contents='NU × PR'),
                     Formula(contents='PO × OP'),
                     Formula(contents='PO × NU'),
                     Formula(contents='PR × OP'),
                     Formula(contents='PR × NU'),
                     Formula(contents='HY × NU'),
                     Formula(contents='IS × NU'),
                     Formula(contents='NU × NU'),
                     Formula(contents='SY × NU'),
                     Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                     Heading(level=4, contents='Korean syllable blocks'),
                     Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                     Rule(contents='LB26 Do not break a Korean syllable.'),
                     Formula(contents='JL × (JL | JV | H2 | H3)'),
                     Formula(contents='(JV | H2) × (JV | JT)'),
                     Formula(contents='(JT | H3) × JT'),
                     Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                     Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                     Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                     Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                     Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                     Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                     Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                     Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                     Formula(contents='(AL | HL) × (AL | HL)'),
                     Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                     Formula(contents='IS × (AL | HL)'),
                     Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                     Formula(contents='(AL | HL | NU) × OP'),
                     Formula(contents='CP × (AL | HL | NU)'),
                     Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                     Rule(contents='LB30a Break between two regional indicator symbols if and only if there are an even number of regional indicators preceding the position of the break.'),
                     Formula(contents='sot (RI RI)* RI × RI'),
                     Formula(contents='[^RI] (RI RI)* RI × RI'),
                     Rule(contents='LB30b Do not break between an emoji base and an emoji modifier.'),
                     Formula(contents='EB × EM'),
                     Rule(contents='LB31 Break everywhere else.'),
                     Formula(contents='ALL ÷'),
                     Formula(contents='÷ ALL'),
                     Heading(level=2, contents='7 Deleted'),
                     Paragraph(contents='Formerly was: Pair Table-Based Implementation.'),
                     Heading(level=2, contents='8 Customization'),
                     Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                     Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                     Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                     Paragraph(contents='Note: Some changes to rules and data are needed for the best segmentation behavior of emoji zwj sequences [UTS51]. Implementations are strongly encouraged to use the the line break rules in the latest version of CLDR (Version 31 or later) [CLDR] and the latest emoji properties (version 5.0 or later) [UTS51].'),
                     Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how to customize the pair table implementation of the line breaking algorithm for these tailorings.'),
                     Heading(level=3, contents='8.1 Types of Tailoring'),
                     Paragraph(contents='There are two principal ways of tailoring the line breaking algorithm:'),
                     Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                     Paragraph(contents='2. Changing the line breaking rules Adding new rules, or altering or removing existing rules, provides more flexibility in changing the line breaking behavior. This can also include introducing new character classes for use by the new or altered rules.'),
                     Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                     Heading(level=3, contents='8.2 Examples of Customization'),
                     Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm.'),
                     Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the line breaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                     Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification.'),
                     Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. In this case the intersections of NU/NU, NU/AL, AL/AL, and AL/NU are affected.'),
                     Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by mapping class CJ to be handled as class ID in rule LB1.'),
                     Paragraph(contents='Example 6. Tailor to prevent line breaks from falling within default grapheme clusters, as defined by by Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. The tailoring can be accomplished by first segmenting the text into grapheme clusters according to the rules defined in UAX #29, and then finding line breaks according to the default line break rules, giving each grapheme cluster the line breaking class of its first code point.'),
                     Paragraph(contents='An example of a grapheme cluster that would be split by the default line break rules is a Zero Width Space followed by a combining mark.'),
                     Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * ( CL | CP ) ? ( PR | PO) ?'),
                     Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                     Paragraph(contents='Regex-Number: Do not break numbers.'),
                     Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                     Formula(contents='( OP | HY ) × NU'),
                     Formula(contents='NU × (NU | SY | IS)'),
                     Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL | CP )'),
                     Formula(contents='NU (NU | SY | IS)* (CL | CP)? × (PO | PR)'),
                     Paragraph(contents='In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                     Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                     Formula(contents='[^NU] × CL'),
                     Formula(contents='[^NU] × CP'),
                     Formula(contents='× EX'),
                     Formula(contents='[^NU] × IS'),
                     Formula(contents='[^NU] × SY'),
                     Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                     Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                     Heading(level=2, contents='9 Implementation Notes'),
                     Paragraph(contents='This section provides additional notes on implementation issues.'),
                     Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                     Paragraph(contents='To replace rule LB9, terms of the form'),
                     Paragraph(contents='B # A'),
                     Paragraph(contents='B SP* # A'),
                     Paragraph(contents='B #'),
                     Paragraph(contents='B SP* #'),
                     Paragraph(contents='are replaced by terms of the form'),
                     Paragraph(contents='B CM* # A'),
                     Paragraph(contents='B CM* SP* # A'),
                     Paragraph(contents='B CM* #'),
                     Paragraph(contents='B CM* SP* #'),
                     Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                     Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                     Paragraph(contents='Replace LB10 by the following rule:'),
                     Paragraph(contents='× CM'),
                     Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                     Paragraph(contents='(AL | NU) × OP'),
                     Paragraph(contents='add another rule'),
                     Paragraph(contents='CM × OP.'),
                     Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                     Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='As stated in Section 7.9, Combining Marks of [Unicode], combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                     Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                     Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                     Formula(contents='Treat SP CM* as if it were ID.'),
                     Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                     Heading(level=2, contents='10 Testing'),
                     Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2, Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                     Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                     Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                     Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                     Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                     Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                     Paragraph(contents='1. The rules are cast into a more regex-style.'),
                     Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                     Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                     Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                     Paragraph(contents='• 13.01) [^NU] × CL'),
                     Paragraph(contents='• 13.02) × EX'),
                     Paragraph(contents='• ...'),
                     Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                     Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                     Paragraph(contents='Table 4. Numbering of Test Rules'),
                     TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                     TableRow(contents='LB2\ue0000.2\ue000start of text'),
                     TableRow(contents='LB3\ue0000.3\ue000end of text'),
                     TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                     TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                     TableRow(contents='LB31\ue000999\ue000÷ any'),
                     Heading(level=2, contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                     Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                     TableRow(contents='9.0.0\ue0008.0.0\ue0006.2.0\ue0006.1.0\ue0005.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                     TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                     TableRow(contents='LB2\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                     TableRow(contents='LB3\ue0003\ue0003\ue0003\ue0003\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                     TableRow(contents='LB4\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB5\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB6\ue0006\ue0006\ue0006\ue0006\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                     TableRow(contents='LB7\ue0007\ue0007\ue0007\ue0007\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                     TableRow(contents='LB8\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                     TableRow(contents='LB8a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                     TableRow(contents='LB9\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB10\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                     TableRow(contents='LB11\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12a\ue00012a\ue00012a\ue00012a\ue00012a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB13\ue00013\ue00013\ue00013\ue00013\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                     TableRow(contents='LB14\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                     TableRow(contents='LB15\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                     TableRow(contents='LB16\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                     TableRow(contents='LB17\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                     TableRow(contents='LB18\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                     TableRow(contents='LB19\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                     TableRow(contents='LB20\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                     TableRow(contents='LB21\ue00021\ue00021\ue00021\ue00021\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                     TableRow(contents='LB21a\ue00021a\ue00021a\ue00021a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB21b\ue00021b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB22\ue00022\ue00022\ue00022\ue00022\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                     TableRow(contents='LB23\ue00023\ue00023\ue00023\ue00023\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                     TableRow(contents='LB23a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB24\ue00024\ue00024\ue00024\ue00024\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='LB25\ue00025\ue00025\ue00025\ue00025\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                     TableRow(contents='LB26\ue00026\ue00026\ue00026\ue00026\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB27\ue00027\ue00027\ue00027\ue00027\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB28\ue00028\ue00028\ue00028\ue00028\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                     TableRow(contents='LB29\ue00029\ue00029\ue00029\ue00029\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30\ue00030\ue00030\ue00030\ue00030\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30a\ue00030a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB31\ue00031\ue00031\ue00031\ue00031\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                     Heading(level=2, contents='References'),
                     Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                     Heading(level=2, contents='Acknowledgments'),
                     Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintains the text.'),
                     Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                     Heading(level=2, contents='Modifications'),
                     Paragraph(contents='The following documents the changes introduced by each revision.'),
                     Heading(level=4, contents='Revision 39:'),
                     Paragraph(contents='• Reissued for Unicode 10.0.0.'),
                     Paragraph(contents='• Removed Section 7, Pair Table Based Implementation, and other references to it.'),
                     Paragraph(contents='• Changed definition of Regional Indicator to refer to the corresponding Unicode character property.'),
                     Paragraph(contents='• Changed text referring to customizations from CLDR to match the wording agreed to for UAX #29.'),
                     Paragraph(contents='• Updated the list of ranges and blocks that default to class ID.'),
                     Paragraph(contents='• Removed U+FF70 from the list of example characters for class NS.'),
                     Paragraph(contents='Revision 38 being a proposed update, only changes between revisions 37 and 39 are noted here.'),
                     Heading(level=4, contents='Revision 37:'),
                     Paragraph(contents='• Reissued for Unicode 9.0.0.'),
                     Paragraph(contents='• Revised rules 23 & 24, and added 23a, to prevent breaks between (letters or numbers) and (numeric prefixes or postfixes), on either side.'),
                     Paragraph(contents='• Added Emoji Base (EB) and Emoji Modifier (EM) character classes, and rule 30b to prevent breaks within emoji modifier sequences.'),
                     Paragraph(contents='• Revised rules 8a, 22 and 23a to treat EB and EM similarly to ID in most contexts.'),
                     Paragraph(contents='• Regional Indicators: revised class description and rule LB30a to group into pairs, with break opportunities between pairs.'),
                     Paragraph(contents='• Added ZWJ class and rule 8a to prevent breaks within emoji ZWJ sequences.'),
                     Paragraph(contents='• Revised rules 9 and 10 to treat any ZWJ as a combining mark when not in the context of an emoji zwj sequence.'),
                     Paragraph(contents='Revision 36 being a proposed update, only changes between revisions 35 and 37 are noted here.'),
                     Heading(level=4, contents='Revision 35:'),
                     Paragraph(contents='• Reissued for Unicode 8.0.0.'),
                     Paragraph(contents='• Updated table styles. Minor editing and HTML cleanup throughout. [KW]'),
                     Paragraph(contents='• Added EX × IN to rule 22.'),
                     Paragraph(contents='• Added rule 21b, don’t break between Solidus and Hebrew.'),
                     Paragraph(contents='Revision 34 being a proposed update, only changes between revisions 33 and 35 are noted here.'),
                     Heading(level=4, contents='Revision 33:'),
                     Paragraph(contents='• Reissued for Unicode 7.0.0.'),
                     Heading(level=4, contents='Revision 32:'),
                     Paragraph(contents='• Reissued for Unicode 6.3.0.'),
                     Paragraph(contents='• Update the description of class CM to mention U+3035 VERTICAL KANA REPEAT MARK LOWER HALF.'),
                     Paragraph(contents='• Update the description of class BA to reflect the change of U+3000 IDEOGRAPHIC SPACE to class BA.'),
                     Paragraph(contents='• Clarify descriptions in Section 7.3, Example Pair Table.'),
                     Paragraph(contents='• Remove Section 7.6, Conjoining Jamos pair table implementation, reflecting that Jamos are included directly in the main pair table.'),
                     Paragraph(contents='• Revised Example 6 of Section 8.2, Examples of Customization.'),
                     Paragraph(contents='Revision 31 being a proposed update, only changes between revisions 32 and 30 are noted here.'),
                     Heading(level=4, contents='Revision 30:'),
                     Paragraph(contents='• Reissued for Unicode 6.2.0.'),
                     Paragraph(contents='• Introduce character class RI (Regional Indicator).'),
                     Paragraph(contents='• Introduce rule 30a, do not break between Regional Indicators.'),
                     Paragraph(contents='Revision 29 being a proposed update, only changes between revisions 30 and 28 are noted here.'),
                     Heading(level=4, contents='Revision 28:'),
                     Paragraph(contents='• Reissued for Unicode 6.1.0.'),
                     Paragraph(contents="• Add rule 21a, don't break after Hebrew + hyphen."),
                     Paragraph(contents='• Introduce character class HL (Hebrew Letter).'),
                     Paragraph(contents='• Introduce character class CJ for small kana, and amend rule LB1 to provide default resolution for class CJ.'),
                     Paragraph(contents='• Clarify that the list of GL characters is not comprehensive.'),
                     Paragraph(contents='• Update Example 7 of Section 8.2, Examples of Customization, to reflect the introduction of character class CP.'),
                     Paragraph(contents='Revision 27 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                     Heading(level=4, contents='Revision 26:'),
                     Paragraph(contents='• Reissued for Unicode 6.0.0.'),
                     Paragraph(contents='• In Section 5.1, revised the description of the SHY character.'),
                     Paragraph(contents='• Changed LB8 from "ZW ÷" to "ZW SP* ÷" in accordance with UAX 14 Corrigendum #7, http://www.unicode.org/versions/corrigendum7.html.'),
                     Paragraph(contents='• Changed references to Unicode 5.2 to generic references where appropriate.'),
                     Paragraph(contents='• In Section 3, removed Ideographic Space from the list of spaces that may be compressed or expanded and clarified that the justification of lines is out of scope.'),
                     Paragraph(contents='Revision 25 being a proposed update, only changes between revisions 24 and 26 are noted here.'),
                     Heading(level=4, contents='Revision 24:'),
                     Paragraph(contents='• Reissued for Unicode 5.2.0.'),
                     Paragraph(contents='• Added class CP, reintroduced rule LB30, adjusted other rules for class CP.'),
                     Paragraph(contents='• In Section 5.1, clarified that the lists of characters for each property contain representative characters, and are not necessarily complete.'),
                     Paragraph(contents='• Unassigned code points in CJK regions default to class ID.'),
                     Paragraph(contents='• Added Tai Tham, Myanmar Extended-A and Tai Viet blocks to class SA.'),
                     Paragraph(contents='• Brought descriptive names of the character classes into closer alignment with the Unicode Line Break character property values.'),
                     Paragraph(contents='• Small edits for improved clarity, document style.'),
                     Paragraph(contents='Revision 23 being a proposed update, only changes between revisions 22 and 24 are noted here.'),
                     Heading(level=4, contents='Revision 22:'),
                     Paragraph(contents='• Reissued for Version 5.1.0.'),
                     Paragraph(contents='• Added 2E18, INVERTED INTERROBANG, to class OP.'),
                     Paragraph(contents='• Added 2064, INVISIBLE PLUS, to class AL.'),
                     Paragraph(contents='• Added 2E00..2E01, 2E06..2E08, 2E0B to class QU.'),
                     Paragraph(contents='• Removed LB30, to correct regression for U+3002 IDEOGRAPHIC FULL STOP'),
                     Paragraph(contents='• Add Example 9 to Section 8, Customization.'),
                     Paragraph(contents='• Substantial revisions to Section 4, Conformance.'),
                     Paragraph(contents='• Section 5.7, Word Separators, added.'),
                     Paragraph(contents='• Section 10, Testing, added.'),
                     Paragraph(contents='• Renumber rules for consistency: 12a → 12; 12b → 12a'),
                     Paragraph(contents='• Added 02DF, MODIFIER LETTER CROSS ACCENT, to class BB.'),
                     Paragraph(contents='• Added discussion for 202F NARROW NO-BREAK SPACE and 180E MONGOLIAN VOWEL SEPARATOR'),
                     Paragraph(contents='• Corrected typos in LB13 and LB16'),
                     Paragraph(contents='• Added characters introduced with Unicode 5.1 to the lists associated with the line break properties.'),
                     Paragraph(contents='• Added Section 5.2 on the special handling of hyphens. Edited Section 3 for clarity.'),
                     Paragraph(contents='• Improved delineation between normative and informative information.'),
                     Paragraph(contents='• Changed from EX to IS'),
                     Paragraph(contents='• 060C ( ، ) ARABIC COMMA'),
                     Paragraph(contents='• Changed from EX to PO'),
                     Paragraph(contents='• 066A ( ٪ ) ARABIC PERCENT SIGN'),
                     Paragraph(contents='• Changed from AI to OP'),
                     Paragraph(contents='• 00A1 ( ¡ ) INVERTED EXCLAMATION MARK'),
                     Paragraph(contents='• 00BF ( ¿ ) INVERTED QUESTION MARK'),
                     Paragraph(contents='• Changed from BA to EX'),
                     Paragraph(contents='• 1802 ( ᠂ ) MONGOLIAN COMMA'),
                     Paragraph(contents='• 1803 ( ᠃ ) MONGOLIAN FULL STOP'),
                     Paragraph(contents='• 1808 ( ᠈ ) MONGOLIAN MANCHU COMMA'),
                     Paragraph(contents='• 1809 ( ᠉ ) MONGOLIAN MANCHU FULL STOP'),
                     Paragraph(contents='• 2CF9 ( ⳹ ) COPTIC OLD NUBIAN FULL STOP'),
                     Paragraph(contents='• 2CFE ( ⳾ ) COPTIC FULL STOP'),
                     Paragraph(contents='• Changed from BA to AL'),
                     Paragraph(contents='• 1A1E ( ᨞ ) BUGINESE PALLAWA'),
                     Paragraph(contents='• Changed from AL to BB'),
                     Paragraph(contents='• 1FFD ( ´ ) GREEK OXIA'),
                     Paragraph(contents='• Added a note on lack of canonical equivalence for the definition of ambiguous characters.'),
                     Paragraph(contents='• Corrected typos in the sample source code.'),
                     Paragraph(contents='• Split rule LB12 to accommodate Polish and Portuguese hyphenation.'),
                     Paragraph(contents='Revisions 20 and 21 being a proposed update, only changes between revisions 19 and 22 are noted here.'),
                     Heading(level=4, contents='Revision 19:'),
                     Paragraph(contents='• Changed 000B from CM to BK, changed 035C from CM to GL.'),
                     Paragraph(contents='• Changed 17D9 from NS to AL. 203D, 2047..2049 from AL to NS.'),
                     Paragraph(contents='• Corrected listing of NS property to match the data file to remove 17D8 and 17DA.'),
                     Paragraph(contents='• The data file has been corrected to match the listing of the BA property to include 1735 and 1736, also changed 05BE and 103D0 from AL to BA.'),
                     Paragraph(contents='• Changed the brackets 23B4.23B6 to AL.'),
                     Paragraph(contents='• Updated the SA property to make it more generic, includes changing many characters from CM to SA.'),
                     Paragraph(contents='• Reflected new characters'),
                     Paragraph(contents='• Made several text changes for clarifications, including reworded the intro to Section 6.'),
                     Paragraph(contents='• Added Section 9, Implementation Notes.'),
                     Paragraph(contents='• Restated the conformance clauses and reorganized the algorithm into a tailorable and a non-tailorable part; this affects text in Sections 4, 5, and 6.'),
                     Paragraph(contents='• Removed redundant term PR x HY from rule 18 and rule into new LB24 and LB26 to provide better granularity for tailoring,'),
                     Paragraph(contents='• Moved rule 11b and 13 above rule 8 (new LB13), restating rule 13 (new LB12) to preserve its effect in the new location.'),
                     Paragraph(contents='• Added new rule LB30 to handle words like “person(s)”.'),
                     Paragraph(contents='• Renumbered the rules.'),
                     Paragraph(contents='• Extensive copy-editing as part of Unicode 5.0 publication.'),
                     Paragraph(contents='Revision 18 being a proposed update, only changes between revisions 17 and 19 are noted here.'),
                     Heading(level=4, contents='Revision 17:'),
                     Paragraph(contents='• Significantly revised the line break classes for Tibetan, as well as Mongolian and Arabic Punctuation.'),
                     Paragraph(contents='• Added Section 5.6 on Tibetan and Section 7.7 on handling explicit breaks.'),
                     Paragraph(contents='• Added line break class assignments for Unicode 4.1 characters.'),
                     Paragraph(contents='• Significantly revised the line break class assignments for danda characters and made it consistent across scripts.'),
                     Paragraph(contents='• LB6: Replaced by new rules 18b and 18c, using new classes JL, JV, JT, H2, and H3.'),
                     Paragraph(contents='• LB7a: Deprecated rule 7a because SPACE as base character for standalone combining marks is deprecated.'),
                     Paragraph(contents='• LB7b: Revised 7b and Section 7.5 as well as Table 2 to match the deprecation of rule 7a.'),
                     Paragraph(contents='• LB7b: Clarified that this rule does not apply to SP.'),
                     Paragraph(contents='• LB11a: Added a missing SP * to make the formula match the rule.'),
                     Paragraph(contents='• LB18b: Removed the existing rule 18b because it was redundant.'),
                     Paragraph(contents='• Corrected an erratum on revision 14 by splitting GL from WJ in rule 11b and moving to a new rule 13.'),
                     Paragraph(contents='• Updated the pair table and sample code to match the changes in the rules.'),
                     Paragraph(contents='• Updated the regular expression for numbers.'),
                     Paragraph(contents='• Added several notes on implementation techniques.'),
                     Paragraph(contents='• Moved all suggested tailorings from the rules section to the examples in Section 8.2.'),
                     Paragraph(contents='Revision 16 being a proposed update, only changes between revisions 17 and 15 are noted here.'),
                     Heading(level=4, contents='Revision 15:'),
                     Paragraph(contents='• LB19b: Added new rule 19b.'),
                     Paragraph(contents='• Changed line breaking class: combining double diacritics from CM to GL, 037A and 2126 to match their canonical equivalents, 2140 corrected to AL, Arabic numerical separators from AL to NU, many alphabetic characters that are EAW=Ambiguous from AI to AL to better reflect current practice, remaining circled numbers and letters from AL to AI for consistency.'),
                     Paragraph(contents='• Added a note on the behavior of U+200B and U+3000 when lines are justified.'),
                     Paragraph(contents='• Reconciled the data file and description of line breaking classes in Section 5.'),
                     Paragraph(contents='• Reconciled the rules and pair table implementation of the algorithm.'),
                     Paragraph(contents='• Updated the text of the conformance statement in Section 4.'),
                     Paragraph(contents='• Added Section 5.5 on use of double hyphen.'),
                     Paragraph(contents='• Updated styles and table formatting.'),
                     Paragraph(contents='• Minor edits throughout.'),
                     Heading(level=4, contents='Revision 14:'),
                     Paragraph(contents='• Added new line breaking classes NL and WJ to better support NEL and Word Joiner.'),
                     Paragraph(contents='• Deprecated the use of class SG.'),
                     Paragraph(contents='• Several changes to the rules. Moved rule 15b to 18b, added 14b, moved 13 to 11b. Split rule 6 in to 6a and 7b and split rule 3a into 3a and 3b. Restated rule 7a and added rule 7c.'),
                     Paragraph(contents="• Updated the pair table and sample code, adding a special token '#' to account for breaks before SP followed by CM."),
                     Paragraph(contents='• Clarified the behavior of SHY and MONGOLIAN TODO SOFT HYPHEN, as well as WJ and ZWNBSP.'),
                     Paragraph(contents='• Added a new Section 5.4 on SOFT HYPHEN and a new Section 7.6 on conjoining jamos.'),
                     Paragraph(contents='• Added to the discussion on how to treat combining marks.'),
                     Paragraph(contents='• Clarified the conformance requirements in Section 4'),
                     Paragraph(contents='• Added a definition of line breaking class as synonym for the unwieldy line breaking property value.'),
                     Paragraph(contents='• Expanded the introduction in Section 3.'),
                     Paragraph(contents='• Moved subsections on customization into a new Section 8 and expanded the text.'),
                     Paragraph(contents='• Many edits throughout the text to update it for Unicode 4.0.0.'),
                     Paragraph(contents='Revision 11 being a proposed update, only changes between revisions 12 and 14 are noted here.'),
                     Heading(level=4, contents='Revision 12:'),
                     Paragraph(contents='• Change header for publication of Unicode. Fixed a few additional typos.'),
                     Paragraph(contents='• Updated for publication of Unicode, Version 3.2'),
                     Paragraph(contents='• Added Word joiner to GL and noted that it now is the preferred character instead of FEFF'),
                     Paragraph(contents='• Added LB class assignments for the new Unicode 3.2 characters to the data file. Only characters whose LB class differs from those of characters with related General_Category are noted explicitly in this text.'),
                     Paragraph(contents='Revision 11, being a proposed update, only changes between revisions 10 and 12 are noted here.]'),
                     Heading(level=4, contents='Revision 10:'),
                     Paragraph(contents='• Changed header for publication of Unicode 3.1. Fixed a few additional typos.'),
                     Heading(level=4, contents='Revision 9:'),
                     Paragraph(contents='• Fixed several typos, reformatted and sorted some lists by code points'),
                     Paragraph(contents='• Reconciled the data file and the description for BB (00B4), XX (PUA), AI (2015,25C8,PUA), ID (FE6B), BA (00B4)'),
                     Paragraph(contents='• Restored PUA to XX.'),
                     Paragraph(contents='• LB7: Restored the rule, and fixed the note so it matches the rule and Section 7.7 of [Unicode4.0].'),
                     Paragraph(contents='• LB11a: added a rule to reconcile the rules against pair table entry B2 ^ B2'),
                     Paragraph(contents='• LB19: added an entry to reconcile the rules against pair table entry PR % ID'),
                     Paragraph(contents='• Reworked Section 7.5.'),
                     Paragraph(contents='• Removed two unused definitions (overfull and underfull).'),
                     Heading(level=4, contents='Revision 8:'),
                     Paragraph(contents='• New status section, changed format of references. Fixed several typos.'),
                     Paragraph(contents='• Added headers to Table 1'),
                     Paragraph(contents='• Added a note on use of B and A'),
                     Paragraph(contents='• Added mention of PUA to AI and removed mention of PUA from XX because the data file assigns AI to them.'),
                     Paragraph(contents='• Clarified the membership and implication of class CM and ID.'),
                     Paragraph(contents='• Updated class ID by the new ranges for 3.1.'),
                     Paragraph(contents='• LB6: Clarified the description of LB6 to clarify how it affects conjoining Jamo.'),
                     Paragraph(contents='• LB7: Fixed the note so it matches the rule.'),
                     Paragraph(contents='• LB17: Fixed the regular expression for numbers in the explanation for this rule.'),
                     Paragraph(contents='• Reworded Sections 7.6 and 7.7 to clarify the customization process.'),
                     Heading(level=4, contents='Revision 7:'),
                     Paragraph(contents='• Fixed several typos.'),
                     Paragraph(contents='• New header.'),
                     Heading(level=4, contents='Revision 6:'),
                     Paragraph(contents='• Rewrite and reorganization of the text as part of the publication of the Unicode Standard, Version 3.0.'),
                     Paragraph(contents='No change history is available for earlier revisions.'),
                     Paragraph(contents='© 2017 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                     Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(11, 0, 0): [Heading(level=2, contents='Unicode® Standard Annex #14'),
                     Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                     TableRow(contents='Version\ue000Unicode 11.0.0'),
                     TableRow(contents='Editors\ue000Andy Heninger (andy.heninger@gmail.com)'),
                     TableRow(contents='Date\ue0002018-05-21'),
                     TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-41.html'),
                     TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-39.html'),
                     TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                     TableRow(contents='Latest Proposed Update\ue000http://www.unicode.org/reports/tr14/proposed.html'),
                     TableRow(contents='Revision\ue00041'),
                     Heading(level=4, contents='Summary'),
                     Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display.'),
                     Heading(level=4, contents='Status'),
                     Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                     Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                     Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                     Heading(level=4, contents='Contents'),
                     Paragraph(contents='1 Overview and Scope'),
                     Paragraph(contents='2 Definitions'),
                     Paragraph(contents='3 Introduction'),
                     Paragraph(contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='4 Conformance'),
                     Paragraph(contents='4.1 Conformance Requirements'),
                     Paragraph(contents='5 Line Breaking Properties'),
                     Paragraph(contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='5.2 Dictionary Usage'),
                     Paragraph(contents='5.3 Use of Hyphen'),
                     Paragraph(contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='5.7 Word Separator Characters'),
                     Paragraph(contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='7 Deleted. (Formerly was: Pair Table-Based Implementation)'),
                     Paragraph(contents='8 Customization'),
                     Paragraph(contents='8.1 Types of Tailoring'),
                     Paragraph(contents='8.2 Examples of Customization'),
                     Paragraph(contents='9 Implementation Notes'),
                     Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='10 Testing'),
                     Paragraph(contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='References'),
                     Paragraph(contents='Acknowledgments'),
                     Paragraph(contents='Modifications'),
                     Heading(level=2, contents='1 Overview and Scope'),
                     Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                     Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                     Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                     Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Two main sections follow:'),
                     Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                     Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                     Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                     Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                     Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                     Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                     Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                     Heading(level=2, contents='2 Definitions'),
                     Paragraph(contents='The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard.'),
                     Paragraph(contents='All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard [Unicode].'),
                     Paragraph(contents='LD1. Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                     Paragraph(contents='LD2. Line Break: The position in the text where one line ends and the next one starts.'),
                     Paragraph(contents='LD3. Line Break Opportunity: A place where a line is allowed to end.'),
                     Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                     Paragraph(contents='LD4. Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                     Paragraph(contents='LD5. Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                     Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                     Paragraph(contents='LD6. Line Breaking Class: A class of characters with the same line breaking property value.'),
                     Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                     Paragraph(contents='LD7. Mandatory Break: A line must break following a character that has the mandatory break property.'),
                     Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                     Paragraph(contents='LD8. Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                     Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space.'),
                     Paragraph(contents='LD9. Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                     Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, an indirect break is represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                     Paragraph(contents='LD10. Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, a prohibited break is expressed as a rule of the form: B SP* × A.'),
                     Paragraph(contents='LD11. Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                     Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                     Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                     Paragraph(contents='Table 1. Line Breaking Classes'),
                     TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                     TableRow(contents='Non-tailorable Line Breaking Classes'),
                     TableRow(contents='BK\ue000Mandatory Break\ue000NL, PARAGRAPH SEPARATOR\ue000Cause a line break (after)'),
                     TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                     TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                     TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                     TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                     TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                     TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                     TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                     TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                     TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                     TableRow(contents='ZWJ\ue000Zero Width Joiner\ue000Zero Width Joiner\ue000Prohibit line breaks within joiner sequences'),
                     TableRow(contents='Break Opportunities'),
                     TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                     TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                     TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                     TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                     TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                     TableRow(contents='Characters Prohibiting Certain Breaks'),
                     TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                     TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                     TableRow(contents='NS\ue000Nonstarter\ue000“‼”, “‽”, “⁇”, “⁉”, etc.\ue000Allow only indirect line breaks before'),
                     TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                     TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                     TableRow(contents='Numeric Context'),
                     TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                     TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                     TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                     TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                     TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                     TableRow(contents='Other Characters'),
                     TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                     TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                     TableRow(contents='CJ\ue000Conditional Japanese Starter\ue000Small kana\ue000Treat as NS or ID for strict or normal breaking.'),
                     TableRow(contents='EB\ue000Emoji Base\ue000All emoji allowing modifiers\ue000Do not break from following Emoji Modifier'),
                     TableRow(contents='EM\ue000Emoji Modifier\ue000Skin tone modifiers\ue000Do not break from preceding Emoji Base'),
                     TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='HL\ue000Hebrew Letter\ue000Hebrew\ue000Do not break around a following hyphen; otherwise act as Alphabetic'),
                     TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                     TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='RI\ue000Regional Indicator\ue000REGIONAL INDICATOR SYMBOL LETTER A .. Z\ue000Keep pairs together. For pairs, break before and after other classes'),
                     TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                     TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                     Heading(level=2, contents='3 Introduction'),
                     Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                     Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                     Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                     Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                     Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                     Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                     Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                     Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                     Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                     Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                     Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                     Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                     Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                     Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                     Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                     Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [UAX9]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                     Heading(level=2, contents='4 Conformance'),
                     Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                     Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                     Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                     Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                     Heading(level=3, contents='4.1 Conformance Requirements'),
                     Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                     Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                     Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                     Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                     Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                     Heading(level=2, contents='5 Line Breaking Properties'),
                     Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                     Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                     Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into the algorithm defined in Section 6, Line Breaking Algorithm. This section describes a workable default line breaking method. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences.'),
                     Heading(level=4, contents='Data File'),
                     Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a semicolon-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name.'),
                     Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                     Heading(level=4, contents='Future Updates'),
                     Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                     Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                     TableRow(contents='Label\ue000Meaning for the Class'),
                     TableRow(contents='(A)\ue000It allows a break opportunity after in specified contexts.'),
                     TableRow(contents='(XA)\ue000It prevents a break opportunity after in specified contexts.'),
                     TableRow(contents='(B)\ue000It allows a break opportunity before in specified contexts.'),
                     TableRow(contents='(XB)\ue000It prevents a break opportunity before in specified contexts.'),
                     TableRow(contents='(P)\ue000It allows a break opportunity for a pair of same characters.'),
                     TableRow(contents='(XP)\ue000It prevents a break opportunity for a pair of same characters.'),
                     Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                     Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                     Paragraph(contents='Some characters that ordinarily act like alphabetic characters are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                     Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [UAX11].'),
                     Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                     Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                     Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                     TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                     TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                     Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                     Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                     Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                     Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                     Paragraph(contents='This class contains alphabetic or symbolic characters not explicitly assigned to another line breaking class. These are primarily characters of the following categories:'),
                     TableRow(contents='Category\ue000General_Category Values'),
                     TableRow(contents='Alphabetic\ue000Lu, Ll, Lt, Lm, and Lo'),
                     TableRow(contents='Symbols\ue000Sm, Sk, and So'),
                     TableRow(contents='Non-decimal Numbers\ue000Nl and No'),
                     TableRow(contents='Punctuation\ue000Pc, Pd, and Po'),
                     Paragraph(contents='Line break class AL also contains several format characters, including:'),
                     TableRow(contents='0600..0604\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAMVAT'),
                     TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                     TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                     TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                     TableRow(contents='110BD\ue000KAITHI NUMBER SIGN'),
                     Paragraph(contents='These format characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                     Paragraph(contents='Major exceptions to the general pattern of alphabetic and symbolic characters having line break class AL include:'),
                     Paragraph(contents='HL for Hebrew letters AI or ID, based on the East Asian Width property of the character ID for certain pictographic symbols CJ for small hiragana and katakana SA for complex context scripts JL, JV, JT, H2 or H3 for Hangul characters'),
                     Heading(level=3, contents='BA: Break After (A)'),
                     Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                     Heading(level=4, contents='Breaking Spaces'),
                     Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                     TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                     TableRow(contents='2000\ue000EN QUAD'),
                     TableRow(contents='2001\ue000EM QUAD'),
                     TableRow(contents='2002\ue000EN SPACE'),
                     TableRow(contents='2003\ue000EM SPACE'),
                     TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                     TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                     TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                     TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                     TableRow(contents='2009\ue000THIN SPACE'),
                     TableRow(contents='200A\ue000HAIR SPACE'),
                     TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                     TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                     Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                     Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                     Paragraph(contents='For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                     Heading(level=4, contents='Tabs'),
                     TableRow(contents='0009\ue000TAB'),
                     Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                     Heading(level=4, contents='Conditional Hyphens'),
                     TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                     Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=4, contents='Breaking Hyphens'),
                     Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                     TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                     TableRow(contents='2010\ue000HYPHEN'),
                     TableRow(contents='2012\ue000FIGURE DASH'),
                     TableRow(contents='2013\ue000EN DASH'),
                     Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Visible Word Dividers'),
                     Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                     TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                     TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                     TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                     TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                     TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                     Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                     TableRow(contents='2027\ue000HYPHENATION POINT'),
                     Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                     TableRow(contents='007C\ue000VERTICAL LINE'),
                     Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                     Heading(level=4, contents='Historic Word Separators'),
                     Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                     Paragraph(contents='Examples of Historic Word Separators include:'),
                     TableRow(contents='16EB\ue000RUNIC SINGLE PUNCTUATION'),
                     TableRow(contents='16EC\ue000RUNIC MULTIPLE PUNCTUATION'),
                     TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                     TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                     TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                     TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                     TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                     TableRow(contents='205B\ue000FOUR DOT MARK'),
                     TableRow(contents='205D\ue000TRICOLON'),
                     TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                     TableRow(contents='2E19\ue000PALM BRANCH'),
                     TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                     TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                     TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                     TableRow(contents='2E2D\ue000FIVE DOT MARK'),
                     TableRow(contents='2E30\ue000RING POINT'),
                     TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                     TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                     TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                     TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                     TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                     TableRow(contents='1091F\ue000PHOENICIAN WORD SEPARATOR'),
                     TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                     Heading(level=4, contents='Dandas'),
                     Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                     Paragraph(contents='Examples of dandas include:'),
                     TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                     TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                     TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                     TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                     TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                     TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                     TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                     TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                     TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                     TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                     TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                     TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                     TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                     TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                     TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                     TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                     TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                     TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                     TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                     Heading(level=4, contents='Tibetan'),
                     TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                     TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                     TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                     TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                     TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                     TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                     Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Other Terminating Punctuation'),
                     Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                     TableRow(contents='1804\ue000MONGOLIAN COLON'),
                     TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                     TableRow(contents='1B5A\ue000BALINESE PANTI'),
                     TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                     TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                     TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                     TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                     TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                     TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                     TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                     TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                     TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                     TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                     TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                     TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                     TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                     TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                     TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                     TableRow(contents='2E17\ue000DOUBLE OBLIQUE HYPHEN'),
                     TableRow(contents='A60D\ue000VAI COMMA'),
                     TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                     TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                     TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                     TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                     TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                     TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                     TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                     TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                     TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                     Heading(level=3, contents='BB: Break Before (B)'),
                     Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                     Paragraph(contents='Examples of BB characters are described in the following sections.'),
                     Heading(level=4, contents='Dictionary Use'),
                     TableRow(contents='00B4\ue000ACUTE ACCENT'),
                     TableRow(contents='1FFD\ue000GREEK OXIA'),
                     Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                     TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                     Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                     TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                     TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                     Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                     Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                     Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                     TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                     TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                     TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                     TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                     TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                     TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                     TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                     TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                     TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                     TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                     TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                     TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                     TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                     Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Mongolian'),
                     TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                     Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                     Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                     TableRow(contents='2014\ue000EM DASH'),
                     Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                     Paragraph(contents='Some languages, including Spanish, use EM DASH to set off a parenthetical, and the surrounding dashes should not be broken from the contained text. In this usage there is space on the side where it can be broken. This does not conflict with symmetrical usages, either with spaces on both sides of the em-dash or with no spaces.'),
                     Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                     Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                     TableRow(contents='000C\ue000FORM FEED (FF)'),
                     TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                     Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                     TableRow(contents='2028\ue000LINE SEPARATOR'),
                     Paragraph(contents='The text after the LINE SEPARATOR starts at the beginning of the line. This is similar to HTML <BR>.'),
                     TableRow(contents='2029\ue000PARAGRAPH SEPARATOR'),
                     Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LINE SEPARATOR, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                     Heading(level=4, contents='Newline Function (NLF)'),
                     Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                     Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                     Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                     Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                     TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                     Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                     Heading(level=3, contents='CJ: Conditional Japanese Starter'),
                     Paragraph(contents='This character class contains Japanese small hiragana and katakana. Characters of this class may be treated as either NS or ID.'),
                     Paragraph(contents='CSS Text Level 3 (which supports Japanese line layout) defines three distinct values for its line-break behavior:'),
                     Paragraph(contents='• strict, typically used for long lines'),
                     Paragraph(contents='• normal (CSS default), the behavior typically used for books and documents'),
                     Paragraph(contents='• loose, typically used for short lines such as in newspapers'),
                     Paragraph(contents='These have different sets of “kinsoku” characters which cannot be at the beginning or end of a line; strict has the largest set, while loose has the smallest. The motivation for the smaller number of kinsoku characters is to avoid triggering justification that puts characters off the grid position.'),
                     Paragraph(contents='Treating characters of class CJ as class NS will give CSS strict line breaking; treating them as class ID will give CSS normal breaking.'),
                     Paragraph(contents='The CJ line break class includes'),
                     TableRow(contents='3041, 3043, 3045, etc.\ue000Small hiragana'),
                     TableRow(contents='30A1, 30A3, 30A5, etc.\ue000Small katakana'),
                     TableRow(contents='30FC\ue000KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                     TableRow(contents='FF67..FF70\ue000Halfwidth variants'),
                     Heading(level=3, contents='CL: Close Punctuation (XB)'),
                     Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                     Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                     Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                     TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                     TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE50\ue000SMALL COMMA'),
                     TableRow(contents='FE52\ue000SMALL FULL STOP'),
                     TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                     TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                     TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                     Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                     Heading(level=4, contents='Combining Characters'),
                     Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                     Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 NO-BREAK SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                     Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                     Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                     Heading(level=4, contents='Control and Formatting Characters'),
                     Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                     Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                     Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                     Paragraph(contents='The CM class also includes U+3035 VERTICAL KANA REPEAT MARK LOWER HALF. This character is normally preceded by either U+3033 VERTICAL KANA REPEAT MARK UPPER HALF or U+3034 VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF, and should not be separated from them.'),
                     Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                     Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                     TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                     TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                     Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                     TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                     Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                     Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                     Heading(level=3, contents='EB: Emoji Base (B/A)'),
                     Paragraph(contents='This class includes characters whose appearance can be modified by a subsequent emoji modifier in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier_Base property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='1F466\ue000BOY'),
                     TableRow(contents='1F478\ue000PRINCESS'),
                     TableRow(contents='1F6B4\ue000BICYCLIST'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b. In other contexts, characters of class EB behave similarly to ideographs of class ID, with break opportunities before and after.'),
                     Heading(level=3, contents='EM: Emoji Modifier (A)'),
                     Paragraph(contents='This class includes characters that can be used to modify the appearance of a preceding emoji in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b.'),
                     Paragraph(contents='Emoji modifiers include:'),
                     TableRow(contents='1F3FB..1F3FF\ue000EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6'),
                     Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                     Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                     TableRow(contents='0021\ue000EXCLAMATION MARK'),
                     TableRow(contents='003F\ue000QUESTION MARK'),
                     TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                     TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                     TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                     TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                     TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                     TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                     TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                     TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                     TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                     Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following are examples of characters of line break class GL:'),
                     TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                     TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                     TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                     Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE. NARROW NO-BREAK SPACE is used in Mongolian. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. It additionally affects the shaping of certain vowel characters as described in Section 13.5, Mongolian, of [Unicode].'),
                     Paragraph(contents='NARROW NO-BREAK SPACE is a narrow version of NO-BREAK SPACE, which has exactly the same line breaking behavior, but with a narrow display width. It is regularly used in Mongolian in certain grammatical contexts (before a particle), where it also influences the shaping of the glyphs for the particle. In Mongolian text, the NARROW NO-BREAK SPACE is typically displayed with one third the width of a normal space character.'),
                     Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                     Paragraph(contents='The MONGOLIAN VOWEL SEPARATOR is equivalent to a NARROW NO-BREAK SPACE in its line breaking behavior, but has different effects in controlling the shaping of its preceding and following characters. It constitutes a word-internal space and is typically displayed with half the width of a NARROW NO-BREAK SPACE.'),
                     TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                     Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                     TableRow(contents='2007\ue000FIGURE SPACE'),
                     Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                     TableRow(contents='2011\ue000NON-BREAKING HYPHEN'),
                     Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                     TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                     TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                     TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                     Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                     Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                     Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                     Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                     Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                     Heading(level=3, contents='HY: Hyphen (XA)'),
                     TableRow(contents='002D\ue000HYPHEN-MINUS'),
                     Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                     Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                     Heading(level=3, contents='ID: Ideographic (B/A)'),
                     Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                     TableRow(contents='2E80..2FFF\ue000CJK, Kangxi Radicals, Ideographic Description Symbols'),
                     TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                     TableRow(contents='30A2..30FA\ue000Katakana (except small characters)'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                     Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                     Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                     Paragraph(contents='The unassigned code points in the following blocks default to ID:'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='All undesignated code points in Planes 2 and 3, whether inside or outside of allocated blocks, default to ID:'),
                     TableRow(contents='20000..2FFFD\ue000Plane 2'),
                     TableRow(contents='30000..3FFFD\ue000Plane 3'),
                     Paragraph(contents='All unassigned code points in the following Plane 1 range, whether inside or outside of allocated blocks, also default to ID:'),
                     TableRow(contents='1F000..1FFFD\ue000Plane 1 range'),
                     Heading(level=4, contents='Korean'),
                     Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                     TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                     Heading(level=4, contents='Symbols'),
                     Paragraph(contents='Certain pictographic symbols of General Category So are also included in this line break class.'),
                     Heading(level=3, contents='HL: Hebrew Letter (XB)'),
                     Paragraph(contents='This class includes all Hebrew letters.'),
                     Paragraph(contents='When a Hebrew letter is followed by a hyphen, there is no break on either side of the hyphen. In this context a hyphen is any character of class HY or class BA. In other respects, Hebrew letters behave the same as characters of class AL.'),
                     Paragraph(contents='Included in this class are all characters of General Category Letter that have Script=Hebrew.'),
                     Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                     Heading(level=4, contents='Leaders'),
                     Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='2024\ue000ONE DOT LEADER'),
                     TableRow(contents='2025\ue000TWO DOT LEADER'),
                     TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                     TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                     Paragraph(contents='HORIZONTAL ELLIPSIS can be used as a three-dot leader.'),
                     Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                     Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='002C\ue000COMMA'),
                     TableRow(contents='002E\ue000FULL STOP'),
                     TableRow(contents='003A\ue000COLON'),
                     TableRow(contents='003B\ue000SEMICOLON'),
                     TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                     TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                     TableRow(contents='060C\ue000ARABIC COMMA'),
                     TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                     TableRow(contents='07F8\ue000NKO COMMA'),
                     TableRow(contents='2044\ue000FRACTION SLASH'),
                     TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                     TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                     TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                     Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                     Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                     Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                     Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                     Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                     Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                     Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                     Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                     Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                     Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                     TableRow(contents='000A\ue000LINE FEED (LF)'),
                     Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                     Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                     TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                     Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                     Heading(level=3, contents='NS: Nonstarters (XB)'),
                     Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include:'),
                     TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                     TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                     TableRow(contents='203D\ue000INTERROBANG'),
                     TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                     TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                     TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                     TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='301C\ue000WAVE DASH'),
                     TableRow(contents='303C\ue000MASU MARK'),
                     TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                     TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                     TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                     TableRow(contents='30FD..30FE\ue000KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK'),
                     TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                     TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                     TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                     TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                     Paragraph(contents='Note: Optionally, the NS restriction may be relaxed by tailoring, with some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles. Alternatively, line breaking can be tightened by moving characters that are ID into NS.'),
                     Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                     Heading(level=3, contents='NU: Numeric (XP)'),
                     Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                     Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                     TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                     TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                     Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                     Heading(level=3, contents='OP: Open Punctuation (XA)'),
                     Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                     TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                     TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                     TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                     Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                     Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                     Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                     Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                     Paragraph(contents='Examples of Postfix characters include'),
                     TableRow(contents='0025\ue000PERCENT SIGN'),
                     TableRow(contents='00A2\ue000CENT SIGN'),
                     TableRow(contents='00B0\ue000DEGREE SIGN'),
                     TableRow(contents='060B\ue000AFGHANI SIGN'),
                     TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                     TableRow(contents='2030\ue000PER MILLE SIGN'),
                     TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                     TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                     TableRow(contents='20A7\ue000PESETA SIGN'),
                     TableRow(contents='2103\ue000DEGREE CELSIUS'),
                     TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                     TableRow(contents='FDFC\ue000RIAL SIGN'),
                     TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                     TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                     TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                     Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                     Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                     Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                     Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                     Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                     TableRow(contents='002B\ue000PLUS SIGN'),
                     TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                     TableRow(contents='00B1\ue000PLUS-MINUS SIGN'),
                     TableRow(contents='2116\ue000NUMERO SIGN'),
                     TableRow(contents='2212\ue000MINUS SIGN'),
                     TableRow(contents='2213\ue000MINUS-OR-PLUS SIGN'),
                     Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                     Heading(level=3, contents='QU: Quotation (XB/XA)'),
                     Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                     Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                     Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                     TableRow(contents='0022\ue000QUOTATION MARK'),
                     TableRow(contents='0027\ue000APOSTROPHE'),
                     TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                     TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                     TableRow(contents='2E0B\ue000RAISED SQUARE'),
                     Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                     Heading(level=3, contents='RI: Regional Indicator (B/A/XP)'),
                     Paragraph(contents='For line Breaking, the Regional Indicator characters are all those with the Unicode character property of Regional_Indicator. This includes:'),
                     TableRow(contents='1F1E6..1F1FF\ue000REGIONAL INDICATOR SYMBOL LETTER A .. REGIONAL INDICATOR SYMBOL LETTER Z'),
                     Paragraph(contents='Pairs of RI characters are used to represent a two-letter ISO 3166 region code.'),
                     Paragraph(contents='Runs of adjacent RI characters are grouped into pairs, beginnning at the start of the run. No break opportunity occurs within a pair; breaks can occur between adjacent pairs. When RI characters are adjacent to characters of other classes, breaks can occur before and after, except where forbidden by other rules.'),
                     Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                     Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                     Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                     Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                     TableRow(contents='0E00..0E7F\ue000Thai'),
                     TableRow(contents='0E80..0EFF\ue000Lao'),
                     TableRow(contents='1000..109F\ue000Myanmar'),
                     TableRow(contents='1780..17FF\ue000Khmer'),
                     TableRow(contents='1950..197F\ue000Tai Le'),
                     TableRow(contents='1980..19DF\ue000New Tai Lue'),
                     TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                     TableRow(contents='A9E0..A9FF\ue000Myanmar Extended-B'),
                     TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                     TableRow(contents='AA80..AADF\ue000Tai Viet'),
                     TableRow(contents='11700..1173F\ue000Ahom'),
                     Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                     Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                     Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                     Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                     Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                     TableRow(contents='0020\ue000SPACE (SP)'),
                     Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                     Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                     Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                     TableRow(contents='002F\ue000SOLIDUS'),
                     Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                     Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                     Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                     TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                     TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                     Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                     Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                     Heading(level=3, contents='XX: Unknown (XP)'),
                     Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                     Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                     Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                     Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                     Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                     Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                     Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                     TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                     Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                     Heading(level=3, contents='ZWJ: Zero Width Joiner (XA/XB) (Non-tailorable)'),
                     TableRow(contents='200D\ue000ZERO WIDTH JOINER (ZWJ)'),
                     Paragraph(contents='A ZWJ prevents breaks between most pairs of characters that would otherwise break. It has various uses, including as a connector in emoji zwj sequences and as a joiner in complex scripts.'),
                     Paragraph(contents='Emoji zwj sequences are defined by ED-16, emoji zwj sequence, in [UTS51] and implemented for line breaking by rule LB8a. In other respects, the line breaking behavior of ZWJ is that of a combining character of class CM.'),
                     Heading(level=3, contents='5.2 Dictionary Usage'),
                     Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                     Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                     Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                     Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                     Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                     Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                     Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                     Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                     Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                     Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                     Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                     Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                     Heading(level=3, contents='5.3 Use of Hyphen'),
                     Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                     Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                     Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                     Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                     Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                     Paragraph(contents='dispara- te'),
                     Paragraph(contents='and the latter as'),
                     Paragraph(contents='dispara- -te.'),
                     Paragraph(contents='A recommended practice is to type <SHY, NON-BREAKING HYPHEN> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                     Paragraph(contents='• Simply inserting a hyphen glyph'),
                     Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                     Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                     Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                     Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                     Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                     Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                     Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                     Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                     Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                     Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                     Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                     Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [UAX9] and Section 9.2, Arabic, of [Unicode].'),
                     Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                     Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                     Paragraph(contents='The sequence <SHY, NON-BREAKING HYPHEN> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                     Heading(level=3, contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                     Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                     Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                     Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                     Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                     Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                     Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                     Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                     Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                     Heading(level=3, contents='5.7 Word Separator Characters'),
                     Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                     Paragraph(contents='1. suppress the visible word separator'),
                     Paragraph(contents='The:quick:brown fox:jumped.'),
                     Paragraph(contents='2. break before the visible word separator'),
                     Paragraph(contents='The:quick:brown :fox:jumped.'),
                     Paragraph(contents='3. break after the visible word separator'),
                     Paragraph(contents='The:quick:brown: fox:jumped.'),
                     Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                     Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                     Heading(level=2, contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                     Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1, Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                     Paragraph(contents='! Mandatory break at the indicated position'),
                     Paragraph(contents='× No break allowed at the indicated position'),
                     Paragraph(contents='÷ Break allowed at the indicated position'),
                     Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                     Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                     Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                     Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                     Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, ZW and ZWJ define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                     Heading(level=4, contents='Resolve line breaking classes:'),
                     Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, CJ, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                     Paragraph(contents='In the absence of such criteria all characters with a specific combination of original class and General_Category property value are resolved as follows:'),
                     TableRow(contents='Resolved\ue000Original\ue000General_Category'),
                     TableRow(contents='AL\ue000AI, SG, XX\ue000Any'),
                     TableRow(contents='CM\ue000SA\ue000Only Mn or Mc'),
                     TableRow(contents='AL\ue000SA\ue000Any except Mn and Mc'),
                     TableRow(contents='NS\ue000CJ\ue000Any'),
                     Heading(level=4, contents='Start and end of text:'),
                     Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                     Rule(contents='LB2 Never break at the start of text.'),
                     Formula(contents='sot ×'),
                     Rule(contents='LB3 Always break at the end of text.'),
                     Formula(contents='! eot'),
                     Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                     Heading(level=4, contents='Mandatory breaks:'),
                     Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                     Rule(contents='LB4 Always break after hard line breaks.'),
                     Formula(contents='BK !'),
                     Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                     Formula(contents='CR × LF'),
                     Formula(contents='CR !'),
                     Formula(contents='LF !'),
                     Formula(contents='NL !'),
                     Rule(contents='LB6 Do not break before hard line breaks.'),
                     Formula(contents='× ( BK | CR | LF | NL )'),
                     Heading(level=4, contents='Explicit breaks and non-breaks:'),
                     Rule(contents='LB7 Do not break before spaces or zero width space.'),
                     Formula(contents='× SP'),
                     Formula(contents='× ZW'),
                     Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                     Formula(contents='ZW SP* ÷'),
                     Rule(contents='LB8a Do not break after a zero width joiner.'),
                     Formula(contents='ZWJ ×'),
                     Paragraph(contents='A ZWJ will prevent breaks between most pairs of characters. This behavior is used to prevent breaks within emoji zwj sequences.'),
                     Heading(level=4, contents='Combining marks:'),
                     Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                     Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules. Treat ZWJ as if it were CM.'),
                     Formula(contents='Treat X (CM | ZWJ)* as if it were X.'),
                     Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                     Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                     Rule(contents='LB10 Treat any remaining combining mark or ZWJ as AL.'),
                     Formula(contents='Treat any remaining CM or ZWJ as it if were AL.'),
                     Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                     Heading(level=4, contents='Word joiner:'),
                     Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                     Formula(contents='× WJ'),
                     Formula(contents='WJ ×'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12 Do not break after NBSP and related characters.'),
                     Formula(contents='GL ×'),
                     Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                     Formula(contents='[^SP BA HY] × GL'),
                     Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Opening and closing:'),
                     Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                     Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                     Formula(contents='× CL'),
                     Formula(contents='× CP'),
                     Formula(contents='× EX'),
                     Formula(contents='× IS'),
                     Formula(contents='× SY'),
                     Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                     Formula(contents='OP SP* ×'),
                     Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                     Formula(contents='QU SP* × OP'),
                     Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                     Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                     Formula(contents='(CL | CP) SP* × NS'),
                     Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                     Formula(contents='B2 SP* × B2'),
                     Heading(level=4, contents='Spaces:'),
                     Rule(contents='LB18 Break after spaces.'),
                     Formula(contents='SP ÷'),
                     Heading(level=4, contents='Special case rules:'),
                     Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                     Formula(contents='× QU'),
                     Formula(contents='QU ×'),
                     Rule(contents='LB20 Break before and after unresolved CB.'),
                     Formula(contents='÷ CB'),
                     Formula(contents='CB ÷'),
                     Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                     Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                     Formula(contents='× BA'),
                     Formula(contents='× HY'),
                     Formula(contents='× NS'),
                     Formula(contents='BB ×'),
                     Rule(contents="LB21a Don't break after Hebrew + Hyphen."),
                     Formula(contents='HL (HY | BA) ×'),
                     Rule(contents='LB21b Don’t break between Solidus and Hebrew letters.'),
                     Formula(contents='SY × HL'),
                     Rule(contents='LB22 Do not break between two ellipses, or between letters, numbers or exclamations and ellipsis.'),
                     Formula(contents='(AL | HL) × IN'),
                     Formula(contents='EX × IN'),
                     Formula(contents='(ID | EB | EM) × IN'),
                     Formula(contents='IN × IN'),
                     Formula(contents='NU × IN'),
                     Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                     Heading(level=4, contents='Numbers:'),
                     Paragraph(contents='Do not break alphanumerics.'),
                     Rule(contents='LB23 Do not break between digits and letters.'),
                     Formula(contents='(AL | HL) × NU'),
                     Formula(contents='NU × (AL | HL)'),
                     Rule(contents='LB23a Do not break between numeric prefixes and ideographs, or between ideographs and numeric postfixes.'),
                     Formula(contents='PR × (ID | EB | EM)'),
                     Formula(contents='(ID | EB | EM) × PO'),
                     Rule(contents='LB24 Do not break between numeric prefix/postfix and letters, or between letters and prefix/postfix.'),
                     Formula(contents='(PR | PO) × (AL | HL)'),
                     Formula(contents='(AL | HL) × (PR | PO)'),
                     Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                     Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                     Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                     Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                     Formula(contents='CL × PO'),
                     Formula(contents='CP × PO'),
                     Formula(contents='CL × PR'),
                     Formula(contents='CP × PR'),
                     Formula(contents='NU × PO'),
                     Formula(contents='NU × PR'),
                     Formula(contents='PO × OP'),
                     Formula(contents='PO × NU'),
                     Formula(contents='PR × OP'),
                     Formula(contents='PR × NU'),
                     Formula(contents='HY × NU'),
                     Formula(contents='IS × NU'),
                     Formula(contents='NU × NU'),
                     Formula(contents='SY × NU'),
                     Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                     Heading(level=4, contents='Korean syllable blocks'),
                     Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                     Rule(contents='LB26 Do not break a Korean syllable.'),
                     Formula(contents='JL × (JL | JV | H2 | H3)'),
                     Formula(contents='(JV | H2) × (JV | JT)'),
                     Formula(contents='(JT | H3) × JT'),
                     Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                     Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                     Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                     Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                     Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                     Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                     Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                     Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                     Formula(contents='(AL | HL) × (AL | HL)'),
                     Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                     Formula(contents='IS × (AL | HL)'),
                     Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                     Formula(contents='(AL | HL | NU) × OP'),
                     Formula(contents='CP × (AL | HL | NU)'),
                     Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                     Rule(contents='LB30a Break between two regional indicator symbols if and only if there are an even number of regional indicators preceding the position of the break.'),
                     Formula(contents='sot (RI RI)* RI × RI'),
                     Formula(contents='[^RI] (RI RI)* RI × RI'),
                     Rule(contents='LB30b Do not break between an emoji base and an emoji modifier.'),
                     Formula(contents='EB × EM'),
                     Rule(contents='LB31 Break everywhere else.'),
                     Formula(contents='ALL ÷'),
                     Formula(contents='÷ ALL'),
                     Heading(level=2, contents='7 Deleted'),
                     Paragraph(contents='Formerly was: Pair Table-Based Implementation.'),
                     Heading(level=2, contents='8 Customization'),
                     Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                     Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                     Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                     Paragraph(contents='Note: Some changes to rules and data are needed for the best segmentation behavior of emoji zwj sequences [UTS51]. Implementations are strongly encouraged to use the the line break rules in the latest version of CLDR (Version 31 or later) [CLDR] and the latest emoji properties (version 5.0 or later) [UTS51].'),
                     Paragraph(contents='The remainder of this section gives an overview of common types of tailorings and examples of how to customize the pair table implementation of the line breaking algorithm for these tailorings.'),
                     Heading(level=3, contents='8.1 Types of Tailoring'),
                     Paragraph(contents='There are two principal ways of tailoring the line breaking algorithm:'),
                     Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                     Paragraph(contents='2. Changing the line breaking rules Adding new rules, or altering or removing existing rules, provides more flexibility in changing the line breaking behavior. This can also include introducing new character classes for use by the new or altered rules.'),
                     Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                     Heading(level=3, contents='8.2 Examples of Customization'),
                     Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm.'),
                     Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the line breaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                     Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification.'),
                     Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. In this case the intersections of NU/NU, NU/AL, AL/AL, and AL/NU are affected.'),
                     Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by mapping class CJ to be handled as class ID in rule LB1.'),
                     Paragraph(contents='Example 6. Tailor to prevent line breaks from falling within default grapheme clusters, as defined by by Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. The tailoring can be accomplished by first segmenting the text into grapheme clusters according to the rules defined in UAX #29, and then finding line breaks according to the default line break rules, giving each grapheme cluster the line breaking class of its first code point.'),
                     Paragraph(contents='An example of a grapheme cluster that would be split by the default line break rules is a Zero Width Space followed by a combining mark.'),
                     Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * ( CL | CP ) ? ( PR | PO) ?'),
                     Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                     Paragraph(contents='Regex-Number: Do not break numbers.'),
                     Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                     Formula(contents='( OP | HY ) × NU'),
                     Formula(contents='NU × (NU | SY | IS)'),
                     Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL | CP )'),
                     Formula(contents='NU (NU | SY | IS)* (CL | CP)? × (PO | PR)'),
                     Paragraph(contents='In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                     Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                     Formula(contents='[^NU] × CL'),
                     Formula(contents='[^NU] × CP'),
                     Formula(contents='× EX'),
                     Formula(contents='[^NU] × IS'),
                     Formula(contents='[^NU] × SY'),
                     Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                     Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                     Heading(level=2, contents='9 Implementation Notes'),
                     Paragraph(contents='This section provides additional notes on implementation issues.'),
                     Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                     Paragraph(contents='To replace rule LB9, terms of the form'),
                     Paragraph(contents='B # A'),
                     Paragraph(contents='B SP* # A'),
                     Paragraph(contents='B #'),
                     Paragraph(contents='B SP* #'),
                     Paragraph(contents='are replaced by terms of the form'),
                     Paragraph(contents='B CM* # A'),
                     Paragraph(contents='B CM* SP* # A'),
                     Paragraph(contents='B CM* #'),
                     Paragraph(contents='B CM* SP* #'),
                     Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                     Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                     Paragraph(contents='Replace LB10 by the following rule:'),
                     Paragraph(contents='× CM'),
                     Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                     Paragraph(contents='(AL | NU) × OP'),
                     Paragraph(contents='add another rule'),
                     Paragraph(contents='CM × OP.'),
                     Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                     Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='As stated in Section 7.9, Combining Marks of [Unicode], combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                     Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                     Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                     Formula(contents='Treat SP CM* as if it were ID.'),
                     Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                     Heading(level=2, contents='10 Testing'),
                     Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2, Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                     Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                     Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                     Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                     Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                     Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                     Paragraph(contents='1. The rules are cast into a more regex-style.'),
                     Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                     Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                     Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                     Paragraph(contents='• 13.01) [^NU] × CL'),
                     Paragraph(contents='• 13.02) × EX'),
                     Paragraph(contents='• ...'),
                     Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                     Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                     Paragraph(contents='Table 4. Numbering of Test Rules'),
                     TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                     TableRow(contents='LB2\ue0000.2\ue000start of text'),
                     TableRow(contents='LB3\ue0000.3\ue000end of text'),
                     TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                     TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                     TableRow(contents='LB31\ue000999\ue000÷ any'),
                     Heading(level=2, contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                     Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                     TableRow(contents='9.0.0\ue0008.0.0\ue0006.2.0\ue0006.1.0\ue0005.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                     TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                     TableRow(contents='LB2\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                     TableRow(contents='LB3\ue0003\ue0003\ue0003\ue0003\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                     TableRow(contents='LB4\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB5\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB6\ue0006\ue0006\ue0006\ue0006\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                     TableRow(contents='LB7\ue0007\ue0007\ue0007\ue0007\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                     TableRow(contents='LB8\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                     TableRow(contents='LB8a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                     TableRow(contents='LB9\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB10\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                     TableRow(contents='LB11\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12a\ue00012a\ue00012a\ue00012a\ue00012a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB13\ue00013\ue00013\ue00013\ue00013\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                     TableRow(contents='LB14\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                     TableRow(contents='LB15\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                     TableRow(contents='LB16\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                     TableRow(contents='LB17\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                     TableRow(contents='LB18\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                     TableRow(contents='LB19\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                     TableRow(contents='LB20\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                     TableRow(contents='LB21\ue00021\ue00021\ue00021\ue00021\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                     TableRow(contents='LB21a\ue00021a\ue00021a\ue00021a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB21b\ue00021b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB22\ue00022\ue00022\ue00022\ue00022\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                     TableRow(contents='LB23\ue00023\ue00023\ue00023\ue00023\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                     TableRow(contents='LB23a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB24\ue00024\ue00024\ue00024\ue00024\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='LB25\ue00025\ue00025\ue00025\ue00025\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                     TableRow(contents='LB26\ue00026\ue00026\ue00026\ue00026\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB27\ue00027\ue00027\ue00027\ue00027\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB28\ue00028\ue00028\ue00028\ue00028\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                     TableRow(contents='LB29\ue00029\ue00029\ue00029\ue00029\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30\ue00030\ue00030\ue00030\ue00030\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30a\ue00030a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB31\ue00031\ue00031\ue00031\ue00031\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                     Heading(level=2, contents='References'),
                     Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                     Heading(level=2, contents='Acknowledgments'),
                     Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintains the text.'),
                     Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                     Heading(level=2, contents='Modifications'),
                     Paragraph(contents='The following summarizes modifications from the previous revision of this annex.'),
                     Heading(level=4, contents='Revision 41:'),
                     Paragraph(contents='• Reissued for Unicode 11.0.'),
                     Paragraph(contents='• Removed the right side of the rule for LB8a, and revised the description of ZWJ.'),
                     Paragraph(contents='• Corrected the names or abbreviations of the following characters: RUNIC SINGLE PUNCTUATION, RUNIC MULTIPLE PUNCTUATION, FIVE DOT MARK, PHOENICIAN WORD SEPARATOR, DOUBLE OBLIQUE HYPHEN, NON-BREAKING HYPHEN, PLUS-MINUS SIGN, MINUS-OR-PLUS SIGN, LINE SEPARATOR, PARAGRAPH SEPARATOR.'),
                     Paragraph(contents='• Section 5, updated description of the Data File.'),
                     Paragraph(contents='• Section 5.1, subsection for GL, second paragraph, update the section number reference to Mongolian.'),
                     Paragraph(contents='Revision 40 being a proposed update, only changes between revisions 39 and 41 are noted here.'),
                     Paragraph(contents='Modifications for previous versions are listed in those respective versions.'),
                     Paragraph(contents='© 2018 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                     Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(12, 0, 0): [Heading(level=2, contents='Unicode® Standard Annex #14'),
                     Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                     TableRow(contents='Version\ue000Unicode 12.0.0'),
                     TableRow(contents='Editors\ue000Andy Heninger (andy.heninger@gmail.com)'),
                     TableRow(contents='Date\ue0002019-02-15'),
                     TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-43.html'),
                     TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-41.html'),
                     TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                     TableRow(contents='Latest Proposed Update\ue000http://www.unicode.org/reports/tr14/proposed.html'),
                     TableRow(contents='Revision\ue00043'),
                     Heading(level=4, contents='Summary'),
                     Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display.'),
                     Heading(level=4, contents='Status'),
                     Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                     Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                     Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                     Heading(level=4, contents='Contents'),
                     Paragraph(contents='1 Overview and Scope'),
                     Paragraph(contents='2 Definitions'),
                     Paragraph(contents='3 Introduction'),
                     Paragraph(contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='4 Conformance'),
                     Paragraph(contents='4.1 Conformance Requirements'),
                     Paragraph(contents='5 Line Breaking Properties'),
                     Paragraph(contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='5.2 Dictionary Usage'),
                     Paragraph(contents='5.3 Use of Hyphen'),
                     Paragraph(contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='5.7 Word Separator Characters'),
                     Paragraph(contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='7 Deleted. (Formerly was: Pair Table-Based Implementation)'),
                     Paragraph(contents='8 Customization'),
                     Paragraph(contents='8.1 Types of Tailoring'),
                     Paragraph(contents='8.2 Examples of Customization'),
                     Paragraph(contents='9 Implementation Notes'),
                     Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='10 Testing'),
                     Paragraph(contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='References'),
                     Paragraph(contents='Acknowledgments'),
                     Paragraph(contents='Modifications'),
                     Heading(level=2, contents='1 Overview and Scope'),
                     Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                     Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                     Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                     Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Two main sections follow:'),
                     Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                     Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                     Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                     Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                     Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                     Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                     Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                     Heading(level=2, contents='2 Definitions'),
                     Paragraph(contents='The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard.'),
                     Paragraph(contents='All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard [Unicode].'),
                     Paragraph(contents='LD1. Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                     Paragraph(contents='LD2. Line Break: The position in the text where one line ends and the next one starts.'),
                     Paragraph(contents='LD3. Line Break Opportunity: A place where a line is allowed to end.'),
                     Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                     Paragraph(contents='LD4. Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                     Paragraph(contents='LD5. Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                     Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                     Paragraph(contents='LD6. Line Breaking Class: A class of characters with the same line breaking property value.'),
                     Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                     Paragraph(contents='LD7. Mandatory Break: A line must break following a character that has the mandatory break property.'),
                     Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                     Paragraph(contents='LD8. Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                     Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space.'),
                     Paragraph(contents='LD9. Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                     Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, an indirect break is represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                     Paragraph(contents='LD10. Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, a prohibited break is expressed as a rule of the form: B SP* × A.'),
                     Paragraph(contents='LD11. Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                     Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                     Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                     Paragraph(contents='Table 1. Line Breaking Classes'),
                     TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                     TableRow(contents='Non-tailorable Line Breaking Classes'),
                     TableRow(contents='BK\ue000Mandatory Break\ue000NL, PARAGRAPH SEPARATOR\ue000Cause a line break (after)'),
                     TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                     TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                     TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                     TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                     TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                     TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                     TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                     TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                     TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                     TableRow(contents='ZWJ\ue000Zero Width Joiner\ue000Zero Width Joiner\ue000Prohibit line breaks within joiner sequences'),
                     TableRow(contents='Break Opportunities'),
                     TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                     TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                     TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                     TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                     TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                     TableRow(contents='Characters Prohibiting Certain Breaks'),
                     TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                     TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                     TableRow(contents='NS\ue000Nonstarter\ue000“‼”, “‽”, “⁇”, “⁉”, etc.\ue000Allow only indirect line breaks before'),
                     TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                     TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                     TableRow(contents='Numeric Context'),
                     TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                     TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                     TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                     TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                     TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                     TableRow(contents='Other Characters'),
                     TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                     TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                     TableRow(contents='CJ\ue000Conditional Japanese Starter\ue000Small kana\ue000Treat as NS or ID for strict or normal breaking.'),
                     TableRow(contents='EB\ue000Emoji Base\ue000All emoji allowing modifiers\ue000Do not break from following Emoji Modifier'),
                     TableRow(contents='EM\ue000Emoji Modifier\ue000Skin tone modifiers\ue000Do not break from preceding Emoji Base'),
                     TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='HL\ue000Hebrew Letter\ue000Hebrew\ue000Do not break around a following hyphen; otherwise act as Alphabetic'),
                     TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                     TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='RI\ue000Regional Indicator\ue000REGIONAL INDICATOR SYMBOL LETTER A .. Z\ue000Keep pairs together. For pairs, break before and after other classes'),
                     TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                     TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                     Heading(level=2, contents='3 Introduction'),
                     Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                     Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                     Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                     Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                     Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                     Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                     Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                     Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                     Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                     Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                     Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                     Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                     Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                     Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                     Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                     Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [UAX9]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                     Heading(level=2, contents='4 Conformance'),
                     Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                     Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                     Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                     Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                     Paragraph(contents='Note: Locale-sensitive line break specifications can be expressed in LDML [UTS35]. Tailorings are available in the Common Locale Data Repository [CLDR].'),
                     Heading(level=3, contents='4.1 Conformance Requirements'),
                     Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                     Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                     Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                     Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                     Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                     Heading(level=2, contents='5 Line Breaking Properties'),
                     Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                     Paragraph(contents='This section also summarizes the membership of character classes for each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line break behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                     Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into the algorithm defined in Section 6, Line Breaking Algorithm. This section describes a workable default line breaking method. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences.'),
                     Heading(level=4, contents='Data File'),
                     Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a semicolon-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name.'),
                     Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                     Heading(level=4, contents='Future Updates'),
                     Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                     Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                     TableRow(contents='Label\ue000Meaning for the Class'),
                     TableRow(contents='(A)\ue000It allows a break opportunity after in specified contexts.'),
                     TableRow(contents='(XA)\ue000It prevents a break opportunity after in specified contexts.'),
                     TableRow(contents='(B)\ue000It allows a break opportunity before in specified contexts.'),
                     TableRow(contents='(XB)\ue000It prevents a break opportunity before in specified contexts.'),
                     TableRow(contents='(P)\ue000It allows a break opportunity for a pair of same characters.'),
                     TableRow(contents='(XP)\ue000It prevents a break opportunity for a pair of same characters.'),
                     Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                     Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                     Paragraph(contents='Some characters that ordinarily act like alphabetic characters are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                     Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [UAX11].'),
                     Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                     Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                     Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                     TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                     TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                     Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                     Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                     Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                     Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                     Paragraph(contents='This class contains alphabetic or symbolic characters not explicitly assigned to another line breaking class. These are primarily characters of the following categories:'),
                     TableRow(contents='Category\ue000General_Category Values'),
                     TableRow(contents='Alphabetic\ue000Lu, Ll, Lt, Lm, and Lo'),
                     TableRow(contents='Symbols\ue000Sm, Sk, and So'),
                     TableRow(contents='Non-decimal Numbers\ue000Nl and No'),
                     TableRow(contents='Punctuation\ue000Pc, Pd, and Po'),
                     Paragraph(contents='Line break class AL also contains several format characters, including:'),
                     TableRow(contents='0600..0604\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAMVAT'),
                     TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                     TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                     TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                     TableRow(contents='110BD\ue000KAITHI NUMBER SIGN'),
                     Paragraph(contents='These format characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                     Paragraph(contents='Major exceptions to the general pattern of alphabetic and symbolic characters having line break class AL include:'),
                     Paragraph(contents='HL for Hebrew letters AI or ID, based on the East Asian Width property of the character ID for certain pictographic symbols CJ for small hiragana and katakana SA for complex context scripts JL, JV, JT, H2 or H3 for Hangul characters'),
                     Heading(level=3, contents='BA: Break After (A)'),
                     Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                     Heading(level=4, contents='Breaking Spaces'),
                     Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                     TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                     TableRow(contents='2000\ue000EN QUAD'),
                     TableRow(contents='2001\ue000EM QUAD'),
                     TableRow(contents='2002\ue000EN SPACE'),
                     TableRow(contents='2003\ue000EM SPACE'),
                     TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                     TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                     TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                     TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                     TableRow(contents='2009\ue000THIN SPACE'),
                     TableRow(contents='200A\ue000HAIR SPACE'),
                     TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                     TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                     Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                     Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                     Paragraph(contents='For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                     Heading(level=4, contents='Tabs'),
                     TableRow(contents='0009\ue000TAB'),
                     Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                     Heading(level=4, contents='Conditional Hyphens'),
                     TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                     Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=4, contents='Breaking Hyphens'),
                     Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                     TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                     TableRow(contents='2010\ue000HYPHEN'),
                     TableRow(contents='2012\ue000FIGURE DASH'),
                     TableRow(contents='2013\ue000EN DASH'),
                     Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Visible Word Dividers'),
                     Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                     TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                     TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                     TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                     TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                     TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                     Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                     TableRow(contents='2027\ue000HYPHENATION POINT'),
                     Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                     TableRow(contents='007C\ue000VERTICAL LINE'),
                     Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                     Heading(level=4, contents='Historic Word Separators'),
                     Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                     Paragraph(contents='Examples of Historic Word Separators include:'),
                     TableRow(contents='16EB\ue000RUNIC SINGLE PUNCTUATION'),
                     TableRow(contents='16EC\ue000RUNIC MULTIPLE PUNCTUATION'),
                     TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                     TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                     TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                     TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                     TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                     TableRow(contents='205B\ue000FOUR DOT MARK'),
                     TableRow(contents='205D\ue000TRICOLON'),
                     TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                     TableRow(contents='2E19\ue000PALM BRANCH'),
                     TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                     TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                     TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                     TableRow(contents='2E2D\ue000FIVE DOT MARK'),
                     TableRow(contents='2E30\ue000RING POINT'),
                     TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                     TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                     TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                     TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                     TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                     TableRow(contents='1091F\ue000PHOENICIAN WORD SEPARATOR'),
                     TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                     Heading(level=4, contents='Dandas'),
                     Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                     Paragraph(contents='Examples of dandas include:'),
                     TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                     TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                     TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                     TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                     TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                     TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                     TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                     TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                     TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                     TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                     TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                     TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                     TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                     TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                     TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                     TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                     TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                     TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                     TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                     Heading(level=4, contents='Tibetan'),
                     TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                     TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                     TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                     TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                     TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                     TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                     Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Other Terminating Punctuation'),
                     Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                     TableRow(contents='1804\ue000MONGOLIAN COLON'),
                     TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                     TableRow(contents='1B5A\ue000BALINESE PANTI'),
                     TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                     TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                     TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                     TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                     TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                     TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                     TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                     TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                     TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                     TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                     TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                     TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                     TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                     TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                     TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                     TableRow(contents='2E17\ue000DOUBLE OBLIQUE HYPHEN'),
                     TableRow(contents='A60D\ue000VAI COMMA'),
                     TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                     TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                     TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                     TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                     TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                     TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                     TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                     TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                     TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                     Heading(level=3, contents='BB: Break Before (B)'),
                     Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                     Paragraph(contents='Examples of BB characters are described in the following sections.'),
                     Heading(level=4, contents='Dictionary Use'),
                     TableRow(contents='00B4\ue000ACUTE ACCENT'),
                     TableRow(contents='1FFD\ue000GREEK OXIA'),
                     Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                     TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                     Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                     TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                     TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                     Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                     Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                     Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                     TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                     TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                     TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                     TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                     TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                     TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                     TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                     TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                     TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                     TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                     TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                     TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                     TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                     Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Mongolian'),
                     TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                     Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                     Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                     TableRow(contents='2014\ue000EM DASH'),
                     Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                     Paragraph(contents='Some languages, including Spanish, use EM DASH to set off a parenthetical, and the surrounding dashes should not be broken from the contained text. In this usage there is space on the side where it can be broken. This does not conflict with symmetrical usages, either with spaces on both sides of the em-dash or with no spaces.'),
                     Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                     Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                     TableRow(contents='000C\ue000FORM FEED (FF)'),
                     TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                     Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                     TableRow(contents='2028\ue000LINE SEPARATOR'),
                     Paragraph(contents='The text after the LINE SEPARATOR starts at the beginning of the line. This is similar to HTML <BR>.'),
                     TableRow(contents='2029\ue000PARAGRAPH SEPARATOR'),
                     Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LINE SEPARATOR, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                     Heading(level=4, contents='Newline Function (NLF)'),
                     Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                     Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                     Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                     Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                     TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                     Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                     Heading(level=3, contents='CJ: Conditional Japanese Starter'),
                     Paragraph(contents='This character class contains Japanese small hiragana and katakana. Characters of this class may be treated as either NS or ID.'),
                     Paragraph(contents='CSS Text Level 3 (which supports Japanese line layout) defines three distinct values for its line-break behavior:'),
                     Paragraph(contents='• strict, typically used for long lines'),
                     Paragraph(contents='• normal (CSS default), the behavior typically used for books and documents'),
                     Paragraph(contents='• loose, typically used for short lines such as in newspapers'),
                     Paragraph(contents='These have different sets of “kinsoku” characters which cannot be at the beginning or end of a line; strict has the largest set, while loose has the smallest. The motivation for the smaller number of kinsoku characters is to avoid triggering justification that puts characters off the grid position.'),
                     Paragraph(contents='Treating characters of class CJ as class NS will give CSS strict line breaking; treating them as class ID will give CSS normal breaking.'),
                     Paragraph(contents='The CJ line break class includes'),
                     TableRow(contents='3041, 3043, 3045, etc.\ue000Small hiragana'),
                     TableRow(contents='30A1, 30A3, 30A5, etc.\ue000Small katakana'),
                     TableRow(contents='30FC\ue000KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                     TableRow(contents='FF67..FF70\ue000Halfwidth variants'),
                     Heading(level=3, contents='CL: Close Punctuation (XB)'),
                     Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                     Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                     Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                     TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                     TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE50\ue000SMALL COMMA'),
                     TableRow(contents='FE52\ue000SMALL FULL STOP'),
                     TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                     TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                     TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                     Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                     Heading(level=4, contents='Combining Characters'),
                     Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                     Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 NO-BREAK SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                     Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                     Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                     Heading(level=4, contents='Control and Formatting Characters'),
                     Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                     Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                     Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                     Paragraph(contents='The CM class also includes U+3035 VERTICAL KANA REPEAT MARK LOWER HALF. This character is normally preceded by either U+3033 VERTICAL KANA REPEAT MARK UPPER HALF or U+3034 VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF, and should not be separated from them.'),
                     Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                     Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                     TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                     TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                     Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                     TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                     Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                     Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                     Heading(level=3, contents='EB: Emoji Base (B/A)'),
                     Paragraph(contents='This class includes characters whose appearance can be modified by a subsequent emoji modifier in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier_Base property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='1F466\ue000BOY'),
                     TableRow(contents='1F478\ue000PRINCESS'),
                     TableRow(contents='1F6B4\ue000BICYCLIST'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b. In other contexts, characters of class EB behave similarly to ideographs of class ID, with break opportunities before and after.'),
                     Heading(level=3, contents='EM: Emoji Modifier (A)'),
                     Paragraph(contents='This class includes characters that can be used to modify the appearance of a preceding emoji in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b.'),
                     Paragraph(contents='Emoji modifiers include:'),
                     TableRow(contents='1F3FB..1F3FF\ue000EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6'),
                     Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                     Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                     TableRow(contents='0021\ue000EXCLAMATION MARK'),
                     TableRow(contents='003F\ue000QUESTION MARK'),
                     TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                     TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                     TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                     TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                     TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                     TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                     TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                     TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                     TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                     Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following are examples of characters of line break class GL:'),
                     TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                     TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                     TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                     Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE.'),
                     Paragraph(contents='NARROW NO-BREAK SPACE has exactly the same line breaking behavior as NO-BREAK SPACE, but with a narrow display width. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. Both of these characters are regularly used in Mongolian text, where they participate in special shaping behavior, as described in Section 13.5, Mongolian of [Unicode].'),
                     Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                     TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                     Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                     TableRow(contents='2007\ue000FIGURE SPACE'),
                     Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                     TableRow(contents='2011\ue000NON-BREAKING HYPHEN'),
                     Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                     TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                     TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                     TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                     Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                     Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                     Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                     Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                     Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                     Heading(level=3, contents='HY: Hyphen (XA)'),
                     TableRow(contents='002D\ue000HYPHEN-MINUS'),
                     Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                     Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                     Heading(level=3, contents='ID: Ideographic (B/A)'),
                     Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                     TableRow(contents='2E80..2FFF\ue000CJK, Kangxi Radicals, Ideographic Description Symbols'),
                     TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                     TableRow(contents='30A2..30FA\ue000Katakana (except small characters)'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                     Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                     Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                     Paragraph(contents='The unassigned code points in the following blocks default to ID:'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='All undesignated code points in Planes 2 and 3, whether inside or outside of allocated blocks, default to ID:'),
                     TableRow(contents='20000..2FFFD\ue000Plane 2'),
                     TableRow(contents='30000..3FFFD\ue000Plane 3'),
                     Paragraph(contents='All unassigned code points in the following Plane 1 range, whether inside or outside of allocated blocks, also default to ID:'),
                     TableRow(contents='1F000..1FFFD\ue000Plane 1 range'),
                     Heading(level=4, contents='Korean'),
                     Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                     TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                     Heading(level=4, contents='Symbols'),
                     Paragraph(contents='Certain pictographic symbols of General Category So are also included in this line break class.'),
                     Heading(level=3, contents='HL: Hebrew Letter (XB)'),
                     Paragraph(contents='This class includes all Hebrew letters.'),
                     Paragraph(contents='When a Hebrew letter is followed by a hyphen, there is no break on either side of the hyphen. In this context a hyphen is any character of class HY or class BA. In other respects, Hebrew letters behave the same as characters of class AL.'),
                     Paragraph(contents='Included in this class are all characters of General Category Letter that have Script=Hebrew.'),
                     Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                     Heading(level=4, contents='Leaders'),
                     Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='2024\ue000ONE DOT LEADER'),
                     TableRow(contents='2025\ue000TWO DOT LEADER'),
                     TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                     TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                     Paragraph(contents='HORIZONTAL ELLIPSIS can be used as a three-dot leader.'),
                     Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                     Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='002C\ue000COMMA'),
                     TableRow(contents='002E\ue000FULL STOP'),
                     TableRow(contents='003A\ue000COLON'),
                     TableRow(contents='003B\ue000SEMICOLON'),
                     TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                     TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                     TableRow(contents='060C\ue000ARABIC COMMA'),
                     TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                     TableRow(contents='07F8\ue000NKO COMMA'),
                     TableRow(contents='2044\ue000FRACTION SLASH'),
                     TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                     TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                     TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                     Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                     Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                     Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                     Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                     Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                     Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                     Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                     Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                     Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                     Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                     TableRow(contents='000A\ue000LINE FEED (LF)'),
                     Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                     Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                     TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                     Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                     Heading(level=3, contents='NS: Nonstarters (XB)'),
                     Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include:'),
                     TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                     TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                     TableRow(contents='203D\ue000INTERROBANG'),
                     TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                     TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                     TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                     TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='301C\ue000WAVE DASH'),
                     TableRow(contents='303C\ue000MASU MARK'),
                     TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                     TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                     TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                     TableRow(contents='30FD..30FE\ue000KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK'),
                     TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                     TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                     TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                     TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                     Paragraph(contents='Note: Optionally, the NS restriction may be relaxed by tailoring, with some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles. Alternatively, line breaking can be tightened by moving characters that are ID into NS.'),
                     Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                     Heading(level=3, contents='NU: Numeric (XP)'),
                     Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                     Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                     TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                     TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                     Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                     Heading(level=3, contents='OP: Open Punctuation (XA)'),
                     Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                     TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                     TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                     TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                     Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                     Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                     Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                     Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                     Paragraph(contents='Examples of Postfix characters include'),
                     TableRow(contents='0025\ue000PERCENT SIGN'),
                     TableRow(contents='00A2\ue000CENT SIGN'),
                     TableRow(contents='00B0\ue000DEGREE SIGN'),
                     TableRow(contents='060B\ue000AFGHANI SIGN'),
                     TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                     TableRow(contents='2030\ue000PER MILLE SIGN'),
                     TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                     TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                     TableRow(contents='20A7\ue000PESETA SIGN'),
                     TableRow(contents='2103\ue000DEGREE CELSIUS'),
                     TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                     TableRow(contents='FDFC\ue000RIAL SIGN'),
                     TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                     TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                     TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                     Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                     Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                     Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                     Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                     Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                     TableRow(contents='002B\ue000PLUS SIGN'),
                     TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                     TableRow(contents='00B1\ue000PLUS-MINUS SIGN'),
                     TableRow(contents='2116\ue000NUMERO SIGN'),
                     TableRow(contents='2212\ue000MINUS SIGN'),
                     TableRow(contents='2213\ue000MINUS-OR-PLUS SIGN'),
                     Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                     Heading(level=3, contents='QU: Quotation (XB/XA)'),
                     Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                     Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                     Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                     TableRow(contents='0022\ue000QUOTATION MARK'),
                     TableRow(contents='0027\ue000APOSTROPHE'),
                     TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                     TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                     TableRow(contents='2E0B\ue000RAISED SQUARE'),
                     Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                     Heading(level=3, contents='RI: Regional Indicator (B/A/XP)'),
                     Paragraph(contents='For line Breaking, the Regional Indicator characters are all those with the Unicode character property of Regional_Indicator. This includes:'),
                     TableRow(contents='1F1E6..1F1FF\ue000REGIONAL INDICATOR SYMBOL LETTER A .. REGIONAL INDICATOR SYMBOL LETTER Z'),
                     Paragraph(contents='Pairs of RI characters are used to represent a two-letter ISO 3166 region code.'),
                     Paragraph(contents='Runs of adjacent RI characters are grouped into pairs, beginning at the start of the run. No break opportunity occurs within a pair; breaks can occur between adjacent pairs. When RI characters are adjacent to characters of other classes, breaks can occur before and after, except where forbidden by other rules.'),
                     Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                     Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                     Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                     Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                     TableRow(contents='0E00..0E7F\ue000Thai'),
                     TableRow(contents='0E80..0EFF\ue000Lao'),
                     TableRow(contents='1000..109F\ue000Myanmar'),
                     TableRow(contents='1780..17FF\ue000Khmer'),
                     TableRow(contents='1950..197F\ue000Tai Le'),
                     TableRow(contents='1980..19DF\ue000New Tai Lue'),
                     TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                     TableRow(contents='A9E0..A9FF\ue000Myanmar Extended-B'),
                     TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                     TableRow(contents='AA80..AADF\ue000Tai Viet'),
                     TableRow(contents='11700..1173F\ue000Ahom'),
                     Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                     Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                     Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                     Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                     Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                     TableRow(contents='0020\ue000SPACE (SP)'),
                     Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                     Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                     Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                     TableRow(contents='002F\ue000SOLIDUS'),
                     Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                     Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                     Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                     TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                     TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                     Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                     Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                     Heading(level=3, contents='XX: Unknown (XP)'),
                     Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                     Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                     Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                     Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                     Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                     Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                     Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                     TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                     Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                     Heading(level=3, contents='ZWJ: Zero Width Joiner (XA/XB) (Non-tailorable)'),
                     TableRow(contents='200D\ue000ZERO WIDTH JOINER (ZWJ)'),
                     Paragraph(contents='A ZWJ prevents breaks between most pairs of characters that would otherwise break. It has various uses, including as a connector in emoji zwj sequences and as a joiner in complex scripts.'),
                     Paragraph(contents='Emoji zwj sequences are defined by ED-16, emoji zwj sequence, in [UTS51] and implemented for line breaking by rule LB8a. In other respects, the line breaking behavior of ZWJ is that of a combining character of class CM.'),
                     Heading(level=3, contents='5.2 Dictionary Usage'),
                     Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                     Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                     Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                     Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                     Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                     Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                     Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                     Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                     Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                     Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                     Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                     Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                     Heading(level=3, contents='5.3 Use of Hyphen'),
                     Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                     Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                     Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                     Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                     Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                     Paragraph(contents='dispara- te'),
                     Paragraph(contents='and the latter as'),
                     Paragraph(contents='dispara- -te.'),
                     Paragraph(contents='A recommended practice is to type <SHY, NON-BREAKING HYPHEN> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                     Paragraph(contents='• Simply inserting a hyphen glyph'),
                     Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                     Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                     Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                     Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                     Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                     Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                     Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                     Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                     Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                     Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                     Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                     Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [UAX9] and Section 9.2, Arabic, of [Unicode].'),
                     Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                     Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                     Paragraph(contents='The sequence <SHY, NON-BREAKING HYPHEN> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                     Heading(level=3, contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                     Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                     Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                     Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                     Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                     Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                     Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                     Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                     Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                     Heading(level=3, contents='5.7 Word Separator Characters'),
                     Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                     Paragraph(contents='1. suppress the visible word separator'),
                     Paragraph(contents='The:quick:brown fox:jumped.'),
                     Paragraph(contents='2. break before the visible word separator'),
                     Paragraph(contents='The:quick:brown :fox:jumped.'),
                     Paragraph(contents='3. break after the visible word separator'),
                     Paragraph(contents='The:quick:brown: fox:jumped.'),
                     Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                     Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                     Heading(level=2, contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                     Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1, Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                     Paragraph(contents='! Mandatory break at the indicated position'),
                     Paragraph(contents='× No break allowed at the indicated position'),
                     Paragraph(contents='÷ Break allowed at the indicated position'),
                     Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                     Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                     Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                     Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                     Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, ZW and ZWJ define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                     Heading(level=4, contents='Resolve line breaking classes:'),
                     Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, CJ, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                     Paragraph(contents='In the absence of such criteria all characters with a specific combination of original class and General_Category property value are resolved as follows:'),
                     TableRow(contents='Resolved\ue000Original\ue000General_Category'),
                     TableRow(contents='AL\ue000AI, SG, XX\ue000Any'),
                     TableRow(contents='CM\ue000SA\ue000Only Mn or Mc'),
                     TableRow(contents='AL\ue000SA\ue000Any except Mn and Mc'),
                     TableRow(contents='NS\ue000CJ\ue000Any'),
                     Heading(level=4, contents='Start and end of text:'),
                     Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                     Rule(contents='LB2 Never break at the start of text.'),
                     Formula(contents='sot ×'),
                     Rule(contents='LB3 Always break at the end of text.'),
                     Formula(contents='! eot'),
                     Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                     Heading(level=4, contents='Mandatory breaks:'),
                     Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                     Rule(contents='LB4 Always break after hard line breaks.'),
                     Formula(contents='BK !'),
                     Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                     Formula(contents='CR × LF'),
                     Formula(contents='CR !'),
                     Formula(contents='LF !'),
                     Formula(contents='NL !'),
                     Rule(contents='LB6 Do not break before hard line breaks.'),
                     Formula(contents='× ( BK | CR | LF | NL )'),
                     Heading(level=4, contents='Explicit breaks and non-breaks:'),
                     Rule(contents='LB7 Do not break before spaces or zero width space.'),
                     Formula(contents='× SP'),
                     Formula(contents='× ZW'),
                     Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                     Formula(contents='ZW SP* ÷'),
                     Rule(contents='LB8a Do not break after a zero width joiner.'),
                     Formula(contents='ZWJ ×'),
                     Paragraph(contents='A ZWJ will prevent breaks between most pairs of characters. This behavior is used to prevent breaks within emoji zwj sequences.'),
                     Heading(level=4, contents='Combining marks:'),
                     Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                     Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules. Treat ZWJ as if it were CM.'),
                     Formula(contents='Treat X (CM | ZWJ)* as if it were X.'),
                     Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                     Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                     Rule(contents='LB10 Treat any remaining combining mark or ZWJ as AL.'),
                     Formula(contents='Treat any remaining CM or ZWJ as it if were AL.'),
                     Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                     Heading(level=4, contents='Word joiner:'),
                     Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                     Formula(contents='× WJ'),
                     Formula(contents='WJ ×'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12 Do not break after NBSP and related characters.'),
                     Formula(contents='GL ×'),
                     Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                     Formula(contents='[^SP BA HY] × GL'),
                     Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Opening and closing:'),
                     Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                     Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                     Formula(contents='× CL'),
                     Formula(contents='× CP'),
                     Formula(contents='× EX'),
                     Formula(contents='× IS'),
                     Formula(contents='× SY'),
                     Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                     Formula(contents='OP SP* ×'),
                     Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                     Formula(contents='QU SP* × OP'),
                     Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                     Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                     Formula(contents='(CL | CP) SP* × NS'),
                     Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                     Formula(contents='B2 SP* × B2'),
                     Heading(level=4, contents='Spaces:'),
                     Rule(contents='LB18 Break after spaces.'),
                     Formula(contents='SP ÷'),
                     Heading(level=4, contents='Special case rules:'),
                     Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                     Formula(contents='× QU'),
                     Formula(contents='QU ×'),
                     Rule(contents='LB20 Break before and after unresolved CB.'),
                     Formula(contents='÷ CB'),
                     Formula(contents='CB ÷'),
                     Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                     Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                     Formula(contents='× BA'),
                     Formula(contents='× HY'),
                     Formula(contents='× NS'),
                     Formula(contents='BB ×'),
                     Rule(contents="LB21a Don't break after Hebrew + Hyphen."),
                     Formula(contents='HL (HY | BA) ×'),
                     Rule(contents='LB21b Don’t break between Solidus and Hebrew letters.'),
                     Formula(contents='SY × HL'),
                     Rule(contents='LB22 Do not break between two ellipses, or between letters, numbers or exclamations and ellipsis.'),
                     Formula(contents='(AL | HL) × IN'),
                     Formula(contents='EX × IN'),
                     Formula(contents='(ID | EB | EM) × IN'),
                     Formula(contents='IN × IN'),
                     Formula(contents='NU × IN'),
                     Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                     Heading(level=4, contents='Numbers:'),
                     Paragraph(contents='Do not break alphanumerics.'),
                     Rule(contents='LB23 Do not break between digits and letters.'),
                     Formula(contents='(AL | HL) × NU'),
                     Formula(contents='NU × (AL | HL)'),
                     Rule(contents='LB23a Do not break between numeric prefixes and ideographs, or between ideographs and numeric postfixes.'),
                     Formula(contents='PR × (ID | EB | EM)'),
                     Formula(contents='(ID | EB | EM) × PO'),
                     Rule(contents='LB24 Do not break between numeric prefix/postfix and letters, or between letters and prefix/postfix.'),
                     Formula(contents='(PR | PO) × (AL | HL)'),
                     Formula(contents='(AL | HL) × (PR | PO)'),
                     Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                     Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                     Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                     Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                     Formula(contents='CL × PO'),
                     Formula(contents='CP × PO'),
                     Formula(contents='CL × PR'),
                     Formula(contents='CP × PR'),
                     Formula(contents='NU × PO'),
                     Formula(contents='NU × PR'),
                     Formula(contents='PO × OP'),
                     Formula(contents='PO × NU'),
                     Formula(contents='PR × OP'),
                     Formula(contents='PR × NU'),
                     Formula(contents='HY × NU'),
                     Formula(contents='IS × NU'),
                     Formula(contents='NU × NU'),
                     Formula(contents='SY × NU'),
                     Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                     Heading(level=4, contents='Korean syllable blocks'),
                     Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                     Rule(contents='LB26 Do not break a Korean syllable.'),
                     Formula(contents='JL × (JL | JV | H2 | H3)'),
                     Formula(contents='(JV | H2) × (JV | JT)'),
                     Formula(contents='(JT | H3) × JT'),
                     Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                     Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                     Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                     Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                     Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                     Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                     Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                     Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                     Formula(contents='(AL | HL) × (AL | HL)'),
                     Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                     Formula(contents='IS × (AL | HL)'),
                     Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                     Formula(contents='(AL | HL | NU) × OP'),
                     Formula(contents='CP × (AL | HL | NU)'),
                     Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                     Rule(contents='LB30a Break between two regional indicator symbols if and only if there are an even number of regional indicators preceding the position of the break.'),
                     Formula(contents='sot (RI RI)* RI × RI'),
                     Formula(contents='[^RI] (RI RI)* RI × RI'),
                     Rule(contents='LB30b Do not break between an emoji base and an emoji modifier.'),
                     Formula(contents='EB × EM'),
                     Rule(contents='LB31 Break everywhere else.'),
                     Formula(contents='ALL ÷'),
                     Formula(contents='÷ ALL'),
                     Heading(level=2, contents='7 Deleted'),
                     Paragraph(contents='Formerly was: Pair Table-Based Implementation.'),
                     Heading(level=2, contents='8 Customization'),
                     Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                     Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                     Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                     Paragraph(contents='Notes:'),
                     Paragraph(contents='• Locale-sensitive line break specifications can be expressed in LDML [UTS35]. Tailorings are available in the Common Locale Data Repository [CLDR].'),
                     Paragraph(contents='• Some changes to rules and data are needed for the best segmentation behavior of emoji zwj sequences [UTS51]. Implementations are strongly encouraged to use the the line break rules in the latest version of CLDR (Version 35 or later) [CLDR] and the latest emoji properties (Version 12.0 or later) [UTS51].'),
                     Paragraph(contents='The remainder of this section gives an overview of common types of tailorings.'),
                     Heading(level=3, contents='8.1 Types of Tailoring'),
                     Paragraph(contents='There are two principal ways of tailoring the line breaking algorithm:'),
                     Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                     Paragraph(contents='2. Changing the line breaking rules Adding new rules, or altering or removing existing rules, provides more flexibility in changing the line breaking behavior. This can also include introducing new character classes for use by the new or altered rules.'),
                     Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                     Heading(level=3, contents='8.2 Examples of Customization'),
                     Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm.'),
                     Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the line breaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                     Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification.'),
                     Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. This can be implemented by adjusting rules LB23, LB25 and LB28 to allow breaks between all permutations of the character classes AL and NU.'),
                     Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by mapping class CJ to be handled as class ID in rule LB1.'),
                     Paragraph(contents='Example 6. Tailor to prevent line breaks from falling within default grapheme clusters, as defined by by Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. The tailoring can be accomplished by first segmenting the text into grapheme clusters according to the rules defined in UAX #29, and then finding line breaks according to the default line break rules, giving each grapheme cluster the line breaking class of its first code point.'),
                     Paragraph(contents='An example of a grapheme cluster that would be split by the default line break rules is a Zero Width Space followed by a combining mark.'),
                     Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * ( CL | CP ) ? ( PR | PO) ?'),
                     Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                     Paragraph(contents='Regex-Number: Do not break numbers.'),
                     Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                     Formula(contents='( OP | HY ) × NU'),
                     Formula(contents='NU × (NU | SY | IS)'),
                     Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL | CP )'),
                     Formula(contents='NU (NU | SY | IS)* (CL | CP)? × (PO | PR)'),
                     Paragraph(contents='In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                     Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                     Formula(contents='[^NU] × CL'),
                     Formula(contents='[^NU] × CP'),
                     Formula(contents='× EX'),
                     Formula(contents='[^NU] × IS'),
                     Formula(contents='[^NU] × SY'),
                     Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                     Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                     Heading(level=2, contents='9 Implementation Notes'),
                     Paragraph(contents='This section provides additional notes on implementation issues.'),
                     Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                     Paragraph(contents='To replace rule LB9, terms of the form'),
                     Paragraph(contents='B # A'),
                     Paragraph(contents='B SP* # A'),
                     Paragraph(contents='B #'),
                     Paragraph(contents='B SP* #'),
                     Paragraph(contents='are replaced by terms of the form'),
                     Paragraph(contents='B CM* # A'),
                     Paragraph(contents='B CM* SP* # A'),
                     Paragraph(contents='B CM* #'),
                     Paragraph(contents='B CM* SP* #'),
                     Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                     Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                     Paragraph(contents='Replace LB10 by the following rule:'),
                     Paragraph(contents='× CM'),
                     Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                     Paragraph(contents='(AL | NU) × OP'),
                     Paragraph(contents='add another rule'),
                     Paragraph(contents='CM × OP.'),
                     Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                     Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='As stated in Section 7.9, Combining Marks of [Unicode], combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                     Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                     Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                     Formula(contents='Treat SP CM* as if it were ID.'),
                     Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                     Heading(level=2, contents='10 Testing'),
                     Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2, Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                     Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                     Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                     Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                     Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                     Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                     Paragraph(contents='1. The rules are cast into a more regex-style.'),
                     Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                     Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                     Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                     Paragraph(contents='• 13.01) [^NU] × CL'),
                     Paragraph(contents='• 13.02) × EX'),
                     Paragraph(contents='• ...'),
                     Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                     Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                     Paragraph(contents='Table 4. Numbering of Test Rules'),
                     TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                     TableRow(contents='LB2\ue0000.2\ue000start of text'),
                     TableRow(contents='LB3\ue0000.3\ue000end of text'),
                     TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                     TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                     TableRow(contents='LB31\ue000999\ue000÷ any'),
                     Heading(level=2, contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                     Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                     TableRow(contents='9.0.0\ue0008.0.0\ue0006.2.0\ue0006.1.0\ue0005.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                     TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                     TableRow(contents='LB2\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                     TableRow(contents='LB3\ue0003\ue0003\ue0003\ue0003\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                     TableRow(contents='LB4\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB5\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB6\ue0006\ue0006\ue0006\ue0006\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                     TableRow(contents='LB7\ue0007\ue0007\ue0007\ue0007\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                     TableRow(contents='LB8\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                     TableRow(contents='LB8a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                     TableRow(contents='LB9\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB10\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                     TableRow(contents='LB11\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12a\ue00012a\ue00012a\ue00012a\ue00012a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB13\ue00013\ue00013\ue00013\ue00013\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                     TableRow(contents='LB14\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                     TableRow(contents='LB15\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                     TableRow(contents='LB16\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                     TableRow(contents='LB17\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                     TableRow(contents='LB18\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                     TableRow(contents='LB19\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                     TableRow(contents='LB20\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                     TableRow(contents='LB21\ue00021\ue00021\ue00021\ue00021\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                     TableRow(contents='LB21a\ue00021a\ue00021a\ue00021a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB21b\ue00021b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB22\ue00022\ue00022\ue00022\ue00022\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                     TableRow(contents='LB23\ue00023\ue00023\ue00023\ue00023\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                     TableRow(contents='LB23a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB24\ue00024\ue00024\ue00024\ue00024\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='LB25\ue00025\ue00025\ue00025\ue00025\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                     TableRow(contents='LB26\ue00026\ue00026\ue00026\ue00026\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB27\ue00027\ue00027\ue00027\ue00027\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB28\ue00028\ue00028\ue00028\ue00028\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                     TableRow(contents='LB29\ue00029\ue00029\ue00029\ue00029\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30\ue00030\ue00030\ue00030\ue00030\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30a\ue00030a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB31\ue00031\ue00031\ue00031\ue00031\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                     Heading(level=2, contents='References'),
                     Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                     Heading(level=2, contents='Acknowledgments'),
                     Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintains the text.'),
                     Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                     Heading(level=2, contents='Modifications'),
                     Paragraph(contents='The following summarizes modifications from the previous revision of this annex.'),
                     Heading(level=4, contents='Revision 43:'),
                     Paragraph(contents='• Reissued for Unicode 12.0.'),
                     Paragraph(contents='• Clarified behavior of NNBSP for Mongolian.'),
                     Paragraph(contents='• Corrected typographical and editing errors identified in public feedback.'),
                     Paragraph(contents='• Added references to CLDR and UTS35 as a source for tailorings.'),
                     Paragraph(contents='Revision 42 being a proposed update, only changes between revisions 41 and 43 are noted here.'),
                     Paragraph(contents='Modifications for previous versions are listed in those respective versions.'),
                     Paragraph(contents='© 2019 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                     Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(13, 0, 0): [Heading(level=2, contents='Unicode® Standard Annex #14'),
                     Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                     TableRow(contents='Version\ue000Unicode 13.0.0'),
                     TableRow(contents='Editors\ue000Christopher Chapman (cchapman@adobe.com)'),
                     TableRow(contents='Date\ue0002020-02-17'),
                     TableRow(contents='This Version\ue000http://www.unicode.org/reports/tr14/tr14-45.html'),
                     TableRow(contents='Previous Version\ue000http://www.unicode.org/reports/tr14/tr14-43.html'),
                     TableRow(contents='Latest Version\ue000http://www.unicode.org/reports/tr14/'),
                     TableRow(contents='Latest Proposed Update\ue000http://www.unicode.org/reports/tr14/proposed.html'),
                     TableRow(contents='Revision\ue00045'),
                     Heading(level=4, contents='Summary'),
                     Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display.'),
                     Heading(level=4, contents='Status'),
                     Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                     Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                     Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                     Heading(level=4, contents='Contents'),
                     Paragraph(contents='1 Overview and Scope'),
                     Paragraph(contents='2 Definitions'),
                     Paragraph(contents='3 Introduction'),
                     Paragraph(contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='4 Conformance'),
                     Paragraph(contents='4.1 Conformance Requirements'),
                     Paragraph(contents='5 Line Breaking Properties'),
                     Paragraph(contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='5.2 Dictionary Usage'),
                     Paragraph(contents='5.3 Use of Hyphen'),
                     Paragraph(contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='5.7 Word Separator Characters'),
                     Paragraph(contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='7 Deleted. (Formerly was: Pair Table-Based Implementation)'),
                     Paragraph(contents='8 Customization'),
                     Paragraph(contents='8.1 Types of Tailoring'),
                     Paragraph(contents='8.2 Examples of Customization'),
                     Paragraph(contents='9 Implementation Notes'),
                     Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='10 Testing'),
                     Paragraph(contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='References'),
                     Paragraph(contents='Acknowledgments'),
                     Paragraph(contents='Modifications'),
                     Heading(level=2, contents='1 Overview and Scope'),
                     Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                     Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                     Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                     Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Two main sections follow:'),
                     Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                     Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                     Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                     Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                     Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                     Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                     Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                     Heading(level=2, contents='2 Definitions'),
                     Paragraph(contents='The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard.'),
                     Paragraph(contents='All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard [Unicode].'),
                     Paragraph(contents='LD1. Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                     Paragraph(contents='LD2. Line Break: The position in the text where one line ends and the next one starts.'),
                     Paragraph(contents='LD3. Line Break Opportunity: A place where a line is allowed to end.'),
                     Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                     Paragraph(contents='LD4. Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                     Paragraph(contents='LD5. Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                     Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                     Paragraph(contents='LD6. Line Breaking Class: A class of characters with the same line breaking property value.'),
                     Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                     Paragraph(contents='LD7. Mandatory Break: A line must break following a character that has the mandatory break property.'),
                     Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                     Paragraph(contents='LD8. Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                     Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space.'),
                     Paragraph(contents='LD9. Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                     Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, an indirect break is represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                     Paragraph(contents='LD10. Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, a prohibited break is expressed as a rule of the form: B SP* × A.'),
                     Paragraph(contents='LD11. Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                     Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                     Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                     Paragraph(contents='Table 1. Line Breaking Classes'),
                     TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                     TableRow(contents='Non-tailorable Line Breaking Classes'),
                     TableRow(contents='BK\ue000Mandatory Break\ue000NL, PARAGRAPH SEPARATOR\ue000Cause a line break (after)'),
                     TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                     TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                     TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                     TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                     TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                     TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                     TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                     TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                     TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                     TableRow(contents='ZWJ\ue000Zero Width Joiner\ue000Zero Width Joiner\ue000Prohibit line breaks within joiner sequences'),
                     TableRow(contents='Break Opportunities'),
                     TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                     TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                     TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                     TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                     TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                     TableRow(contents='Characters Prohibiting Certain Breaks'),
                     TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                     TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                     TableRow(contents='NS\ue000Nonstarter\ue000“‼”, “‽”, “⁇”, “⁉”, etc.\ue000Allow only indirect line breaks before'),
                     TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                     TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                     TableRow(contents='Numeric Context'),
                     TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                     TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                     TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                     TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                     TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                     TableRow(contents='Other Characters'),
                     TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                     TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                     TableRow(contents='CJ\ue000Conditional Japanese Starter\ue000Small kana\ue000Treat as NS or ID for strict or normal breaking.'),
                     TableRow(contents='EB\ue000Emoji Base\ue000All emoji allowing modifiers\ue000Do not break from following Emoji Modifier'),
                     TableRow(contents='EM\ue000Emoji Modifier\ue000Skin tone modifiers\ue000Do not break from preceding Emoji Base'),
                     TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='HL\ue000Hebrew Letter\ue000Hebrew\ue000Do not break around a following hyphen; otherwise act as Alphabetic'),
                     TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                     TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='RI\ue000Regional Indicator\ue000REGIONAL INDICATOR SYMBOL LETTER A .. Z\ue000Keep pairs together. For pairs, break before and after other classes'),
                     TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                     TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                     Heading(level=2, contents='3 Introduction'),
                     Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                     Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                     Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                     Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                     Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                     Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                     Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                     Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                     Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                     Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                     Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                     Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                     Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                     Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                     Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                     Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [UAX9]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                     Heading(level=2, contents='4 Conformance'),
                     Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                     Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                     Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                     Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                     Paragraph(contents='Note: Locale-sensitive line break specifications can be expressed in LDML [UTS35]. Tailorings are available in the Common Locale Data Repository [CLDR].'),
                     Heading(level=3, contents='4.1 Conformance Requirements'),
                     Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                     Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                     Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                     Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                     Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                     Heading(level=2, contents='5 Line Breaking Properties'),
                     Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                     Paragraph(contents='This section also summarizes the membership of character classes corresponding to each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line breaking behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                     Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into the algorithm defined in Section 6, Line Breaking Algorithm. That section describes a workable default line breaking method. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences. Permitted customizations can include changing the classification of characters for certain classes.'),
                     Paragraph(contents='In addition to the line breaking properties defined in this section, the algorithm defined in Section 6, Line Breaking Algorithm also makes use of East_Asian_Width property values, defined in Unicode Standard Annex #11, East Asian Width [UAX11]. Note that for purposes of the line breaking algorithm, those East_Asian_Width property values are tailorable, as are the rules of the line breaking algorithm which use them. (See rule LB30.)'),
                     Heading(level=4, contents='Data File'),
                     Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a semicolon-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name.'),
                     Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                     Heading(level=4, contents='Future Updates'),
                     Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                     Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                     TableRow(contents='Label\ue000Meaning for the Class'),
                     TableRow(contents='(A)\ue000It allows a break opportunity after in specified contexts.'),
                     TableRow(contents='(XA)\ue000It prevents a break opportunity after in specified contexts.'),
                     TableRow(contents='(B)\ue000It allows a break opportunity before in specified contexts.'),
                     TableRow(contents='(XB)\ue000It prevents a break opportunity before in specified contexts.'),
                     TableRow(contents='(P)\ue000It allows a break opportunity for a pair of same characters.'),
                     TableRow(contents='(XP)\ue000It prevents a break opportunity for a pair of same characters.'),
                     Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                     Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                     Paragraph(contents='Some characters that ordinarily act like alphabetic characters are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                     Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [UAX11].'),
                     Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                     Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                     Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                     TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                     TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                     Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                     Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                     Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                     Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                     Paragraph(contents='This class contains alphabetic or symbolic characters not explicitly assigned to another line breaking class. These are primarily characters of the following categories:'),
                     TableRow(contents='Category\ue000General_Category Values'),
                     TableRow(contents='Alphabetic\ue000Lu, Ll, Lt, Lm, and Lo'),
                     TableRow(contents='Symbols\ue000Sm, Sk, and So'),
                     TableRow(contents='Non-decimal Numbers\ue000Nl and No'),
                     TableRow(contents='Punctuation\ue000Pc, Pd, and Po'),
                     Paragraph(contents='Line break class AL also contains several format characters, including:'),
                     TableRow(contents='0600..0604\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAMVAT'),
                     TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                     TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                     TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                     TableRow(contents='110BD\ue000KAITHI NUMBER SIGN'),
                     Paragraph(contents='These format characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                     Paragraph(contents='Major exceptions to the general pattern of alphabetic and symbolic characters having line break class AL include:'),
                     Paragraph(contents='HL for Hebrew letters AI or ID, based on the East Asian Width property of the character ID for certain pictographic symbols CJ for small hiragana and katakana SA for complex context scripts JL, JV, JT, H2 or H3 for Hangul characters'),
                     Heading(level=3, contents='BA: Break After (A)'),
                     Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                     Heading(level=4, contents='Breaking Spaces'),
                     Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                     TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                     TableRow(contents='2000\ue000EN QUAD'),
                     TableRow(contents='2001\ue000EM QUAD'),
                     TableRow(contents='2002\ue000EN SPACE'),
                     TableRow(contents='2003\ue000EM SPACE'),
                     TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                     TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                     TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                     TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                     TableRow(contents='2009\ue000THIN SPACE'),
                     TableRow(contents='200A\ue000HAIR SPACE'),
                     TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                     TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                     Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                     Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                     Paragraph(contents='For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                     Heading(level=4, contents='Tabs'),
                     TableRow(contents='0009\ue000TAB'),
                     Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                     Heading(level=4, contents='Conditional Hyphens'),
                     TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                     Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=4, contents='Breaking Hyphens'),
                     Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                     TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                     TableRow(contents='2010\ue000HYPHEN'),
                     TableRow(contents='2012\ue000FIGURE DASH'),
                     TableRow(contents='2013\ue000EN DASH'),
                     Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Visible Word Dividers'),
                     Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                     TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                     TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                     TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                     TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                     TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                     Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                     TableRow(contents='2027\ue000HYPHENATION POINT'),
                     Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                     TableRow(contents='007C\ue000VERTICAL LINE'),
                     Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                     Heading(level=4, contents='Historic Word Separators'),
                     Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                     Paragraph(contents='Examples of Historic Word Separators include:'),
                     TableRow(contents='16EB\ue000RUNIC SINGLE PUNCTUATION'),
                     TableRow(contents='16EC\ue000RUNIC MULTIPLE PUNCTUATION'),
                     TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                     TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                     TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                     TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                     TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                     TableRow(contents='205B\ue000FOUR DOT MARK'),
                     TableRow(contents='205D\ue000TRICOLON'),
                     TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                     TableRow(contents='2E19\ue000PALM BRANCH'),
                     TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                     TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                     TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                     TableRow(contents='2E2D\ue000FIVE DOT MARK'),
                     TableRow(contents='2E30\ue000RING POINT'),
                     TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                     TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                     TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                     TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                     TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                     TableRow(contents='1091F\ue000PHOENICIAN WORD SEPARATOR'),
                     TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                     Heading(level=4, contents='Dandas'),
                     Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                     Paragraph(contents='Examples of dandas include:'),
                     TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                     TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                     TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                     TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                     TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                     TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                     TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                     TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                     TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                     TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                     TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                     TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                     TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                     TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                     TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                     TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                     TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                     TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                     TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                     Heading(level=4, contents='Tibetan'),
                     TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                     TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                     TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                     TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                     TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                     TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                     Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Other Terminating Punctuation'),
                     Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                     TableRow(contents='1804\ue000MONGOLIAN COLON'),
                     TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                     TableRow(contents='1B5A\ue000BALINESE PANTI'),
                     TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                     TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                     TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                     TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                     TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                     TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                     TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                     TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                     TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                     TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                     TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                     TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                     TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                     TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                     TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                     TableRow(contents='2E17\ue000DOUBLE OBLIQUE HYPHEN'),
                     TableRow(contents='A60D\ue000VAI COMMA'),
                     TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                     TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                     TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                     TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                     TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                     TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                     TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                     TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                     TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                     Heading(level=3, contents='BB: Break Before (B)'),
                     Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                     Paragraph(contents='Examples of BB characters are described in the following sections.'),
                     Heading(level=4, contents='Dictionary Use'),
                     TableRow(contents='00B4\ue000ACUTE ACCENT'),
                     TableRow(contents='1FFD\ue000GREEK OXIA'),
                     Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                     TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                     Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                     TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                     TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                     Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                     Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                     Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                     TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                     TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                     TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                     TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                     TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                     TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                     TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                     TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                     TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                     TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                     TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                     TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                     TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                     Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Mongolian'),
                     TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                     Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                     Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                     TableRow(contents='2014\ue000EM DASH'),
                     Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                     Paragraph(contents='Some languages, including Spanish, use EM DASH to set off a parenthetical, and the surrounding dashes should not be broken from the contained text. In this usage there is space on the side where it can be broken. This does not conflict with symmetrical usages, either with spaces on both sides of the em-dash or with no spaces.'),
                     Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                     Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                     TableRow(contents='000C\ue000FORM FEED (FF)'),
                     TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                     Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                     TableRow(contents='2028\ue000LINE SEPARATOR'),
                     Paragraph(contents='The text after the LINE SEPARATOR starts at the beginning of the line. This is similar to HTML <BR>.'),
                     TableRow(contents='2029\ue000PARAGRAPH SEPARATOR'),
                     Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LINE SEPARATOR, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                     Heading(level=4, contents='Newline Function (NLF)'),
                     Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                     Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                     Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                     Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                     TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                     Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                     Heading(level=3, contents='CJ: Conditional Japanese Starter'),
                     Paragraph(contents='This character class contains Japanese small hiragana and katakana. Characters of this class may be treated as either NS or ID.'),
                     Paragraph(contents='CSS Text Level 3 (which supports Japanese line layout) defines three distinct values for its line-break behavior:'),
                     Paragraph(contents='• strict, typically used for long lines'),
                     Paragraph(contents='• normal (CSS default), the behavior typically used for books and documents'),
                     Paragraph(contents='• loose, typically used for short lines such as in newspapers'),
                     Paragraph(contents='These have different sets of “kinsoku” characters which cannot be at the beginning or end of a line; strict has the largest set, while loose has the smallest. The motivation for the smaller number of kinsoku characters is to avoid triggering justification that puts characters off the grid position.'),
                     Paragraph(contents='Treating characters of class CJ as class NS will give CSS strict line breaking; treating them as class ID will give CSS normal breaking.'),
                     Paragraph(contents='The CJ line break class includes'),
                     TableRow(contents='3041, 3043, 3045, etc.\ue000Small hiragana'),
                     TableRow(contents='30A1, 30A3, 30A5, etc.\ue000Small katakana'),
                     TableRow(contents='30FC\ue000KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                     TableRow(contents='FF67..FF70\ue000Halfwidth variants'),
                     Heading(level=3, contents='CL: Close Punctuation (XB)'),
                     Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                     Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                     Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                     TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                     TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE50\ue000SMALL COMMA'),
                     TableRow(contents='FE52\ue000SMALL FULL STOP'),
                     TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                     TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                     TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                     Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                     Heading(level=4, contents='Combining Characters'),
                     Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                     Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 NO-BREAK SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                     Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                     Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                     Heading(level=4, contents='Control and Formatting Characters'),
                     Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                     Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                     Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                     Paragraph(contents='The CM class also includes U+3035 VERTICAL KANA REPEAT MARK LOWER HALF. This character is normally preceded by either U+3033 VERTICAL KANA REPEAT MARK UPPER HALF or U+3034 VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF, and should not be separated from them.'),
                     Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                     Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                     TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                     TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                     Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                     TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                     Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                     Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                     Heading(level=3, contents='EB: Emoji Base (B/A)'),
                     Paragraph(contents='This class includes characters whose appearance can be modified by a subsequent emoji modifier in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier_Base property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='1F466\ue000BOY'),
                     TableRow(contents='1F478\ue000PRINCESS'),
                     TableRow(contents='1F6B4\ue000BICYCLIST'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b. In other contexts, characters of class EB behave similarly to ideographs of class ID, with break opportunities before and after.'),
                     Heading(level=3, contents='EM: Emoji Modifier (A)'),
                     Paragraph(contents='This class includes characters that can be used to modify the appearance of a preceding emoji in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b.'),
                     Paragraph(contents='Emoji modifiers include:'),
                     TableRow(contents='1F3FB..1F3FF\ue000EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6'),
                     Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                     Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                     TableRow(contents='0021\ue000EXCLAMATION MARK'),
                     TableRow(contents='003F\ue000QUESTION MARK'),
                     TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                     TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                     TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                     TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                     TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                     TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                     TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                     TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                     TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                     Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following are examples of characters of line break class GL:'),
                     TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                     TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                     TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                     Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE.'),
                     Paragraph(contents='NARROW NO-BREAK SPACE has exactly the same line breaking behavior as NO-BREAK SPACE, but with a narrow display width. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. Both of these characters are regularly used in Mongolian text, where they participate in special shaping behavior, as described in Section 13.5, Mongolian of [Unicode].'),
                     Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                     TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                     Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                     TableRow(contents='2007\ue000FIGURE SPACE'),
                     Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                     TableRow(contents='2011\ue000NON-BREAKING HYPHEN'),
                     Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                     TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                     TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                     TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                     Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                     Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                     Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                     Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                     Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                     Heading(level=3, contents='HY: Hyphen (XA)'),
                     TableRow(contents='002D\ue000HYPHEN-MINUS'),
                     Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                     Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                     Heading(level=3, contents='ID: Ideographic (B/A)'),
                     Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                     TableRow(contents='2E80..2FFF\ue000CJK, Kangxi Radicals, Ideographic Description Symbols'),
                     TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                     TableRow(contents='30A2..30FA\ue000Katakana (except small characters)'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                     Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                     Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                     Paragraph(contents='The unassigned code points in the following blocks default to ID:'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='All undesignated code points in Planes 2 and 3, whether inside or outside of allocated blocks, default to ID:'),
                     TableRow(contents='20000..2FFFD\ue000Plane 2'),
                     TableRow(contents='30000..3FFFD\ue000Plane 3'),
                     Paragraph(contents='All unassigned code points in the following Plane 1 range, whether inside or outside of allocated blocks, also default to ID:'),
                     TableRow(contents='1F000..1FFFD\ue000Plane 1 range'),
                     Heading(level=4, contents='Korean'),
                     Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                     TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                     Heading(level=4, contents='Symbols'),
                     Paragraph(contents='Certain pictographic symbols of General Category So are also included in this line break class.'),
                     Heading(level=3, contents='HL: Hebrew Letter (XB)'),
                     Paragraph(contents='This class includes all Hebrew letters.'),
                     Paragraph(contents='When a Hebrew letter is followed by a hyphen, there is no break on either side of the hyphen. In this context a hyphen is any character of class HY or class BA. In other respects, Hebrew letters behave the same as characters of class AL.'),
                     Paragraph(contents='Included in this class are all characters of General Category Letter that have Script=Hebrew.'),
                     Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                     Heading(level=4, contents='Leaders'),
                     Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='2024\ue000ONE DOT LEADER'),
                     TableRow(contents='2025\ue000TWO DOT LEADER'),
                     TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                     TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                     Paragraph(contents='HORIZONTAL ELLIPSIS can be used as a three-dot leader.'),
                     Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                     Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='002C\ue000COMMA'),
                     TableRow(contents='002E\ue000FULL STOP'),
                     TableRow(contents='003A\ue000COLON'),
                     TableRow(contents='003B\ue000SEMICOLON'),
                     TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                     TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                     TableRow(contents='060C\ue000ARABIC COMMA'),
                     TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                     TableRow(contents='07F8\ue000NKO COMMA'),
                     TableRow(contents='2044\ue000FRACTION SLASH'),
                     TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                     TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                     TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                     Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                     Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                     Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                     Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                     Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                     Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                     Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                     Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                     Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                     Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                     TableRow(contents='000A\ue000LINE FEED (LF)'),
                     Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                     Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                     TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                     Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                     Heading(level=3, contents='NS: Nonstarters (XB)'),
                     Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include:'),
                     TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                     TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                     TableRow(contents='203D\ue000INTERROBANG'),
                     TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                     TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                     TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                     TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='301C\ue000WAVE DASH'),
                     TableRow(contents='303C\ue000MASU MARK'),
                     TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                     TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                     TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                     TableRow(contents='30FD..30FE\ue000KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK'),
                     TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                     TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                     TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                     TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                     Paragraph(contents='Note: Optionally, the NS restriction may be relaxed by tailoring, with some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles. Alternatively, line breaking can be tightened by moving characters that are ID into NS.'),
                     Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                     Heading(level=3, contents='NU: Numeric (XP)'),
                     Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                     Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                     TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                     TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                     Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                     Heading(level=3, contents='OP: Open Punctuation (XA)'),
                     Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                     TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                     TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                     TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                     Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                     Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                     Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                     Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                     Paragraph(contents='Examples of Postfix characters include'),
                     TableRow(contents='0025\ue000PERCENT SIGN'),
                     TableRow(contents='00A2\ue000CENT SIGN'),
                     TableRow(contents='00B0\ue000DEGREE SIGN'),
                     TableRow(contents='060B\ue000AFGHANI SIGN'),
                     TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                     TableRow(contents='2030\ue000PER MILLE SIGN'),
                     TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                     TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                     TableRow(contents='20A7\ue000PESETA SIGN'),
                     TableRow(contents='2103\ue000DEGREE CELSIUS'),
                     TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                     TableRow(contents='FDFC\ue000RIAL SIGN'),
                     TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                     TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                     TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                     Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                     Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                     Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                     Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                     Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                     TableRow(contents='002B\ue000PLUS SIGN'),
                     TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                     TableRow(contents='00B1\ue000PLUS-MINUS SIGN'),
                     TableRow(contents='2116\ue000NUMERO SIGN'),
                     TableRow(contents='2212\ue000MINUS SIGN'),
                     TableRow(contents='2213\ue000MINUS-OR-PLUS SIGN'),
                     Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                     Heading(level=3, contents='QU: Quotation (XB/XA)'),
                     Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                     Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                     Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                     TableRow(contents='0022\ue000QUOTATION MARK'),
                     TableRow(contents='0027\ue000APOSTROPHE'),
                     TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                     TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                     TableRow(contents='2E0B\ue000RAISED SQUARE'),
                     Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                     Heading(level=3, contents='RI: Regional Indicator (B/A/XP)'),
                     Paragraph(contents='For line Breaking, the Regional Indicator characters are all those with the Unicode character property of Regional_Indicator. This includes:'),
                     TableRow(contents='1F1E6..1F1FF\ue000REGIONAL INDICATOR SYMBOL LETTER A .. REGIONAL INDICATOR SYMBOL LETTER Z'),
                     Paragraph(contents='Pairs of RI characters are used to represent a two-letter ISO 3166 region code.'),
                     Paragraph(contents='Runs of adjacent RI characters are grouped into pairs, beginning at the start of the run. No break opportunity occurs within a pair; breaks can occur between adjacent pairs. When RI characters are adjacent to characters of other classes, breaks can occur before and after, except where forbidden by other rules.'),
                     Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                     Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                     Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                     Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                     TableRow(contents='0E00..0E7F\ue000Thai'),
                     TableRow(contents='0E80..0EFF\ue000Lao'),
                     TableRow(contents='1000..109F\ue000Myanmar'),
                     TableRow(contents='1780..17FF\ue000Khmer'),
                     TableRow(contents='1950..197F\ue000Tai Le'),
                     TableRow(contents='1980..19DF\ue000New Tai Lue'),
                     TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                     TableRow(contents='A9E0..A9FF\ue000Myanmar Extended-B'),
                     TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                     TableRow(contents='AA80..AADF\ue000Tai Viet'),
                     TableRow(contents='11700..1173F\ue000Ahom'),
                     Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                     Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                     Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                     Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                     Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                     TableRow(contents='0020\ue000SPACE (SP)'),
                     Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                     Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                     Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                     TableRow(contents='002F\ue000SOLIDUS'),
                     Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                     Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                     Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                     TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                     TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                     Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                     Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                     Heading(level=3, contents='XX: Unknown (XP)'),
                     Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                     Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                     Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                     Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                     Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                     Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                     Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                     TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                     Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                     Heading(level=3, contents='ZWJ: Zero Width Joiner (XA/XB) (Non-tailorable)'),
                     TableRow(contents='200D\ue000ZERO WIDTH JOINER (ZWJ)'),
                     Paragraph(contents='A ZWJ prevents breaks between most pairs of characters that would otherwise break. It has various uses, including as a connector in emoji zwj sequences and as a joiner in complex scripts.'),
                     Paragraph(contents='Emoji zwj sequences are defined by ED-16, emoji zwj sequence, in [UTS51] and implemented for line breaking by rule LB8a. In other respects, the line breaking behavior of ZWJ is that of a combining character of class CM.'),
                     Heading(level=3, contents='5.2 Dictionary Usage'),
                     Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                     Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                     Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                     Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                     Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                     Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                     Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                     Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                     Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                     Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                     Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                     Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                     Heading(level=3, contents='5.3 Use of Hyphen'),
                     Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                     Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                     Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                     Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                     Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                     Paragraph(contents='dispara- te'),
                     Paragraph(contents='and the latter as'),
                     Paragraph(contents='dispara- -te.'),
                     Paragraph(contents='A recommended practice is to type <SHY, NON-BREAKING HYPHEN> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                     Paragraph(contents='• Simply inserting a hyphen glyph'),
                     Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                     Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                     Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                     Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                     Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                     Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                     Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                     Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                     Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                     Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                     Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                     Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [UAX9] and Section 9.2, Arabic, of [Unicode].'),
                     Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                     Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                     Paragraph(contents='The sequence <SHY, NON-BREAKING HYPHEN> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                     Heading(level=3, contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                     Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                     Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                     Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                     Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                     Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                     Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                     Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                     Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                     Heading(level=3, contents='5.7 Word Separator Characters'),
                     Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                     Paragraph(contents='1. suppress the visible word separator'),
                     Paragraph(contents='The:quick:brown fox:jumped.'),
                     Paragraph(contents='2. break before the visible word separator'),
                     Paragraph(contents='The:quick:brown :fox:jumped.'),
                     Paragraph(contents='3. break after the visible word separator'),
                     Paragraph(contents='The:quick:brown: fox:jumped.'),
                     Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                     Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                     Heading(level=2, contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                     Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1, Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                     Paragraph(contents='! Mandatory break at the indicated position'),
                     Paragraph(contents='× No break allowed at the indicated position'),
                     Paragraph(contents='÷ Break allowed at the indicated position'),
                     Paragraph(contents='In the regular expressions, parentheses may be used for grouping, and square brackets, &, -, and \\p{...} may be used to compose sets of characters, as in UAX #29, Unicode Text Segmentation [UAX29] and in UTS #18, Unicode Regular Expressions [UTS18]. Use of a line break class such as BK is short for the property expression \\p{lb=BK}.'),
                     Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                     Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                     Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                     Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                     Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, ZW and ZWJ define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                     Heading(level=4, contents='Resolve line breaking classes:'),
                     Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, CJ, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                     Paragraph(contents='In the absence of such criteria all characters with a specific combination of original class and General_Category property value are resolved as follows:'),
                     TableRow(contents='Resolved\ue000Original\ue000General_Category'),
                     TableRow(contents='AL\ue000AI, SG, XX\ue000Any'),
                     TableRow(contents='CM\ue000SA\ue000Only Mn or Mc'),
                     TableRow(contents='AL\ue000SA\ue000Any except Mn and Mc'),
                     TableRow(contents='NS\ue000CJ\ue000Any'),
                     Heading(level=4, contents='Start and end of text:'),
                     Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                     Rule(contents='LB2 Never break at the start of text.'),
                     Formula(contents='sot ×'),
                     Rule(contents='LB3 Always break at the end of text.'),
                     Formula(contents='! eot'),
                     Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                     Heading(level=4, contents='Mandatory breaks:'),
                     Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                     Rule(contents='LB4 Always break after hard line breaks.'),
                     Formula(contents='BK !'),
                     Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                     Formula(contents='CR × LF'),
                     Formula(contents='CR !'),
                     Formula(contents='LF !'),
                     Formula(contents='NL !'),
                     Rule(contents='LB6 Do not break before hard line breaks.'),
                     Formula(contents='× ( BK | CR | LF | NL )'),
                     Heading(level=4, contents='Explicit breaks and non-breaks:'),
                     Rule(contents='LB7 Do not break before spaces or zero width space.'),
                     Formula(contents='× SP'),
                     Formula(contents='× ZW'),
                     Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                     Formula(contents='ZW SP* ÷'),
                     Rule(contents='LB8a Do not break after a zero width joiner.'),
                     Formula(contents='ZWJ ×'),
                     Paragraph(contents='A ZWJ will prevent breaks between most pairs of characters. This behavior is used to prevent breaks within emoji zwj sequences.'),
                     Heading(level=4, contents='Combining marks:'),
                     Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                     Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules. Treat ZWJ as if it were CM.'),
                     Formula(contents='Treat X (CM | ZWJ)* as if it were X.'),
                     Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                     Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                     Rule(contents='LB10 Treat any remaining combining mark or ZWJ as AL.'),
                     Formula(contents='Treat any remaining CM or ZWJ as it if were AL.'),
                     Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                     Heading(level=4, contents='Word joiner:'),
                     Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                     Formula(contents='× WJ'),
                     Formula(contents='WJ ×'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12 Do not break after NBSP and related characters.'),
                     Formula(contents='GL ×'),
                     Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                     Formula(contents='[^SP BA HY] × GL'),
                     Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Opening and closing:'),
                     Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                     Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                     Formula(contents='× CL'),
                     Formula(contents='× CP'),
                     Formula(contents='× EX'),
                     Formula(contents='× IS'),
                     Formula(contents='× SY'),
                     Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                     Formula(contents='OP SP* ×'),
                     Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                     Formula(contents='QU SP* × OP'),
                     Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                     Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                     Formula(contents='(CL | CP) SP* × NS'),
                     Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                     Formula(contents='B2 SP* × B2'),
                     Heading(level=4, contents='Spaces:'),
                     Rule(contents='LB18 Break after spaces.'),
                     Formula(contents='SP ÷'),
                     Heading(level=4, contents='Special case rules:'),
                     Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                     Formula(contents='× QU'),
                     Formula(contents='QU ×'),
                     Rule(contents='LB20 Break before and after unresolved CB.'),
                     Formula(contents='÷ CB'),
                     Formula(contents='CB ÷'),
                     Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                     Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                     Formula(contents='× BA'),
                     Formula(contents='× HY'),
                     Formula(contents='× NS'),
                     Formula(contents='BB ×'),
                     Rule(contents="LB21a Don't break after Hebrew + Hyphen."),
                     Formula(contents='HL (HY | BA) ×'),
                     Rule(contents='LB21b Don’t break between Solidus and Hebrew letters.'),
                     Formula(contents='SY × HL'),
                     Rule(contents='LB22 Do not break before ellipses.'),
                     Formula(contents='× IN'),
                     Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                     Heading(level=4, contents='Numbers:'),
                     Paragraph(contents='Do not break alphanumerics.'),
                     Rule(contents='LB23 Do not break between digits and letters.'),
                     Formula(contents='(AL | HL) × NU'),
                     Formula(contents='NU × (AL | HL)'),
                     Rule(contents='LB23a Do not break between numeric prefixes and ideographs, or between ideographs and numeric postfixes.'),
                     Formula(contents='PR × (ID | EB | EM)'),
                     Formula(contents='(ID | EB | EM) × PO'),
                     Rule(contents='LB24 Do not break between numeric prefix/postfix and letters, or between letters and prefix/postfix.'),
                     Formula(contents='(PR | PO) × (AL | HL)'),
                     Formula(contents='(AL | HL) × (PR | PO)'),
                     Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                     Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                     Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                     Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                     Formula(contents='CL × PO'),
                     Formula(contents='CP × PO'),
                     Formula(contents='CL × PR'),
                     Formula(contents='CP × PR'),
                     Formula(contents='NU × PO'),
                     Formula(contents='NU × PR'),
                     Formula(contents='PO × OP'),
                     Formula(contents='PO × NU'),
                     Formula(contents='PR × OP'),
                     Formula(contents='PR × NU'),
                     Formula(contents='HY × NU'),
                     Formula(contents='IS × NU'),
                     Formula(contents='NU × NU'),
                     Formula(contents='SY × NU'),
                     Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                     Heading(level=4, contents='Korean syllable blocks'),
                     Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                     Rule(contents='LB26 Do not break a Korean syllable.'),
                     Formula(contents='JL × (JL | JV | H2 | H3)'),
                     Formula(contents='(JV | H2) × (JV | JT)'),
                     Formula(contents='(JT | H3) × JT'),
                     Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                     Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                     Formula(contents='(JL | JV | JT | H2 | H3) × IN'),
                     Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                     Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                     Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                     Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                     Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                     Formula(contents='(AL | HL) × (AL | HL)'),
                     Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                     Formula(contents='IS × (AL | HL)'),
                     Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                     Formula(contents='(AL | HL | NU) × [OP-[\\p{ea=F}\\p{ea=W}\\p{ea=H}]]'),
                     Formula(contents='[CP-[\\p{ea=F}\\p{ea=W}\\p{ea=H}]] × (AL | HL | NU)'),
                     Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                     Paragraph(contents='The excluded set ([\\p{ea=F}\\p{ea=W}\\p{ea=H}]) refines the behavior of this rule, to enable a break before an East Asian OP or after an East Asian CP. Those cases are identified by excluding East_Asian_Width values of Fullwidth, Wide, or Halfwidth. This is illustrated by the following example, which shows East Asian corner brackets immediately following a Latin letter in Japanese text. In such a case, the preferred line break is between the Latin letter and the opening angle bracket.'),
                     TableRow(contents='Preferred\ue000Bad Break'),
                     TableRow(contents='日中韓統合漢字拡張G 「ユニコード」\ue000日中韓統合漢字拡張 G「ユニコード」'),
                     Rule(contents='LB30a Break between two regional indicator symbols if and only if there are an even number of regional indicators preceding the position of the break.'),
                     Formula(contents='sot (RI RI)* RI × RI'),
                     Formula(contents='[^RI] (RI RI)* RI × RI'),
                     Rule(contents='LB30b Do not break between an emoji base and an emoji modifier.'),
                     Formula(contents='EB × EM'),
                     Rule(contents='LB31 Break everywhere else.'),
                     Formula(contents='ALL ÷'),
                     Formula(contents='÷ ALL'),
                     Heading(level=2, contents='7 Deleted'),
                     Paragraph(contents='Formerly was: Pair Table-Based Implementation.'),
                     Heading(level=2, contents='8 Customization'),
                     Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                     Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                     Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                     Paragraph(contents='Notes:'),
                     Paragraph(contents='• Locale-sensitive line break specifications can be expressed in LDML [UTS35]. Tailorings are available in the Common Locale Data Repository [CLDR].'),
                     Paragraph(contents='• Some changes to rules and data are needed for the best segmentation behavior of emoji zwj sequences [UTS51]. Implementations are strongly encouraged to use the the line break rules in the latest version of CLDR (Version 35 or later) [CLDR] and the latest emoji properties (Version 12.0 or later) [UTS51].'),
                     Paragraph(contents='The remainder of this section gives an overview of common types of tailorings.'),
                     Heading(level=3, contents='8.1 Types of Tailoring'),
                     Paragraph(contents='There are two principal ways of tailoring the line breaking algorithm:'),
                     Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                     Paragraph(contents='2. Changing the line breaking rules Adding new rules, or altering or removing existing rules, provides more flexibility in changing the line breaking behavior. This can also include introducing new character classes for use by the new or altered rules.'),
                     Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                     Heading(level=3, contents='8.2 Examples of Customization'),
                     Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm.'),
                     Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the line breaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                     Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification.'),
                     Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. This can be implemented by adjusting rules LB23, LB25 and LB28 to allow breaks between all permutations of the character classes AL and NU.'),
                     Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by mapping class CJ to be handled as class ID in rule LB1.'),
                     Paragraph(contents='Example 6. Tailor to prevent line breaks from falling within default grapheme clusters, as defined by by Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. The tailoring can be accomplished by first segmenting the text into grapheme clusters according to the rules defined in UAX #29, and then finding line breaks according to the default line break rules, giving each grapheme cluster the line breaking class of its first code point.'),
                     Paragraph(contents='An example of a grapheme cluster that would be split by the default line break rules is a Zero Width Space followed by a combining mark.'),
                     Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * ( CL | CP ) ? ( PR | PO) ?'),
                     Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                     Paragraph(contents='Regex-Number: Do not break numbers.'),
                     Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                     Formula(contents='( OP | HY ) × NU'),
                     Formula(contents='NU × (NU | SY | IS)'),
                     Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL | CP )'),
                     Formula(contents='NU (NU | SY | IS)* (CL | CP)? × (PO | PR)'),
                     Paragraph(contents='In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                     Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                     Formula(contents='[^NU] × CL'),
                     Formula(contents='[^NU] × CP'),
                     Formula(contents='× EX'),
                     Formula(contents='[^NU] × IS'),
                     Formula(contents='[^NU] × SY'),
                     Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                     Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                     Heading(level=2, contents='9 Implementation Notes'),
                     Paragraph(contents='This section provides additional notes on implementation issues.'),
                     Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                     Paragraph(contents='To replace rule LB9, terms of the form'),
                     Paragraph(contents='B # A'),
                     Paragraph(contents='B SP* # A'),
                     Paragraph(contents='B #'),
                     Paragraph(contents='B SP* #'),
                     Paragraph(contents='are replaced by terms of the form'),
                     Paragraph(contents='B CM* # A'),
                     Paragraph(contents='B CM* SP* # A'),
                     Paragraph(contents='B CM* #'),
                     Paragraph(contents='B CM* SP* #'),
                     Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                     Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                     Paragraph(contents='Replace LB10 by the following rule:'),
                     Paragraph(contents='× CM'),
                     Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                     Paragraph(contents='(AL | NU) × OP'),
                     Paragraph(contents='add another rule'),
                     Paragraph(contents='CM × OP.'),
                     Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                     Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='As stated in Section 7.9, Combining Marks of [Unicode], combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                     Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                     Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                     Formula(contents='Treat SP CM* as if it were ID.'),
                     Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                     Heading(level=2, contents='10 Testing'),
                     Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2, Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                     Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                     Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                     Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                     Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                     Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                     Paragraph(contents='1. The rules are cast into a more regex-style.'),
                     Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                     Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                     Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                     Paragraph(contents='• 13.01) [^NU] × CL'),
                     Paragraph(contents='• 13.02) × EX'),
                     Paragraph(contents='• ...'),
                     Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                     Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                     Paragraph(contents='Table 4. Numbering of Test Rules'),
                     TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                     TableRow(contents='LB2\ue0000.2\ue000start of text'),
                     TableRow(contents='LB3\ue0000.3\ue000end of text'),
                     TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                     TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                     TableRow(contents='LB31\ue000999\ue000÷ any'),
                     Heading(level=2, contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                     Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                     TableRow(contents='9.0.0\ue0008.0.0\ue0006.2.0\ue0006.1.0\ue0005.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                     TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                     TableRow(contents='LB2\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                     TableRow(contents='LB3\ue0003\ue0003\ue0003\ue0003\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                     TableRow(contents='LB4\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB5\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB6\ue0006\ue0006\ue0006\ue0006\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                     TableRow(contents='LB7\ue0007\ue0007\ue0007\ue0007\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                     TableRow(contents='LB8\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                     TableRow(contents='LB8a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                     TableRow(contents='LB9\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB10\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                     TableRow(contents='LB11\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12a\ue00012a\ue00012a\ue00012a\ue00012a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB13\ue00013\ue00013\ue00013\ue00013\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                     TableRow(contents='LB14\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                     TableRow(contents='LB15\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                     TableRow(contents='LB16\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                     TableRow(contents='LB17\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                     TableRow(contents='LB18\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                     TableRow(contents='LB19\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                     TableRow(contents='LB20\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                     TableRow(contents='LB21\ue00021\ue00021\ue00021\ue00021\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                     TableRow(contents='LB21a\ue00021a\ue00021a\ue00021a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB21b\ue00021b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB22\ue00022\ue00022\ue00022\ue00022\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                     TableRow(contents='LB23\ue00023\ue00023\ue00023\ue00023\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                     TableRow(contents='LB23a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB24\ue00024\ue00024\ue00024\ue00024\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='LB25\ue00025\ue00025\ue00025\ue00025\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                     TableRow(contents='LB26\ue00026\ue00026\ue00026\ue00026\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB27\ue00027\ue00027\ue00027\ue00027\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB28\ue00028\ue00028\ue00028\ue00028\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                     TableRow(contents='LB29\ue00029\ue00029\ue00029\ue00029\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30\ue00030\ue00030\ue00030\ue00030\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30a\ue00030a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB31\ue00031\ue00031\ue00031\ue00031\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                     Heading(level=2, contents='References'),
                     Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                     Heading(level=2, contents='Acknowledgments'),
                     Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintained the text from 2008 through 2019.'),
                     Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                     Heading(level=2, contents='Modifications'),
                     Paragraph(contents='The following summarizes modifications from the previous revision of this annex.'),
                     Heading(level=4, contents='Revision 45:'),
                     Paragraph(contents='• Reissued for Unicode 13.0.'),
                     Paragraph(contents='• Updated editor to Christopher Chapman.'),
                     Paragraph(contents='• Section 5, Line Breaking Properties'),
                     Paragraph(contents='• Added text clarifying the tailoribility of line break classes.'),
                     Paragraph(contents='• Added a note that the East_Asian_Width property that rule LB30 depends on is also tailorable.'),
                     Paragraph(contents='• Section 6.2, Tailorable Line Breaking Rules'),
                     Paragraph(contents='• Changed LB30 to exclude full-width CP and OP, and added a note about syntax up in Section 6 Line Breaking Algorithm'),
                     Paragraph(contents='• Changed LB22 to simply disallow breaking before elipsis, instead of checking characters before.'),
                     Paragraph(contents='Modifications for previous versions are listed in those respective versions.'),
                     Paragraph(contents='© 2020 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                     Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(14, 0, 0): [Heading(level=2, contents='Unicode® Standard Annex #14'),
                     Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                     TableRow(contents='Version\ue000Unicode 14.0.0'),
                     TableRow(contents='Editors\ue000Christopher Chapman (cchapman@adobe.com)'),
                     TableRow(contents='Date\ue0002021-08-23'),
                     TableRow(contents='This Version\ue000https://www.unicode.org/reports/tr14/tr14-47.html'),
                     TableRow(contents='Previous Version\ue000https://www.unicode.org/reports/tr14/tr14-45.html'),
                     TableRow(contents='Latest Version\ue000https://www.unicode.org/reports/tr14/'),
                     TableRow(contents='Latest Proposed Update\ue000https://www.unicode.org/reports/tr14/proposed.html'),
                     TableRow(contents='Revision\ue00047'),
                     Heading(level=4, contents='Summary'),
                     Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display.'),
                     Heading(level=4, contents='Status'),
                     Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                     Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                     Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                     Heading(level=4, contents='Contents'),
                     Paragraph(contents='1 Overview and Scope'),
                     Paragraph(contents='2 Definitions'),
                     Paragraph(contents='3 Introduction'),
                     Paragraph(contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='4 Conformance'),
                     Paragraph(contents='4.1 Conformance Requirements'),
                     Paragraph(contents='5 Line Breaking Properties'),
                     Paragraph(contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='5.2 Dictionary Usage'),
                     Paragraph(contents='5.3 Use of Hyphen'),
                     Paragraph(contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='5.7 Word Separator Characters'),
                     Paragraph(contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='7 Deleted. (Formerly was: Pair Table-Based Implementation)'),
                     Paragraph(contents='8 Customization'),
                     Paragraph(contents='8.1 Types of Tailoring'),
                     Paragraph(contents='8.2 Examples of Customization'),
                     Paragraph(contents='9 Implementation Notes'),
                     Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='10 Testing'),
                     Paragraph(contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='References'),
                     Paragraph(contents='Acknowledgments'),
                     Paragraph(contents='Modifications'),
                     Heading(level=2, contents='1 Overview and Scope'),
                     Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                     Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                     Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                     Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Two main sections follow:'),
                     Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                     Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                     Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                     Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                     Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                     Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                     Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                     Heading(level=2, contents='2 Definitions'),
                     Paragraph(contents='The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard.'),
                     Paragraph(contents='All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard [Unicode].'),
                     Paragraph(contents='LD1. Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                     Paragraph(contents='LD2. Line Break: The position in the text where one line ends and the next one starts.'),
                     Paragraph(contents='LD3. Line Break Opportunity: A place where a line is allowed to end.'),
                     Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                     Paragraph(contents='LD4. Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                     Paragraph(contents='LD5. Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                     Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                     Paragraph(contents='LD6. Line Breaking Class: A class of characters with the same line breaking property value.'),
                     Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                     Paragraph(contents='LD7. Mandatory Break: A line must break following a character that has the mandatory break property.'),
                     Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                     Paragraph(contents='LD8. Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                     Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space.'),
                     Paragraph(contents='LD9. Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                     Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, an indirect break is represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                     Paragraph(contents='LD10. Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, a prohibited break is expressed as a rule of the form: B SP* × A.'),
                     Paragraph(contents='LD11. Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                     Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                     Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                     Paragraph(contents='Table 1. Line Breaking Classes'),
                     TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                     TableRow(contents='Non-tailorable Line Breaking Classes'),
                     TableRow(contents='BK\ue000Mandatory Break\ue000NL, PARAGRAPH SEPARATOR\ue000Cause a line break (after)'),
                     TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                     TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                     TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                     TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                     TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                     TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                     TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                     TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                     TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                     TableRow(contents='ZWJ\ue000Zero Width Joiner\ue000Zero Width Joiner\ue000Prohibit line breaks within joiner sequences'),
                     TableRow(contents='Break Opportunities'),
                     TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                     TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                     TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                     TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                     TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                     TableRow(contents='Characters Prohibiting Certain Breaks'),
                     TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                     TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                     TableRow(contents='NS\ue000Nonstarter\ue000“‼”, “‽”, “⁇”, “⁉”, etc.\ue000Allow only indirect line breaks before'),
                     TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                     TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                     TableRow(contents='Numeric Context'),
                     TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                     TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                     TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                     TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                     TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                     TableRow(contents='Other Characters'),
                     TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                     TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                     TableRow(contents='CJ\ue000Conditional Japanese Starter\ue000Small kana\ue000Treat as NS or ID for strict or normal breaking.'),
                     TableRow(contents='EB\ue000Emoji Base\ue000All emoji allowing modifiers\ue000Do not break from following Emoji Modifier'),
                     TableRow(contents='EM\ue000Emoji Modifier\ue000Skin tone modifiers\ue000Do not break from preceding Emoji Base'),
                     TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='HL\ue000Hebrew Letter\ue000Hebrew\ue000Do not break around a following hyphen; otherwise act as Alphabetic'),
                     TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                     TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='RI\ue000Regional Indicator\ue000REGIONAL INDICATOR SYMBOL LETTER A .. Z\ue000Keep pairs together. For pairs, break before and after other classes'),
                     TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                     TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                     Heading(level=2, contents='3 Introduction'),
                     Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                     Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                     Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                     Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                     Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                     Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                     Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                     Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                     Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                     Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                     Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                     Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                     Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                     Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                     Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                     Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [UAX9]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                     Heading(level=2, contents='4 Conformance'),
                     Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                     Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                     Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                     Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                     Paragraph(contents='Note: Locale-sensitive line break specifications can be expressed in LDML [UTS35]. Tailorings are available in the Common Locale Data Repository [CLDR].'),
                     Heading(level=3, contents='4.1 Conformance Requirements'),
                     Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                     Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                     Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                     Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                     Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                     Heading(level=2, contents='5 Line Breaking Properties'),
                     Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                     Paragraph(contents='This section also summarizes the membership of character classes corresponding to each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line breaking behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                     Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into the algorithm defined in Section 6, Line Breaking Algorithm. That section describes a workable default line breaking method. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences. Permitted customizations can include changing the classification of characters for certain classes.'),
                     Paragraph(contents='In addition to the line breaking properties defined in this section, the algorithm defined in Section 6, Line Breaking Algorithm also makes use of East_Asian_Width property values, defined in Unicode Standard Annex #11, East Asian Width [UAX11]. Note that for purposes of the line breaking algorithm, those East_Asian_Width property values are tailorable, as are the rules of the line breaking algorithm which use them. (See rule LB30.)'),
                     Heading(level=4, contents='Data File'),
                     Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a semicolon-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name.'),
                     Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                     Heading(level=4, contents='Future Updates'),
                     Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                     Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                     TableRow(contents='Label\ue000Meaning for the Class'),
                     TableRow(contents='(A)\ue000It allows a break opportunity after in specified contexts.'),
                     TableRow(contents='(XA)\ue000It prevents a break opportunity after in specified contexts.'),
                     TableRow(contents='(B)\ue000It allows a break opportunity before in specified contexts.'),
                     TableRow(contents='(XB)\ue000It prevents a break opportunity before in specified contexts.'),
                     TableRow(contents='(P)\ue000It allows a break opportunity for a pair of same characters.'),
                     TableRow(contents='(XP)\ue000It prevents a break opportunity for a pair of same characters.'),
                     Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                     Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                     Paragraph(contents='Some characters that ordinarily act like alphabetic characters are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                     Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [UAX11].'),
                     Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                     Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                     Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                     TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                     TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                     Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                     Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                     Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                     Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                     Paragraph(contents='This class contains alphabetic or symbolic characters not explicitly assigned to another line breaking class. These are primarily characters of the following categories:'),
                     TableRow(contents='Category\ue000General_Category Values'),
                     TableRow(contents='Alphabetic\ue000Lu, Ll, Lt, Lm, and Lo'),
                     TableRow(contents='Symbols\ue000Sm, Sk, and So'),
                     TableRow(contents='Non-decimal Numbers\ue000Nl and No'),
                     TableRow(contents='Punctuation\ue000Pc, Pd, and Po'),
                     Paragraph(contents='Line break class AL also contains several format characters, including:'),
                     TableRow(contents='0600..0604\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAMVAT'),
                     TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                     TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                     TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                     TableRow(contents='110BD\ue000KAITHI NUMBER SIGN'),
                     Paragraph(contents='These format characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                     Paragraph(contents='Major exceptions to the general pattern of alphabetic and symbolic characters having line break class AL include:'),
                     Paragraph(contents='HL for Hebrew letters AI or ID, based on the East Asian Width property of the character ID for certain pictographic symbols CJ for small hiragana and katakana SA for complex context scripts JL, JV, JT, H2 or H3 for Hangul characters'),
                     Heading(level=3, contents='BA: Break After (A)'),
                     Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                     Heading(level=4, contents='Breaking Spaces'),
                     Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                     TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                     TableRow(contents='2000\ue000EN QUAD'),
                     TableRow(contents='2001\ue000EM QUAD'),
                     TableRow(contents='2002\ue000EN SPACE'),
                     TableRow(contents='2003\ue000EM SPACE'),
                     TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                     TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                     TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                     TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                     TableRow(contents='2009\ue000THIN SPACE'),
                     TableRow(contents='200A\ue000HAIR SPACE'),
                     TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                     TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                     Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                     Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                     Paragraph(contents='For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                     Heading(level=4, contents='Tabs'),
                     TableRow(contents='0009\ue000TAB'),
                     Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                     Heading(level=4, contents='Conditional Hyphens'),
                     TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                     Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=4, contents='Breaking Hyphens'),
                     Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                     TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                     TableRow(contents='2010\ue000HYPHEN'),
                     TableRow(contents='2012\ue000FIGURE DASH'),
                     TableRow(contents='2013\ue000EN DASH'),
                     Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Visible Word Dividers'),
                     Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                     TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                     TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                     TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                     TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                     TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                     Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                     TableRow(contents='2027\ue000HYPHENATION POINT'),
                     Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                     TableRow(contents='007C\ue000VERTICAL LINE'),
                     Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                     Heading(level=4, contents='Historic Word Separators'),
                     Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                     Paragraph(contents='Examples of Historic Word Separators include:'),
                     TableRow(contents='16EB\ue000RUNIC SINGLE PUNCTUATION'),
                     TableRow(contents='16EC\ue000RUNIC MULTIPLE PUNCTUATION'),
                     TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                     TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                     TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                     TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                     TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                     TableRow(contents='205B\ue000FOUR DOT MARK'),
                     TableRow(contents='205D\ue000TRICOLON'),
                     TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                     TableRow(contents='2E19\ue000PALM BRANCH'),
                     TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                     TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                     TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                     TableRow(contents='2E2D\ue000FIVE DOT MARK'),
                     TableRow(contents='2E30\ue000RING POINT'),
                     TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                     TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                     TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                     TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                     TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                     TableRow(contents='1091F\ue000PHOENICIAN WORD SEPARATOR'),
                     TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                     Heading(level=4, contents='Dandas'),
                     Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                     Paragraph(contents='Examples of dandas include:'),
                     TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                     TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                     TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                     TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                     TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                     TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                     TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                     TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                     TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                     TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                     TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                     TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                     TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                     TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                     TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                     TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                     TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                     TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                     TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                     Heading(level=4, contents='Tibetan'),
                     TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                     TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                     TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                     TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                     TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                     TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                     Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Other Terminating Punctuation'),
                     Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                     TableRow(contents='1804\ue000MONGOLIAN COLON'),
                     TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                     TableRow(contents='1B5A\ue000BALINESE PANTI'),
                     TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                     TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                     TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                     TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                     TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                     TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                     TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                     TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                     TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                     TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                     TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                     TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                     TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                     TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                     TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                     TableRow(contents='2E17\ue000DOUBLE OBLIQUE HYPHEN'),
                     TableRow(contents='A60D\ue000VAI COMMA'),
                     TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                     TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                     TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                     TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                     TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                     TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                     TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                     TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                     TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                     Heading(level=3, contents='BB: Break Before (B)'),
                     Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                     Paragraph(contents='Examples of BB characters are described in the following sections.'),
                     Heading(level=4, contents='Dictionary Use'),
                     TableRow(contents='00B4\ue000ACUTE ACCENT'),
                     TableRow(contents='1FFD\ue000GREEK OXIA'),
                     Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                     TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                     Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                     TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                     TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                     Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                     Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                     Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                     TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                     TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                     TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                     TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                     TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                     TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                     TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                     TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                     TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                     TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                     TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                     TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                     TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                     Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Mongolian'),
                     TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                     Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                     Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                     TableRow(contents='2014\ue000EM DASH'),
                     Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                     Paragraph(contents='Some languages, including Spanish, use EM DASH to set off a parenthetical, and the surrounding dashes should not be broken from the contained text. In this usage there is space on the side where it can be broken. This does not conflict with symmetrical usages, either with spaces on both sides of the em-dash or with no spaces.'),
                     Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                     Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                     TableRow(contents='000C\ue000FORM FEED (FF)'),
                     TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                     Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                     TableRow(contents='2028\ue000LINE SEPARATOR'),
                     Paragraph(contents='The text after the LINE SEPARATOR starts at the beginning of the line. This is similar to HTML <BR>.'),
                     TableRow(contents='2029\ue000PARAGRAPH SEPARATOR'),
                     Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LINE SEPARATOR, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                     Heading(level=4, contents='Newline Function (NLF)'),
                     Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                     Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                     Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                     Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                     TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                     Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                     Heading(level=3, contents='CJ: Conditional Japanese Starter'),
                     Paragraph(contents='This character class contains Japanese small hiragana and katakana. Characters of this class may be treated as either NS or ID.'),
                     Paragraph(contents='CSS Text Level 3 (which supports Japanese line layout) defines three distinct values for its line-break behavior:'),
                     Paragraph(contents='• strict, typically used for long lines'),
                     Paragraph(contents='• normal (CSS default), the behavior typically used for books and documents'),
                     Paragraph(contents='• loose, typically used for short lines such as in newspapers'),
                     Paragraph(contents='These have different sets of “kinsoku” characters which cannot be at the beginning or end of a line; strict has the largest set, while loose has the smallest. The motivation for the smaller number of kinsoku characters is to avoid triggering justification that puts characters off the grid position.'),
                     Paragraph(contents='Treating characters of class CJ as class NS will give CSS strict line breaking; treating them as class ID will give CSS normal breaking.'),
                     Paragraph(contents='The CJ line break class includes'),
                     TableRow(contents='3041, 3043, 3045, etc.\ue000Small hiragana'),
                     TableRow(contents='30A1, 30A3, 30A5, etc.\ue000Small katakana'),
                     TableRow(contents='30FC\ue000KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                     TableRow(contents='FF67..FF70\ue000Halfwidth variants'),
                     Heading(level=3, contents='CL: Close Punctuation (XB)'),
                     Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                     Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                     Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                     TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                     TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE50\ue000SMALL COMMA'),
                     TableRow(contents='FE52\ue000SMALL FULL STOP'),
                     TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                     TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                     TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                     Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                     Heading(level=4, contents='Combining Characters'),
                     Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                     Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 NO-BREAK SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                     Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+2061 CAUTION SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                     Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                     Heading(level=4, contents='Control and Formatting Characters'),
                     Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                     Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                     Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                     Paragraph(contents='The CM class also includes U+3035 VERTICAL KANA REPEAT MARK LOWER HALF. This character is normally preceded by either U+3033 VERTICAL KANA REPEAT MARK UPPER HALF or U+3034 VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF, and should not be separated from them.'),
                     Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                     Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                     TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                     TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                     Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                     TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                     Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                     Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                     Heading(level=3, contents='EB: Emoji Base (B/A)'),
                     Paragraph(contents='This class includes characters whose appearance can be modified by a subsequent emoji modifier in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier_Base property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='1F466\ue000BOY'),
                     TableRow(contents='1F478\ue000PRINCESS'),
                     TableRow(contents='1F6B4\ue000BICYCLIST'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b. In other contexts, characters of class EB behave similarly to ideographs of class ID, with break opportunities before and after.'),
                     Heading(level=3, contents='EM: Emoji Modifier (A)'),
                     Paragraph(contents='This class includes characters that can be used to modify the appearance of a preceding emoji in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b.'),
                     Paragraph(contents='Emoji modifiers include:'),
                     TableRow(contents='1F3FB..1F3FF\ue000EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6'),
                     Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                     Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                     TableRow(contents='0021\ue000EXCLAMATION MARK'),
                     TableRow(contents='003F\ue000QUESTION MARK'),
                     TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                     TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                     TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                     TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                     TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                     TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                     TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                     TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                     TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                     Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following are examples of characters of line break class GL:'),
                     TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                     TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                     TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                     Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE.'),
                     Paragraph(contents='NARROW NO-BREAK SPACE has exactly the same line breaking behavior as NO-BREAK SPACE, but with a narrow display width. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. Both of these characters are regularly used in Mongolian text, where they participate in special shaping behavior, as described in Section 13.5, Mongolian of [Unicode].'),
                     Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                     TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                     Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                     TableRow(contents='2007\ue000FIGURE SPACE'),
                     Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                     TableRow(contents='2011\ue000NON-BREAKING HYPHEN'),
                     Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                     TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                     TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                     TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                     Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                     Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                     Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                     Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                     Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                     Heading(level=3, contents='HY: Hyphen (XA)'),
                     TableRow(contents='002D\ue000HYPHEN-MINUS'),
                     Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                     Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                     Heading(level=3, contents='ID: Ideographic (B/A)'),
                     Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                     TableRow(contents='2E80..2FFF\ue000CJK, Kangxi Radicals, Ideographic Description Symbols'),
                     TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                     TableRow(contents='30A2..30FA\ue000Katakana (except small characters)'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                     Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                     Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                     Paragraph(contents='The unassigned code points in the following blocks default to ID:'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='All undesignated code points in Planes 2 and 3, whether inside or outside of allocated blocks, default to ID:'),
                     TableRow(contents='20000..2FFFD\ue000Plane 2'),
                     TableRow(contents='30000..3FFFD\ue000Plane 3'),
                     Paragraph(contents='All unassigned code points in the following Plane 1 range, whether inside or outside of allocated blocks, also default to ID:'),
                     TableRow(contents='1F000..1FFFD\ue000Plane 1 range'),
                     Heading(level=4, contents='Korean'),
                     Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                     TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                     Heading(level=4, contents='Symbols'),
                     Paragraph(contents='Certain pictographic symbols of General Category So are also included in this line break class.'),
                     Heading(level=3, contents='HL: Hebrew Letter (XB)'),
                     Paragraph(contents='This class includes all Hebrew letters.'),
                     Paragraph(contents='When a Hebrew letter is followed by a hyphen, there is no break on either side of the hyphen. In this context a hyphen is any character of class HY or class BA. In other respects, Hebrew letters behave the same as characters of class AL.'),
                     Paragraph(contents='Included in this class are all characters of General Category Letter that have Script=Hebrew.'),
                     Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                     Heading(level=4, contents='Leaders'),
                     Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='2024\ue000ONE DOT LEADER'),
                     TableRow(contents='2025\ue000TWO DOT LEADER'),
                     TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                     TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                     Paragraph(contents='HORIZONTAL ELLIPSIS can be used as a three-dot leader.'),
                     Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                     Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='002C\ue000COMMA'),
                     TableRow(contents='002E\ue000FULL STOP'),
                     TableRow(contents='003A\ue000COLON'),
                     TableRow(contents='003B\ue000SEMICOLON'),
                     TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                     TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                     TableRow(contents='060C\ue000ARABIC COMMA'),
                     TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                     TableRow(contents='07F8\ue000NKO COMMA'),
                     TableRow(contents='2044\ue000FRACTION SLASH'),
                     TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                     TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                     TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                     Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                     Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                     Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                     Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                     Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                     Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                     Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                     Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                     Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                     Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                     TableRow(contents='000A\ue000LINE FEED (LF)'),
                     Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                     Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                     TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                     Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                     Heading(level=3, contents='NS: Nonstarters (XB)'),
                     Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include:'),
                     TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                     TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                     TableRow(contents='203D\ue000INTERROBANG'),
                     TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                     TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                     TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                     TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='301C\ue000WAVE DASH'),
                     TableRow(contents='303C\ue000MASU MARK'),
                     TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                     TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                     TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                     TableRow(contents='30FD..30FE\ue000KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK'),
                     TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                     TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                     TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                     TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                     Paragraph(contents='Note: Optionally, the NS restriction may be relaxed by tailoring, with some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles. Alternatively, line breaking can be tightened by moving characters that are ID into NS.'),
                     Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                     Heading(level=3, contents='NU: Numeric (XP)'),
                     Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                     Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                     TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                     TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                     Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                     Heading(level=3, contents='OP: Open Punctuation (XA)'),
                     Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                     TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                     TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                     TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                     Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                     Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                     Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                     Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                     Paragraph(contents='Examples of Postfix characters include'),
                     TableRow(contents='0025\ue000PERCENT SIGN'),
                     TableRow(contents='00A2\ue000CENT SIGN'),
                     TableRow(contents='00B0\ue000DEGREE SIGN'),
                     TableRow(contents='060B\ue000AFGHANI SIGN'),
                     TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                     TableRow(contents='2030\ue000PER MILLE SIGN'),
                     TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                     TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                     TableRow(contents='20A7\ue000PESETA SIGN'),
                     TableRow(contents='2103\ue000DEGREE CELSIUS'),
                     TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                     TableRow(contents='FDFC\ue000RIAL SIGN'),
                     TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                     TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                     TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                     Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                     Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                     Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                     Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                     Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                     TableRow(contents='002B\ue000PLUS SIGN'),
                     TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                     TableRow(contents='00B1\ue000PLUS-MINUS SIGN'),
                     TableRow(contents='2116\ue000NUMERO SIGN'),
                     TableRow(contents='2212\ue000MINUS SIGN'),
                     TableRow(contents='2213\ue000MINUS-OR-PLUS SIGN'),
                     Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                     Heading(level=3, contents='QU: Quotation (XB/XA)'),
                     Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                     Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                     Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                     TableRow(contents='0022\ue000QUOTATION MARK'),
                     TableRow(contents='0027\ue000APOSTROPHE'),
                     TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                     TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                     TableRow(contents='2E0B\ue000RAISED SQUARE'),
                     Paragraph(contents='U+23B6 BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET is subtly different from the others in this class, in that it is both an opening and a closing punctuation character at the same time. However, its use is limited to certain vertical text modes in terminal emulation. Instead of creating a one-of-a-kind class for this rarely used character, assigning it to the QU class approximates the intended behavior.'),
                     Heading(level=3, contents='RI: Regional Indicator (B/A/XP)'),
                     Paragraph(contents='For line Breaking, the Regional Indicator characters are all those with the Unicode character property of Regional_Indicator. This includes:'),
                     TableRow(contents='1F1E6..1F1FF\ue000REGIONAL INDICATOR SYMBOL LETTER A .. REGIONAL INDICATOR SYMBOL LETTER Z'),
                     Paragraph(contents='Pairs of RI characters are used to represent a two-letter ISO 3166 region code.'),
                     Paragraph(contents='Runs of adjacent RI characters are grouped into pairs, beginning at the start of the run. No break opportunity occurs within a pair; breaks can occur between adjacent pairs. When RI characters are adjacent to characters of other classes, breaks can occur before and after, except where forbidden by other rules.'),
                     Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                     Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                     Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                     Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                     TableRow(contents='0E00..0E7F\ue000Thai'),
                     TableRow(contents='0E80..0EFF\ue000Lao'),
                     TableRow(contents='1000..109F\ue000Myanmar'),
                     TableRow(contents='1780..17FF\ue000Khmer'),
                     TableRow(contents='1950..197F\ue000Tai Le'),
                     TableRow(contents='1980..19DF\ue000New Tai Lue'),
                     TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                     TableRow(contents='A9E0..A9FF\ue000Myanmar Extended-B'),
                     TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                     TableRow(contents='AA80..AADF\ue000Tai Viet'),
                     TableRow(contents='11700..1173F\ue000Ahom'),
                     Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                     Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                     Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                     Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                     Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                     TableRow(contents='0020\ue000SPACE (SP)'),
                     Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                     Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                     Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                     TableRow(contents='002F\ue000SOLIDUS'),
                     Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                     Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                     Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                     TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                     TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                     Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                     Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                     Heading(level=3, contents='XX: Unknown (XP)'),
                     Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                     Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                     Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                     Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                     Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                     Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                     Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                     TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                     Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                     Heading(level=3, contents='ZWJ: Zero Width Joiner (XA/XB) (Non-tailorable)'),
                     TableRow(contents='200D\ue000ZERO WIDTH JOINER (ZWJ)'),
                     Paragraph(contents='A ZWJ prevents breaks between most pairs of characters that would otherwise break. It has various uses, including as a connector in emoji zwj sequences and as a joiner in complex scripts.'),
                     Paragraph(contents='Emoji zwj sequences are defined by ED-16, emoji zwj sequence, in [UTS51] and implemented for line breaking by rule LB8a. In other respects, the line breaking behavior of ZWJ is that of a combining character of class CM.'),
                     Heading(level=3, contents='5.2 Dictionary Usage'),
                     Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                     Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                     Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                     Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                     Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                     Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                     Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                     Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                     Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                     Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                     Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                     Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                     Heading(level=3, contents='5.3 Use of Hyphen'),
                     Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                     Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                     Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                     Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                     Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                     Paragraph(contents='dispara- te'),
                     Paragraph(contents='and the latter as'),
                     Paragraph(contents='dispara- -te.'),
                     Paragraph(contents='A recommended practice is to type <SHY, NON-BREAKING HYPHEN> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                     Paragraph(contents='• Simply inserting a hyphen glyph'),
                     Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                     Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                     Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                     Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                     Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                     Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                     Paragraph(contents='• In German and Swedish, a consonant is sometimes doubled: Swedish “tuggummi”; hyphenates into “tugg- / gummi”.'),
                     Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                     Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                     Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                     Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                     Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [UAX9] and Section 9.2, Arabic, of [Unicode].'),
                     Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                     Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                     Paragraph(contents='The sequence <SHY, NON-BREAKING HYPHEN> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                     Heading(level=3, contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                     Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                     Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                     Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                     Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                     Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                     Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                     Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                     Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                     Heading(level=3, contents='5.7 Word Separator Characters'),
                     Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                     Paragraph(contents='1. suppress the visible word separator'),
                     Paragraph(contents='The:quick:brown fox:jumped.'),
                     Paragraph(contents='2. break before the visible word separator'),
                     Paragraph(contents='The:quick:brown :fox:jumped.'),
                     Paragraph(contents='3. break after the visible word separator'),
                     Paragraph(contents='The:quick:brown: fox:jumped.'),
                     Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                     Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                     Heading(level=2, contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                     Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1, Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                     Paragraph(contents='! Mandatory break at the indicated position'),
                     Paragraph(contents='× No break allowed at the indicated position'),
                     Paragraph(contents='÷ Break allowed at the indicated position'),
                     Paragraph(contents='In the regular expressions, parentheses may be used for grouping, and square brackets, &, -, and \\p{...} may be used to compose sets of characters, as in UAX #29, Unicode Text Segmentation [UAX29] and in UTS #18, Unicode Regular Expressions [UTS18]. Use of a line break class such as BK is short for the property expression \\p{lb=BK}.'),
                     Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                     Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                     Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                     Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                     Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, ZW and ZWJ define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                     Heading(level=4, contents='Resolve line breaking classes:'),
                     Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, CJ, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                     Paragraph(contents='In the absence of such criteria all characters with a specific combination of original class and General_Category property value are resolved as follows:'),
                     TableRow(contents='Resolved\ue000Original\ue000General_Category'),
                     TableRow(contents='AL\ue000AI, SG, XX\ue000Any'),
                     TableRow(contents='CM\ue000SA\ue000Only Mn or Mc'),
                     TableRow(contents='AL\ue000SA\ue000Any except Mn and Mc'),
                     TableRow(contents='NS\ue000CJ\ue000Any'),
                     Heading(level=4, contents='Start and end of text:'),
                     Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                     Rule(contents='LB2 Never break at the start of text.'),
                     Formula(contents='sot ×'),
                     Rule(contents='LB3 Always break at the end of text.'),
                     Formula(contents='! eot'),
                     Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                     Heading(level=4, contents='Mandatory breaks:'),
                     Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                     Rule(contents='LB4 Always break after hard line breaks.'),
                     Formula(contents='BK !'),
                     Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                     Formula(contents='CR × LF'),
                     Formula(contents='CR !'),
                     Formula(contents='LF !'),
                     Formula(contents='NL !'),
                     Rule(contents='LB6 Do not break before hard line breaks.'),
                     Formula(contents='× ( BK | CR | LF | NL )'),
                     Heading(level=4, contents='Explicit breaks and non-breaks:'),
                     Rule(contents='LB7 Do not break before spaces or zero width space.'),
                     Formula(contents='× SP'),
                     Formula(contents='× ZW'),
                     Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                     Formula(contents='ZW SP* ÷'),
                     Rule(contents='LB8a Do not break after a zero width joiner.'),
                     Formula(contents='ZWJ ×'),
                     Paragraph(contents='A ZWJ will prevent breaks between most pairs of characters. This behavior is used to prevent breaks within emoji zwj sequences.'),
                     Heading(level=4, contents='Combining marks:'),
                     Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                     Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules. Treat ZWJ as if it were CM.'),
                     Formula(contents='Treat X (CM | ZWJ)* as if it were X.'),
                     Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                     Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                     Rule(contents='LB10 Treat any remaining combining mark or ZWJ as AL.'),
                     Formula(contents='Treat any remaining CM or ZWJ as it if were AL.'),
                     Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                     Heading(level=4, contents='Word joiner:'),
                     Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                     Formula(contents='× WJ'),
                     Formula(contents='WJ ×'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12 Do not break after NBSP and related characters.'),
                     Formula(contents='GL ×'),
                     Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                     Formula(contents='[^SP BA HY] × GL'),
                     Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Opening and closing:'),
                     Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                     Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                     Formula(contents='× CL'),
                     Formula(contents='× CP'),
                     Formula(contents='× EX'),
                     Formula(contents='× IS'),
                     Formula(contents='× SY'),
                     Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                     Formula(contents='OP SP* ×'),
                     Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                     Formula(contents='QU SP* × OP'),
                     Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                     Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                     Formula(contents='(CL | CP) SP* × NS'),
                     Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                     Formula(contents='B2 SP* × B2'),
                     Heading(level=4, contents='Spaces:'),
                     Rule(contents='LB18 Break after spaces.'),
                     Formula(contents='SP ÷'),
                     Heading(level=4, contents='Special case rules:'),
                     Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                     Formula(contents='× QU'),
                     Formula(contents='QU ×'),
                     Rule(contents='LB20 Break before and after unresolved CB.'),
                     Formula(contents='÷ CB'),
                     Formula(contents='CB ÷'),
                     Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                     Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                     Formula(contents='× BA'),
                     Formula(contents='× HY'),
                     Formula(contents='× NS'),
                     Formula(contents='BB ×'),
                     Rule(contents="LB21a Don't break after Hebrew + Hyphen."),
                     Formula(contents='HL (HY | BA) ×'),
                     Rule(contents='LB21b Don’t break between Solidus and Hebrew letters.'),
                     Formula(contents='SY × HL'),
                     Rule(contents='LB22 Do not break before ellipses.'),
                     Formula(contents='× IN'),
                     Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                     Heading(level=4, contents='Numbers:'),
                     Paragraph(contents='Do not break alphanumerics.'),
                     Rule(contents='LB23 Do not break between digits and letters.'),
                     Formula(contents='(AL | HL) × NU'),
                     Formula(contents='NU × (AL | HL)'),
                     Rule(contents='LB23a Do not break between numeric prefixes and ideographs, or between ideographs and numeric postfixes.'),
                     Formula(contents='PR × (ID | EB | EM)'),
                     Formula(contents='(ID | EB | EM) × PO'),
                     Rule(contents='LB24 Do not break between numeric prefix/postfix and letters, or between letters and prefix/postfix.'),
                     Formula(contents='(PR | PO) × (AL | HL)'),
                     Formula(contents='(AL | HL) × (PR | PO)'),
                     Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                     Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                     Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                     Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                     Formula(contents='CL × PO'),
                     Formula(contents='CP × PO'),
                     Formula(contents='CL × PR'),
                     Formula(contents='CP × PR'),
                     Formula(contents='NU × PO'),
                     Formula(contents='NU × PR'),
                     Formula(contents='PO × OP'),
                     Formula(contents='PO × NU'),
                     Formula(contents='PR × OP'),
                     Formula(contents='PR × NU'),
                     Formula(contents='HY × NU'),
                     Formula(contents='IS × NU'),
                     Formula(contents='NU × NU'),
                     Formula(contents='SY × NU'),
                     Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                     Heading(level=4, contents='Korean syllable blocks'),
                     Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                     Rule(contents='LB26 Do not break a Korean syllable.'),
                     Formula(contents='JL × (JL | JV | H2 | H3)'),
                     Formula(contents='(JV | H2) × (JV | JT)'),
                     Formula(contents='(JT | H3) × JT'),
                     Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                     Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                     Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                     Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                     Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                     Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                     Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                     Formula(contents='(AL | HL) × (AL | HL)'),
                     Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                     Formula(contents='IS × (AL | HL)'),
                     Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                     Formula(contents='(AL | HL | NU) × [OP-[\\p{ea=F}\\p{ea=W}\\p{ea=H}]]'),
                     Formula(contents='[CP-[\\p{ea=F}\\p{ea=W}\\p{ea=H}]] × (AL | HL | NU)'),
                     Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                     Paragraph(contents='The excluded set ([\\p{ea=F}\\p{ea=W}\\p{ea=H}]) refines the behavior of this rule, to enable a break before an East Asian OP or after an East Asian CP. Those cases are identified by excluding East_Asian_Width values of Fullwidth, Wide, or Halfwidth. This is illustrated by the following example, which shows East Asian corner brackets immediately following a Latin letter in Japanese text. In such a case, the preferred line break is between the Latin letter and the opening angle bracket.'),
                     TableRow(contents='Preferred\ue000Bad Break'),
                     TableRow(contents='日中韓統合漢字拡張G 「ユニコード」\ue000日中韓統合漢字拡張 G「ユニコード」'),
                     Rule(contents='LB30a Break between two regional indicator symbols if and only if there are an even number of regional indicators preceding the position of the break.'),
                     Formula(contents='sot (RI RI)* RI × RI'),
                     Formula(contents='[^RI] (RI RI)* RI × RI'),
                     Rule(contents='LB30b Do not break between an emoji base (or potential emoji) and an emoji modifier.'),
                     Formula(contents='EB × EM'),
                     Formula(contents='[\\p{Extended_Pictographic}&\\p{Cn}] × EM'),
                     Rule(contents='LB31 Break everywhere else.'),
                     Formula(contents='ALL ÷'),
                     Formula(contents='÷ ALL'),
                     Heading(level=2, contents='7 Deleted'),
                     Paragraph(contents='Formerly was: Pair Table-Based Implementation.'),
                     Heading(level=2, contents='8 Customization'),
                     Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                     Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                     Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                     Paragraph(contents='Notes:'),
                     Paragraph(contents='• Locale-sensitive line break specifications can be expressed in LDML [UTS35]. Tailorings are available in the Common Locale Data Repository [CLDR].'),
                     Paragraph(contents='• Some changes to rules and data are needed for the best segmentation behavior of emoji zwj sequences [UTS51]. Implementations are strongly encouraged to use the the line break rules in the latest version of CLDR (Version 35 or later) [CLDR] and the latest emoji properties (Version 12.0 or later) [UTS51].'),
                     Paragraph(contents='The remainder of this section gives an overview of common types of tailorings.'),
                     Heading(level=3, contents='8.1 Types of Tailoring'),
                     Paragraph(contents='There are two principal ways of tailoring the line breaking algorithm:'),
                     Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                     Paragraph(contents='2. Changing the line breaking rules Adding new rules, or altering or removing existing rules, provides more flexibility in changing the line breaking behavior. This can also include introducing new character classes for use by the new or altered rules.'),
                     Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                     Heading(level=3, contents='8.2 Examples of Customization'),
                     Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm.'),
                     Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the line breaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                     Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification.'),
                     Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. This can be implemented by adjusting rules LB23, LB25 and LB28 to allow breaks between all permutations of the character classes AL and NU.'),
                     Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by mapping class CJ to be handled as class ID in rule LB1.'),
                     Paragraph(contents='Example 6. Tailor to prevent line breaks from falling within default grapheme clusters, as defined by by Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. The tailoring can be accomplished by first segmenting the text into grapheme clusters according to the rules defined in UAX #29, and then finding line breaks according to the default line break rules, giving each grapheme cluster the line breaking class of its first code point.'),
                     Paragraph(contents='An example of a grapheme cluster that would be split by the default line break rules is a Zero Width Space followed by a combining mark.'),
                     Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * ( CL | CP ) ? ( PR | PO) ?'),
                     Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                     Paragraph(contents='Regex-Number: Do not break numbers.'),
                     Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                     Formula(contents='( OP | HY ) × NU'),
                     Formula(contents='NU × (NU | SY | IS)'),
                     Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL | CP )'),
                     Formula(contents='NU (NU | SY | IS)* (CL | CP)? × (PO | PR)'),
                     Paragraph(contents='In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                     Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                     Formula(contents='[^NU] × CL'),
                     Formula(contents='[^NU] × CP'),
                     Formula(contents='× EX'),
                     Formula(contents='[^NU] × IS'),
                     Formula(contents='[^NU] × SY'),
                     Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                     Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                     Heading(level=2, contents='9 Implementation Notes'),
                     Paragraph(contents='This section provides additional notes on implementation issues.'),
                     Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                     Paragraph(contents='To replace rule LB9, terms of the form'),
                     Paragraph(contents='B # A'),
                     Paragraph(contents='B SP* # A'),
                     Paragraph(contents='B #'),
                     Paragraph(contents='B SP* #'),
                     Paragraph(contents='are replaced by terms of the form'),
                     Paragraph(contents='B CM* # A'),
                     Paragraph(contents='B CM* SP* # A'),
                     Paragraph(contents='B CM* #'),
                     Paragraph(contents='B CM* SP* #'),
                     Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                     Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                     Paragraph(contents='Replace LB10 by the following rule:'),
                     Paragraph(contents='× CM'),
                     Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                     Paragraph(contents='(AL | NU) × OP'),
                     Paragraph(contents='add another rule'),
                     Paragraph(contents='CM × OP.'),
                     Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                     Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='As stated in Section 7.9, Combining Marks of [Unicode], combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                     Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                     Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                     Formula(contents='Treat SP CM* as if it were ID.'),
                     Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                     Heading(level=2, contents='10 Testing'),
                     Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2, Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                     Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                     Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                     Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                     Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                     Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                     Paragraph(contents='1. The rules are cast into a more regex-style.'),
                     Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                     Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                     Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                     Paragraph(contents='• 13.01) [^NU] × CL'),
                     Paragraph(contents='• 13.02) × EX'),
                     Paragraph(contents='• ...'),
                     Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                     Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                     Paragraph(contents='Table 4. Numbering of Test Rules'),
                     TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                     TableRow(contents='LB2\ue0000.2\ue000start of text'),
                     TableRow(contents='LB3\ue0000.3\ue000end of text'),
                     TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                     TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                     TableRow(contents='LB31\ue000999\ue000÷ any'),
                     Heading(level=2, contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                     Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                     TableRow(contents='9.0.0\ue0008.0.0\ue0006.2.0\ue0006.1.0\ue0005.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                     TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                     TableRow(contents='LB2\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                     TableRow(contents='LB3\ue0003\ue0003\ue0003\ue0003\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                     TableRow(contents='LB4\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB5\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB6\ue0006\ue0006\ue0006\ue0006\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                     TableRow(contents='LB7\ue0007\ue0007\ue0007\ue0007\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                     TableRow(contents='LB8\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                     TableRow(contents='LB8a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                     TableRow(contents='LB9\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB10\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                     TableRow(contents='LB11\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12a\ue00012a\ue00012a\ue00012a\ue00012a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB13\ue00013\ue00013\ue00013\ue00013\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                     TableRow(contents='LB14\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                     TableRow(contents='LB15\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                     TableRow(contents='LB16\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                     TableRow(contents='LB17\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                     TableRow(contents='LB18\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                     TableRow(contents='LB19\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                     TableRow(contents='LB20\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                     TableRow(contents='LB21\ue00021\ue00021\ue00021\ue00021\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                     TableRow(contents='LB21a\ue00021a\ue00021a\ue00021a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB21b\ue00021b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB22\ue00022\ue00022\ue00022\ue00022\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                     TableRow(contents='LB23\ue00023\ue00023\ue00023\ue00023\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                     TableRow(contents='LB23a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB24\ue00024\ue00024\ue00024\ue00024\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='LB25\ue00025\ue00025\ue00025\ue00025\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                     TableRow(contents='LB26\ue00026\ue00026\ue00026\ue00026\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB27\ue00027\ue00027\ue00027\ue00027\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB28\ue00028\ue00028\ue00028\ue00028\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                     TableRow(contents='LB29\ue00029\ue00029\ue00029\ue00029\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30\ue00030\ue00030\ue00030\ue00030\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30a\ue00030a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB31\ue00031\ue00031\ue00031\ue00031\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                     Heading(level=2, contents='References'),
                     Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                     Heading(level=2, contents='Acknowledgments'),
                     Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintained the text from 2008 through 2019.'),
                     Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                     Heading(level=2, contents='Modifications'),
                     Paragraph(contents='The following summarizes modifications from the previous revision of this annex.'),
                     Heading(level=4, contents='Revision 46:'),
                     Paragraph(contents='• Reissued for Unicode 14.0.'),
                     Paragraph(contents='• Section 6.2, Tailorable Line Breaking Rules'),
                     Paragraph(contents='• Removed the redundant rule (JL | JV | JT | H2 | H3) × IN from LB27.'),
                     Paragraph(contents='• Changed LB30b to include potential emoji as described in L2/21-135.'),
                     Paragraph(contents='Modifications for previous versions are listed in those respective versions.'),
                     Paragraph(contents='© 2021 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                     Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(15, 0, 0): [Heading(level=2, contents='Unicode® Standard Annex #14'),
                     Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                     TableRow(contents='Version\ue000Unicode 15.0.0'),
                     TableRow(contents='Editors\ue000Christopher Chapman (cchapman@adobe.com)'),
                     TableRow(contents='Date\ue0002022-08-16'),
                     TableRow(contents='This Version\ue000https://www.unicode.org/reports/tr14/tr14-49.html'),
                     TableRow(contents='Previous Version\ue000https://www.unicode.org/reports/tr14/tr14-47.html'),
                     TableRow(contents='Latest Version\ue000https://www.unicode.org/reports/tr14/'),
                     TableRow(contents='Latest Proposed Update\ue000https://www.unicode.org/reports/tr14/proposed.html'),
                     TableRow(contents='Revision\ue00049'),
                     Heading(level=4, contents='Summary'),
                     Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display.'),
                     Heading(level=4, contents='Status'),
                     Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                     Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                     Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                     Heading(level=4, contents='Contents'),
                     Paragraph(contents='1 Overview and Scope'),
                     Paragraph(contents='2 Definitions'),
                     Paragraph(contents='3 Introduction'),
                     Paragraph(contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='4 Conformance'),
                     Paragraph(contents='4.1 Conformance Requirements'),
                     Paragraph(contents='5 Line Breaking Properties'),
                     Paragraph(contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='5.2 Dictionary Usage'),
                     Paragraph(contents='5.3 Use of Hyphen'),
                     Paragraph(contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='5.7 Word Separator Characters'),
                     Paragraph(contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='7 Deleted. (Formerly was: Pair Table-Based Implementation)'),
                     Paragraph(contents='8 Customization'),
                     Paragraph(contents='8.1 Types of Tailoring'),
                     Paragraph(contents='8.2 Examples of Customization'),
                     Paragraph(contents='9 Implementation Notes'),
                     Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='10 Testing'),
                     Paragraph(contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='References'),
                     Paragraph(contents='Acknowledgments'),
                     Paragraph(contents='Modifications'),
                     Heading(level=2, contents='1 Overview and Scope'),
                     Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                     Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                     Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                     Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Two main sections follow:'),
                     Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                     Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                     Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                     Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                     Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                     Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                     Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                     Heading(level=2, contents='2 Definitions'),
                     Paragraph(contents='The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard.'),
                     Paragraph(contents='All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard [Unicode].'),
                     Paragraph(contents='LD1. Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                     Paragraph(contents='LD2. Line Break: The position in the text where one line ends and the next one starts.'),
                     Paragraph(contents='LD3. Line Break Opportunity: A place where a line is allowed to end.'),
                     Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                     Paragraph(contents='LD4. Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                     Paragraph(contents='LD5. Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                     Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                     Paragraph(contents='LD6. Line Breaking Class: A class of characters with the same line breaking property value.'),
                     Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                     Paragraph(contents='LD7. Mandatory Break: A line must break following a character that has the mandatory break property.'),
                     Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                     Paragraph(contents='LD8. Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                     Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space.'),
                     Paragraph(contents='LD9. Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                     Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, an indirect break is represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                     Paragraph(contents='LD10. Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, a prohibited break is expressed as a rule of the form: B SP* × A.'),
                     Paragraph(contents='LD11. Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                     Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                     Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                     Paragraph(contents='Table 1. Line Breaking Classes'),
                     TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                     TableRow(contents='Non-tailorable Line Breaking Classes'),
                     TableRow(contents='BK\ue000Mandatory Break\ue000NL, PARAGRAPH SEPARATOR\ue000Cause a line break (after)'),
                     TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                     TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                     TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                     TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                     TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                     TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                     TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                     TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                     TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                     TableRow(contents='ZWJ\ue000Zero Width Joiner\ue000Zero Width Joiner\ue000Prohibit line breaks within joiner sequences'),
                     TableRow(contents='Break Opportunities'),
                     TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                     TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                     TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                     TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                     TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                     TableRow(contents='Characters Prohibiting Certain Breaks'),
                     TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                     TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                     TableRow(contents='NS\ue000Nonstarter\ue000“‼”, “‽”, “⁇”, “⁉”, etc.\ue000Allow only indirect line breaks before'),
                     TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                     TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                     TableRow(contents='Numeric Context'),
                     TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                     TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                     TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                     TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                     TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                     TableRow(contents='Other Characters'),
                     TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                     TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                     TableRow(contents='CJ\ue000Conditional Japanese Starter\ue000Small kana\ue000Treat as NS or ID for strict or normal breaking.'),
                     TableRow(contents='EB\ue000Emoji Base\ue000All emoji allowing modifiers\ue000Do not break from following Emoji Modifier'),
                     TableRow(contents='EM\ue000Emoji Modifier\ue000Skin tone modifiers\ue000Do not break from preceding Emoji Base'),
                     TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='HL\ue000Hebrew Letter\ue000Hebrew\ue000Do not break around a following hyphen; otherwise act as Alphabetic'),
                     TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                     TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='RI\ue000Regional Indicator\ue000REGIONAL INDICATOR SYMBOL LETTER A .. Z\ue000Keep pairs together. For pairs, break before and after other classes'),
                     TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                     TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                     Heading(level=2, contents='3 Introduction'),
                     Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                     Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                     Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                     Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                     Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                     Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                     Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='Three principal styles of context analysis determine line break opportunities.'),
                     Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                     Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                     Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                     Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                     Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                     Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                     Paragraph(contents='The third style is used for scripts such as Thai, which do not use spaces, but which restrict word breaks to syllable boundaries, whose determination requires knowledge of the language comparable to that required by a hyphenation algorithm. Such an algorithm is beyond the scope of the Unicode Standard.'),
                     Paragraph(contents='For multilingual text, the Western and East Asian styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                     Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [UAX9]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                     Heading(level=2, contents='4 Conformance'),
                     Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                     Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                     Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                     Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                     Paragraph(contents='Note: Locale-sensitive line break specifications can be expressed in LDML [UTS35]. Tailorings are available in the Common Locale Data Repository [CLDR].'),
                     Heading(level=3, contents='4.1 Conformance Requirements'),
                     Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                     Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                     Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                     Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                     Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                     Heading(level=2, contents='5 Line Breaking Properties'),
                     Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                     Paragraph(contents='This section also summarizes the membership of character classes corresponding to each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line breaking behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                     Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into the algorithm defined in Section 6, Line Breaking Algorithm. That section describes a workable default line breaking method. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences. Permitted customizations can include changing the classification of characters for certain classes.'),
                     Paragraph(contents='In addition to the line breaking properties defined in this section, the algorithm defined in Section 6, Line Breaking Algorithm also makes use of East_Asian_Width property values, defined in Unicode Standard Annex #11, East Asian Width [UAX11]. Note that for purposes of the line breaking algorithm, those East_Asian_Width property values are tailorable, as are the rules of the line breaking algorithm which use them. (See rule LB30.)'),
                     Heading(level=4, contents='Data File'),
                     Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a semicolon-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name.'),
                     Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                     Heading(level=4, contents='Future Updates'),
                     Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                     Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                     TableRow(contents='Label\ue000Meaning for the Class'),
                     TableRow(contents='(A)\ue000It allows a break opportunity after in specified contexts.'),
                     TableRow(contents='(XA)\ue000It prevents a break opportunity after in specified contexts.'),
                     TableRow(contents='(B)\ue000It allows a break opportunity before in specified contexts.'),
                     TableRow(contents='(XB)\ue000It prevents a break opportunity before in specified contexts.'),
                     TableRow(contents='(P)\ue000It allows a break opportunity for a pair of same characters.'),
                     TableRow(contents='(XP)\ue000It prevents a break opportunity for a pair of same characters.'),
                     Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                     Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                     Paragraph(contents='Some characters that ordinarily act like alphabetic characters are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                     Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [UAX11].'),
                     Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                     Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                     Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                     TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                     TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                     Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                     Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                     Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                     Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                     Paragraph(contents='This class contains alphabetic or symbolic characters not explicitly assigned to another line breaking class. These are primarily characters of the following categories:'),
                     TableRow(contents='Category\ue000General_Category Values'),
                     TableRow(contents='Alphabetic\ue000Lu, Ll, Lt, Lm, and Lo'),
                     TableRow(contents='Symbols\ue000Sm, Sk, and So'),
                     TableRow(contents='Non-decimal Numbers\ue000Nl and No'),
                     TableRow(contents='Punctuation\ue000Pc, Pd, and Po'),
                     Paragraph(contents='Line break class AL also contains several format characters, including:'),
                     TableRow(contents='0600..0604\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAMVAT'),
                     TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                     TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                     TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                     TableRow(contents='110BD\ue000KAITHI NUMBER SIGN'),
                     Paragraph(contents='These format characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                     Paragraph(contents='Major exceptions to the general pattern of alphabetic and symbolic characters having line break class AL include:'),
                     Paragraph(contents='HL for Hebrew letters AI or ID, based on the East Asian Width property of the character ID for certain pictographic symbols CJ for small hiragana and katakana SA for complex context scripts JL, JV, JT, H2 or H3 for Hangul characters'),
                     Heading(level=3, contents='BA: Break After (A)'),
                     Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                     Heading(level=4, contents='Breaking Spaces'),
                     Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                     TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                     TableRow(contents='2000\ue000EN QUAD'),
                     TableRow(contents='2001\ue000EM QUAD'),
                     TableRow(contents='2002\ue000EN SPACE'),
                     TableRow(contents='2003\ue000EM SPACE'),
                     TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                     TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                     TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                     TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                     TableRow(contents='2009\ue000THIN SPACE'),
                     TableRow(contents='200A\ue000HAIR SPACE'),
                     TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                     TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                     Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                     Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                     Paragraph(contents='For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                     Heading(level=4, contents='Tabs'),
                     TableRow(contents='0009\ue000TAB'),
                     Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                     Heading(level=4, contents='Conditional Hyphens'),
                     TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                     Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=4, contents='Breaking Hyphens'),
                     Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                     TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                     TableRow(contents='2010\ue000HYPHEN'),
                     TableRow(contents='2012\ue000FIGURE DASH'),
                     TableRow(contents='2013\ue000EN DASH'),
                     Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Visible Word Dividers'),
                     Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                     TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                     TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                     TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                     TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                     TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                     Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                     TableRow(contents='2027\ue000HYPHENATION POINT'),
                     Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                     TableRow(contents='007C\ue000VERTICAL LINE'),
                     Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                     Heading(level=4, contents='Historic Word Separators'),
                     Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                     Paragraph(contents='Examples of Historic Word Separators include:'),
                     TableRow(contents='16EB\ue000RUNIC SINGLE PUNCTUATION'),
                     TableRow(contents='16EC\ue000RUNIC MULTIPLE PUNCTUATION'),
                     TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                     TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                     TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                     TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                     TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                     TableRow(contents='205B\ue000FOUR DOT MARK'),
                     TableRow(contents='205D\ue000TRICOLON'),
                     TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                     TableRow(contents='2E19\ue000PALM BRANCH'),
                     TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                     TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                     TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                     TableRow(contents='2E2D\ue000FIVE DOT MARK'),
                     TableRow(contents='2E30\ue000RING POINT'),
                     TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                     TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                     TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                     TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                     TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                     TableRow(contents='1091F\ue000PHOENICIAN WORD SEPARATOR'),
                     TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                     Heading(level=4, contents='Dandas'),
                     Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                     Paragraph(contents='Examples of dandas include:'),
                     TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                     TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                     TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                     TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                     TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                     TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                     TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                     TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                     TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                     TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                     TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                     TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                     TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                     TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                     TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                     TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                     TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                     TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                     TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                     Heading(level=4, contents='Tibetan'),
                     TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                     TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                     TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                     TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                     TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                     TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                     Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Other Terminating Punctuation'),
                     Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                     TableRow(contents='1804\ue000MONGOLIAN COLON'),
                     TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                     TableRow(contents='1B5A\ue000BALINESE PANTI'),
                     TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                     TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                     TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                     TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                     TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                     TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                     TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                     TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                     TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                     TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                     TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                     TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                     TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                     TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                     TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                     TableRow(contents='2E17\ue000DOUBLE OBLIQUE HYPHEN'),
                     TableRow(contents='A60D\ue000VAI COMMA'),
                     TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                     TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                     TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                     TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                     TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                     TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                     TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                     TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                     TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                     Heading(level=3, contents='BB: Break Before (B)'),
                     Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                     Paragraph(contents='Examples of BB characters are described in the following sections.'),
                     Heading(level=4, contents='Dictionary Use'),
                     TableRow(contents='00B4\ue000ACUTE ACCENT'),
                     TableRow(contents='1FFD\ue000GREEK OXIA'),
                     Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                     TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                     Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                     TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                     TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                     Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                     Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                     Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                     TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                     TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                     TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                     TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                     TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                     TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                     TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                     TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                     TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                     TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                     TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                     TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                     TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                     Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Mongolian'),
                     TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                     Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                     Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                     TableRow(contents='2014\ue000EM DASH'),
                     Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                     Paragraph(contents='Some languages, including Spanish, use EM DASH to set off a parenthetical, and the surrounding dashes should not be broken from the contained text. In this usage there is space on the side where it can be broken. This does not conflict with symmetrical usages, either with spaces on both sides of the em-dash or with no spaces.'),
                     Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                     Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                     TableRow(contents='000C\ue000FORM FEED (FF)'),
                     TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                     Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                     TableRow(contents='2028\ue000LINE SEPARATOR'),
                     Paragraph(contents='The text after the LINE SEPARATOR starts at the beginning of the line. This is similar to HTML <BR>.'),
                     TableRow(contents='2029\ue000PARAGRAPH SEPARATOR'),
                     Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LINE SEPARATOR, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                     Heading(level=4, contents='Newline Function (NLF)'),
                     Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                     Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                     Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                     Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                     TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                     Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                     Heading(level=3, contents='CJ: Conditional Japanese Starter'),
                     Paragraph(contents='This character class contains Japanese small hiragana and katakana. Characters of this class may be treated as either NS or ID.'),
                     Paragraph(contents='CSS Text Level 3 (which supports Japanese line layout) defines three distinct values for its line-break behavior:'),
                     Paragraph(contents='• strict, typically used for long lines'),
                     Paragraph(contents='• normal (CSS default), the behavior typically used for books and documents'),
                     Paragraph(contents='• loose, typically used for short lines such as in newspapers'),
                     Paragraph(contents='These have different sets of “kinsoku” characters which cannot be at the beginning or end of a line; strict has the largest set, while loose has the smallest. The motivation for the smaller number of kinsoku characters is to avoid triggering justification that puts characters off the grid position.'),
                     Paragraph(contents='Treating characters of class CJ as class NS will give CSS strict line breaking; treating them as class ID will give CSS normal breaking.'),
                     Paragraph(contents='The CJ line break class includes'),
                     TableRow(contents='3041, 3043, 3045, etc.\ue000Small hiragana'),
                     TableRow(contents='30A1, 30A3, 30A5, etc.\ue000Small katakana'),
                     TableRow(contents='30FC\ue000KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                     TableRow(contents='FF67..FF70\ue000Halfwidth variants'),
                     Heading(level=3, contents='CL: Close Punctuation (XB)'),
                     Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                     Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                     Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                     TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                     TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE50\ue000SMALL COMMA'),
                     TableRow(contents='FE52\ue000SMALL FULL STOP'),
                     TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                     TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                     TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                     Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                     Heading(level=4, contents='Combining Characters'),
                     Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                     Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 NO-BREAK SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                     Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+26A0 WARNING SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                     Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas.'),
                     Heading(level=4, contents='Control and Formatting Characters'),
                     Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                     Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                     Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                     Paragraph(contents='The CM class also includes U+3035 VERTICAL KANA REPEAT MARK LOWER HALF. This character is normally preceded by either U+3033 VERTICAL KANA REPEAT MARK UPPER HALF or U+3034 VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF, and should not be separated from them.'),
                     Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                     Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                     TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                     TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                     Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                     TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                     Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                     Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                     Heading(level=3, contents='EB: Emoji Base (B/A)'),
                     Paragraph(contents='This class includes characters whose appearance can be modified by a subsequent emoji modifier in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier_Base property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='1F466\ue000BOY'),
                     TableRow(contents='1F478\ue000PRINCESS'),
                     TableRow(contents='1F6B4\ue000BICYCLIST'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b. In other contexts, characters of class EB behave similarly to ideographs of class ID, with break opportunities before and after.'),
                     Heading(level=3, contents='EM: Emoji Modifier (A)'),
                     Paragraph(contents='This class includes characters that can be used to modify the appearance of a preceding emoji in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b.'),
                     Paragraph(contents='Emoji modifiers include:'),
                     TableRow(contents='1F3FB..1F3FF\ue000EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6'),
                     Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                     Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                     TableRow(contents='0021\ue000EXCLAMATION MARK'),
                     TableRow(contents='003F\ue000QUESTION MARK'),
                     TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                     TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                     TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                     TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                     TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                     TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                     TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                     TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                     TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                     Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following are examples of characters of line break class GL:'),
                     TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                     TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                     TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                     Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE.'),
                     Paragraph(contents='NARROW NO-BREAK SPACE has exactly the same line breaking behavior as NO-BREAK SPACE, but with a narrow display width. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. Both of these characters are regularly used in Mongolian text, where they participate in special shaping behavior, as described in Section 13.5, Mongolian of [Unicode].'),
                     Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                     TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                     Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                     TableRow(contents='2007\ue000FIGURE SPACE'),
                     Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                     TableRow(contents='2011\ue000NON-BREAKING HYPHEN'),
                     Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                     TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                     TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                     TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                     Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                     Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                     Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                     Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                     Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                     Heading(level=3, contents='HY: Hyphen (XA)'),
                     TableRow(contents='002D\ue000HYPHEN-MINUS'),
                     Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                     Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                     Heading(level=3, contents='ID: Ideographic (B/A)'),
                     Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                     TableRow(contents='2E80..2FFF\ue000CJK, Kangxi Radicals, Ideographic Description Symbols'),
                     TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                     TableRow(contents='30A2..30FA\ue000Katakana (except small characters)'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                     Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                     Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                     Paragraph(contents='The unassigned code points in the following blocks default to ID:'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='All undesignated code points in Planes 2 and 3, whether inside or outside of allocated blocks, default to ID:'),
                     TableRow(contents='20000..2FFFD\ue000Plane 2'),
                     TableRow(contents='30000..3FFFD\ue000Plane 3'),
                     Paragraph(contents='All unassigned code points in the following Plane 1 range, whether inside or outside of allocated blocks, also default to ID:'),
                     TableRow(contents='1F000..1FFFD\ue000Plane 1 range'),
                     Heading(level=4, contents='Korean'),
                     Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                     TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                     Heading(level=4, contents='Symbols'),
                     Paragraph(contents='Certain pictographic symbols of General Category So are also included in this line break class.'),
                     Heading(level=3, contents='HL: Hebrew Letter (XB)'),
                     Paragraph(contents='This class includes all Hebrew letters.'),
                     Paragraph(contents='When a Hebrew letter is followed by a hyphen, there is no break on either side of the hyphen. In this context a hyphen is any character of class HY or class BA. In other respects, Hebrew letters behave the same as characters of class AL.'),
                     Paragraph(contents='Included in this class are all characters of General Category Letter that have Script=Hebrew.'),
                     Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                     Heading(level=4, contents='Leaders'),
                     Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='2024\ue000ONE DOT LEADER'),
                     TableRow(contents='2025\ue000TWO DOT LEADER'),
                     TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                     TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                     Paragraph(contents='HORIZONTAL ELLIPSIS can be used as a three-dot leader.'),
                     Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                     Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='002C\ue000COMMA'),
                     TableRow(contents='002E\ue000FULL STOP'),
                     TableRow(contents='003A\ue000COLON'),
                     TableRow(contents='003B\ue000SEMICOLON'),
                     TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                     TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                     TableRow(contents='060C\ue000ARABIC COMMA'),
                     TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                     TableRow(contents='07F8\ue000NKO COMMA'),
                     TableRow(contents='2044\ue000FRACTION SLASH'),
                     TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                     TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                     TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                     Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                     Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                     Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                     Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                     Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                     Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                     Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                     Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                     Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                     Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                     TableRow(contents='000A\ue000LINE FEED (LF)'),
                     Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                     Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                     TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                     Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                     Heading(level=3, contents='NS: Nonstarters (XB)'),
                     Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include:'),
                     TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                     TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                     TableRow(contents='203D\ue000INTERROBANG'),
                     TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                     TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                     TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                     TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='301C\ue000WAVE DASH'),
                     TableRow(contents='303C\ue000MASU MARK'),
                     TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                     TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                     TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                     TableRow(contents='30FD..30FE\ue000KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK'),
                     TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                     TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                     TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                     TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                     Paragraph(contents='Note: Optionally, the NS restriction may be relaxed by tailoring, with some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles. Alternatively, line breaking can be tightened by moving characters that are ID into NS.'),
                     Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                     Heading(level=3, contents='NU: Numeric (XP)'),
                     Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                     Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except those with East_Asian_Width F (Fullwidth), plus these characters:'),
                     TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                     TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                     Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                     Heading(level=3, contents='OP: Open Punctuation (XA)'),
                     Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                     TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                     TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                     TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                     Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                     Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                     Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                     Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                     Paragraph(contents='Examples of Postfix characters include'),
                     TableRow(contents='0025\ue000PERCENT SIGN'),
                     TableRow(contents='00A2\ue000CENT SIGN'),
                     TableRow(contents='00B0\ue000DEGREE SIGN'),
                     TableRow(contents='060B\ue000AFGHANI SIGN'),
                     TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                     TableRow(contents='2030\ue000PER MILLE SIGN'),
                     TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                     TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                     TableRow(contents='20A7\ue000PESETA SIGN'),
                     TableRow(contents='2103\ue000DEGREE CELSIUS'),
                     TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                     TableRow(contents='FDFC\ue000RIAL SIGN'),
                     TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                     TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                     TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                     Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                     Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                     Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                     Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                     Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                     TableRow(contents='002B\ue000PLUS SIGN'),
                     TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                     TableRow(contents='00B1\ue000PLUS-MINUS SIGN'),
                     TableRow(contents='2116\ue000NUMERO SIGN'),
                     TableRow(contents='2212\ue000MINUS SIGN'),
                     TableRow(contents='2213\ue000MINUS-OR-PLUS SIGN'),
                     Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                     Heading(level=3, contents='QU: Quotation (XB/XA)'),
                     Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                     Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                     Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                     TableRow(contents='0022\ue000QUOTATION MARK'),
                     TableRow(contents='0027\ue000APOSTROPHE'),
                     TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                     TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                     TableRow(contents='2E0B\ue000RAISED SQUARE'),
                     Heading(level=3, contents='RI: Regional Indicator (B/A/XP)'),
                     Paragraph(contents='For line Breaking, the Regional Indicator characters are all those with the Unicode character property of Regional_Indicator. This includes:'),
                     TableRow(contents='1F1E6..1F1FF\ue000REGIONAL INDICATOR SYMBOL LETTER A .. REGIONAL INDICATOR SYMBOL LETTER Z'),
                     Paragraph(contents='Pairs of RI characters are used to represent a two-letter ISO 3166 region code.'),
                     Paragraph(contents='Runs of adjacent RI characters are grouped into pairs, beginning at the start of the run. No break opportunity occurs within a pair; breaks can occur between adjacent pairs. When RI characters are adjacent to characters of other classes, breaks can occur before and after, except where forbidden by other rules.'),
                     Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                     Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                     Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                     Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                     TableRow(contents='0E00..0E7F\ue000Thai'),
                     TableRow(contents='0E80..0EFF\ue000Lao'),
                     TableRow(contents='1000..109F\ue000Myanmar'),
                     TableRow(contents='1780..17FF\ue000Khmer'),
                     TableRow(contents='1950..197F\ue000Tai Le'),
                     TableRow(contents='1980..19DF\ue000New Tai Lue'),
                     TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                     TableRow(contents='A9E0..A9FF\ue000Myanmar Extended-B'),
                     TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                     TableRow(contents='AA80..AADF\ue000Tai Viet'),
                     TableRow(contents='11700..1173F\ue000Ahom'),
                     Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                     Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                     Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                     Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                     Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                     TableRow(contents='0020\ue000SPACE (SP)'),
                     Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                     Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                     Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                     TableRow(contents='002F\ue000SOLIDUS'),
                     Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                     Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                     Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                     TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                     TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                     Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                     Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                     Heading(level=3, contents='XX: Unknown (XP)'),
                     Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                     Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                     Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                     Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                     Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                     Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                     Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                     TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                     Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                     Heading(level=3, contents='ZWJ: Zero Width Joiner (XA/XB) (Non-tailorable)'),
                     TableRow(contents='200D\ue000ZERO WIDTH JOINER (ZWJ)'),
                     Paragraph(contents='A ZWJ prevents breaks between most pairs of characters that would otherwise break. It has various uses, including as a connector in emoji zwj sequences and as a joiner in complex scripts.'),
                     Paragraph(contents='Emoji zwj sequences are defined by ED-16, emoji zwj sequence, in [UTS51] and implemented for line breaking by rule LB8a. In other respects, the line breaking behavior of ZWJ is that of a combining character of class CM.'),
                     Heading(level=3, contents='5.2 Dictionary Usage'),
                     Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                     Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                     Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                     Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SY´LLABLE where ´ is an oversized U+02B9 and follows the vowel of the main syllable (not the syllable itself).'),
                     Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s acute). The letter ă is U+0103. The ' is an apostrophe."),
                     Paragraph(contents="Oxford English Dictionary (2nd Edition) has gone to IPA 'sIləb(ə)l where ' is U+02C8, I is U+026A, and ə is U+0259 (both times). The ' comes before the stressed syllable. The () indicate the schwa may be omitted."),
                     Paragraph(contents='Chambers English Dictionary (7th Edition) sil´ə-bl where the stressed syllable is followed by ´ U+02B9, ə is U+0259, and - is a hyphen. When splitting a word like abate´- ment, the stress mark ´ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                     Paragraph(contents='BBC English Dictionary sIləbl where I is <U+026A, U+0332> and ə is U+0259. The vowel of the stressed syllable is underlined.'),
                     Paragraph(contents='Collins Cobuild English Language Dictionary sIləbə°l where I is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ə is U+0259 (both times). The ° is a U+2070 and indicates the schwa may be omitted.'),
                     Paragraph(contents="Readers Digest Great Illustrated Dictionary syl·la·ble (sílləb'l) The spelling of the word has hyphenation points (· is a U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                     Paragraph(contents="Webster’s 3rd New International Dictionary syl·la·ble /'siləbəl/ The spelling of the word has hyphenation points (· is a U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ' U+02C8. The ə’s are schwas as usual. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen."),
                     Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                     Heading(level=3, contents='5.3 Use of Hyphen'),
                     Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                     Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                     Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                     Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                     Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                     Paragraph(contents='dispara- te'),
                     Paragraph(contents='and the latter as'),
                     Paragraph(contents='dispara- -te.'),
                     Paragraph(contents='A recommended practice is to type <SHY, NON-BREAKING HYPHEN> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                     Paragraph(contents='• Simply inserting a hyphen glyph'),
                     Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                     Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                     Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                     Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                     Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                     Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                     Paragraph(contents='• In Swedish, a consonant is sometimes doubled: “tuggummi”; hyphenates into “tugg- / gummi”.'),
                     Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                     Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                     Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                     Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                     Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [UAX9] and Section 9.2, Arabic, of [Unicode].'),
                     Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                     Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                     Paragraph(contents='The sequence <SHY, NON-BREAKING HYPHEN> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                     Heading(level=3, contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                     Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                     Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                     Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                     Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                     Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                     Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                     Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                     Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                     Heading(level=3, contents='5.7 Word Separator Characters'),
                     Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                     Paragraph(contents='1. suppress the visible word separator'),
                     Paragraph(contents='The:quick:brown fox:jumped.'),
                     Paragraph(contents='2. break before the visible word separator'),
                     Paragraph(contents='The:quick:brown :fox:jumped.'),
                     Paragraph(contents='3. break after the visible word separator'),
                     Paragraph(contents='The:quick:brown: fox:jumped.'),
                     Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                     Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                     Heading(level=2, contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                     Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1, Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                     Paragraph(contents='! Mandatory break at the indicated position'),
                     Paragraph(contents='× No break allowed at the indicated position'),
                     Paragraph(contents='÷ Break allowed at the indicated position'),
                     Paragraph(contents='In the regular expressions, parentheses may be used for grouping, and square brackets, &, -, and \\p{...} may be used to compose sets of characters, as in UAX #29, Unicode Text Segmentation [UAX29] and in UTS #18, Unicode Regular Expressions [UTS18]. Use of a line break class such as BK is short for the property expression \\p{lb=BK}.'),
                     Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                     Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                     Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                     Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                     Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, ZW and ZWJ define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                     Heading(level=4, contents='Resolve line breaking classes:'),
                     Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, CJ, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                     Paragraph(contents='In the absence of such criteria all characters with a specific combination of original class and General_Category property value are resolved as follows:'),
                     TableRow(contents='Resolved\ue000Original\ue000General_Category'),
                     TableRow(contents='AL\ue000AI, SG, XX\ue000Any'),
                     TableRow(contents='CM\ue000SA\ue000Only Mn or Mc'),
                     TableRow(contents='AL\ue000SA\ue000Any except Mn and Mc'),
                     TableRow(contents='NS\ue000CJ\ue000Any'),
                     Heading(level=4, contents='Start and end of text:'),
                     Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                     Rule(contents='LB2 Never break at the start of text.'),
                     Formula(contents='sot ×'),
                     Rule(contents='LB3 Always break at the end of text.'),
                     Formula(contents='! eot'),
                     Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                     Heading(level=4, contents='Mandatory breaks:'),
                     Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                     Rule(contents='LB4 Always break after hard line breaks.'),
                     Formula(contents='BK !'),
                     Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                     Formula(contents='CR × LF'),
                     Formula(contents='CR !'),
                     Formula(contents='LF !'),
                     Formula(contents='NL !'),
                     Rule(contents='LB6 Do not break before hard line breaks.'),
                     Formula(contents='× ( BK | CR | LF | NL )'),
                     Heading(level=4, contents='Explicit breaks and non-breaks:'),
                     Rule(contents='LB7 Do not break before spaces or zero width space.'),
                     Formula(contents='× SP'),
                     Formula(contents='× ZW'),
                     Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                     Formula(contents='ZW SP* ÷'),
                     Rule(contents='LB8a Do not break after a zero width joiner.'),
                     Formula(contents='ZWJ ×'),
                     Paragraph(contents='A ZWJ will prevent breaks between most pairs of characters. This behavior is used to prevent breaks within emoji zwj sequences.'),
                     Heading(level=4, contents='Combining marks:'),
                     Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                     Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules. Treat ZWJ as if it were CM.'),
                     Formula(contents='Treat X (CM | ZWJ)* as if it were X.'),
                     Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                     Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                     Rule(contents='LB10 Treat any remaining combining mark or ZWJ as AL.'),
                     Formula(contents='Treat any remaining CM or ZWJ as it if were AL.'),
                     Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                     Heading(level=4, contents='Word joiner:'),
                     Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                     Formula(contents='× WJ'),
                     Formula(contents='WJ ×'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12 Do not break after NBSP and related characters.'),
                     Formula(contents='GL ×'),
                     Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                     Formula(contents='[^SP BA HY] × GL'),
                     Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Opening and closing:'),
                     Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                     Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                     Formula(contents='× CL'),
                     Formula(contents='× CP'),
                     Formula(contents='× EX'),
                     Formula(contents='× IS'),
                     Formula(contents='× SY'),
                     Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                     Formula(contents='OP SP* ×'),
                     Rule(contents='LB15 Do not break within ‘”[’, even with intervening spaces.'),
                     Formula(contents='QU SP* × OP'),
                     Paragraph(contents='For more information on this rule, see the note in the description for the QU class.'),
                     Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                     Formula(contents='(CL | CP) SP* × NS'),
                     Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                     Formula(contents='B2 SP* × B2'),
                     Heading(level=4, contents='Spaces:'),
                     Rule(contents='LB18 Break after spaces.'),
                     Formula(contents='SP ÷'),
                     Heading(level=4, contents='Special case rules:'),
                     Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                     Formula(contents='× QU'),
                     Formula(contents='QU ×'),
                     Rule(contents='LB20 Break before and after unresolved CB.'),
                     Formula(contents='÷ CB'),
                     Formula(contents='CB ÷'),
                     Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                     Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                     Formula(contents='× BA'),
                     Formula(contents='× HY'),
                     Formula(contents='× NS'),
                     Formula(contents='BB ×'),
                     Rule(contents="LB21a Don't break after Hebrew + Hyphen."),
                     Formula(contents='HL (HY | BA) ×'),
                     Rule(contents='LB21b Don’t break between Solidus and Hebrew letters.'),
                     Formula(contents='SY × HL'),
                     Rule(contents='LB22 Do not break before ellipses.'),
                     Formula(contents='× IN'),
                     Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                     Heading(level=4, contents='Numbers:'),
                     Paragraph(contents='Do not break alphanumerics.'),
                     Rule(contents='LB23 Do not break between digits and letters.'),
                     Formula(contents='(AL | HL) × NU'),
                     Formula(contents='NU × (AL | HL)'),
                     Rule(contents='LB23a Do not break between numeric prefixes and ideographs, or between ideographs and numeric postfixes.'),
                     Formula(contents='PR × (ID | EB | EM)'),
                     Formula(contents='(ID | EB | EM) × PO'),
                     Rule(contents='LB24 Do not break between numeric prefix/postfix and letters, or between letters and prefix/postfix.'),
                     Formula(contents='(PR | PO) × (AL | HL)'),
                     Formula(contents='(AL | HL) × (PR | PO)'),
                     Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                     Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                     Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                     Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                     Formula(contents='CL × PO'),
                     Formula(contents='CP × PO'),
                     Formula(contents='CL × PR'),
                     Formula(contents='CP × PR'),
                     Formula(contents='NU × PO'),
                     Formula(contents='NU × PR'),
                     Formula(contents='PO × OP'),
                     Formula(contents='PO × NU'),
                     Formula(contents='PR × OP'),
                     Formula(contents='PR × NU'),
                     Formula(contents='HY × NU'),
                     Formula(contents='IS × NU'),
                     Formula(contents='NU × NU'),
                     Formula(contents='SY × NU'),
                     Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                     Heading(level=4, contents='Korean syllable blocks'),
                     Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                     Rule(contents='LB26 Do not break a Korean syllable.'),
                     Formula(contents='JL × (JL | JV | H2 | H3)'),
                     Formula(contents='(JV | H2) × (JV | JT)'),
                     Formula(contents='(JT | H3) × JT'),
                     Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                     Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                     Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                     Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                     Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                     Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                     Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                     Formula(contents='(AL | HL) × (AL | HL)'),
                     Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                     Formula(contents='IS × (AL | HL)'),
                     Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                     Formula(contents='(AL | HL | NU) × [OP-[\\p{ea=F}\\p{ea=W}\\p{ea=H}]]'),
                     Formula(contents='[CP-[\\p{ea=F}\\p{ea=W}\\p{ea=H}]] × (AL | HL | NU)'),
                     Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                     Paragraph(contents='The excluded set ([\\p{ea=F}\\p{ea=W}\\p{ea=H}]) refines the behavior of this rule, to enable a break before an East Asian OP or after an East Asian CP. Those cases are identified by excluding East_Asian_Width values of Fullwidth, Wide, or Halfwidth. This is illustrated by the following example, which shows East Asian corner brackets immediately following a Latin letter in Japanese text. In such a case, the preferred line break is between the Latin letter and the opening angle bracket.'),
                     TableRow(contents='Preferred\ue000Bad Break'),
                     TableRow(contents='日中韓統合漢字拡張G 「ユニコード」\ue000日中韓統合漢字拡張 G「ユニコード」'),
                     Rule(contents='LB30a Break between two regional indicator symbols if and only if there are an even number of regional indicators preceding the position of the break.'),
                     Formula(contents='sot (RI RI)* RI × RI'),
                     Formula(contents='[^RI] (RI RI)* RI × RI'),
                     Rule(contents='LB30b Do not break between an emoji base (or potential emoji) and an emoji modifier.'),
                     Formula(contents='EB × EM'),
                     Formula(contents='[\\p{Extended_Pictographic}&\\p{Cn}] × EM'),
                     Rule(contents='LB31 Break everywhere else.'),
                     Formula(contents='ALL ÷'),
                     Formula(contents='÷ ALL'),
                     Heading(level=2, contents='7 Deleted'),
                     Paragraph(contents='Formerly was: Pair Table-Based Implementation.'),
                     Heading(level=2, contents='8 Customization'),
                     Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                     Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                     Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                     Paragraph(contents='Notes:'),
                     Paragraph(contents='• Locale-sensitive line break specifications can be expressed in LDML [UTS35]. Tailorings are available in the Common Locale Data Repository [CLDR].'),
                     Paragraph(contents='• Some changes to rules and data are needed for the best segmentation behavior of emoji zwj sequences [UTS51]. Implementations are strongly encouraged to use the line break rules in the latest version of CLDR (Version 35 or later) [CLDR] and the latest emoji properties (Version 12.0 or later) [UTS51].'),
                     Paragraph(contents='The remainder of this section gives an overview of common types of tailorings.'),
                     Heading(level=3, contents='8.1 Types of Tailoring'),
                     Paragraph(contents='There are two principal ways of tailoring the line breaking algorithm:'),
                     Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                     Paragraph(contents='2. Changing the line breaking rules Adding new rules, or altering or removing existing rules, provides more flexibility in changing the line breaking behavior. This can also include introducing new character classes for use by the new or altered rules.'),
                     Paragraph(contents='Beyond these three straightforward customization steps, it is always possible to augment the algorithm itself—for example, by providing specialized rules to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that characters with normative line breaking properties be correctly implemented.'),
                     Heading(level=3, contents='8.2 Examples of Customization'),
                     Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm.'),
                     Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the line breaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                     Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification.'),
                     Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. This can be implemented by adjusting rules LB23, LB25 and LB28 to allow breaks between all permutations of the character classes AL and NU.'),
                     Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by mapping class CJ to be handled as class ID in rule LB1.'),
                     Paragraph(contents='Example 6. Tailor to prevent line breaks from falling within default grapheme clusters, as defined by Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. The tailoring can be accomplished by first segmenting the text into grapheme clusters according to the rules defined in UAX #29, and then finding line breaks according to the default line break rules, giving each grapheme cluster the line breaking class of its first code point.'),
                     Paragraph(contents='An example of a grapheme cluster that would be split by the default line break rules is a Zero Width Space followed by a combining mark.'),
                     Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * ( CL | CP ) ? ( PR | PO) ?'),
                     Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                     Paragraph(contents='Regex-Number: Do not break numbers.'),
                     Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                     Formula(contents='( OP | HY ) × NU'),
                     Formula(contents='NU × (NU | SY | IS)'),
                     Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL | CP )'),
                     Formula(contents='NU (NU | SY | IS)* (CL | CP)? × (PO | PR)'),
                     Paragraph(contents='In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                     Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                     Formula(contents='[^NU] × CL'),
                     Formula(contents='[^NU] × CP'),
                     Formula(contents='× EX'),
                     Formula(contents='[^NU] × IS'),
                     Formula(contents='[^NU] × SY'),
                     Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                     Paragraph(contents='Example 8. For some implementations it may be difficult to implement LB9 due to the added complexity of its indefinite length context. Because combining marks are most commonly applied to characters of class AL, rule LB10 by itself generally produces acceptable results for such implementations, but such an approximation is not a conformant tailoring.'),
                     Heading(level=2, contents='9 Implementation Notes'),
                     Paragraph(contents='This section provides additional notes on implementation issues.'),
                     Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                     Paragraph(contents='To replace rule LB9, terms of the form'),
                     Paragraph(contents='B # A'),
                     Paragraph(contents='B SP* # A'),
                     Paragraph(contents='B #'),
                     Paragraph(contents='B SP* #'),
                     Paragraph(contents='are replaced by terms of the form'),
                     Paragraph(contents='B CM* # A'),
                     Paragraph(contents='B CM* SP* # A'),
                     Paragraph(contents='B CM* #'),
                     Paragraph(contents='B CM* SP* #'),
                     Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                     Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                     Paragraph(contents='Replace LB10 by the following rule:'),
                     Paragraph(contents='× CM'),
                     Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                     Paragraph(contents='(AL | NU) × OP'),
                     Paragraph(contents='add another rule'),
                     Paragraph(contents='CM × OP.'),
                     Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                     Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='As stated in Section 7.9, Combining Marks of [Unicode], combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                     Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                     Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                     Formula(contents='Treat SP CM* as if it were ID.'),
                     Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                     Heading(level=2, contents='10 Testing'),
                     Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2, Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                     Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                     Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                     Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                     Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                     Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                     Paragraph(contents='1. The rules are cast into a more regex-style.'),
                     Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                     Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                     Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                     Paragraph(contents='• 13.01) [^NU] × CL'),
                     Paragraph(contents='• 13.02) × EX'),
                     Paragraph(contents='• ...'),
                     Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                     Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                     Paragraph(contents='Table 4. Numbering of Test Rules'),
                     TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                     TableRow(contents='LB2\ue0000.2\ue000start of text'),
                     TableRow(contents='LB3\ue0000.3\ue000end of text'),
                     TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                     TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                     TableRow(contents='LB31\ue000999\ue000÷ any'),
                     Heading(level=2, contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                     Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                     TableRow(contents='9.0.0\ue0008.0.0\ue0006.2.0\ue0006.1.0\ue0005.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                     TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                     TableRow(contents='LB2\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                     TableRow(contents='LB3\ue0003\ue0003\ue0003\ue0003\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                     TableRow(contents='LB4\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB5\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB6\ue0006\ue0006\ue0006\ue0006\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                     TableRow(contents='LB7\ue0007\ue0007\ue0007\ue0007\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                     TableRow(contents='LB8\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                     TableRow(contents='LB8a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                     TableRow(contents='LB9\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB10\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                     TableRow(contents='LB11\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12a\ue00012a\ue00012a\ue00012a\ue00012a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB13\ue00013\ue00013\ue00013\ue00013\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                     TableRow(contents='LB14\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                     TableRow(contents='LB15\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                     TableRow(contents='LB16\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                     TableRow(contents='LB17\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                     TableRow(contents='LB18\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                     TableRow(contents='LB19\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                     TableRow(contents='LB20\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                     TableRow(contents='LB21\ue00021\ue00021\ue00021\ue00021\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                     TableRow(contents='LB21a\ue00021a\ue00021a\ue00021a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB21b\ue00021b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB22\ue00022\ue00022\ue00022\ue00022\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                     TableRow(contents='LB23\ue00023\ue00023\ue00023\ue00023\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                     TableRow(contents='LB23a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB24\ue00024\ue00024\ue00024\ue00024\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='LB25\ue00025\ue00025\ue00025\ue00025\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                     TableRow(contents='LB26\ue00026\ue00026\ue00026\ue00026\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB27\ue00027\ue00027\ue00027\ue00027\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB28\ue00028\ue00028\ue00028\ue00028\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                     TableRow(contents='LB29\ue00029\ue00029\ue00029\ue00029\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30\ue00030\ue00030\ue00030\ue00030\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30a\ue00030a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB31\ue00031\ue00031\ue00031\ue00031\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                     Heading(level=2, contents='References'),
                     Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                     Heading(level=2, contents='Acknowledgments'),
                     Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintained the text from 2008 through 2019.'),
                     Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Many others provided additional review of the rules and property assignments.'),
                     Heading(level=2, contents='Modifications'),
                     Paragraph(contents='The following summarizes modifications from the previous revision of this annex.'),
                     Heading(level=4, contents='Revision 49:'),
                     Paragraph(contents='• Reissued for Unicode 15.0.'),
                     Paragraph(contents='• Corrected code point and name for U+26A0 WARNING SIGN in Section 5.1 (Combining Marks)'),
                     Paragraph(contents='• Corrected two instances of doubled words in Section 8'),
                     Paragraph(contents='• Removed reference to ”German” in example for Section 5.4'),
                     Paragraph(contents='• Updated copyright date to 2022'),
                     Paragraph(contents='• Removed note about special behavior of U+23B6 from Section 5.1 (Quotation)'),
                     Paragraph(contents='Modifications for previous versions are listed in those respective versions.'),
                     Paragraph(contents='© 2022 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                     Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')],
 Version(15, 1, 0): [Heading(level=2, contents='Unicode® Standard Annex #14'),
                     Heading(level=1, contents='Unicode Line Breaking Algorithm'),
                     TableRow(contents='Version\ue000Unicode 15.1.0'),
                     TableRow(contents='Editors\ue000Robin Leroy (eggrobin@unicode.org)'),
                     TableRow(contents='Date\ue0002023-08-15'),
                     TableRow(contents='This Version\ue000https://www.unicode.org/reports/tr14/tr14-51.html'),
                     TableRow(contents='Previous Version\ue000https://www.unicode.org/reports/tr14/tr14-49.html'),
                     TableRow(contents='Latest Version\ue000https://www.unicode.org/reports/tr14/'),
                     TableRow(contents='Latest Proposed Update\ue000https://www.unicode.org/reports/tr14/proposed.html'),
                     TableRow(contents='Revision\ue00051'),
                     Heading(level=4, contents='Summary'),
                     Paragraph(contents='This annex presents the Unicode line breaking algorithm along with detailed descriptions of each of the character classes established by the Unicode line breaking property. The line breaking algorithm produces a set of "break opportunities", or positions that would be suitable for wrapping lines when preparing text for display.'),
                     Heading(level=4, contents='Status'),
                     Paragraph(contents='This document has been reviewed by Unicode members and other interested parties, and has been approved for publication by the Unicode Consortium. This is a stable document and may be used as reference material or cited as a normative reference by other specifications.'),
                     Paragraph(contents='A Unicode Standard Annex (UAX) forms an integral part of the Unicode Standard, but is published online as a separate document. The Unicode Standard may require conformance to normative content in a Unicode Standard Annex, if so specified in the Conformance chapter of that version of the Unicode Standard. The version number of a UAX document corresponds to the version of the Unicode Standard of which it forms a part.'),
                     Paragraph(contents='Please submit corrigenda and other comments with the online reporting form [Feedback]. Related information that is useful in understanding this annex is found in Unicode Standard Annex #41, “Common References for Unicode Standard Annexes.” For the latest version of the Unicode Standard, see [Unicode]. For a list of current Unicode Technical Reports, see [Reports]. For more information about versions of the Unicode Standard, see [Versions]. For any errata which may apply to this annex, see [Errata].'),
                     Heading(level=4, contents='Contents'),
                     Paragraph(contents='1 Overview and Scope'),
                     Paragraph(contents='2 Definitions'),
                     Paragraph(contents='3 Introduction'),
                     Paragraph(contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='4 Conformance'),
                     Paragraph(contents='4.1 Conformance Requirements'),
                     Paragraph(contents='5 Line Breaking Properties'),
                     Paragraph(contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='5.2 Dictionary Usage'),
                     Paragraph(contents='5.3 Use of Hyphen'),
                     Paragraph(contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='5.7 Word Separator Characters'),
                     Paragraph(contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='7 Deleted. (Formerly was: Pair Table-Based Implementation)'),
                     Paragraph(contents='8 Customization'),
                     Paragraph(contents='8.1 Types of Tailoring'),
                     Paragraph(contents='8.2 Examples of Customization'),
                     Paragraph(contents='9 Implementation Notes'),
                     Paragraph(contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='10 Testing'),
                     Paragraph(contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='References'),
                     Paragraph(contents='Acknowledgments'),
                     Paragraph(contents='Modifications'),
                     Heading(level=2, contents='1 Overview and Scope'),
                     Paragraph(contents='Line breaking, also known as word wrapping, is the process of breaking a section of text into lines such that it will fit in the available width of a page, window or other display area. The Unicode Line Breaking Algorithm performs part of this process. Given an input text, it produces a set of positions called "break opportunities" that are appropriate points to begin a new line. The selection of actual line break positions from the set of break opportunities is not covered by the Unicode Line Breaking Algorithm, but is in the domain of higher level software with knowledge of the available width and the display size of the text.'),
                     Paragraph(contents='The text of the Unicode Standard [Unicode] presents a limited description of some of the characters with specific functions in line breaking, but does not give a complete specification of line breaking behavior. This annex provides more detailed information about default line breaking behavior, reflecting best practices for the support of multilingual texts.'),
                     Paragraph(contents='For most Unicode characters, considerable variation in line breaking behavior can be expected, including variation based on local or stylistic preferences. For that reason, the line breaking properties provided for these characters are informative. Some characters are intended to explicitly influence line breaking. Their line breaking behavior is therefore expected to be identical across all implementations. As described in this annex, the Unicode Standard assigns normative line breaking properties to those characters. The Unicode Line Breaking Algorithm is a tailorable set of rules that uses these line breaking properties in context to determine line break opportunities.'),
                     Paragraph(contents='This annex opens with formal definitions, a summary of the line breaking task and the context in which it occurs in overall text layout, followed by a brief section on conformance requirements. Two main sections follow:'),
                     Paragraph(contents='• Section 5, Line Breaking Properties, contains a narrative description of the line breaking behavior of the characters in the Unicode Standard, grouping them in alphabetical order by line breaking class.'),
                     Paragraph(contents='• Section 6, Line Breaking Algorithm, provides a set of rules listed in order of precedence that constitute a line breaking algorithm.'),
                     Paragraph(contents='The next sections discuss issues of customization and implementation.'),
                     Paragraph(contents='• Section 8, Customization, provides a discussion of how to tailor the algorithm.'),
                     Paragraph(contents='• Section 9, Implementation Notes, provides additional information to implementers using regular expression-based techniques or requiring legacy support for combining marks.'),
                     Paragraph(contents='• Section 10, Testing, describes the test data file that is available for checking implementations of the line breaking algorithm.'),
                     Paragraph(contents='• Section 11, Rule Numbering Across Versions, documents changes in the numbering of the line breaking rules across Unicode versions.'),
                     Heading(level=2, contents='2 Definitions'),
                     Paragraph(contents='The notation defined in this annex differs somewhat from the notation defined elsewhere in the Unicode Standard.'),
                     Paragraph(contents='All other notation used here without an explicit definition shall be as defined elsewhere in the Unicode Standard [Unicode].'),
                     Paragraph(contents='LD1. Line Fitting: The process of determining how much text will fit on a line of text, given the available space between the margins and the actual display width of the text.'),
                     Paragraph(contents='LD2. Line Break: The position in the text where one line ends and the next one starts.'),
                     Paragraph(contents='LD3. Line Break Opportunity: A place where a line is allowed to end.'),
                     Paragraph(contents='• Whether a given position in the text is a valid line break opportunity depends on the context as well as the line breaking rules in force.'),
                     Paragraph(contents='LD4. Line Breaking: The process of selecting one among several line break opportunities such that the resulting line is optimal or ends at a user-requested explicit line break.'),
                     Paragraph(contents='LD5. Line Breaking Property: A character property with enumerated values, as listed in Table 1, and separated into normative and informative values.'),
                     Paragraph(contents='• Line breaking property values are used to classify characters and, taken in context, determine the type of line break opportunity.'),
                     Paragraph(contents='LD6. Line Breaking Class: A class of characters with the same line breaking property value.'),
                     Paragraph(contents='• The line breaking classes are described in Section 5.1, Description of Line Breaking Properties.'),
                     Paragraph(contents='LD7. Mandatory Break: A line must break following a character that has the mandatory break property.'),
                     Paragraph(contents='• Such a break is also known as a forced break and is indicated in the rules as B !, where B is the character with the mandatory break property.'),
                     Paragraph(contents='LD8. Direct Break: A line break opportunity exists between two adjacent characters of the given line breaking classes.'),
                     Paragraph(contents='• A direct break is indicated in the rules below as B ÷ A, where B is the character class of the character before and A is the character class of the character after the break. If they are separated by one or more space characters, a break opportunity exists instead after the last space.'),
                     Paragraph(contents='LD9. Indirect Break: A line break opportunity exists between two characters of the given line breaking classes only if they are separated by one or more spaces.'),
                     Paragraph(contents='• For an indirect break, a break opportunity exists after the last space. No break opportunity exists if the characters are immediately adjacent.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, an indirect break is represented as two rules: B × A and B SP+ ÷ A where the “+” sign means one or more occurrences.'),
                     Paragraph(contents='LD10. Prohibited Break: No line break opportunity exists between two characters of the given line breaking classes, even if they are separated by one or more space characters.'),
                     Paragraph(contents='• In the notation of the rules in Section 6, Line Breaking Algorithm, a prohibited break is expressed as a rule of the form: B SP* × A.'),
                     Paragraph(contents='LD11. Hyphenation: Hyphenation uses language-specific rules to provide additional line break opportunities within a word.'),
                     Paragraph(contents='• Hyphenation improves the layout of narrow columns, especially for languages with many longer words, such as German or Finnish. For the purpose of this annex, it is assumed that hyphenation is equivalent to inserting soft hyphen characters. All other aspects of hyphenation are outside the scope of this annex.'),
                     Paragraph(contents='Table 1 lists all of line breaking classes by name, also giving their class abbreviation and their status as tailorable or not. The examples and brief indication of line breaking behavior in this table are merely typical, not exhaustive. Section 5.1, Description of Line Breaking Properties, provides a detailed description of each line breaking class, including detailed overview of the line breaking behavior for characters of that class.'),
                     Paragraph(contents='Table 1. Line Breaking Classes'),
                     TableRow(contents='Class\ue000Descriptive Name\ue000Examples\ue000Behavior'),
                     TableRow(contents='Non-tailorable Line Breaking Classes'),
                     TableRow(contents='BK\ue000Mandatory Break\ue000NL, PARAGRAPH SEPARATOR\ue000Cause a line break (after)'),
                     TableRow(contents='CR\ue000Carriage Return\ue000CR\ue000Cause a line break (after), except between CR and LF'),
                     TableRow(contents='LF\ue000Line Feed\ue000LF\ue000Cause a line break (after)'),
                     TableRow(contents='CM\ue000Combining Mark\ue000Combining marks, control codes\ue000Prohibit a line break between the character and the preceding character'),
                     TableRow(contents='NL\ue000Next Line\ue000NEL\ue000Cause a line break (after)'),
                     TableRow(contents='SG\ue000Surrogate\ue000Surrogates\ue000Do not occur in well-formed text'),
                     TableRow(contents='WJ\ue000Word Joiner\ue000WJ\ue000Prohibit line breaks before and after'),
                     TableRow(contents='ZW\ue000Zero Width Space\ue000ZWSP\ue000Provide a break opportunity'),
                     TableRow(contents='GL\ue000Non-breaking (“Glue”)\ue000CGJ, NBSP, ZWNBSP\ue000Prohibit line breaks before and after'),
                     TableRow(contents='SP\ue000Space\ue000SPACE\ue000Enable indirect line breaks'),
                     TableRow(contents='ZWJ\ue000Zero Width Joiner\ue000Zero Width Joiner\ue000Prohibit line breaks within joiner sequences'),
                     TableRow(contents='Break Opportunities'),
                     TableRow(contents='B2\ue000Break Opportunity Before and After\ue000Em dash\ue000Provide a line break opportunity before and after the character'),
                     TableRow(contents='BA\ue000Break After\ue000Spaces, hyphens\ue000Generally provide a line break opportunity after the character'),
                     TableRow(contents='BB\ue000Break Before\ue000Punctuation used in dictionaries\ue000Generally provide a line break opportunity before the character'),
                     TableRow(contents='HY\ue000Hyphen\ue000HYPHEN-MINUS\ue000Provide a line break opportunity after the character, except in numeric context'),
                     TableRow(contents='CB\ue000Contingent Break Opportunity\ue000Inline objects\ue000Provide a line break opportunity contingent on additional information'),
                     TableRow(contents='Characters Prohibiting Certain Breaks'),
                     TableRow(contents='CL\ue000Close Punctuation\ue000“}”, “❳”, “⟫” etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='CP\ue000Close Parenthesis\ue000“)”, “]”\ue000Prohibit line breaks before'),
                     TableRow(contents='EX\ue000Exclamation/ Interrogation\ue000“!”, “?”, etc.\ue000Prohibit line breaks before'),
                     TableRow(contents='IN\ue000Inseparable\ue000Leaders\ue000Allow only indirect line breaks between pairs'),
                     TableRow(contents='NS\ue000Nonstarter\ue000“‼”, “‽”, “⁇”, “⁉”, etc.\ue000Allow only indirect line breaks before'),
                     TableRow(contents='OP\ue000Open Punctuation\ue000“(“, “[“, “{“, etc.\ue000Prohibit line breaks after'),
                     TableRow(contents='QU\ue000Quotation\ue000Quotation marks\ue000Act like they are both opening and closing'),
                     TableRow(contents='Numeric Context'),
                     TableRow(contents='IS\ue000Infix Numeric Separator\ue000. ,\ue000Prevent breaks after any and before numeric'),
                     TableRow(contents='NU\ue000Numeric\ue000Digits\ue000Form numeric expressions for line breaking purposes'),
                     TableRow(contents='PO\ue000Postfix Numeric\ue000%, ¢\ue000Do not break following a numeric expression'),
                     TableRow(contents='PR\ue000Prefix Numeric\ue000$, £, ¥, etc.\ue000Do not break in front of a numeric expression'),
                     TableRow(contents='SY\ue000Symbols Allowing Break After\ue000/\ue000Prevent a break before, and allow a break after'),
                     TableRow(contents='Other Characters'),
                     TableRow(contents='AI\ue000Ambiguous (Alphabetic or Ideographic)\ue000Characters with Ambiguous East Asian Width\ue000Act like AL when the resolved EAW is N; otherwise, act as ID'),
                     TableRow(contents='AK\ue000Aksara\ue000Consonants\ue000Form orthographic syllables in Brahmic scripts'),
                     TableRow(contents='AL\ue000Alphabetic\ue000Alphabets and regular symbols\ue000Are alphabetic characters or symbols that are used with alphabetic characters'),
                     TableRow(contents='AP\ue000Aksara Pre-Base\ue000Pre-base repha\ue000Form orthographic syllables in Brahmic scripts'),
                     TableRow(contents='AS\ue000Aksara Start\ue000Independent vowels\ue000Form orthographic syllables in Brahmic scripts'),
                     TableRow(contents='CJ\ue000Conditional Japanese Starter\ue000Small kana\ue000Treat as NS or ID for strict or normal breaking.'),
                     TableRow(contents='EB\ue000Emoji Base\ue000All emoji allowing modifiers\ue000Do not break from following Emoji Modifier'),
                     TableRow(contents='EM\ue000Emoji Modifier\ue000Skin tone modifiers\ue000Do not break from preceding Emoji Base'),
                     TableRow(contents='H2\ue000Hangul LV Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='H3\ue000Hangul LVT Syllable\ue000Hangul\ue000Form Korean syllable blocks'),
                     TableRow(contents='HL\ue000Hebrew Letter\ue000Hebrew\ue000Do not break around a following hyphen; otherwise act as Alphabetic'),
                     TableRow(contents='ID\ue000Ideographic\ue000Ideographs\ue000Break before or after, except in some numeric context'),
                     TableRow(contents='JL\ue000Hangul L Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JV\ue000Hangul V Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='JT\ue000Hangul T Jamo\ue000Conjoining jamo\ue000Form Korean syllable blocks'),
                     TableRow(contents='RI\ue000Regional Indicator\ue000REGIONAL INDICATOR SYMBOL LETTER A .. Z\ue000Keep pairs together. For pairs, break before and after other classes'),
                     TableRow(contents='SA\ue000Complex Context Dependent (South East Asian)\ue000South East Asian: Thai, Lao, Khmer\ue000Provide a line break opportunity contingent on additional, language-specific context analysis'),
                     TableRow(contents='VF\ue000Virama Final\ue000Viramas for final consonants\ue000Form orthographic syllables in Brahmic scripts'),
                     TableRow(contents='VI\ue000Virama\ue000Conjoining viramas\ue000Form orthographic syllables in Brahmic scripts'),
                     TableRow(contents='XX\ue000Unknown\ue000Most unassigned, private-use\ue000Have as yet unknown line breaking behavior or unassigned code positions'),
                     Heading(level=2, contents='3 Introduction'),
                     Paragraph(contents='Lines are broken as the result of two conditions. The first is the presence of a mandatory line breaking character. The second condition results from a formatting algorithm having selected among available line break opportunities; ideally the chosen line break results in the optimal layout of the text.'),
                     Paragraph(contents='Different formatting algorithms may use different methods to determine an optimal line break. For example, simple implementations consider a single line at a time, trying to find a locally optimal line break. A basic, yet widely used approach is to allow no compression or expansion of the intercharacter and interword spaces and consider the longest line that fits. More complex formatting algorithms often take into account the interaction of line breaking decisions for the whole paragraph. The well-known text layout system [TEX] implements an example of such a globally optimal strategy that may make complex tradeoffs across an entire paragraph to avoid unnecessary hyphenation and other legal, but inferior breaks. For a description of this strategy, see [Knuth78].'),
                     Paragraph(contents='When compression or expansion is allowed, a locally optimal line break seeks to balance the relative merits of the resulting amounts of compression and expansion for different line break candidates. When expanding or compressing interword space according to common typographical practice, only the spaces marked by U+0020 SPACE and U+00A0 NO-BREAK SPACE are subject to compression, and only spaces marked by U+0020 SPACE, U+00A0 NO-BREAK SPACE, and occasionally spaces marked by U+2009 THIN SPACE are subject to expansion. All other space characters normally have fixed width. When expanding or compressing intercharacter space, the presence of U+200B ZERO WIDTH SPACE or U+2060 WORD JOINER is always ignored.'),
                     Paragraph(contents='Local custom or document style determines whether and to what degree expansion of intercharacter space is allowed in justifying a line. In languages, such as German, where intercharacter space is commonly used to mark e m p h a s i s (like this), allowing variable intercharacter spacing would have the unintended effect of adding random emphasis, and is therefore best avoided. In table headings that use Han ideographs, even extreme amounts of intercharacter space commonly occur as short texts are spread out across the entire available space to distribute the characters evenly from end to end.'),
                     Paragraph(contents='In line breaking it is necessary to distinguish between three related tasks. The first is the determination of all legal line break opportunities, given a string of text. This is the scope of the Unicode Line Breaking Algorithm. The second task is the selection of the actual location for breaking a given line of text. This selection not only takes into account the width of the line compared to the width of the text, but may also apply an additional prioritization of line breaks based on aesthetic and other criteria. What defines an optimal choice for a given line break is outside the scope of this annex, as are methods for its selection. The third is the possible justification of lines, once actual locations for line breaking have been determined, and is also out of scope for the Unicode Line Breaking Algorithm.'),
                     Paragraph(contents='Finally, text layout systems may support an emergency mode that handles the case of an unusual line that contains no otherwise permitted line break opportunities. In such line layout emergencies, line breaks may be placed with no regard to the ordinary line breaking behavior of the characters involved. The details of such an emergency mode are outside the scope of this annex, however, it is recommended that grapheme clusters be kept together.'),
                     Heading(level=3, contents='3.1 Determining Line Break Opportunities'),
                     Paragraph(contents='Four principal styles of context analysis determine line break opportunities.'),
                     Paragraph(contents='1. Western: spaces and hyphens are used to determine breaks'),
                     Paragraph(contents='2. East Asian: lines can break anywhere, unless prohibited'),
                     Paragraph(contents='3. South East Asian: line breaks require morphological analysis'),
                     Paragraph(contents='4. Brahmic: line breaks can occur at the boundaries of any orthographic syllable'),
                     Paragraph(contents='The Western style is commonly used for scripts employing the space character. Hyphenation is often used with space-based line breaking to provide additional line break opportunities—however, it requires knowledge of the language and it may need user interaction or overrides.'),
                     Paragraph(contents='The second style of context analysis is used with East Asian ideographic and syllabic scripts. In these scripts, lines can break anywhere, except before or after certain characters. The precise set of prohibited line breaks may depend on user preference or local custom and is commonly tailorable.'),
                     Paragraph(contents='Korean makes use of both styles of line break. When Korean text is justified, the second style is commonly used, even for interspersed Latin letters. But when ragged margins are used, the Western style (relying on spaces) is commonly used instead, even for ideographs.'),
                     Paragraph(contents='The third style is used for scripts such as Thai, which allow line breaks only at word boundaries, but do not mark word boundaries in any way, so that the determination of line break opportunities requires language dependent text analysis. Algorithms and data for such analysis are beyond the scope of the Unicode Standard.'),
                     Paragraph(contents='The fourth style is used in some Brahmic scripts, such as Brahmi, Balinese, or Javanese, which allow line breaks to occur at the boundaries of any orthographic syllable, without restricting them to word boundaries. This style is only supported for scripts that encode orthographic syllables in primarily phonetic order.'),
                     Paragraph(contents='For multilingual text, the Western, East Asian, and Brahmic styles can be unified into a single set of specifications, based on the information in this annex. Unicode characters have explicit line breaking properties assigned to them. These properties can be utilized to implement the effect of both of these two styles of context analysis for line break opportunities. Customization for user preferences or document style can then be achieved by tailoring that specification.'),
                     Paragraph(contents='In bidirectional text, line breaks are determined before applying rule L1 of the Unicode Bidirectional Algorithm [UAX9]. However, line breaking is strictly independent of directional properties of the characters or of any auxiliary information determined by the application of rules of that algorithm.'),
                     Heading(level=2, contents='4 Conformance'),
                     Paragraph(contents='There is no single method for determining line breaks; the rules may differ based on user preference and document layout. The information in this annex, including the specification of the line breaking algorithm, allows for the necessary flexibility in determining line breaks according to different conventions. However, some characters have been encoded explicitly for their effect on line breaking. Because users adding such characters to a text expect that they will have the desired effect, these characters have been given required line breaking behavior.'),
                     Paragraph(contents='To handle certain situations, some line breaking implementations use techniques that cannot be expressed within the framework of the Unicode Line Breaking Algorithm. Examples include using dictionaries of words for languages that do not use spaces, such as Thai; recognition of the language of the text in order to choose among different punctuation conventions; using dictionaries of common abbreviations or contractions to resolve ambiguities with periods or apostrophes; or a deeper analysis of common syntaxes for numbers or dates, and so on. The conformance requirements permit variations of this kind.'),
                     Paragraph(contents='Processes which support multiple modes for determining line breaks are also accommodated. This situation can arise with marked-up text, rich text, style sheets, or other environments in which a higher-level protocol can carry formatting instructions that prevent or force line breaks in positions that differ from those specified by the Unicode Line Breaking Algorithm. The approach taken here requires that such processes have a conforming default line break behavior, and to disclose that they also include overrides or optional behaviors that are invoked via a higher-level protocol.'),
                     Paragraph(contents='The methods by which a line layout process chooses optimal line breaks from among the available break opportunities is outside the scope of this specification. The behavior of a line layout process in situations where there are no suitable break opportunities is also outside of the scope of this specification.'),
                     Paragraph(contents='Note: Locale-sensitive line break specifications can be expressed in LDML [UTS35]. Tailorings are available in the Common Locale Data Repository [CLDR].'),
                     Heading(level=3, contents='4.1 Conformance Requirements'),
                     Paragraph(contents='UAX14-C1. A process that determines line breaks in Unicode text, and that purports to implement the Unicode Line Breaking Algorithm, shall do so in accordance with the specifications in this annex. In particular, the following three subconditions shall be met:'),
                     Paragraph(contents='1. The sets of mandatory break positions and of break opportunities which the implementation produces include all of those specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='2. There exist no break opportunities or mandatory breaks produced by the implementation that fall on a "non-break" position specified by the rules in Section 6.1, Non-tailorable Line Breaking Rules.'),
                     Paragraph(contents='3. If the implementation tailors the behavior of Section 6.2, Tailorable Line Breaking Rules, that fact must be disclosed.'),
                     Paragraph(contents='UAX14-C2. If an implementation has a default line breaking operation which conforms to UAX14-C1, but also has overrides based on a higher-level protocol, that fact must be disclosed and any behavior that differs from that specified by the rules of Section 6.1, Non-tailorable Line Breaking Rules, must be documented.'),
                     Paragraph(contents='Example: An XML format provides markup which disables all line breaking over some span of text. When the markup is not in place, the default behavior is in conformance according to UAX14-C1. As long as the existence of the option is disclosed, that format can be said to conform to the Unicode Line Breaking Algorithm according to UAX14-C2.'),
                     Paragraph(contents='As is the case for all other Unicode algorithms, this specification is a logical description—particular implementations can have more efficient mechanisms as long as they produce the same results. See C18 in Chapter 3, Conformance, of [Unicode]. While only disclosure of tailorings is required in the conformance clauses, documentation of the differences in behaviors is strongly encouraged.'),
                     Heading(level=2, contents='5 Line Breaking Properties'),
                     Paragraph(contents='This section provides detailed narrative descriptions of the line breaking behavior of many Unicode characters. Many descriptions in this section provide additional informative detail about handling a given character at the end of a line, or during line layout, which goes beyond the simple determination of line breaks. In some cases, the text also gives guidance as to preferred characters for achieving a particular effect in line breaking.'),
                     Paragraph(contents='This section also summarizes the membership of character classes corresponding to each value of the line breaking property. Note that the mnemonic names for the line break classes are intended neither as exhaustive descriptions of their membership nor as indicators of their entire range of behaviors in the line breaking process. Instead, their main purpose is to serve as unique, yet broadly mnemonic labels. In other words, as long as their line breaking behavior is identical, otherwise unrelated characters will be grouped together in the same line break class.'),
                     Paragraph(contents='The classification by property values defined in this section and in the data file is used as input into the algorithm defined in Section 6, Line Breaking Algorithm. That section describes a workable default line breaking method. Section 8, Customization, discusses how the default line breaking behavior can be tailored to the needs of specific languages or for particular document styles and user preferences. Permitted customizations can include changing the classification of characters for certain classes.'),
                     Paragraph(contents='In addition to the line breaking properties defined in this section, the algorithm defined in Section 6, Line Breaking Algorithm also makes use of East_Asian_Width property values, defined in Unicode Standard Annex #11, East Asian Width [UAX11]. Note that for purposes of the line breaking algorithm, those East_Asian_Width property values are tailorable, as are the rules of the line breaking algorithm which use them. (See rule LB30.)'),
                     Heading(level=4, contents='Data File'),
                     Paragraph(contents='The full classification of all Unicode characters by their line breaking properties is available in the file LineBreak.txt [Data14] in the Unicode Character Database [UCD]. This is a semicolon-delimited, two-column, plain text file, with code position and line breaking class. A comment at the end of each line indicates the character name.'),
                     Paragraph(contents='The line break property assignments from the data file are normative. The descriptions of the line break classes in this UAX include examples of representative or interesting characters for each class, but for the complete list always refer to the data file.'),
                     Heading(level=4, contents='Future Updates'),
                     Paragraph(contents='As scripts are added to the Unicode Standard and become more widely implemented, line breaking classes may be added or the assignment of line breaking class may be changed for some characters. Implementers must not make any assumptions to the contrary. Any future updates will be reflected in the latest version of the data file. (See the Unicode Character Database [UCD] for any specific version of the data file.)'),
                     Heading(level=3, contents='5.1 Description of Line Breaking Properties'),
                     Paragraph(contents='Line breaking classes are listed alphabetically. Each line breaking class is marked with an annotation in parentheses with the following meanings:'),
                     TableRow(contents='Label\ue000Meaning for the Class'),
                     TableRow(contents='(A)\ue000It allows a break opportunity after in specified contexts.'),
                     TableRow(contents='(XA)\ue000It prevents a break opportunity after in specified contexts.'),
                     TableRow(contents='(B)\ue000It allows a break opportunity before in specified contexts.'),
                     TableRow(contents='(XB)\ue000It prevents a break opportunity before in specified contexts.'),
                     TableRow(contents='(P)\ue000It allows a break opportunity for a pair of same characters.'),
                     TableRow(contents='(XP)\ue000It prevents a break opportunity for a pair of same characters.'),
                     Paragraph(contents='Note: The use of the letters B and A in these annotations marks the position of the break opportunity relative to the character. It is not to be confused with the use of the same letters in the other parts of this annex, where they indicate the positions of the characters relative to the break opportunity.'),
                     Heading(level=3, contents='AI: Ambiguous (Alphabetic or Ideograph)'),
                     Paragraph(contents='Some characters that ordinarily act like alphabetic characters are treated like ideographs (line breaking class ID) in certain East Asian legacy contexts. Their line breaking behavior therefore depends on the context. In the absence of appropriate context information, they are treated as class AL; see the note at the end of this description.'),
                     Paragraph(contents='As originally defined, the line break class AI contained all characters with East_Asian_Width value A (ambiguous width) that would otherwise be AL in this classification. For more information on East_Asian_Width and how to resolve it, see Unicode Standard Annex #11, East Asian Width [UAX11].'),
                     Paragraph(contents='The original definition included many Latin, Greek, and Cyrillic characters. These characters are now classified by default as AL because use of the AL line breaking class better corresponds to modern practice. Where strict compatibility with older legacy implementations is desired, some of these characters need to be treated as ID in certain contexts. This can be done by always tailoring them to ID or by continuing to classify them as AI and resolving them to ID where required.'),
                     Paragraph(contents='As part of the same revision, the set of ambiguous characters has been extended to completely encompass the enclosed alphanumeric characters used for numbering of bullets.'),
                     Paragraph(contents='As updated, the AI line breaking class includes all characters with East Asian Width A that are outside the range U+0000..U+1FFF, plus the following characters:'),
                     TableRow(contents='24EA\ue000CIRCLED DIGIT ZERO'),
                     TableRow(contents='2780..2793\ue000DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN'),
                     Paragraph(contents='Characters with the line break class AI with East_Asian_Width value A typically take the AL line breaking class when their resolved East_Asian_Width is N (narrow) and take the line breaking class ID when their resolved width is W (wide). The remaining characters are then resolved to AL or ID in a consistent fashion. The details of this resolution are not specified in this annex. The line breaking rules in Section 6, Line Breaking Algorithm merely require that all ambiguous characters be resolved appropriately as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Note: The canonical decompositions of characters of class AI are not necessarily of class AI themselves. The East_Asian_Width property A on which the definition of AI is largely based, does not preserve canonical equivalence. In the context of line breaking, the fact that a character has been assigned class AI means that the line break implementation must resolve it to either AL or ID, in the absence of further tailoring. If preserving canonical equivalence is desired, an implementation is free to make sure that the resolved line break classes preserve canonical equivalence. Unless compatibility with particular legacy behavior is important, it may be sufficient to map all such characters to AL. This achieves a canonically equivalent resolution of line breaking classes, and is compatible with emerging modern practice that treats these characters increasingly like regular alphabetic characters.'),
                     Heading(level=3, contents='AK: Aksara (XB/XA)'),
                     Paragraph(contents='The AK line break class is used for scripts that use the Brahmic style of context analysis and have a virama of Indic syllabic category Virama or Invisible_Stacker. It contains characters that can occur as the bases of orthographic syllables and can also follow a virama of Indic syllabic category Virama or Invisible_Stacker within the same orthographic syllable. Depending on the script, this may include characters with the Indic syllabic categories Consonant, Vowel_Independent, or Number.'),
                     TableRow(contents='1B05..1B33\ue000BALINESE LETTER AKARA..BALINESE LETTER HA'),
                     TableRow(contents='1B45..1B4C\ue000BALINESE LETTER KAF SASAK..BALINESE LETTER ARCHAIC JNYA'),
                     TableRow(contents='A984..A9B2\ue000JAVANESE LETTER A..JAVANESE LETTER HA'),
                     TableRow(contents='11005..11037\ue000BRAHMI LETTER A..BRAHMI LETTER OLD TAMIL NNNA'),
                     TableRow(contents='11071..11072\ue000BRAHMI LETTER OLD TAMIL SHORT E..BRAHMI LETTER OLD TAMIL SHORT O'),
                     TableRow(contents='11075\ue000BRAHMI LETTER OLD TAMIL LLA'),
                     TableRow(contents='11305..1130C\ue000GRANTHA LETTER A..GRANTHA LETTER VOCALIC L'),
                     TableRow(contents='1130F..11310\ue000GRANTHA LETTER EE..GRANTHA LETTER AI'),
                     TableRow(contents='11313..11328\ue000GRANTHA LETTER OO..GRANTHA LETTER NA'),
                     TableRow(contents='1132A..11330\ue000GRANTHA LETTER PA..GRANTHA LETTER RA'),
                     TableRow(contents='11332..11333\ue000GRANTHA LETTER LA..GRANTHA LETTER LLA'),
                     TableRow(contents='11335..11339\ue000GRANTHA LETTER VA..GRANTHA LETTER HA'),
                     TableRow(contents='11360..11361\ue000GRANTHA LETTER VOCALIC RR..GRANTHA LETTER VOCALIC LL'),
                     TableRow(contents='11F04..11F10\ue000KAWI LETTER A..KAWI LETTER O'),
                     TableRow(contents='11F12..11F33\ue000KAWI LETTER KA..KAWI LETTER JNYA'),
                     Heading(level=3, contents='AL: Ordinary Alphabetic and Symbol Characters (XP)'),
                     Paragraph(contents='Ordinary characters require other characters to provide break opportunities; otherwise, no line breaks are allowed between pairs of them. However, this behavior is tailorable. In some Far Eastern documents, it may be desirable to allow breaking between pairs of ordinary characters—particularly Latin characters and symbols.'),
                     Paragraph(contents='Note: Use ZWSP as a manual override to provide break opportunities around alphabetic or symbol characters.'),
                     Paragraph(contents='This class contains alphabetic or symbolic characters not explicitly assigned to another line breaking class. These are primarily characters of the following categories:'),
                     TableRow(contents='Category\ue000General_Category Values'),
                     TableRow(contents='Alphabetic\ue000Lu, Ll, Lt, Lm, and Lo'),
                     TableRow(contents='Symbols\ue000Sm, Sk, and So'),
                     TableRow(contents='Non-decimal Numbers\ue000Nl and No'),
                     TableRow(contents='Punctuation\ue000Pc, Pd, and Po'),
                     Paragraph(contents='Line break class AL also contains several format characters, including:'),
                     TableRow(contents='0600..0604\ue000ARABIC NUMBER SIGN..ARABIC SIGN SAMVAT'),
                     TableRow(contents='06DD\ue000ARABIC END OF AYAH'),
                     TableRow(contents='070F\ue000SYRIAC ABBREVIATION MARK'),
                     TableRow(contents='2061..2064\ue000FUNCTION APPLICATION..INVISIBLE PLUS'),
                     TableRow(contents='110BD\ue000KAITHI NUMBER SIGN'),
                     Paragraph(contents='These format characters occur in the middle or at the beginning of words or alphanumeric or symbol sequences. However, when alphabetic characters are tailored to allow breaks, these characters should not allow breaks after.'),
                     Paragraph(contents='Major exceptions to the general pattern of alphabetic and symbolic characters having line break class AL include:'),
                     Paragraph(contents='HL for Hebrew letters AI or ID, based on the East Asian Width property of the character ID for certain pictographic symbols CJ for small hiragana and katakana SA for complex context scripts JL, JV, JT, H2 or H3 for Hangul characters'),
                     Heading(level=3, contents='AP: Aksara Pre-Base (B/XA)'),
                     Paragraph(contents='The AP line break class is only used for scripts that use the Brahmic style of context analysis. It contains the characters of such scripts that are part of an orthographic syllable but in logical order precede the base or any half-forms. This includes characters with the Indic syllabic categories Consonant_Preceding_Repha, Consonant_With_Stacker, and Consonant_Prefixed.'),
                     TableRow(contents='11003..11004\ue000BRAHMI SIGN JIHVAMULIYA..BRAHMI SIGN UPADHMANIYA'),
                     TableRow(contents='11F02\ue000KAWI SIGN REPHA'),
                     Heading(level=3, contents='AS: Aksara Start (XB/XA)'),
                     Paragraph(contents='The AS line break class is only used for scripts that use the Brahmic style of context analysis. It contains characters that can occur as the bases of orthographic syllables, but cannot follow a virama of Indic syllabic category Virama or Invisible_Stacker within the same orthographic syllable. Depending on the script, this may include characters with the Indic syllabic categories Consonant, Vowel_Independent, Number, and several others.'),
                     TableRow(contents='1BC0..1BE5\ue000BATAK LETTER A..BATAK LETTER U'),
                     TableRow(contents='AA00..AA28\ue000CHAM LETTER A..CHAM LETTER HA'),
                     TableRow(contents='11066..1106F\ue000BRAHMI DIGIT ZERO..BRAHMI DIGIT NINE'),
                     TableRow(contents='11350\ue000GRANTHA OM'),
                     TableRow(contents='1135E..1135F\ue000GRANTHA LETTER VEDIC ANUSVARA..GRANTHA LETTER VEDIC DOUBLE ANUSVARA'),
                     TableRow(contents='11EE0..11EF1\ue000MAKASAR LETTER KA..MAKASAR LETTER A'),
                     TableRow(contents='11F50..11F59\ue000KAWI DIGIT ZERO..KAWI DIGIT NINE'),
                     Heading(level=3, contents='BA: Break After (A)'),
                     Paragraph(contents='Like SPACE, the characters in this class provide a break opportunity; unlike SPACE, they do not take part in determining indirect breaks. They can be subdivided into several categories.'),
                     Heading(level=4, contents='Breaking Spaces'),
                     Paragraph(contents='Breaking spaces are a subset of characters with General_Category Zs. Examples include:'),
                     TableRow(contents='1680\ue000OGHAM SPACE MARK'),
                     TableRow(contents='2000\ue000EN QUAD'),
                     TableRow(contents='2001\ue000EM QUAD'),
                     TableRow(contents='2002\ue000EN SPACE'),
                     TableRow(contents='2003\ue000EM SPACE'),
                     TableRow(contents='2004\ue000THREE-PER-EM SPACE'),
                     TableRow(contents='2005\ue000FOUR-PER-EM SPACE'),
                     TableRow(contents='2006\ue000SIX-PER-EM SPACE'),
                     TableRow(contents='2008\ue000PUNCTUATION SPACE'),
                     TableRow(contents='2009\ue000THIN SPACE'),
                     TableRow(contents='200A\ue000HAIR SPACE'),
                     TableRow(contents='205F\ue000MEDIUM MATHEMATICAL SPACE'),
                     TableRow(contents='3000\ue000IDEOGRAPHIC SPACE'),
                     Paragraph(contents='All of these space characters have a specific width, but otherwise behave as breaking spaces. In setting a justified line, none of these spaces normally changes in width, except for THIN SPACE when used in mathematical notation. See also the SP property.'),
                     Paragraph(contents='The OGHAM SPACE MARK may be rendered visibly between words but it is recommended that it be elided at the end of a line. For more information, see Section 5.7, Word Separator Characters.'),
                     Paragraph(contents='For a list of all space characters in the Unicode Standard, see Section 6.2, General Punctuation, in [Unicode].'),
                     Heading(level=4, contents='Tabs'),
                     TableRow(contents='0009\ue000TAB'),
                     Paragraph(contents='Except for the effect of the location of the tab stops, the tab character acts similarly to a space for the purpose of line breaking.'),
                     Heading(level=4, contents='Conditional Hyphens'),
                     TableRow(contents='00AD\ue000SOFT HYPHEN (SHY)'),
                     Paragraph(contents='SHY is an invisible format character with no width. It marks the place where an optional line break may occur inside a word. It can be used with all scripts. If a line is broken at an optional line break position marked by a SHY, the text at that line break position often has a modified appearance as described in Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=4, contents='Breaking Hyphens'),
                     Paragraph(contents='Breaking hyphens establish explicit break opportunities immediately after each occurrence.'),
                     TableRow(contents='058A\ue000ARMENIAN HYPHEN'),
                     TableRow(contents='2010\ue000HYPHEN'),
                     TableRow(contents='2012\ue000FIGURE DASH'),
                     TableRow(contents='2013\ue000EN DASH'),
                     Paragraph(contents='Hyphens are graphic characters with width. Because, unlike spaces, they are visible, they are included in the measured part of the preceding line, except where the layout style allows hyphens to hang into the margins. For additional information about how to format line breaks resulting from the presence of hyphens, see Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Visible Word Dividers'),
                     Paragraph(contents='The following are examples of other forms of visible word dividers that provide break opportunities:'),
                     TableRow(contents='05BE\ue000HEBREW PUNCTUATION MAQAF'),
                     TableRow(contents='0F0B\ue000TIBETAN MARK INTERSYLLABIC TSHEG'),
                     TableRow(contents='1361\ue000ETHIOPIC WORDSPACE'),
                     TableRow(contents='17D8\ue000KHMER SIGN BEYYAL'),
                     TableRow(contents='17DA\ue000KHMER SIGN KOOMUUT'),
                     Paragraph(contents='The Tibetan tsheg is a visible mark, but it functions effectively like a space to separate words (or other units) in Tibetan. It provides a break opportunity after itself. For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Paragraph(contents='The ETHIOPIC WORDSPACE is a visible word delimiter and is kept on the previous line. In contrast, U+1360 ETHIOPIC SECTION MARK is typically used in a sequence of several such marks on a separate line, and separated by spaces. As such lines are typically marked with separate hard line breaks (BK), the section mark is treated like an ordinary symbol and given line break class AL.'),
                     TableRow(contents='2027\ue000HYPHENATION POINT'),
                     Paragraph(contents='A hyphenation point is a raised dot, which is mainly used in dictionaries and similar works to visibly indicate syllabification of words. Syllable breaks frequently also are potential line break opportunities in the middle of words. When an actual line break falls inside a word containing hyphenation point characters, the hyphenation point is usually rendered as a regular hyphen at the end of the line.'),
                     TableRow(contents='007C\ue000VERTICAL LINE'),
                     Paragraph(contents='In some dictionaries, a vertical bar is used instead of a hyphenation point. In this usage, U+0323 COMBINING DOT BELOW is used to mark stressed syllables, so all breaks are marked by the vertical bar. For an actual line break the vertical bar is rendered as a hyphen at the end of the line.'),
                     Heading(level=4, contents='Historic Word Separators'),
                     Paragraph(contents='Historic texts, especially ancient ones, often do not use spaces, even for scripts where modern use of spaces is standard. Special punctuation was used to mark word boundaries in such texts. For modern text processing it is recommended to treat these as line break opportunities by default. WJ can be used to override this default, where necessary.'),
                     Paragraph(contents='Examples of Historic Word Separators include:'),
                     TableRow(contents='16EB\ue000RUNIC SINGLE PUNCTUATION'),
                     TableRow(contents='16EC\ue000RUNIC MULTIPLE PUNCTUATION'),
                     TableRow(contents='16ED\ue000RUNIC CROSS PUNCTUATION'),
                     TableRow(contents='2056\ue000THREE DOT PUNCTUATION'),
                     TableRow(contents='2058\ue000FOUR DOT PUNCTUATION'),
                     TableRow(contents='2059\ue000FIVE DOT PUNCTUATION'),
                     TableRow(contents='205A\ue000TWO DOT PUNCTUATION'),
                     TableRow(contents='205B\ue000FOUR DOT MARK'),
                     TableRow(contents='205D\ue000TRICOLON'),
                     TableRow(contents='205E\ue000VERTICAL FOUR DOTS'),
                     TableRow(contents='2E19\ue000PALM BRANCH'),
                     TableRow(contents='2E2A\ue000TWO DOTS OVER ONE DOT PUNCTUATION'),
                     TableRow(contents='2E2B\ue000ONE DOT OVER TWO DOTS PUNCTUATION'),
                     TableRow(contents='2E2C\ue000SQUARED FOUR DOT PUNCTUATION'),
                     TableRow(contents='2E2D\ue000FIVE DOT MARK'),
                     TableRow(contents='2E30\ue000RING POINT'),
                     TableRow(contents='10100\ue000AEGEAN WORD SEPARATOR LINE'),
                     TableRow(contents='10101\ue000AEGEAN WORD SEPARATOR DOT'),
                     TableRow(contents='10102\ue000AEGEAN CHECK MARK'),
                     TableRow(contents='1039F\ue000UGARITIC WORD DIVIDER'),
                     TableRow(contents='103D0\ue000OLD PERSIAN WORD DIVIDER'),
                     TableRow(contents='1091F\ue000PHOENICIAN WORD SEPARATOR'),
                     TableRow(contents='12470\ue000CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER'),
                     Heading(level=4, contents='Dandas'),
                     Paragraph(contents='DEVANAGARI DANDA is similar to a full stop. The danda or historically related symbols are used with several other Indic scripts. Unlike a full stop, the danda is not used in number formatting. DEVANAGARI DOUBLE DANDA marks the end of a verse. It also has analogues in other scripts.'),
                     Paragraph(contents='Examples of dandas include:'),
                     TableRow(contents='0964\ue000DEVANAGARI DANDA'),
                     TableRow(contents='0965\ue000DEVANAGARI DOUBLE DANDA'),
                     TableRow(contents='0E5A\ue000THAI CHARACTER ANGKHANKHU'),
                     TableRow(contents='0E5B\ue000THAI CHARACTER KHOMUT'),
                     TableRow(contents='104A\ue000MYANMAR SIGN LITTLE SECTION'),
                     TableRow(contents='104B\ue000MYANMAR SIGN SECTION'),
                     TableRow(contents='1735\ue000PHILIPPINE SINGLE PUNCTUATION'),
                     TableRow(contents='1736\ue000PHILIPPINE DOUBLE PUNCTUATION'),
                     TableRow(contents='17D4\ue000KHMER SIGN KHAN'),
                     TableRow(contents='17D5\ue000KHMER SIGN BARIYOOSAN'),
                     TableRow(contents='1B5E\ue000BALINESE CARIK SIKI'),
                     TableRow(contents='1B5F\ue000BALINESE CARIK PAREREN'),
                     TableRow(contents='A8CE\ue000SAURASHTRA DANDA'),
                     TableRow(contents='A8CF\ue000SAURASHTRA DOUBLE DANDA'),
                     TableRow(contents='AA5D\ue000CHAM PUNCTUATION DANDA'),
                     TableRow(contents='AA5E\ue000CHAM PUNCTUATION DOUBLE DANDA'),
                     TableRow(contents='AA5F\ue000CHAM PUNCTUATION TRIPLE DANDA'),
                     TableRow(contents='10A56\ue000KHAROSHTHI PUNCTUATION DANDA'),
                     TableRow(contents='10A57\ue000KHAROSHTHI PUNCTUATION DOUBLE DANDA'),
                     Heading(level=4, contents='Tibetan'),
                     TableRow(contents='0F34\ue000TIBETAN MARK BSDUS RTAGS'),
                     TableRow(contents='0F7F\ue000TIBETAN SIGN RNAM BCAD'),
                     TableRow(contents='0F85\ue000TIBETAN MARK PALUTA'),
                     TableRow(contents='0FBE\ue000TIBETAN KU RU KHA'),
                     TableRow(contents='0FBF\ue000TIBETAN KU RU KHA BZHI MIG CAN'),
                     TableRow(contents='0FD2\ue000TIBETAN MARK NYIS TSHEG'),
                     Paragraph(contents='For additional information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Other Terminating Punctuation'),
                     Paragraph(contents='Termination punctuation stays with the line, but otherwise allows a break after it. This is similar to EX, except that the latter may be separated by a space from the preceding word without allowing a break, whereas these marks are used without spaces. Terminating punctuation includes:'),
                     TableRow(contents='1804\ue000MONGOLIAN COLON'),
                     TableRow(contents='1805\ue000MONGOLIAN FOUR DOTS'),
                     TableRow(contents='1B5A\ue000BALINESE PANTI'),
                     TableRow(contents='1B5B\ue000BALINESE PAMADA'),
                     TableRow(contents='1B5D\ue000BALINESE CARIK PAMUNGKAH'),
                     TableRow(contents='1B60\ue000BALINESE PAMENENG'),
                     TableRow(contents='1C3B\ue000LEPCHA PUNCTUATION TA-ROL'),
                     TableRow(contents='1C3C\ue000LEPCHA PUNCTUATION NYET THYOOM TA-ROL'),
                     TableRow(contents='1C3D\ue000LEPCHA PUNCTUATION CER-WA'),
                     TableRow(contents='1C3E\ue000LEPCHA PUNCTUATION TSHOOK CER-WA'),
                     TableRow(contents='1C3F\ue000LEPCHA PUNCTUATION TSHOOK'),
                     TableRow(contents='1C7E\ue000OL CHIKI PUNCTUATION MUCAAD'),
                     TableRow(contents='1C7F\ue000OL CHIKI PUNCTUATION DOUBLE MUCAAD'),
                     TableRow(contents='2CFA\ue000COPTIC OLD NUBIAN DIRECT QUESTION MARK'),
                     TableRow(contents='2CFB\ue000COPTIC OLD NUBIAN INDIRECT QUESTION MARK'),
                     TableRow(contents='2CFC\ue000COPTIC OLD NUBIAN VERSE DIVIDER'),
                     TableRow(contents='2CFF\ue000COPTIC MORPHOLOGICAL DIVIDER'),
                     TableRow(contents='2E0E..2E15\ue000EDITORIAL CORONIS..UPWARDS ANCORA'),
                     TableRow(contents='2E17\ue000DOUBLE OBLIQUE HYPHEN'),
                     TableRow(contents='A60D\ue000VAI COMMA'),
                     TableRow(contents='A60F\ue000VAI QUESTION MARK'),
                     TableRow(contents='A92E\ue000KAYAH LI SIGN CWI'),
                     TableRow(contents='A92F\ue000KAYAH LI SIGN SHYA'),
                     TableRow(contents='10A50\ue000KHAROSHTHI PUNCTUATION DOT'),
                     TableRow(contents='10A51\ue000KHAROSHTHI PUNCTUATION SMALL CIRCLE'),
                     TableRow(contents='10A52\ue000KHAROSHTHI PUNCTUATION CIRCLE'),
                     TableRow(contents='10A53\ue000KHAROSHTHI PUNCTUATION CRESCENT BAR'),
                     TableRow(contents='10A54\ue000KHAROSHTHI PUNCTUATION MANGALAM'),
                     TableRow(contents='10A55\ue000KHAROSHTHI PUNCTUATION LOTUS'),
                     TableRow(contents='11EF7..11EF8\ue000MAKASAR PASSIMBANG..MAKASAR END OF SECTION'),
                     Heading(level=4, contents='Letters Attached to Orthographic Syllables'),
                     Paragraph(contents='In scripts that use the Brahmic style of line breaking, most characters that attach to the initial consonant cluster of an orthographic syllable and are part of that syllable are encoded as combining marks. These have line break class CM. Sometimes, however, additional characters with general category Lo or Lm, such as final consonants or vowel lengtheners, should remain attached to the preceding orthographic syllable. They are then assigned line break class BA.'),
                     TableRow(contents='A9CF\ue000JAVANESE PANGRANGKEP'),
                     TableRow(contents='AA40..AA42\ue000CHAM LETTER FINAL K..CHAM LETTER FINAL NG'),
                     TableRow(contents='AA44..AA4B\ue000CHAM LETTER FINAL CH..CHAM LETTER FINAL SS'),
                     TableRow(contents='1133D\ue000GRANTHA SIGN AVAGRAHA'),
                     TableRow(contents='1135D\ue000GRANTHA SIGN PLUTA'),
                     TableRow(contents='11EF2\ue000MAKASAR ANGKA'),
                     Heading(level=3, contents='BB: Break Before (B)'),
                     Paragraph(contents='Characters of this line break class move to the next line at a line break and thus provide a line break opportunity before.'),
                     Paragraph(contents='Examples of BB characters are described in the following sections.'),
                     Heading(level=4, contents='Dictionary Use'),
                     TableRow(contents='00B4\ue000ACUTE ACCENT'),
                     TableRow(contents='1FFD\ue000GREEK OXIA'),
                     Paragraph(contents='In some dictionaries, stressed syllables are indicated with a spacing acute accent instead of the hyphenation point. In this case the accent moves to the next line, and the preceding line ends with a hyphen. The oxia is canonically equivalent to the acute accent.'),
                     TableRow(contents='02DF\ue000MODIFIER LETTER CROSS ACCENT'),
                     Paragraph(contents='A cross accent also appears in some dictionaries to mark the stress of the following syllable, and should be handled in the same way as the other stress marking characters in this section. The accent should not be separated from the syllable it marks by a break.'),
                     TableRow(contents='02C8\ue000MODIFIER LETTER VERTICAL LINE'),
                     TableRow(contents='02CC\ue000MODIFIER LETTER LOW VERTICAL LINE'),
                     Paragraph(contents='These characters are used in dictionaries to indicate stress and secondary stress when IPA is used. Both are prefixes to the stressed syllable in IPA. Breaking before them keeps them with the syllable.'),
                     Paragraph(contents='Note: It is hard to find actual examples in most dictionaries because the pronunciation fields usually occur right after the headword, and the columns are wide enough to prevent line breaks in most pronunciations.'),
                     Heading(level=4, contents='Tibetan and Phags-Pa Head Letters'),
                     TableRow(contents='0F01\ue000TIBETAN MARK GTER YIG MGO TRUNCATED A'),
                     TableRow(contents='0F02\ue000TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA'),
                     TableRow(contents='0F03\ue000TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA'),
                     TableRow(contents='0F04\ue000TIBETAN MARK INITIAL YIG MGO MDUN MA'),
                     TableRow(contents='0F06\ue000TIBETAN MARK CARET YIG MGO PHUR SHAD MA'),
                     TableRow(contents='0F07\ue000TIBETAN MARK YIG MGO TSHEG SHAD MA'),
                     TableRow(contents='0F09\ue000TIBETAN MARK BSKUR YIG MGO'),
                     TableRow(contents='0F0A\ue000TIBETAN MARK BKA- SHOG YIG MGO'),
                     TableRow(contents='0FD0\ue000TIBETAN MARK BSKA- SHOG GI MGO RGYAN'),
                     TableRow(contents='0FD1\ue000TIBETAN MARK MNYAM YIG GI MGO RGYAN'),
                     TableRow(contents='0FD3\ue000TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA'),
                     TableRow(contents='A874\ue000PHAGS-PA SINGLE HEAD MARK'),
                     TableRow(contents='A875\ue000PHAGS-PA DOUBLE HEAD MARK'),
                     Paragraph(contents='Tibetan head letters allow a break before. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     Heading(level=4, contents='Mongolian'),
                     TableRow(contents='1806\ue000MONGOLIAN TODO SOFT HYPHEN'),
                     Paragraph(contents='Despite its name, this Mongolian character is not an invisible control like SOFT HYPHEN, but rather a visible character like a regular hyphen. Unlike the hyphen, MONGOLIAN TODO SOFT HYPHEN stays with the following line. Whenever optional line breaks are to be marked invisibly, SOFT HYPHEN should be used instead.'),
                     Heading(level=3, contents='B2: Break Opportunity Before and After (B/A/XP)'),
                     TableRow(contents='2014\ue000EM DASH'),
                     Paragraph(contents='The EM DASH is used to set off parenthetical text. Normally, it is used without spaces. However, this is language dependent. For example, in Swedish, spaces are used around the EM DASH. Line breaks can occur before and after an EM DASH. Because EM DASHes are sometimes used in pairs instead of a single quotation dash, the default behavior is not to break the line between even though not all fonts use connecting glyphs for the EM DASH.'),
                     Paragraph(contents='Some languages, including Spanish, use EM DASH to set off a parenthetical, and the surrounding dashes should not be broken from the contained text. In this usage there is space on the side where it can be broken. This does not conflict with symmetrical usages, either with spaces on both sides of the em-dash or with no spaces.'),
                     Heading(level=3, contents='BK: Mandatory Break (A) (Non-tailorable)'),
                     Paragraph(contents='Explicit breaks act independently of the surrounding characters. No characters can be added to the BK class as part of tailoring, but implementations are not required to support the VT character.'),
                     TableRow(contents='000B\ue000LINE TABULATION (VT)'),
                     TableRow(contents='000C\ue000FORM FEED (FF)'),
                     Paragraph(contents='FORM FEED separates pages. The text on the new page starts at the beginning of the line. In some layout modes there may be no visible advance to a new “page”.'),
                     TableRow(contents='2028\ue000LINE SEPARATOR'),
                     Paragraph(contents='The text after the LINE SEPARATOR starts at the beginning of the line. This is similar to HTML <BR>.'),
                     TableRow(contents='2029\ue000PARAGRAPH SEPARATOR'),
                     Paragraph(contents='The text of the new paragraph starts at the beginning of the line. This character defines a paragraph break, causing suitable formatting to be applied, for example, interparagraph spacing or first line indentation. LINE SEPARATOR, FF, VT as well as CR, LF and NL do not define a paragraph break.'),
                     Heading(level=4, contents='Newline Function (NLF)'),
                     Paragraph(contents='Newline Functions are defined in the Unicode Standard as providing additional mandatory breaks. They are not individual characters, but are encoded as sequences of the control characters NEL, LF, and CR. If a character sequence for a Newline Function contains more than one character, it is kept together. The particular sequences that form an NLF depend on the implementation and other circumstances as described in Section 5.8, Newline Guidelines, of [Unicode].'),
                     Paragraph(contents='This specification defines the NLF implicitly. It defines the three character classes CR, LF, and NL. Their line break behavior, defined in rule LB5 in Section 6.1, Non-tailorable Line Breaking Rules, is to break after NL, LF, or CR, but not between CR and LF.'),
                     Heading(level=3, contents='CB: Contingent Break Opportunity (B/A)'),
                     Paragraph(contents='By default, there is a break opportunity both before and after any inline object. Object-specific line breaking behavior is implemented in the associated object itself, and where available can override the default to prevent either or both of the default break opportunities. Using U+FFFC OBJECT REPLACEMENT CHARACTER allows the object anchor to take a character position in the string.'),
                     TableRow(contents='FFFC\ue000OBJECT REPLACEMENT CHARACTER'),
                     Paragraph(contents='Object-specific line break behavior is best implemented by querying the object itself, not by replacing the CB line breaking class by another class.'),
                     Heading(level=3, contents='CJ: Conditional Japanese Starter'),
                     Paragraph(contents='This character class contains Japanese small hiragana and katakana. Characters of this class may be treated as either NS or ID.'),
                     Paragraph(contents='CSS Text Level 3 (which supports Japanese line layout) defines three distinct values for its line-break behavior:'),
                     Paragraph(contents='• strict, typically used for long lines'),
                     Paragraph(contents='• normal (CSS default), the behavior typically used for books and documents'),
                     Paragraph(contents='• loose, typically used for short lines such as in newspapers'),
                     Paragraph(contents='These have different sets of “kinsoku” characters which cannot be at the beginning or end of a line; strict has the largest set, while loose has the smallest. The motivation for the smaller number of kinsoku characters is to avoid triggering justification that puts characters off the grid position.'),
                     Paragraph(contents='Treating characters of class CJ as class NS will give CSS strict line breaking; treating them as class ID will give CSS normal breaking.'),
                     Paragraph(contents='The CJ line break class includes'),
                     TableRow(contents='3041, 3043, 3045, etc.\ue000Small hiragana'),
                     TableRow(contents='30A1, 30A3, 30A5, etc.\ue000Small katakana'),
                     TableRow(contents='30FC\ue000KATAKANA-HIRAGANA PROLONGED SOUND MARK'),
                     TableRow(contents='FF67..FF70\ue000Halfwidth variants'),
                     Heading(level=3, contents='CL: Close Punctuation (XB)'),
                     Paragraph(contents='The closing character of any set of paired punctuation should be kept with the preceding character, and the same applies to all forms of wide comma and full stop. This is desirable, even when there are intervening space characters, to prevent the appearance of a bare closing punctuation mark at the head of a line.'),
                     Paragraph(contents='The class CL is closely related to the class CP (Close Parenthesis). They differ only in that CP will not introduce a break when followed by a letter or number, which prevents breaks within constructs like “(s)he”.'),
                     Paragraph(contents='The CL line break class contains characters of General_Category Pe in the Unicode Character Database, but excludes any characters included in the class CP. It also contains certain non-paired punctuation characters, including:'),
                     TableRow(contents='3001..3002\ue000IDEOGRAPHIC COMMA..IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE11\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA'),
                     TableRow(contents='FE12\ue000PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FE50\ue000SMALL COMMA'),
                     TableRow(contents='FE52\ue000SMALL FULL STOP'),
                     TableRow(contents='FF0C\ue000FULLWIDTH COMMA'),
                     TableRow(contents='FF0E\ue000FULLWIDTH FULL STOP'),
                     TableRow(contents='FF61\ue000HALFWIDTH IDEOGRAPHIC FULL STOP'),
                     TableRow(contents='FF64\ue000HALFWIDTH IDEOGRAPHIC COMMA'),
                     Heading(level=3, contents='CM: Combining Mark (XB) (Non-tailorable)'),
                     Heading(level=4, contents='Combining Characters'),
                     Paragraph(contents='Combining character sequences are treated as units for the purpose of line breaking. The line breaking behavior of the sequence is that of the base character.'),
                     Paragraph(contents='The preferred base character for showing combining marks in isolation is U+00A0 NO-BREAK SPACE. If a line break before or after the combining sequence is desired, U+200B ZERO WIDTH SPACE can be used. The use of U+0020 SPACE as a base character is deprecated.'),
                     Paragraph(contents='For most purposes, combining characters take on the properties of their base characters, and that is how the CM class is treated in rule LB9 of this specification. As a result, if the sequence <0021, 20E4> is used to represent a triangle enclosing an exclamation point, it is effectively treated as EX, the line break class of the exclamation mark. If U+26A0 WARNING SIGN had been used, which also looks like an exclamation point inside a triangle, it would have the line break class of AL. Only the latter corresponds to the line breaking behavior expected by users for this symbol. To avoid surprising behavior, always use a base character that is a symbol or letter (Line Break AL) when using enclosing combining marks (General_Category Me).'),
                     Paragraph(contents='The CM line break class includes all combining characters with General_Category Mc, Me, and Mn, unless listed explicitly elsewhere. This includes viramas that don’t have line break class VI or VF.'),
                     Heading(level=4, contents='Control and Formatting Characters'),
                     Paragraph(contents='Most control and formatting characters are ignored in line breaking and do not contribute to the line width. By giving them class CM, the line breaking behavior of the last preceding character that is not of class CM affects the line breaking behavior.'),
                     Paragraph(contents='Note: When control codes and format characters are rendered visibly during editing, more graceful layout might be achieved by treating them as if they had the line break class of the visible symbols instead, that is AL or ID. Such visible modes do not violate the constraint on tailorability, because they are logically equivalent to having temporarily substituted symbol characters, such as the characters from the Control Pictures block, or in some cases, character sequences, for the actual control characters.'),
                     Paragraph(contents='The CM line break class includes all characters of General_Category Cc and Cf, unless listed explicitly elsewhere.'),
                     Paragraph(contents='The CM class also includes U+3035 VERTICAL KANA REPEAT MARK LOWER HALF. This character is normally preceded by either U+3033 VERTICAL KANA REPEAT MARK UPPER HALF or U+3034 VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF, and should not be separated from them.'),
                     Heading(level=3, contents='CP: Closing Parenthesis (XB)'),
                     Paragraph(contents='This class contains just two characters, U+0029 RIGHT PARENTHESIS and U+005D RIGHT SQUARE BRACKET. Characters of class CP differ from those of the CL (Close Punctuation) class in that they will not cause a break opportunity when appearing in contexts like “(s)he.” In all other respects the breaking behavior of CP and CL are the same.'),
                     TableRow(contents='0029\ue000RIGHT PARENTHESIS'),
                     TableRow(contents='005D\ue000RIGHT SQUARE BRACKET'),
                     Heading(level=3, contents='CR: Carriage Return (A) (Non-tailorable)'),
                     TableRow(contents='000D\ue000CARRIAGE RETURN (CR)'),
                     Paragraph(contents='A CR indicates a mandatory break after, unless followed by a LF. See also the discussion under BK.'),
                     Paragraph(contents='Note: On some platforms the character sequence <CR, CR, LF> is used to indicate the location of actual line breaks, whereas <CR, LF> is treated like a hard line break. As soon as a user edits the text, the location of all the <CR, CR, LF> sequences may change as the new text breaks differently, while the relative position of any <CR, LF> to the surrounding text stays the same. This convention allows an editor to return a buffer and the client to tell which text is displayed on which line by counting the number of <CR, CR, LF> and <CR, LF> sequences. This convention is essentially equivalent to markup that captures the result of applying the line break algorithm, not a tailoring of the CR character. The <CR, CR, LF> sequences are thus not considered part of the plain text content.'),
                     Heading(level=3, contents='EB: Emoji Base (B/A)'),
                     Paragraph(contents='This class includes characters whose appearance can be modified by a subsequent emoji modifier in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier_Base property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='1F466\ue000BOY'),
                     TableRow(contents='1F478\ue000PRINCESS'),
                     TableRow(contents='1F6B4\ue000BICYCLIST'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b. In other contexts, characters of class EB behave similarly to ideographs of class ID, with break opportunities before and after.'),
                     Heading(level=3, contents='EM: Emoji Modifier (A)'),
                     Paragraph(contents='This class includes characters that can be used to modify the appearance of a preceding emoji in an emoji modifier sequence. This class directly corresponds to the Emoji_Modifier property as defined in Section 1.4.4 Emoji Modifiers of [UTS51].'),
                     Paragraph(contents='Breaks within emoji modifier sequences are prevented by rule LB30b.'),
                     Paragraph(contents='Emoji modifiers include:'),
                     TableRow(contents='1F3FB..1F3FF\ue000EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6'),
                     Heading(level=3, contents='EX: Exclamation/Interrogation (XB)'),
                     Paragraph(contents='Characters in this line break class behave like closing characters, except in relation to postfix (PO) and non-starter characters (NS). Examples include:'),
                     TableRow(contents='0021\ue000EXCLAMATION MARK'),
                     TableRow(contents='003F\ue000QUESTION MARK'),
                     TableRow(contents='05C6\ue000HEBREW PUNCTUATION NUN HAFUKHA'),
                     TableRow(contents='061B\ue000ARABIC SEMICOLON'),
                     TableRow(contents='061E\ue000ARABIC TRIPLE DOT PUNCTUATION MARK'),
                     TableRow(contents='061F\ue000ARABIC QUESTION MARK'),
                     TableRow(contents='06D4\ue000ARABIC FULL STOP'),
                     TableRow(contents='07F9\ue000NKO EXCLAMATION MARK'),
                     TableRow(contents='0F0D\ue000TIBETAN MARK SHAD'),
                     TableRow(contents='FF01\ue000FULLWIDTH EXCLAMATION MARK'),
                     TableRow(contents='FF1F\ue000FULLWIDTH QUESTION MARK'),
                     Heading(level=3, contents='GL: Non-breaking (“Glue”) (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='Non-breaking characters prohibit breaks on either side, but that prohibition can be overridden by SP or ZW. In particular, when NO-BREAK SPACE follows SPACE, there is a break opportunity after the SPACE and the NO-BREAK SPACE will go as visible space onto the next line. See also WJ. The following are examples of characters of line break class GL:'),
                     TableRow(contents='00A0\ue000NO-BREAK SPACE (NBSP)'),
                     TableRow(contents='202F\ue000NARROW NO-BREAK SPACE (NNBSP)'),
                     TableRow(contents='180E\ue000MONGOLIAN VOWEL SEPARATOR (MVS)'),
                     Paragraph(contents='NO-BREAK SPACE is the preferred character to use where two words are to be visually separated but kept on the same line, as in the case of a title and a name “Dr.<NBSP>Joseph Becker”. When SPACE follows NO-BREAK SPACE, there is no break, because there never is a break in front of SPACE.'),
                     Paragraph(contents='NARROW NO-BREAK SPACE has exactly the same line breaking behavior as NO-BREAK SPACE, but with a narrow display width. The MONGOLIAN VOWEL SEPARATOR acts like a NARROW NO-BREAK SPACE in its line breaking behavior. Both of these characters are regularly used in Mongolian text, where they participate in special shaping behavior, as described in Section 13.5, Mongolian of [Unicode].'),
                     Paragraph(contents='When NARROW NO-BREAK SPACE occurs in French text, it should be interpreted as an “espace fine insécable”.'),
                     TableRow(contents='1107F\ue000BRAHMI NUMBER JOINER'),
                     TableRow(contents='13430..13436\ue000EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH OVERLAY MIDDLE'),
                     TableRow(contents='13439..1343B\ue000EGYPTIAN HIEROGLYPH INSERT AT MIDDLE..EGYPTIAN HIEROGLYPH INSERT AT BOTTOM'),
                     TableRow(contents='16FE4\ue000KHITAN SMALL SCRIPT FILLER'),
                     Paragraph(contents='These characters participate in shaping behavior. Together with the characters on either side, they form a ligature, quadrat, or cluster, within which there can be no line break. See Section 14.1, Brahmi, Section 11.4, Egyptian Hieroglyphs, and Section 18.12, Khitan Small Script, respectively, of [Unicode].'),
                     TableRow(contents='034F\ue000COMBINING GRAPHEME JOINER'),
                     Paragraph(contents='This character has no visible glyph and its presence indicates that adjoining characters are to be treated as a graphemic unit, therefore preventing line breaks between them. The use of grapheme joiner affects other processes, such as sorting, therefore, U+2060 WORD JOINER should be used if the intent is to merely prevent a line break.'),
                     TableRow(contents='2007\ue000FIGURE SPACE'),
                     Paragraph(contents='This is the preferred space to use in numbers. It has the same width as a digit and keeps the number together for the purpose of line breaking.'),
                     TableRow(contents='2011\ue000NON-BREAKING HYPHEN'),
                     Paragraph(contents='This is the preferred character to use where words need to be hyphenated but may not be broken at the hyphen. Because of its use as a substitute for ordinary hyphen, the appearance of this character should match that of U+2010 HYPHEN.'),
                     TableRow(contents='0F08\ue000TIBETAN MARK SBRUL SHAD'),
                     TableRow(contents='0F0C\ue000TIBETAN MARK DELIMITER TSHEG BSTAR'),
                     TableRow(contents='0F12\ue000TIBETAN MARK RGYA GRAM SHAD'),
                     Paragraph(contents='The TSHEG BSTAR looks exactly like a Tibetan tsheg, but can be used to prevent a break like no-break space. It inhibits breaking on either side. For more information, see Section 5.6, Tibetan Line Breaking.'),
                     TableRow(contents='035C..0362\ue000COMBINING DOUBLE BREVE BELOW..COMBINING DOUBLE RIGHTWARDS ARROW BELOW'),
                     Paragraph(contents='These diacritics span two characters, so no word or line breaks are possible on either side.'),
                     Heading(level=3, contents='H2: Hangul LV Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LV.'),
                     Paragraph(contents='Together with conjoining jamos, Hangul syllables form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JL, JT, JV, and H3.'),
                     Heading(level=3, contents='H3: Hangul LVT Syllable (B/A)'),
                     Paragraph(contents='This class includes all characters of Hangul Syllable Type LVT. See also JL, JT, JV, and H2.'),
                     Heading(level=3, contents='HY: Hyphen (XA)'),
                     TableRow(contents='002D\ue000HYPHEN-MINUS'),
                     Paragraph(contents='Some additional context analysis is required to distinguish usage of this character as a hyphen from its usage as a minus sign (or indicator of numerical range). If used as hyphen, it acts like U+2010 HYPHEN, which has line break class BA.'),
                     Paragraph(contents='Note: Some typescript conventions use runs of HYPHEN-MINUS to stand in for longer dashes or horizontal rules. If actual character code conversion is not performed and it is desired to treat them like the characters or layout elements they stand for, line breaking needs to support these runs explicitly.'),
                     Heading(level=3, contents='ID: Ideographic (B/A)'),
                     Paragraph(contents='Characters with this property do not require other characters to provide break opportunities; lines can ordinarily break before and after and between pairs of ideographic characters. Examples of characters with the ID line break class include most assigned characters in the ranges listed below. Note that this class also includes characters other than Han ideographs.'),
                     TableRow(contents='2E80..2FFF\ue000CJK, Kangxi Radicals, Ideographic Description Symbols'),
                     TableRow(contents='3040..309F\ue000Hiragana (except small characters)'),
                     TableRow(contents='30A2..30FA\ue000Katakana (except small characters)'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='See the data file LineBreak.txt [Data14] for the complete list of characters with the ID line break class.'),
                     Paragraph(contents='Note: Use U+2060 WORD JOINER as a manual override to prevent break opportunities around characters of class ID.'),
                     Paragraph(contents='Unassigned code points in blocks or regions of the Unicode codespace that have been reserved for CJK scripts are also assigned this line break class. These assignments anticipate that future characters assigned in these ranges will have the class ID. Once a character is assigned to one of these code points, the property value could change.'),
                     Paragraph(contents='The unassigned code points in the following blocks default to ID:'),
                     TableRow(contents='3400..4DBF\ue000CJK Unified Ideographs Extension A'),
                     TableRow(contents='4E00..9FFF\ue000CJK Unified Ideographs'),
                     TableRow(contents='F900..FAFF\ue000CJK Compatibility Ideographs'),
                     Paragraph(contents='All undesignated code points in Planes 2 and 3, whether inside or outside of allocated blocks, default to ID:'),
                     TableRow(contents='20000..2FFFD\ue000Plane 2'),
                     TableRow(contents='30000..3FFFD\ue000Plane 3'),
                     Paragraph(contents='All unassigned code points in the following Plane 1 range, whether inside or outside of allocated blocks, also default to ID:'),
                     TableRow(contents='1F000..1FFFD\ue000Plane 1 range'),
                     Heading(level=4, contents='Korean'),
                     Paragraph(contents='Korean is encoded with conjoining jamos, Hangul syllables, or both. See also JL, JT, JV, H2, and H3. The following set of compatibility jamo is treated as ID by default.'),
                     TableRow(contents='3130..318F\ue000HANGUL COMPATIBILITY JAMO'),
                     Heading(level=4, contents='Symbols'),
                     Paragraph(contents='Certain pictographic symbols of General Category So are also included in this line break class.'),
                     Heading(level=3, contents='HL: Hebrew Letter (XB)'),
                     Paragraph(contents='This class includes all Hebrew letters.'),
                     Paragraph(contents='When a Hebrew letter is followed by a hyphen, there is no break on either side of the hyphen. In this context a hyphen is any character of class HY or class BA. In other respects, Hebrew letters behave the same as characters of class AL.'),
                     Paragraph(contents='Included in this class are all characters of General Category Letter that have Script=Hebrew.'),
                     Heading(level=3, contents='IN: Inseparable Characters (XP)'),
                     Heading(level=4, contents='Leaders'),
                     Paragraph(contents='These characters are intended to be used consecutively. There is never a line break between two characters of this class.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='2024\ue000ONE DOT LEADER'),
                     TableRow(contents='2025\ue000TWO DOT LEADER'),
                     TableRow(contents='2026\ue000HORIZONTAL ELLIPSIS'),
                     TableRow(contents='FE19\ue000PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS'),
                     Paragraph(contents='HORIZONTAL ELLIPSIS can be used as a three-dot leader.'),
                     Heading(level=3, contents='IS: Infix Numeric Separator (XB)'),
                     Paragraph(contents='Characters that usually occur inside a numerical expression may not be separated from the numeric characters that follow, unless a space character intervenes. For example, there is no break in “100.00” or “10,000”, nor in “12:59”.'),
                     Paragraph(contents='Examples include:'),
                     TableRow(contents='002C\ue000COMMA'),
                     TableRow(contents='002E\ue000FULL STOP'),
                     TableRow(contents='003A\ue000COLON'),
                     TableRow(contents='003B\ue000SEMICOLON'),
                     TableRow(contents='037E\ue000GREEK QUESTION MARK (canonically equivalent to 003B)'),
                     TableRow(contents='0589\ue000ARMENIAN FULL STOP'),
                     TableRow(contents='060C\ue000ARABIC COMMA'),
                     TableRow(contents='060D\ue000ARABIC DATE SEPARATOR'),
                     TableRow(contents='07F8\ue000NKO COMMA'),
                     TableRow(contents='2044\ue000FRACTION SLASH'),
                     TableRow(contents='FE10\ue000PRESENTATION FORM FOR VERTICAL COMMA'),
                     TableRow(contents='FE13\ue000PRESENTATION FORM FOR VERTICAL COLON'),
                     TableRow(contents='FE14\ue000PRESENTATION FORM FOR VERTICAL SEMICOLON'),
                     Paragraph(contents='When not used in a numeric context, infix separators are sentence-ending punctuation. Therefore they always prevent breaks before.'),
                     Paragraph(contents='Note: FIGURE SPACE, not being a punctuation mark, has been given the line break class GL.'),
                     Heading(level=3, contents='JL: Hangul L Jamo (B)'),
                     Paragraph(contents='The JL line break class consists of all characters of Hangul Syllable Type L.'),
                     Paragraph(contents='Conjoining jamos form Korean Syllable Blocks, which are kept together; see Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. Korean uses space-based line breaking in many styles of documents. To support these, Hangul syllables and conjoining jamos need to be tailored to use class AL. The default in this specification is class ID, which supports the case of Korean documents not using space-based line breaking. See Section 8.1, Types of Tailoring. See also JT, JV, H2, and H3.'),
                     Heading(level=3, contents='JT: Hangul T Jamo (A)'),
                     Paragraph(contents='The JT line break class consists of all characters of Hangul Syllable Type T. See also JL, JV, H2, and H3.'),
                     Heading(level=3, contents='JV: Hangul V Jamo (XA/XB)'),
                     Paragraph(contents='The JV line break class consists of all characters of Hangul Syllable Type V. See also JL, JT, H2, and H3.'),
                     Heading(level=3, contents='LF: Line Feed (A) (Non-tailorable)'),
                     TableRow(contents='000A\ue000LINE FEED (LF)'),
                     Paragraph(contents='There is a mandatory break after any LF character, but see the discussion under BK.'),
                     Heading(level=3, contents='NL: Next Line (A) (Non-tailorable)'),
                     TableRow(contents='0085\ue000NEXT LINE (NEL)'),
                     Paragraph(contents='The NL class acts like BK in all respects (there is a mandatory break after any NEL character). It cannot be tailored, but implementations are not required to support the NEL character; see the discussion under BK.'),
                     Heading(level=3, contents='NS: Nonstarters (XB)'),
                     Paragraph(contents='Nonstarter characters cannot start a line, but unlike CL they may allow a break in some contexts when they follow one or more space characters. Nonstarters include:'),
                     TableRow(contents='17D6\ue000KHMER SIGN CAMNUC PII KUUH'),
                     TableRow(contents='203C\ue000DOUBLE EXCLAMATION MARK'),
                     TableRow(contents='203D\ue000INTERROBANG'),
                     TableRow(contents='2047\ue000DOUBLE QUESTION MARK'),
                     TableRow(contents='2048\ue000QUESTION EXCLAMATION MARK'),
                     TableRow(contents='2049\ue000EXCLAMATION QUESTION MARK'),
                     TableRow(contents='3005\ue000IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='301C\ue000WAVE DASH'),
                     TableRow(contents='303C\ue000MASU MARK'),
                     TableRow(contents='303B\ue000VERTICAL IDEOGRAPHIC ITERATION MARK'),
                     TableRow(contents='309B.. 309E\ue000KATAKANA-HIRAGANA VOICED SOUND MARK..HIRAGANA VOICED ITERATION MARK'),
                     TableRow(contents='30A0\ue000KATAKANA-HIRAGANA DOUBLE HYPHEN'),
                     TableRow(contents='30FB\ue000KATAKANA MIDDLE DOT'),
                     TableRow(contents='30FD..30FE\ue000KATAKANA ITERATION MARK..KATAKANA VOICED ITERATION MARK'),
                     TableRow(contents='FE54..FE55\ue000SMALL SEMICOLON..SMALL COLON'),
                     TableRow(contents='FF1A..FF1B\ue000FULLWIDTH COLON.. FULLWIDTH SEMICOLON'),
                     TableRow(contents='FF65\ue000HALFWIDTH KATAKANA MIDDLE DOT'),
                     TableRow(contents='FF9E..FF9F\ue000HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK'),
                     Paragraph(contents='Note: Optionally, the NS restriction may be relaxed by tailoring, with some or all characters treated like ID to achieve a more permissive style of line breaking, especially in some East Asian document styles. Alternatively, line breaking can be tightened by moving characters that are ID into NS.'),
                     Paragraph(contents='For additional information about U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN, see Section 5.5, Use of Double Hyphen.'),
                     Heading(level=3, contents='NU: Numeric (XP)'),
                     Paragraph(contents='These characters behave like ordinary characters (AL) in the context of most characters but activate the prefix and postfix behavior of prefix and postfix characters.'),
                     Paragraph(contents='Numeric characters consist of decimal digits (all characters of General_Category Nd), except:'),
                     Paragraph(contents='1. those with East_Asian_Width F (Fullwidth)'),
                     Paragraph(contents='2. those from scripts that use the Brahmic style of context analysis'),
                     Paragraph(contents='plus these characters:'),
                     TableRow(contents='066B\ue000ARABIC DECIMAL SEPARATOR'),
                     TableRow(contents='066C\ue000ARABIC THOUSANDS SEPARATOR'),
                     Paragraph(contents='Unlike IS characters, the Arabic numeric punctuation does not occur as sentence terminal punctuation outside numbers.'),
                     Heading(level=3, contents='OP: Open Punctuation (XA)'),
                     Paragraph(contents='The opening character of any set of paired punctuation should be kept with the character that follows. This is desirable, even if there are intervening space characters, as it prevents the appearance of a bare opening punctuation mark at the end of a line. The OP line break class consists of all characters of General_Category Ps in the Unicode Character Database, plus'),
                     TableRow(contents='00A1\ue000INVERTED EXCLAMATION MARK'),
                     TableRow(contents='00BF\ue000INVERTED QUESTION MARK'),
                     TableRow(contents='2E18\ue000INVERTED INTERROBANG'),
                     Paragraph(contents='Note: The first two of these characters used to be in the class AI based on their East_Asian_Width assignment of A. Such characters are normally resolved to either ID or AL. However, the characters listed above are used as punctuation marks in Spanish, where they would behave more like a character of class OP.'),
                     Heading(level=3, contents='PO: Postfix Numeric (XB)'),
                     Paragraph(contents='Characters that usually follow a numerical expression may not be separated from preceding numeric characters or preceding closing characters, even if one or more space characters intervene. For example, there is no break opportunity in “(12.00) %”.'),
                     Paragraph(contents='Some of these characters—in particular, degree sign and percent sign—can appear on both sides of a numeric expression. Therefore the line breaking algorithm by default does not break between PO and numbers or letters on either side.'),
                     Paragraph(contents='Examples of Postfix characters include'),
                     TableRow(contents='0025\ue000PERCENT SIGN'),
                     TableRow(contents='00A2\ue000CENT SIGN'),
                     TableRow(contents='00B0\ue000DEGREE SIGN'),
                     TableRow(contents='060B\ue000AFGHANI SIGN'),
                     TableRow(contents='066A\ue000ARABIC PERCENT SIGN'),
                     TableRow(contents='2030\ue000PER MILLE SIGN'),
                     TableRow(contents='2031\ue000PER TEN THOUSAND SIGN'),
                     TableRow(contents='2032..2037\ue000PRIME..REVERSED TRIPLE PRIME'),
                     TableRow(contents='20A7\ue000PESETA SIGN'),
                     TableRow(contents='2103\ue000DEGREE CELSIUS'),
                     TableRow(contents='2109\ue000DEGREE FAHRENHEIT'),
                     TableRow(contents='FDFC\ue000RIAL SIGN'),
                     TableRow(contents='FE6A\ue000SMALL PERCENT SIGN'),
                     TableRow(contents='FF05\ue000FULLWIDTH PERCENT SIGN'),
                     TableRow(contents='FFE0\ue000FULLWIDTH CENT SIGN'),
                     Paragraph(contents='Alphabetic characters are also widely used as unit designators in a postfix position. For purposes of line breaking, their classification as alphabetic is sufficient to keep them together with the preceding number.'),
                     Heading(level=3, contents='PR: Prefix Numeric (XA)'),
                     Paragraph(contents='Characters that usually precede a numerical expression may not be separated from following numeric characters or following opening characters, even if a space character intervenes. For example, there is no break opportunity in “$ (100.00)”.'),
                     Paragraph(contents='Many currency signs can appear on both sides, or even the middle, of a numeric expression. Therefore the line breaking algorithm, by default, does not break between PR and numbers or letters on either side.'),
                     Paragraph(contents='The PR line break class consists of all currency symbols (General_Category Sc) except those in class PO, and additional characters, including:'),
                     TableRow(contents='002B\ue000PLUS SIGN'),
                     TableRow(contents='005C\ue000REVERSE SOLIDUS'),
                     TableRow(contents='00B1\ue000PLUS-MINUS SIGN'),
                     TableRow(contents='2116\ue000NUMERO SIGN'),
                     TableRow(contents='2212\ue000MINUS SIGN'),
                     TableRow(contents='2213\ue000MINUS-OR-PLUS SIGN'),
                     Paragraph(contents='Note: Many currency symbols may be used either as prefix or as postfix, depending on local convention. For details on the conventions used, see [CLDR].'),
                     Heading(level=3, contents='QU: Quotation (XB/XA)'),
                     Paragraph(contents='Some quotation characters can be opening or closing, or even both, depending on usage. The default is to treat them as both opening and closing. This will prevent some breaks that might have been legal for a particular language or usage, such as between a closing quote and a following opening punctuation.'),
                     Paragraph(contents='Note: If language information is available, it can be used to determine which character is used as the opening quote and which as the closing quote. See the information in Section 6.2, General Punctuation, in [Unicode]. In such a case, the quotation marks could be tailored to either OP or CL depending on their actual usage.'),
                     Paragraph(contents='The QU line break class consists of characters of General_Category Pf or Pi in the Unicode Character Database and additional characters, including:'),
                     TableRow(contents='0022\ue000QUOTATION MARK'),
                     TableRow(contents='0027\ue000APOSTROPHE'),
                     TableRow(contents='275B\ue000HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275C\ue000HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275D\ue000HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='275E\ue000HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT'),
                     TableRow(contents='2E00..2E01\ue000RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER'),
                     TableRow(contents='2E06..2E08\ue000RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER'),
                     TableRow(contents='2E0B\ue000RAISED SQUARE'),
                     Heading(level=3, contents='RI: Regional Indicator (B/A/XP)'),
                     Paragraph(contents='For line Breaking, the Regional Indicator characters are all those with the Unicode character property of Regional_Indicator. This includes:'),
                     TableRow(contents='1F1E6..1F1FF\ue000REGIONAL INDICATOR SYMBOL LETTER A .. REGIONAL INDICATOR SYMBOL LETTER Z'),
                     Paragraph(contents='Pairs of RI characters are used to represent a two-letter ISO 3166 region code.'),
                     Paragraph(contents='Runs of adjacent RI characters are grouped into pairs, beginning at the start of the run. No break opportunity occurs within a pair; breaks can occur between adjacent pairs. When RI characters are adjacent to characters of other classes, breaks can occur before and after, except where forbidden by other rules.'),
                     Heading(level=3, contents='SA: Complex-Context Dependent (South East Asian) (P)'),
                     Paragraph(contents='Runs of these characters require morphological analysis to determine break opportunities. This is similar to, for example, a hyphenation algorithm. For the characters that have this property, no break opportunities will be found otherwise. Therefore complex context analysis, often involving dictionary lookup of some form, is required to determine non-emergency line breaks. If such analysis is not available, it is recommended to treat them as AL.'),
                     Paragraph(contents='Note: These characters can be mapped into their equivalent line breaking classes by using dictionary lookup, thus permitting a logical separation of this algorithm from the morphological analysis.'),
                     Paragraph(contents='The class SA consists of all characters of General_Category Cf, Lo, Lm, Mn, or Mc in the following blocks that are not members of another line break class.'),
                     TableRow(contents='0E00..0E7F\ue000Thai'),
                     TableRow(contents='0E80..0EFF\ue000Lao'),
                     TableRow(contents='1000..109F\ue000Myanmar'),
                     TableRow(contents='1780..17FF\ue000Khmer'),
                     TableRow(contents='1950..197F\ue000Tai Le'),
                     TableRow(contents='1980..19DF\ue000New Tai Lue'),
                     TableRow(contents='1A20..1AAF\ue000Tai Tham'),
                     TableRow(contents='A9E0..A9FF\ue000Myanmar Extended-B'),
                     TableRow(contents='AA60..AA7F\ue000Myanmar Extended-A'),
                     TableRow(contents='AA80..AADF\ue000Tai Viet'),
                     TableRow(contents='11700..1173F\ue000Ahom'),
                     Heading(level=3, contents='SG: Surrogate (XP) (Non-tailorable)'),
                     Paragraph(contents='Line break class SG comprises all code points with General_Category Cs. The line breaking behavior of isolated surrogates is undefined. In UTF-16, paired surrogates represent non-BMP code points. Such code points must be resolved before assigning line break properties. In UTF-8 and UTF-32 surrogate code points represent corrupted data and their line break behavior is undefined.'),
                     Paragraph(contents='Note: The use of this line breaking class is deprecated. It was of limited usefulness for UTF-16 implementations that did not support characters beyond the BMP. The correct implementation is to resolve a pair of surrogates into a supplementary character before line breaking.'),
                     Heading(level=3, contents='SP: Space (A) (Non-tailorable)'),
                     Paragraph(contents='The space characters are used as explicit break opportunities; they allow line breaks before most other characters. However, spaces at the end of a line are ordinarily not measured for fit. If there is a sequence of space characters, and breaking after any of the space characters would result in the same visible line, then the line breaking position after the last space character in the sequence is the locally most optimal one. In other words, when the last character measured for fit is before the space character, any number of space characters are kept together invisibly on the previous line and the first non-space character starts the next line.'),
                     TableRow(contents='0020\ue000SPACE (SP)'),
                     Paragraph(contents='Note: By default, SPACE, but none of the other breaking spaces, is used in determining an indirect break. For other breaking space characters, see BA.'),
                     Heading(level=3, contents='SY: Symbols Allowing Break After (A)'),
                     Paragraph(contents='The SY line breaking property is intended to provide a break opportunity after, except in front of digits, so as to not break “1/2” or “06/07/99”.'),
                     TableRow(contents='002F\ue000SOLIDUS'),
                     Paragraph(contents='URLs are now so common in regular plain text that they need to be taken into account when assigning general-purpose line breaking properties. Slash (solidus) is allowed as an additional, limited break opportunity to improve layout of Web addresses. As a side effect, some common abbreviations such as “w/o” or “A/S”, which normally would not be broken, acquire a line break opportunity. The recommendation in this case is for the layout system not to utilize a line break opportunity allowed by SY unless the distance between it and the next line break opportunity exceeds an implementation-defined minimal distance.'),
                     Paragraph(contents='Note: Normally, symbols are treated as AL. However, symbols can be added to this line breaking class or classes BA, BB, and B2 by tailoring. This can be used to allow additional line breaks—for example, after “=”. Mathematics requires additional specifications for line breaking, which are outside the scope of this annex.'),
                     Heading(level=3, contents='VF: Virama Final (XB/A)'),
                     Paragraph(contents='The VF line break class is only used for scripts that use the Brahmic style of context analysis. It contains the viramas of Indic syllabic category Pure_Killer in scripts where the final consonant of a phonological syllable is expressed as a sequence of a consonant and such a virama, and the final consonant needs to be kept together with the preceding orthographic syllable. This includes:'),
                     TableRow(contents='1BF2..1BF3\ue000BATAK PANGOLAT..BATAK PANONGONAN'),
                     Paragraph(contents='Viramas of Indic syllabic category Pure_Killer that don’t meet the conditions for line break class VF use the line break class CM.'),
                     Heading(level=3, contents='VI: Virama (XB/XA)'),
                     Paragraph(contents='The VI line break class is only used for scripts that use the Brahmic style of context analysis. It contains the viramas of Indic syllabic categories Virama and Invisible_Stacker of such scripts.'),
                     TableRow(contents='1B44\ue000BALINESE ADEG ADEG'),
                     TableRow(contents='A9C0\ue000JAVANESE PANGKON'),
                     TableRow(contents='11046\ue000BRAHMI VIRAMA'),
                     TableRow(contents='1134D\ue000GRANTHA SIGN VIRAMA'),
                     TableRow(contents='11F42\ue000KAWI CONJOINER'),
                     Heading(level=3, contents='WJ: Word Joiner (XB/XA) (Non-tailorable)'),
                     Paragraph(contents='These characters glue together left and right neighbor characters such that they are kept on the same line.'),
                     TableRow(contents='2060\ue000WORD JOINER (WJ)'),
                     TableRow(contents='FEFF\ue000ZERO WIDTH NO-BREAK SPACE (ZWNBSP)'),
                     Paragraph(contents='The word joiner character is the preferred choice for an invisible character to keep other characters together that would otherwise be split across the line at a direct break. The character FEFF has the same effect, but because it is also used in an unrelated way as a byte order mark, the use of the WJ as the preferred interword glue simplifies the handling of FEFF.'),
                     Paragraph(contents='By definition, WJ and ZWNBSP take precedence over the action of SP, but not ZW.'),
                     Heading(level=3, contents='XX: Unknown (XP)'),
                     Paragraph(contents='The XX line break class consists of all characters with General_Category Co as well as those unassigned code points that are not within a CJK block. Unassigned characters in blocks or ranges of the Unicode codespace that have been reserved for CJK scripts default to the class ID, and are listed in the description of that class.'),
                     Paragraph(contents='Unassigned code positions, private-use characters, and characters for which reliable line breaking information is not available are assigned this line breaking property. The default behavior for this class is identical to class AL. Users can manually insert ZWSP or WORD JOINER around characters of class XX to allow or prevent breaks as needed.'),
                     Paragraph(contents='In addition, implementations can override or tailor this default behavior—for example, by assigning characters the property ID or another class. Doing so may give better default behavior for their users. There are other possible means of determining the desired behavior of private-use characters. For example, one implementation might treat any private-use character in ideographic context as ID, while another implementation might support a method for assigning specific properties to specific definitions of private-use characters. The details of such use of private-use characters are outside the scope of this standard.'),
                     Paragraph(contents='For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised to take into account the actual line breaking properties for these characters.'),
                     Paragraph(contents='For more information on handling default property values for unassigned characters, see the discussion on default property values in Section 5.3, Unknown and Missing Characters, of [Unicode].'),
                     Paragraph(contents='The line breaking rules in Section 6, Line Breaking Algorithm assume that all unknown characters have been assigned one of the other line breaking classes, such as AL, as part of assigning line breaking classes to the input characters.'),
                     Paragraph(contents='Implementations that do not support a given character should also treat it as unknown (XX).'),
                     Heading(level=3, contents='ZW: Zero Width Space (A) (Non-tailorable)'),
                     TableRow(contents='200B\ue000ZERO WIDTH SPACE (ZWSP)'),
                     Paragraph(contents='This character is used to enable additional (invisible) break opportunities wherever SPACE cannot be used. As its name implies, it normally has no width. However, its presence between two characters does not prevent increased letter spacing in justification.'),
                     Heading(level=3, contents='ZWJ: Zero Width Joiner (XA/XB) (Non-tailorable)'),
                     TableRow(contents='200D\ue000ZERO WIDTH JOINER (ZWJ)'),
                     Paragraph(contents='A ZWJ prevents breaks between most pairs of characters that would otherwise break. It has various uses, including as a connector in emoji zwj sequences and as a joiner in complex scripts.'),
                     Paragraph(contents='Emoji zwj sequences are defined by ED-16, emoji zwj sequence, in [UTS51] and implemented for line breaking by rule LB8a. In other respects, the line breaking behavior of ZWJ is that of a combining character of class CM.'),
                     Heading(level=3, contents='5.2 Dictionary Usage'),
                     Paragraph(contents='Dictionaries follow specific conventions that guide their use of special characters to indicate features of the terms they list. Marks used for some of these conventions may occur near line break opportunities and therefore interact with line breaking. For example, in one dictionary a natural hyphen in a word becomes a tilde dash when the word is split.'),
                     Paragraph(contents='This subsection briefly describes conventions used in several dictionaries. Where possible, the line breaking properties for characters commonly used in dictionaries have been assigned to accommodate these and similar conventions by default. However, implementing the full conventions in dictionaries requires tailoring of line break classes and rules or other types of special support.'),
                     Paragraph(contents='Looking up the noun “syllable” in eight dictionaries yields eight different conventions:'),
                     Paragraph(contents='Dictionary of the English Language (Samuel Johnson, 1843) SYʹLLABLE with an oversized U+02B9 which follows the vowel of the main syllable (not the syllable itself).'),
                     Paragraph(contents="Oxford English Dictionary (1st Edition) si·lă'bl where · is a slightly raised middle dot indicating the vowel of the stressed syllable (similar to Johnson’s prime). The ' is an apostrophe."),
                     Paragraph(contents='Oxford English Dictionary (2nd Edition) has gone to IPA ˈsɪləb(ə)l where ˈ is U+02C8. The () indicates that the schwa may be omitted.'),
                     Paragraph(contents='Chambers English Dictionary (7th Edition) silʹə-bl where the stressed syllable is followed by ʹ U+02B9 and - is a hyphen. When splitting a word like abateʹ- ment, the stress mark ʹ goes after stressed syllable followed by the hyphen. No special convention is used when splitting at hyphen.'),
                     Paragraph(contents='BBC English Dictionary sɪ̲ləbl where ɪ̲ is <U+026A, U+0332>. The vowel of the stressed syllable is underlined.'),
                     Paragraph(contents='Collins Cobuild English Language Dictionary sɪ̲ləbə⁰l where ɪ̲ is <U+026A, U+0332> and has the same meaning as in the BBC English Dictionary. The ⁰ is U+2070 and indicates the schwa may be omitted.'),
                     Paragraph(contents="Readers Digest Great Illustrated Dictionary syl‧la‧ble (sílləb'l) The spelling of the word has hyphenation points (‧ is U+2027) followed by phonetic spelling. The vowel of the stressed syllable is given an accent, rather than being followed by an accent. The ' is an apostrophe."),
                     Paragraph(contents='Webster’s 3rd New International Dictionary syl‧la‧ble /ˈsiləbəl/ The spelling of the word has hyphenation points (‧ is U+2027) and is followed by phonetic spelling. The stressed syllable is preceded by ˈ U+02C8. Webster’s splits words at the end of a line with a normal hyphen. A U+2E17 DOUBLE OBLIQUE HYPHEN indicates that a hyphenated word is split at the hyphen.'),
                     Paragraph(contents='Some dictionaries use a character that looks like a vertical series of four dots to indicate places where there is a syllable, but no allowable break. This can be represented by a sequence of U+205E VERTICAL FOUR DOTS followed by U+2060 WORD JOINER.'),
                     Heading(level=3, contents='5.3 Use of Hyphen'),
                     Paragraph(contents='The rules for treating hyphens in line breaking vary by language. In many instances, these rules are not supported as such in the algorithm, but the correct appearance can be realized by using a non-breaking hyphen.'),
                     Paragraph(contents='Some languages and some transliteration systems use a hyphen at the first position in a word. For example, the Finnish orthography uses a hyphen at the start of a word in certain types of compounds of the form xxx yyy -zzz (where xxx yyy is a two-word expression that acts as the first part of a compound noun, with zzz as the second part). Line break after the hyphen is not allowed here; therefore, instead of a regular hyphen, U+2011 NON-BREAKING HYPHEN should be used.'),
                     Paragraph(contents='There are line breaking conventions that modify the appearance of a line break when the line break opportunity is based on an explicit hyphen. In standard Polish orthography, explicit hyphens are always promoted to the next line if a line break occurs at that location in the text. For example, if, given the sentence "Tam wisi czerwono-niebieska flaga" ("There hangs a red-blue flag"), the optimal line break occurs at the location of the explicit hyphen, an additional hyphen will be displayed at the beginning of the next line like this:'),
                     Paragraph(contents='Tam wisi czerwono- -niebieska flaga.'),
                     Paragraph(contents='The same convention is used in Portuguese, where the use of hyphens is common, because they are mandatory for verb forms that include a pronoun. Homographs or ambiguity may arise if hyphens are treated incorrectly: for example, "disparate" means "folly" while "dispara-te" means "fire yourself" (or "fires onto you"). Therefore the former needs to be line broken as'),
                     Paragraph(contents='dispara- te'),
                     Paragraph(contents='and the latter as'),
                     Paragraph(contents='dispara- -te.'),
                     Paragraph(contents='A recommended practice is to type <SHY, NON-BREAKING HYPHEN> instead of <HYPHEN> to achieve promotion of the hyphen to the next line. This practice is reportedly already common and supported by major text layout applications. See also Section 5.4, Use of Soft Hyphen.'),
                     Heading(level=3, contents='5.4 Use of Soft Hyphen'),
                     Paragraph(contents='Unlike U+2010 HYPHEN, which always has a visible rendition, the character U+00AD SOFT HYPHEN (SHY) is an invisible format character that merely indicates a preferred intraword line break position. If the line is broken at that point, then whatever mechanism is appropriate for intraword line breaks should be invoked, just as if the line break had been triggered by another hyphenation mechanism, such as a dictionary lookup. Depending on the language and the word, that may produce different visible results, for example:'),
                     Paragraph(contents='• Simply inserting a hyphen glyph'),
                     Paragraph(contents='• Inserting a hyphen glyph and changing spelling in the divided word parts'),
                     Paragraph(contents='• Not showing any visible change and simply breaking at that point'),
                     Paragraph(contents='• Inserting a hyphen glyph at the beginning of the new line'),
                     Paragraph(contents='The following are a few examples of spelling changes. Each example shows the line break as “ / ” and any inserted hyphens. There are many other cases.'),
                     Paragraph(contents='• In pre-reform German orthography, a “c” before the hyphenation point can change into a “k”: “Drucker” hyphenates into “Druk- / ker”.'),
                     Paragraph(contents='• In modern Dutch, an e-diaeresis after the hyphenation point can change into a simple “e”: “geërfde” hyphenates into “ge- / erfde”, and “geëerd” into “ge-/ eerd”.'),
                     Paragraph(contents='• In Swedish, a consonant is sometimes doubled: “tuggummi”; hyphenates into “tugg- / gummi”.'),
                     Paragraph(contents='• In Dutch, a letter can disappear: “opaatje” hyphenates into “opa- / tje”.'),
                     Paragraph(contents='The inserted hyphen glyph can take a wide variety of shapes, as appropriate for the situation. Examples include shapes like U+2010 HYPHEN, U+058A ARMENIAN HYPHEN, U+180A MONGOLIAN NIRUGU, or U+1806 MONGOLIAN TODO SOFT HYPHEN.'),
                     Paragraph(contents='When a SHY is used to represent a possible hyphenation location, the spelling is that of the word without hyphenation: “tug<SHY>gummi”. It is up to the line breaking implementation to make any necessary spelling changes when such a possible hyphenation is actually used.'),
                     Paragraph(contents='Sometimes it is desirable to encode text that includes line breaking decisions and will not be further broken into lines. If such text includes hyphenations, the spelling needs to reflect the changes due to hyphenation: “tugg<U+2010>/ gummi”, including the appropriate character for any inserted hyphen. For a list of dash-like characters in Unicode, see Section 6.2, General Punctuation, in [Unicode].'),
                     Paragraph(contents='Hyphenation, and therefore the SHY, can be used with the Arabic script. If the rendering system breaks at that point, the display—including shaping—should be what is appropriate for the given language. For example, sometimes a hyphen-like mark is placed on the end of the line. This mark looks like a kashida, but is not connected to the letter preceding it. Instead, the appearance of the mark is as if it had been placed—and the line divided—after the contextual shapes for the line have been determined. For more information on shaping, see [UAX9] and Section 9.2, Arabic, of [Unicode].'),
                     Paragraph(contents='There are three types of hyphens: explicit hyphens, conditional hyphens, and dictionary-inserted hyphens resulting from a hyphenation process. There is no character code for the third kind of hyphen. If a distinction is desired, the fact that a hyphen is dictionary-inserted and not user-supplied can only be represented out of band or by using another control code instead of SHY.'),
                     Paragraph(contents='The action of a hyphenation algorithm is equivalent to the insertion of a SHY. However, when a word contains an explicit SHY, it is customarily treated as overriding the action of the hyphenator for that word.'),
                     Paragraph(contents='The sequence <SHY, NON-BREAKING HYPHEN> is given a particular interpretation, see Section 5.3, Use of Hyphen.'),
                     Heading(level=3, contents='5.5 Use of Double Hyphen'),
                     Paragraph(contents='In some fonts, notably Fraktur fonts, it is customary to use a double-stroke form of the hyphen, usually oblique. Such use is a font-based glyph variation and does not affect line breaking in any way. In texts using such a font, automatic hyphenation or SHY would also result in the display of a double-stroke, oblique hyphen.'),
                     Paragraph(contents='In some dictionaries, such as Webster’s 3rd New International Dictionary, double-stroke, oblique hyphens are used to indicate an explicit hyphen at the end of the line; in other words, a hyphen that would be retained when the term shown is not line wrapped. It is not necessary to store a special character in the data to support this option; one merely needs to substitute the glyph of any ordinary hyphen that winds up at the end of a line. In this example, if the shape of the special hyphen matches an existing character, such as U+2E17 DOUBLE OBLIQUE HYPHEN, that character can be substituted temporarily for display purposes by the line formatter. With such a convention, automatic hyphenation or SHY would result in the display of an ordinary hyphen without further substitution. (See also Section 5.3, Use of Hyphen).'),
                     Paragraph(contents='Certain linguistic notations make use of a double-stroke, oblique hyphen to indicate specific features. The U+2E17 DOUBLE OBLIQUE HYPHEN character used in this case is not a hyphen and does not represent a line break opportunity. Automatic hyphenation or SHY would result in the display of an ordinary hyphen.'),
                     Paragraph(contents='U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN is used in scientific notation, for example, to mark the presence of a space that would otherwise have been lost in transcribing text, such as the name of a chemical compound, into Katakana. In such notation, ordinary hyphens are retained.'),
                     Heading(level=3, contents='5.6 Tibetan Line Breaking'),
                     Paragraph(contents='The Tibetan script uses spaces sparingly, relying instead on the tsheg. There is no punctuation equivalent to a period in Tibetan; Tibetan shad characters indicate the end of a phrase, not a sentence. Phrases are often metrical—that is, written after every N syllables—and a new sentence can often start within the middle of a phrase. Sentence boundaries need to be determined grammatically rather than by punctuation.'),
                     Paragraph(contents='Traditionally there is nothing akin to a paragraph in Tibetan text. It is typical to have many pages of text without a paragraph break—that is, without an explicit line break. The closest thing to a paragraph in Tibetan is a new section or topic starting with U+0F12 or U+0F08. However, these occur inline: one section ends and a new one starts on the same line, and the new section is marked only by the presence of one of these characters.'),
                     Paragraph(contents='Some modern books, newspapers, and magazines format text more like English with a break before each section or topic—and (often) the title of the section on a separate line. Where this is done, authors insert an explicit line break. Western punctuation (full stop, question mark, exclamation mark, comma, colon, semicolon, quotes) is starting to appear in Tibetan documents, particularly those published in India, Bhutan, and Nepal. Because there are no formal rules for their use in Tibetan, they get treated generically by default. In Tibetan documents published in China, CJK bracket and punctuation characters occur frequently; it is recommended to treat these as in horizontally written Chinese.'),
                     Paragraph(contents='Note: The detailed rules for formatting Tibetan texts are complex, and the original assignment of line break classes was found to be insufficient. In [Unicode4.1], the assignment of line break classes for Tibetan was revised significantly in an attempt to better model Tibetan line breaking behavior. No new rules or line break classes were added.'),
                     Paragraph(contents='The set of line break classes for Tibetan is expected to provide a good starting point, even though there is limited practical experience in their implementation. As more experience is gained, some modifications, possibly including new rules or additional line break classes, can be expected.'),
                     Heading(level=3, contents='5.7 Word Separator Characters'),
                     Paragraph(contents='Visible word separator characters may behave in one of three ways at line breaks. As an example, consider the text “The:quick:brown:fox:jumped.”, where the colon (:) represents a visible word separator, with a break between “brown” and “fox”. The desired visual appearance could be one of the following:'),
                     Paragraph(contents='1. suppress the visible word separator'),
                     Paragraph(contents='The:quick:brown fox:jumped.'),
                     Paragraph(contents='2. break before the visible word separator'),
                     Paragraph(contents='The:quick:brown :fox:jumped.'),
                     Paragraph(contents='3. break after the visible word separator'),
                     Paragraph(contents='The:quick:brown: fox:jumped.'),
                     Paragraph(contents='Both (2) and (3) can be expressed with the Unicode Line Breaking Algorithm by tailoring the Line Break property value for the word separator character to be Break Before or Break After, respectively.'),
                     Paragraph(contents='For case (1), the line break opportunity is positioned after the word separator character, as in case (3), but the visual display of the character is suppressed. The means by which a line layout and display process inhibits the visible display of the separator character are outside of the scope of the Line Break algorithm. U+1680 OGHAM SPACE MARK is an example of a character which may exhibit this behavior.'),
                     Heading(level=2, contents='6 Line Breaking Algorithm'),
                     Paragraph(contents='Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], describes a particular method for boundary detection, based on a set of hierarchical rules and character classifications. That method is well suited for implementation of some of the advanced heuristics for line breaking.'),
                     Paragraph(contents='The line breaking algorithm presented in this section can be expressed in a series of rules that take line breaking classes defined in Section 5.1, Description of Line Breaking Properties, as input. The title of each rule contains a mnemonic summary of the main effect of the rule. The formal statement of each line breaking rules consists either of a remap rule or of one or more regular expressions containing one or more line breaking classes and one of three special symbols indicating the type of line break opportunity:'),
                     Paragraph(contents='! Mandatory break at the indicated position'),
                     Paragraph(contents='× No break allowed at the indicated position'),
                     Paragraph(contents='÷ Break allowed at the indicated position'),
                     Paragraph(contents='In the regular expressions, parentheses may be used for grouping, and square brackets, &, -, and \\p{...} may be used to compose sets of characters, as in UAX #29, Unicode Text Segmentation [UAX29] and in UTS #18, Unicode Regular Expressions [UTS18]. Use of a line break class such as BK is short for the property expression \\p{lb=BK}.'),
                     Paragraph(contents='The rules are applied in order. That is, there is an implicit “otherwise” at the front of each rule following the first. It is possible to construct alternate sets of such rules that are fully equivalent. To be equivalent, an alternate set of rules must have the same effect.'),
                     Paragraph(contents='The distinction between a direct break and an indirect break as defined in Section 2, Definitions, is handled in rule LB18, which explicitly considers the effect of SP. Because rules are applied in order, allowing breaks following SP in rule LB18 implies that any prohibited break in rules LB19–LB30 is equivalent to an indirect break.'),
                     Paragraph(contents='The examples for each rule use representative characters, where ‘H’ stands for an ideographs, ‘h’ for small kana, and ‘9’ for digits. Except where a rule contains no expressions, the italicized text of the rule is intended merely as a handy summary.'),
                     Paragraph(contents='The algorithm consists of a part for which tailoring is prohibited and a freely tailorable part.'),
                     Heading(level=3, contents='6.1 Non-tailorable Line Breaking Rules'),
                     Paragraph(contents='The rules in this subsection and the membership in the classes BK, CM, CR, GL, LF, NL, SP, WJ, ZW and ZWJ define behavior that is required of all line break implementations; see Section 4, Conformance.'),
                     Heading(level=4, contents='Resolve line breaking classes:'),
                     Rule(contents='LB1 Assign a line breaking class to each code point of the input. Resolve AI, CB, CJ, SA, SG, and XX into other line breaking classes depending on criteria outside the scope of this algorithm.'),
                     Paragraph(contents='In the absence of such criteria all characters with a specific combination of original class and General_Category property value are resolved as follows:'),
                     TableRow(contents='Resolved\ue000Original\ue000General_Category'),
                     TableRow(contents='AL\ue000AI, SG, XX\ue000Any'),
                     TableRow(contents='CM\ue000SA\ue000Only Mn or Mc'),
                     TableRow(contents='AL\ue000SA\ue000Any except Mn and Mc'),
                     TableRow(contents='NS\ue000CJ\ue000Any'),
                     Heading(level=4, contents='Start and end of text:'),
                     Paragraph(contents='There are two special logical positions: sot, which occurs before the first character in the text, and eot, which occurs after the last character in the text. Thus an empty string would consist of sot followed immediately by eot. With these two definitions, the line break rules for start and end of text can be specified as follows:'),
                     Rule(contents='LB2 Never break at the start of text.'),
                     Formula(contents='sot ×'),
                     Rule(contents='LB3 Always break at the end of text.'),
                     Formula(contents='! eot'),
                     Paragraph(contents='These two rules are designed to deal with degenerate cases, so that there is at least one character on each line, and at least one line break for the whole text. Emergency line breaking behavior usually also allows line breaks anywhere on the line if a legal line break cannot be found. This has the effect of preventing text from running into the margins.'),
                     Heading(level=4, contents='Mandatory breaks:'),
                     Paragraph(contents='A hard line break can consist of BK or a Newline Function (NLF) as described in Section 5.8, Newline Guidelines, of [Unicode]. These three rules are designed to handle the line ending and line separating characters as described there.'),
                     Rule(contents='LB4 Always break after hard line breaks.'),
                     Formula(contents='BK !'),
                     Rule(contents='LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.'),
                     Formula(contents='CR × LF'),
                     Formula(contents='CR !'),
                     Formula(contents='LF !'),
                     Formula(contents='NL !'),
                     Paragraph(contents='Note: When displaying source code, failing to support all forms of the new line function can have security implications; for instance, executable code can appear commented out. It is therefore strongly recommended that source code editors support the VT character within the BK class, and support the NEL character within the NL class, even though that support is not required for conformance. See Unicode Technical Standard #55, Unicode Source Code Handling [UTS55].'),
                     Rule(contents='LB6 Do not break before hard line breaks.'),
                     Formula(contents='× ( BK | CR | LF | NL )'),
                     Heading(level=4, contents='Explicit breaks and non-breaks:'),
                     Rule(contents='LB7 Do not break before spaces or zero width space.'),
                     Formula(contents='× SP'),
                     Formula(contents='× ZW'),
                     Rule(contents='LB8 Break before any character following a zero-width space, even if one or more spaces intervene.'),
                     Formula(contents='ZW SP* ÷'),
                     Rule(contents='LB8a Do not break after a zero width joiner.'),
                     Formula(contents='ZWJ ×'),
                     Paragraph(contents='A ZWJ will prevent breaks between most pairs of characters. This behavior is used to prevent breaks within emoji zwj sequences.'),
                     Heading(level=4, contents='Combining marks:'),
                     Paragraph(contents='See also Section 9.2, Legacy Support for Space Character as Base for Combining Marks.'),
                     Rule(contents='LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of the base character in all of the following rules. Treat ZWJ as if it were CM.'),
                     Formula(contents='Treat X (CM | ZWJ)* as if it were X.'),
                     Paragraph(contents='where X is any line break class except BK, CR, LF, NL, SP, or ZW.'),
                     Paragraph(contents='At any possible break opportunity between CM and a following character, CM behaves as if it had the type of its base character. Note that despite the summary title, this rule is not limited to standard combining character sequences. For the purposes of line breaking, sequences containing most of the control codes or layout control characters are treated like combining sequences.'),
                     Rule(contents='LB10 Treat any remaining combining mark or ZWJ as AL.'),
                     Formula(contents='Treat any remaining CM or ZWJ as it if were AL.'),
                     Paragraph(contents='This catches the case where a CM is the first character on the line or follows SP, BK, CR, LF, NL, or ZW.'),
                     Heading(level=4, contents='Word joiner:'),
                     Rule(contents='LB11 Do not break before or after Word joiner and related characters.'),
                     Formula(contents='× WJ'),
                     Formula(contents='WJ ×'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12 Do not break after NBSP and related characters.'),
                     Formula(contents='GL ×'),
                     Heading(level=3, contents='6.2 Tailorable Line Breaking Rules'),
                     Paragraph(contents='The following rules and the classes referenced in them provide a reasonable default set of line break opportunities. Implementations should implement them unless alternate approaches produce better results for some classes of text or applications. When using alternative rules or algorithms, implementations must ensure that the mandatory breaks, break opportunities and non-break positions determined by the algorithm and rules of Section 6.1, Non-tailorable Line Breaking Rules, are preserved. See Section 4, Conformance.'),
                     Heading(level=4, contents='Non-breaking characters:'),
                     Rule(contents='LB12a Do not break before NBSP and related characters, except after spaces and hyphens.'),
                     Formula(contents='[^SP BA HY] × GL'),
                     Paragraph(contents='The expression [^SP, BA, HY] designates any line break class other than SP, BA or HY. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break. Unlike the case for WJ, inserting a SP overrides the non-breaking nature of a GL. Allowing a break after BA or HY matches widespread implementation practice and supports a common way of handling special line breaking of explicit hyphens, such as in Polish and Portuguese. See Section 5.3, Use of Hyphen.'),
                     Heading(level=4, contents='Opening and closing:'),
                     Paragraph(contents='These have special behavior with respect to spaces, and therefore come before rule LB18.'),
                     Rule(contents='LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.'),
                     Formula(contents='× CL'),
                     Formula(contents='× CP'),
                     Formula(contents='× EX'),
                     Formula(contents='× IS'),
                     Formula(contents='× SY'),
                     Rule(contents='LB14 Do not break after ‘[’, even after spaces.'),
                     Formula(contents='OP SP* ×'),
                     Rule(contents='LB15a Do not break after an unresolved initial punctuation that lies at the start of the line, after a space, after opening punctuation, or after an unresolved quotation mark, even after spaces.'),
                     Formula(contents='(sot | BK | CR | LF | NL | OP | QU | GL | SP | ZW) [\\p{Pi}&QU] SP* ×'),
                     Rule(contents='LB15b Do not break before an unresolved final punctuation that lies at the end of the line, before a space, before a prohibited break, or before an unresolved quotation mark, even after spaces.'),
                     Formula(contents='× [\\p{Pf}&QU] ( SP | GL | WJ | CL | QU | CP | EX | IS | SY | BK | CR | LF | NL | ZW | eot)'),
                     Rule(contents='LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.'),
                     Formula(contents='(CL | CP) SP* × NS'),
                     Rule(contents='LB17 Do not break within ‘——’, even with intervening spaces.'),
                     Formula(contents='B2 SP* × B2'),
                     Heading(level=4, contents='Spaces:'),
                     Rule(contents='LB18 Break after spaces.'),
                     Formula(contents='SP ÷'),
                     Heading(level=4, contents='Special case rules:'),
                     Rule(contents='LB19 Do not break before or after quotation marks, such as ‘ ” ’.'),
                     Formula(contents='× QU'),
                     Formula(contents='QU ×'),
                     Rule(contents='LB20 Break before and after unresolved CB.'),
                     Formula(contents='÷ CB'),
                     Formula(contents='CB ÷'),
                     Paragraph(contents='Conditional breaks should be resolved external to the line breaking rules. However, the default action is to treat unresolved CB as breaking before and after.'),
                     Rule(contents='LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.'),
                     Formula(contents='× BA'),
                     Formula(contents='× HY'),
                     Formula(contents='× NS'),
                     Formula(contents='BB ×'),
                     Rule(contents="LB21a Don't break after Hebrew + Hyphen."),
                     Formula(contents='HL (HY | BA) ×'),
                     Rule(contents='LB21b Don’t break between Solidus and Hebrew letters.'),
                     Formula(contents='SY × HL'),
                     Rule(contents='LB22 Do not break before ellipses.'),
                     Formula(contents='× IN'),
                     Paragraph(contents='Examples: ‘9...’, ‘a...’, ‘H...’'),
                     Heading(level=4, contents='Numbers:'),
                     Paragraph(contents='Do not break alphanumerics.'),
                     Rule(contents='LB23 Do not break between digits and letters.'),
                     Formula(contents='(AL | HL) × NU'),
                     Formula(contents='NU × (AL | HL)'),
                     Rule(contents='LB23a Do not break between numeric prefixes and ideographs, or between ideographs and numeric postfixes.'),
                     Formula(contents='PR × (ID | EB | EM)'),
                     Formula(contents='(ID | EB | EM) × PO'),
                     Rule(contents='LB24 Do not break between numeric prefix/postfix and letters, or between letters and prefix/postfix.'),
                     Formula(contents='(PR | PO) × (AL | HL)'),
                     Formula(contents='(AL | HL) × (PR | PO)'),
                     Paragraph(contents='In general, it is recommended to not break lines inside numbers of the form described by the following regular expression:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * (CL | CP) ? ( PR | PO) ?'),
                     Paragraph(contents='Examples: $(12.35) 2,1234 (12)¢ 12.54¢'),
                     Paragraph(contents='The default line breaking algorithm approximates this with the following rule. Note that some cases have already been handled, such as ‘9,’, ‘[9’. For a tailoring that supports the regular expression directly, as well as a key to the notation see Section 8.2, Examples of Customization.'),
                     Rule(contents='LB25 Do not break between the following pairs of classes relevant to numbers:'),
                     Formula(contents='CL × PO'),
                     Formula(contents='CP × PO'),
                     Formula(contents='CL × PR'),
                     Formula(contents='CP × PR'),
                     Formula(contents='NU × PO'),
                     Formula(contents='NU × PR'),
                     Formula(contents='PO × OP'),
                     Formula(contents='PO × NU'),
                     Formula(contents='PR × OP'),
                     Formula(contents='PR × NU'),
                     Formula(contents='HY × NU'),
                     Formula(contents='IS × NU'),
                     Formula(contents='NU × NU'),
                     Formula(contents='SY × NU'),
                     Paragraph(contents='Example pairs: ‘$9’, ‘$[’, ‘$-’, ‘-9’, ‘/9’, ‘99’, ‘,9’, ‘9%’ ‘]%’'),
                     Heading(level=4, contents='Korean syllable blocks'),
                     Paragraph(contents='Conjoining jamos, Hangul syllables, or combinations of both form Korean Syllable Blocks. Such blocks are effectively treated as if they were Hangul syllables; no breaks can occur in the middle of a syllable block. See Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29], for more information on Korean Syllable Blocks.'),
                     Rule(contents='LB26 Do not break a Korean syllable.'),
                     Formula(contents='JL × (JL | JV | H2 | H3)'),
                     Formula(contents='(JV | H2) × (JV | JT)'),
                     Formula(contents='(JT | H3) × JT'),
                     Paragraph(contents='where the notation (JT | H3) means JT or H3. The effective line breaking class for the syllable block matches the line breaking class for Hangul syllables, which is ID by default. This is achieved by the following rule:'),
                     Rule(contents='LB27 Treat a Korean Syllable Block the same as ID.'),
                     Formula(contents='(JL | JV | JT | H2 | H3) × PO'),
                     Formula(contents='PR × (JL | JV | JT | H2 | H3)'),
                     Paragraph(contents='When Korean uses SPACE for line breaking, the classes in rule LB26, as well as characters of class ID, are often tailored to AL; see Section 8, Customization.'),
                     Heading(level=4, contents='Finally, join alphabetic letters into words and break everything else.'),
                     Rule(contents='LB28 Do not break between alphabetics (“at”).'),
                     Formula(contents='(AL | HL) × (AL | HL)'),
                     Rule(contents='LB28a Do not break inside the orthographic syllables of Brahmic scripts.'),
                     Formula(contents='AP × (AK | ◌ | AS)'),
                     Formula(contents='(AK | ◌ | AS) × (VF | VI)'),
                     Formula(contents='(AK | ◌ | AS) VI × (AK | ◌)'),
                     Formula(contents='(AK | ◌ | AS) × (AK | ◌ | AS) VF'),
                     Rule(contents='LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).'),
                     Formula(contents='IS × (AL | HL)'),
                     Rule(contents='LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.'),
                     Formula(contents='(AL | HL | NU) × [OP-[\\p{ea=F}\\p{ea=W}\\p{ea=H}]]'),
                     Formula(contents='[CP-[\\p{ea=F}\\p{ea=W}\\p{ea=H}]] × (AL | HL | NU)'),
                     Paragraph(contents='The purpose of this rule is to prevent breaks in common cases where a part of a word appears between delimiters—for example, in “person(s)”.'),
                     Paragraph(contents='The excluded set ([\\p{ea=F}\\p{ea=W}\\p{ea=H}]) refines the behavior of this rule, to enable a break before an East Asian OP or after an East Asian CP. Those cases are identified by excluding East_Asian_Width values of Fullwidth, Wide, or Halfwidth. This is illustrated by the following example, which shows East Asian corner brackets immediately following a Latin letter in Japanese text. In such a case, the preferred line break is between the Latin letter and the opening angle bracket.'),
                     TableRow(contents='Preferred\ue000Bad Break'),
                     TableRow(contents='日中韓統合漢字拡張G 「ユニコード」\ue000日中韓統合漢字拡張 G「ユニコード」'),
                     Rule(contents='LB30a Break between two regional indicator symbols if and only if there are an even number of regional indicators preceding the position of the break.'),
                     Formula(contents='sot (RI RI)* RI × RI'),
                     Formula(contents='[^RI] (RI RI)* RI × RI'),
                     Rule(contents='LB30b Do not break between an emoji base (or potential emoji) and an emoji modifier.'),
                     Formula(contents='EB × EM'),
                     Formula(contents='[\\p{Extended_Pictographic}&\\p{Cn}] × EM'),
                     Rule(contents='LB31 Break everywhere else.'),
                     Formula(contents='ALL ÷'),
                     Formula(contents='÷ ALL'),
                     Heading(level=2, contents='7 Deleted'),
                     Paragraph(contents='Formerly was: Pair Table-Based Implementation.'),
                     Heading(level=2, contents='8 Customization'),
                     Paragraph(contents='A real-world line breaking algorithm has to be tailorable to some degree to meet user or document requirements.'),
                     Paragraph(contents='In Korean, for example, two distinct line breaking modes occur, which can be summarized as breaking after each character or breaking after spaces (as in Latin text). The former tends to occur when text is set justified; the latter, when ragged margins are used. In that case, even ideographs are broken only at space characters. In Japanese, for example, tighter and looser specifications of prohibited line breaks may be used.'),
                     Paragraph(contents='Specialized text or specialized text constructs may need specific line breaking behavior that differs from the default line breaking rules given in this annex. This may require additional tailorings beyond those considered in this section. For example, the rules given here are insufficient for mathematical equations, whether inline or in display format. Likewise, text that commonly contains lengthy URLs might benefit from special tailoring that suppresses SY × NU from rule LB25 within the scope of a URL to allow breaks after a “/” separated segment in the URL regardless of whether the next segment starts with a digit.'),
                     Paragraph(contents='Notes:'),
                     Paragraph(contents='• Locale-sensitive line break specifications can be expressed in LDML [UTS35]. Tailorings are available in the Common Locale Data Repository [CLDR].'),
                     Paragraph(contents='• Some changes to rules and data are needed for the best segmentation behavior of emoji zwj sequences [UTS51]. Implementations are strongly encouraged to use the line break rules in the latest version of CLDR (Version 35 or later) [CLDR] and the latest emoji properties (Version 12.0 or later) [UTS51].'),
                     Paragraph(contents='The remainder of this section gives an overview of common types of tailorings.'),
                     Heading(level=3, contents='8.1 Types of Tailoring'),
                     Paragraph(contents='There are two principal ways of tailoring the line breaking algorithm:'),
                     Paragraph(contents='1. Changing the line breaking class assignment for some characters This is useful in cases where the line breaking properties of one class of characters are occasionally lumped together with the properties of another class to achieve a less restrictive line breaking behavior.'),
                     Paragraph(contents='2. Changing the line breaking rules Adding new rules, or altering or removing existing rules, provides more flexibility in changing the line breaking behavior. This can also include introducing new character classes for use by the new or altered rules.'),
                     Paragraph(contents='For example, specialized rules could be added to recognize and break common constructs, such as URLs, numeric expressions, and so on. Such open-ended customizations place no limits on possible changes, other than the requirement that non-tailorable line breaking rules be correctly implemented. This means that whatever changes are made must be equivalent to changes to the line breaking assignments of tailorable line breaking rules, and to alteration, removal, or addition of rules applied after rule LB12.'),
                     Heading(level=3, contents='8.2 Examples of Customization'),
                     Paragraph(contents='Example 1. The exact method of resolving the line break class for characters with class SA is not specified in the default algorithm. One method of implementing line breaks for complex scripts is to invoke context-based classification for all runs of characters with class SA. For example, a dictionary-based algorithm could return different classes for Thai letters depending on their context: letters at the start of Thai words would become BB and other Thai letters would become AL. Alternatively, for text consisting of, or predominantly containing characters with line breaking class SA, it may be useful to instead defer the determination of line breaks to a different algorithm.'),
                     Paragraph(contents='Example 2. To implement terminal style line breaks, it would be necessary to allow breaks at fixed positions. These could occur inside a run of spaces or in the middle of words without regard to hyphenation. Such a modification essentially disregards the output of the line breaking algorithm, and is therefore not a conformant tailoring. For a system that supports both regular line breaking and terminal style line breaks, only some of its line break modes would be conformant.'),
                     Paragraph(contents='Example 3. Depending on the nature of the document, Korean either uses implicit breaking around characters (type 2 as defined in Section 3, Introduction) or uses spaces (type 1). Space-based layout is common in magazines and other informal documents with ragged margins, while books, with both margins justified, use the other type, as it affords more line break opportunities and therefore leads to better justification.'),
                     Paragraph(contents='Example 4. In a Far Eastern context it is sometimes necessary to allow alphabetic characters and digit strings to break anywhere. According to reference [Suign98], this can again be done in the same way as Korean. This can be implemented by adjusting rules LB23, LB25 and LB28 to allow breaks between all permutations of the character classes AL and NU.'),
                     Paragraph(contents='Example 5. Some users prefer to relax the requirement that Kana syllables be kept together. For example, the syllable kyu, spelled with the two kanas KI and “small yu”, would no longer be kept together as if KI and yu were atomic. This customization can be handled by mapping class CJ to be handled as class ID in rule LB1.'),
                     Paragraph(contents='Example 6. Tailor to prevent line breaks from falling within default grapheme clusters, as defined by Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29]. The tailoring can be accomplished by first segmenting the text into grapheme clusters according to the rules defined in UAX #29, and then finding line breaks according to the default line break rules, as follows: After applying the mandatory line break rules, give each grapheme cluster the line breaking class of its first code point.'),
                     Paragraph(contents='An example of a grapheme cluster that would be split by the default line break rules is U+0020 SPACE followed by a combining mark.'),
                     Paragraph(contents='Example 7. Regular expression-based line breaking engines might get better results using a tailoring that directly implements the following regular expression for numeric expressions:'),
                     Formula(contents='( PR | PO) ? ( OP | HY ) ? NU (NU | SY | IS) * ( CL | CP ) ? ( PR | PO) ?'),
                     Paragraph(contents='This is equivalent to replacing the rule LB25 by the following tailored rule:'),
                     Paragraph(contents='Regex-Number: Do not break numbers.'),
                     Formula(contents='(PR | PO) × ( OP | HY )? NU'),
                     Formula(contents='( OP | HY ) × NU'),
                     Formula(contents='NU × (NU | SY | IS)'),
                     Formula(contents='NU (NU | SY | IS)* × (NU | SY | IS | CL | CP )'),
                     Formula(contents='NU (NU | SY | IS)* (CL | CP)? × (PO | PR)'),
                     Paragraph(contents='In these tailored rules, (PR | PO) means PR or PO, the Symbol “?” means 0 or one occurrence and the symbol “*” means 0 or more occurrences. The last two rules can have a left side of any non-zero length.'),
                     Paragraph(contents='When the tailored rule is used, LB13 need to be tailored as follows:'),
                     Formula(contents='[^NU] × CL'),
                     Formula(contents='[^NU] × CP'),
                     Formula(contents='× EX'),
                     Formula(contents='[^NU] × IS'),
                     Formula(contents='[^NU] × SY'),
                     Paragraph(contents='If this is not done, single digits might be handled by rule LB13 before being handled in the regular expression. In these tailored rules [^NU] designates any line break class other than NU. The symbol ^ is used, instead of !, to avoid confusion with the use of ! to indicate an explicit break.'),
                     Paragraph(contents='Example 8. Some scripts that traditionally follow the Brahmic style of context analysis are nowadays occasionally written with spaces, and word-based line breaking might be desired in that case. This can be accomplished by remapping the line break classes AK, AP, and AS to AL; and VI or VF to CM. In some cases other word-forming characters, such as U+A9CF JAVANESE PANGRANGKEP, also need to be remapped to AL. Digits, which may have line break class AS or ID in such scripts, need to be remapped to NU. Punctuation, which may have line break class ID in such scripts, need to be remapped to AL or BA.'),
                     Heading(level=2, contents='9 Implementation Notes'),
                     Paragraph(contents='This section provides additional notes on implementation issues.'),
                     Heading(level=3, contents='9.1 Combining Marks in Regular Expression-Based Implementations'),
                     Paragraph(contents='Implementations that use regular expressions cannot directly express rules LB9 and LB10. However, it is possible to make these rules unnecessary by rewriting all the rules from LB11 on down so that the overall result of the algorithm is unchanged. This restatement of the rules is therefore not a tailoring, but rather an equivalent statement of the algorithm that can be directly expressed as regular expressions.'),
                     Paragraph(contents='To replace rule LB9, terms of the form'),
                     Paragraph(contents='B # A'),
                     Paragraph(contents='B SP* # A'),
                     Paragraph(contents='B #'),
                     Paragraph(contents='B SP* #'),
                     Paragraph(contents='are replaced by terms of the form'),
                     Paragraph(contents='B CM* # A'),
                     Paragraph(contents='B CM* SP* # A'),
                     Paragraph(contents='B CM* #'),
                     Paragraph(contents='B CM* SP* #'),
                     Paragraph(contents='where B and A are any line break class or set of alternate line break classes, such as (X |Y), and where # is any of the three operators !, ÷, or ×.'),
                     Paragraph(contents='Note that because sot, BK, CR, LF, NL, and ZW are all handled by rules above LB9, these classes cannot occur in position B in any rule that is rewritten as shown here.'),
                     Paragraph(contents='Replace LB10 by the following rule:'),
                     Paragraph(contents='× CM'),
                     Paragraph(contents='For each rule containing AL on its left side, add a rule that is identical except for the replacement of AL by CM, but taking care of correctly handling sets of alternate line break classes. For example, for rule'),
                     Paragraph(contents='(AL | NU) × OP'),
                     Paragraph(contents='add another rule'),
                     Paragraph(contents='CM × OP.'),
                     Paragraph(contents='These prescriptions for rewriting the rules are, in principle, valid even where the rules have been tailored as permitted in Section 4, Conformance. However, for extended context rules such as in Example 7, additional considerations apply. These are described in Section 6.2, Replacing Ignore Rules, of Unicode Standard Annex #29, “Unicode Text Segmentation” [UAX29].'),
                     Heading(level=3, contents='9.2 Legacy Support for Space Character as Base for Combining Marks'),
                     Paragraph(contents='As stated in Section 7.9, Combining Marks of [Unicode], combining characters are shown in isolation by applying them to U+00A0 NO-BREAK SPACE (NBSP). In earlier versions, this recommendation included the use of U+0020 SPACE. The use of SPACE for this purpose has been deprecated because it leads to many complications in text processing. The visual appearance is the same with both NO-BREAK SPACE and SPACE, but the line breaking behavior is different. Under the current rules, SP CM* will allow a break between SP and CM*, which could result in a new line starting with a combining mark. Previously, whenever the base character was SP, the sequences CM* and SP CM* were defined to act like indivisible clusters, allowing breaks on either side like ID.'),
                     Paragraph(contents='Where backward compatibility with documents created under the prior practice is desired, the following tailoring should be applied to those CM characters that have a General_Category value of Combining_Mark (M):'),
                     Paragraph(contents='Legacy-CM: In all of the rules following rule LB8, if a space is the base character for a combining mark, the space is changed to type ID. In other words, break before SP in the same cases as one would break before an ID.'),
                     Formula(contents='Treat SP CM* as if it were ID.'),
                     Paragraph(contents='While this tailoring changes the location of the line break opportunities in the string, it is ordinarily not expected to affect the display of the text. That is because spaces at the end of the line are normally invisible and the recommended display for isolated combining marks is the same as if they were applied to a preceding SPACE or NBSP.'),
                     Heading(level=2, contents='10 Testing'),
                     Paragraph(contents='As with the other default specifications, implementations are free to override (tailor) the results to meet the requirements of different environments or particular languages as described in Section 4, Conformance. For those who do implement the default breaks as specified in this annex, plus the tailoring of numbers described in Example 7 of Section 8.2, Examples of Customization, and wish to check that that their implementation matches that specification, a test file has been made available in [Tests14].'),
                     Paragraph(contents='These tests cannot be exhaustive, because of the large number of possible combinations; but they do provide samples that test all pairs of property values, using a representative character for each value, plus certain other sequences.'),
                     Paragraph(contents='A sample HTML file is also available for each that shows various combinations in chart form, in [Charts14]. The header cells of the chart consist of a property value, followed by a representative code point number. The body cells in the chart show the break status: whether a break occurs between the row property value and the column property value. If the browser supports tool-tips, then hovering the mouse over the code point number will show the character name, General_Category and Script property values. Hovering over the break status will display the number of the rule responsible for that status.'),
                     Paragraph(contents='Note: To determine a break it is generally not sufficient to just test the two adjacent characters.'),
                     Paragraph(contents='The chart is followed by some test cases. These test cases consist of various strings with the break status between each pair of characters shown by blue lines for breaks and by whitespace for non-breaks. Hovering over each character (with tool-tips enabled) shows the character name and property value; hovering over the break status shows the number of the rule responsible for that status.'),
                     Paragraph(contents='Due to the way they have been mechanically processed for generation, the test rules do not match the rules in this annex precisely. In particular:'),
                     Paragraph(contents='1. The rules are cast into a more regex-style.'),
                     Paragraph(contents='2. The rules “sot”, “eot”, and “Any” are added mechanically and have artificial numbers.'),
                     Paragraph(contents='3. The rules are given decimal numbers without prefixes, so rules such as LB14 are given a number using tenths, such as 14.0.'),
                     Paragraph(contents='4. Where a rule has multiple parts (lines), each one is numbered using hundredths, such as'),
                     Paragraph(contents='• 13.01) [^NU] × CL'),
                     Paragraph(contents='• 13.02) × EX'),
                     Paragraph(contents='• ...'),
                     Paragraph(contents='5. LB9 and LB10 are handled as described in Section 9.1, Combining Marks in Regular Expression-Based Implementations, resulting in a transformation of the rules not visible in the tests.'),
                     Paragraph(contents='The mapping from the rule numbering in this annex to the numbering for the test rules is summarized in Table 4.'),
                     Paragraph(contents='Table 4. Numbering of Test Rules'),
                     TableRow(contents='Rule in This Annex\ue000Test Rule\ue000Comment'),
                     TableRow(contents='LB2\ue0000.2\ue000start of text'),
                     TableRow(contents='LB3\ue0000.3\ue000end of text'),
                     TableRow(contents='LB12a\ue00012.0\ue000GL ×'),
                     TableRow(contents='LB12b\ue00012.1\ue000[^SP, BA, HY] × GL'),
                     TableRow(contents='LB31\ue000999\ue000÷ any'),
                     Heading(level=2, contents='11 Rule Numbering Across Versions'),
                     Paragraph(contents='Table 5 documents changes in the numbering of line breaking rules. A duplicate number indicates that a rule was subsequently split. (In each version, the rules are applied in their numerical order, not in the order they appear in this table.) Versions prior to 3.0.1 are not documented here.'),
                     Paragraph(contents='Table 5. Rule Numbering Across Versions'),
                     TableRow(contents='15.1.0\ue0009.0.0\ue0008.0.0\ue0006.2.0\ue0006.1.0\ue0005.2.0\ue0005.1.0\ue0005.0.0\ue0004.1.0\ue0004.0.1\ue0004.0.0\ue0003.2.0\ue0003.1.0\ue0003.0.1'),
                     TableRow(contents='LB1\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001\ue0001'),
                     TableRow(contents='LB2\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a\ue0002a'),
                     TableRow(contents='LB3\ue0003\ue0003\ue0003\ue0003\ue0003\ue0003\ue0003\ue0002b\ue0002b\ue0002b\ue0002b\ue0002b\ue0003b'),
                     TableRow(contents='LB4\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB5\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005\ue0003b\ue0003b\ue0003b\ue0003a\ue0003a\ue0003a'),
                     TableRow(contents='LB6\ue0006\ue0006\ue0006\ue0006\ue0006\ue0006\ue0006\ue0003c\ue0003c\ue0003c\ue0003b\ue0003b\ue0003b'),
                     TableRow(contents='LB7\ue0007\ue0007\ue0007\ue0007\ue0007\ue0007\ue0007\ue0004\ue0004\ue0004\ue0004\ue0004\ue0004'),
                     TableRow(contents='LB8\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008\ue0005\ue0005\ue0005\ue0005\ue0005\ue0005'),
                     TableRow(contents='LB8a\ue0008a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='deprecated\ue0007a\ue0007a\ue0007\ue0007\ue0007'),
                     TableRow(contents='LB9\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009\ue0007b\ue0007b\ue0007b\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB10\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010\ue0007c\ue0007c\ue0007c\ue000\ue000\ue000'),
                     TableRow(contents='LB11\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011b\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB12a\ue00012a\ue00012a\ue00012a\ue00012a\ue00012a\ue00012\ue00012\ue00013\ue00011b\ue00011b\ue00013\ue00013\ue00013'),
                     TableRow(contents='LB13\ue00013\ue00013\ue00013\ue00013\ue00013\ue00013\ue00013\ue0008\ue0008\ue0008\ue0008\ue0008\ue0008'),
                     TableRow(contents='LB14\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014\ue0009\ue0009\ue0009\ue0009\ue0009\ue0009'),
                     TableRow(contents='split\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015\ue00010\ue00010\ue00010\ue00010\ue00010\ue00010'),
                     TableRow(contents='LB15a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB15b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB16\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016\ue00011\ue00011\ue00011\ue00011\ue00011\ue00011'),
                     TableRow(contents='LB17\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017\ue00011a\ue00011a\ue00011a\ue00011a\ue00011a\ue000'),
                     TableRow(contents='LB18\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018\ue00012\ue00012\ue00012\ue00012\ue00012\ue00012'),
                     TableRow(contents='LB19\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019\ue00014\ue00014\ue00014\ue00014\ue00014\ue00014'),
                     TableRow(contents='LB20\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020\ue00014a\ue00014a\ue00014a\ue000\ue000\ue000'),
                     TableRow(contents='LB21\ue00021\ue00021\ue00021\ue00021\ue00021\ue00021\ue00021\ue00015\ue00015\ue00015\ue00015\ue00015\ue00015'),
                     TableRow(contents='LB21a\ue00021a\ue00021a\ue00021a\ue00021a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB21b\ue00021b\ue00021b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB22\ue00022\ue00022\ue00022\ue00022\ue00022\ue00022\ue00022\ue00016\ue00016\ue00016\ue00016\ue00016\ue00016'),
                     TableRow(contents='LB23\ue00023\ue00023\ue00023\ue00023\ue00023\ue00023\ue00023\ue00017\ue00017\ue00017\ue00017\ue00017\ue00017'),
                     TableRow(contents='LB23a\ue00023a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB24\ue00024\ue00024\ue00024\ue00024\ue00024\ue00024\ue00024\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='LB25\ue00025\ue00025\ue00025\ue00025\ue00025\ue00025\ue00025\ue00018\ue00018\ue00018\ue00018\ue00018\ue00018'),
                     TableRow(contents='removed\ue00018b\ue00018b\ue00015b\ue00015b\ue00015b'),
                     TableRow(contents='LB26\ue00026\ue00026\ue00026\ue00026\ue00026\ue00026\ue00026\ue00018b\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB27\ue00027\ue00027\ue00027\ue00027\ue00027\ue00027\ue00027\ue00018c\ue0006\ue0006\ue0006\ue0006\ue0006'),
                     TableRow(contents='LB28\ue00028\ue00028\ue00028\ue00028\ue00028\ue00028\ue00028\ue00019\ue00019\ue00019\ue00019\ue00019\ue00019'),
                     TableRow(contents='LB28a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB29\ue00029\ue00029\ue00029\ue00029\ue00029\ue00029\ue00029\ue00019b\ue00019b\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30\ue00030\ue00030\ue00030\ue00030\ue00030\ue000removed\ue00030\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30a\ue00030a\ue00030a\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB30b\ue00030b\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000\ue000'),
                     TableRow(contents='LB31\ue00031\ue00031\ue00031\ue00031\ue00031\ue00031\ue00031\ue00020\ue00020\ue00020\ue00020\ue00020\ue00020'),
                     Heading(level=2, contents='References'),
                     Paragraph(contents='For references for this annex, see Unicode Standard Annex #41, “Common References for Unicode Standard Annexes” [UAX41].'),
                     Heading(level=2, contents='Acknowledgments'),
                     Paragraph(contents='Asmus Freytag created the initial version of this annex and maintained the text for many years. Andy Heninger maintained the text from 2008 through 2019. Christopher Chapman maintained the text from 2020 through 2022. Robin Leroy has maintained the text since September 2022.'),
                     Paragraph(contents='The initial assignments of properties are based on input by Michel Suignard. Mark Davis provided algorithmic verification and formulation of the rules, and detailed suggestions on the algorithm and text. Ken Whistler, Rick McGowan, Deborah Anderson,and other members of the editorial committee provided valuable feedback. Tim Partridge enlarged the information on dictionary usage. Sun Gi Hong reviewed the information on Korean and provided copious printed samples. Eric Muller reanalyzed the behavior of the soft hyphen and collected the samples. Adam Twardoch provided the Polish example. António Martins-Tuválkin supplied information about Portuguese. Tomoyuki Sadahiro provided information on use of U+30A0. Christopher Fynn provided the background information on Tibetan line breaking. Andrew West, Kamal Mansour, Andrew Glass, Daniel Yacob, and Peter Kirk suggested improvements for Mongolian, Arabic, Kharoshthi, Ethiopic, and Hebrew punctuation characters, respectively. Kent Karlsson reviewed the line break properties for consistency. Jerry Hall reviewed the sample code. Elika J. Etemad (fantasai) reviewed the entire document in an effort to make it easier to reference from external standards. Norbert Lindenberg added the Brahmic style of line breaking and provided clarifications on the South East Asian style of line breaking. Many others provided additional review of the rules and property assignments.'),
                     Heading(level=2, contents='Modifications'),
                     Paragraph(contents='The following summarizes modifications from the previous revision of this annex.'),
                     Heading(level=4, contents='Revision 51:'),
                     Paragraph(contents='• Reissued for Unicode 15.1.'),
                     Paragraph(contents='• Added support for line breaking at orthographic syllable boundaries and LB28a.'),
                     Paragraph(contents='• Replaced rule LB15 by LB15a and LB15b, improving the handling of « French style » quotation marks.'),
                     Paragraph(contents='• Added a note under LB5 recommending that source code editors support even optional hard line breaks.'),
                     Paragraph(contents='• Clarified the description of “third style” line breaking in Section 3.1.'),
                     Paragraph(contents='• Updated Section 5.2 to consistently use the Unicode characters mentioned, instead of CP-1252 fallbacks.'),
                     Paragraph(contents='• Added a clearer characterization of allowed tailorings to Section 8.1.'),
                     Paragraph(contents='• Corrected Example 6 in Section 8.2.'),
                     Paragraph(contents='Modifications for previous versions are listed in those respective versions.'),
                     Paragraph(contents='© 2023 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.'),
                     Paragraph(contents='Unicode and the Unicode logo are trademarks of Unicode, Inc., and are registered in some jurisdictions.')]}
